//============================================//
//=====[ COMMAND SECTION ]=====//
//============================================//

// testing git waters

#define ALTCOMMAND:%1->%2;           \
COMMAND:%1(playerid, params[])   \
return cmd_%2(playerid, params);
//============================================//
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	switch(success)
	{
		case 0:
		{
		    new string[MAX_MSG_LENGTH];
	        format(string, sizeof(string),"The command '%s' is not recognized by the server. (/help)", cmdtext);
	        SendClientMessage(playerid, COLOR_ERROR, string);
	        return 1;
		}
		case 1:
		{
            CMDLog(PlayerInfo[playerid][pUsername], cmdtext);
            ServerLog(LOG_COMMAND, PlayerInfo[playerid][pUsername], cmdtext);
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(GetPVarInt(playerid, "Bot") != 1 && GetPVarInt(playerid, "PlayerLogged") != 1)
	{
		SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this!");
		return 0;
	}

	if(PlayerInfo[playerid][pMute] == 0)
	{
		PlayerInfo[playerid][pCmdSpam]++;

		if(PlayerInfo[playerid][pCmdSpam] >= 5 && GetPVarInt(playerid, "Admin") <= 3)
		{
			new string[128];
			format(string, sizeof(string), "AdmWarn: %s (ID: %i) is spamming commands. (Typing: %s)", PlayerInfo[playerid][pName], playerid, cmdtext);
	        SendAdminMessage(COLOR_YELLOW, string);

			PlayerInfo[playerid][pCmdTime] = 5;
	        PlayerInfo[playerid][pCmdSpam] = 0;
			PlayerInfo[playerid][pMute] = 1;

			SendClientMessage(playerid, COLOR_ERROR, "You have been temporarily muted. (Reason: Command spamming)");
			return 0;
		}
	}
	else
	{
		return 0;
	}
	return 1;
}
//============================================//
/*
COMMAND:guide(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this!");
	if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this!");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1640.8882,-2243.1147,13.4936)) return SendClientMessage(playerid, COLOR_ERROR, "You are not around the guide icon!");
    SendClientMessage(playerid, COLOR_WHITE, "Welcome to Diverse-Roleplay!");
    SendClientMessage(playerid, COLOR_ERROR, "If you are new here, we suggest you to visit www.diverseroleplay.org for more information.");
    SendClientMessage(playerid, COLOR_ERROR, "There you will be able to learn everything about the server and its script.");
    SendClientMessage(playerid, COLOR_ERROR, "In case you can't figure something out, feel free to use /help and /locations.");
    SendClientMessage(playerid, COLOR_ERROR, "For futher questions use /helpme or /ra for any administrative matters.");
	return 1;
}
*/
//============================================//
COMMAND:locations(playerid, params[])
{
	new string[2000];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if (GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are currently on a route.");
	if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this!");
	if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this!");
	for(new i = 0; i < sizeof(Locations); i++)
	{
	    if(i == 0) { format(string, 2000, "%s", Locations[i][lname]); }
	    else { format(string, 2000, "%s\n%s", string, Locations[i][lname]); }
	}
	ShowPlayerDialogEx(playerid, 86, DIALOG_STYLE_LIST, "Locations", string, "Select", "Close");
	return 1;
}
//============================================//
COMMAND:help(playerid, params[])
{
	new string[2000];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	for(new i = 0; i < sizeof(HelpMenu); i++)
	{
	    if(i == 0) { format(string, 2000, "%s", HelpMenu[i][0]); }
	    else { format(string, 2000, "%s\n%s", string, HelpMenu[i][0]); }
	}
	ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_LIST, "Help Menu", string, "Select", "Close");
	return 1;
}
//============================================//
ALTCOMMAND:inv->inventory;
COMMAND:inventory(playerid, params[])
{
    if(GetPVarInt(playerid, "LSPD_Ta") != 0) return true;
    if(GetPVarInt(playerid, "Mute") == 1) return true;
	if(GetPVarInt(playerid, "Jailed") != 0 && GetPVarInt(playerid, "Jailed") != 2 && GetPVarInt(playerid, "Jailed") != 3) return true;
	if(GetPVarInt(playerid, "Dead") > 0) return true;
	if (GetPVarInt(playerid, "PlayerLogged") != 1)
	{
    	SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this!"); return 1;
	}

	FixInv(playerid);

    new diatxt[128];
    new count_in = 0;
	new id = GetPVarInt(playerid, "HouseEnter");
	format(diatxt, sizeof(diatxt), "Player Inventory");
	if(IsPlayerInRangeOfPoint(playerid, 40.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
	{
	    if(GetCloseHouseSafe(playerid, id))
		{
	        format(diatxt, sizeof(diatxt), "%s\nProperty Inventory", diatxt);
	        count_in = 1;
	    }
	}
	
	id = GetPVarInt(playerid, "BizEnter");
	if(IsPlayerInRangeOfPoint(playerid, 40.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
	{
	    if(GetCloseBizSafe(playerid, id))
		{
	        format(diatxt, sizeof(diatxt), "%s\nBusiness Inventory", diatxt);
	        count_in = 1;
	    }
	}
	
	new key = -1, keyex = -1;
	if(PlayerToCar(playerid, 1, 4.0)) {
	    keyex = PlayerToCar(playerid, 2, 4.0);
	    if(IsValidTCar(keyex))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
	            format(diatxt, sizeof(diatxt), "%s\n%s Inventory", diatxt, PrintVehName(keyex), PrintVehName(keyex));
				count_in = 2;
				key = keyex;
			}
	    }
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(VehicleInfo[vehicleid][vID] != 0)
	    {
    		if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL)
    		{
            	if(!IsInvalidVeh(vehicleid))
            	{
				    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						format(diatxt, sizeof(diatxt), "%s\n%s Glove Compartment", diatxt, PrintVehName(vehicleid));
						count_in = 2;
						key = vehicleid;
					}
				}
			}
		}
	}
	
	if(key == -1)
	{
	    if(IsPoliceCar(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        format(diatxt, sizeof(diatxt), "%s\n%s Inventory",diatxt, PrintVehName(GetPoliceCarID(playerid)));
		    count_in = 2;
		}
	}
	
	if(count_in != 0)
	{
	    ShowPlayerDialogEx(playerid, 204, DIALOG_STYLE_LIST, "Select inventory", diatxt, "Open","Close");
	}
	else
	{
	    if(PlayerInfo[playerid][pDelay][0] <= 0) {
    	CallRemoteFunction("PrintInv", "i", playerid); }
	}
	return 1;
}
//============================================//
COMMAND:mp3(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if (!CheckInvItem(playerid, 408)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a MP3 player.");
	ShowPlayerDialogEx(playerid,96,DIALOG_STYLE_LIST,"MP3 Player","Radio Stations\nDirect URL\nTurn Off","Select", "Exit");
	return 1;
}
//============================================//
COMMAND:wt(playerid, params[])
{
	new text[128], string[128], sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /wt [text]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if(!CheckInvItem(playerid, 402)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a Walkie Talkie.");
	    if(GetPVarInt(playerid, "WalkieFreq") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need a valid walkie talkie frequency (/setfreq).");
	    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	    if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "WalkieFreq") == 911) return SendClientMessage(playerid, COLOR_WHITE, "Walkie talkie frequency is restricted.");
	    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      	GiveNameSpace(sendername);
	    format(string, sizeof(string), "** Ch[%d] %s: %s **",GetPVarInt(playerid, "WalkieFreq"), sendername, text);
		SendFreqMessage(playerid,GetPVarInt(playerid, "WalkieFreq"), 0x00C6C696, string);
		if(GetPVarInt(playerid, "EarPiece") != 1)
		{
			format(string, sizeof(string), "%s (walkie talkie): %s", sendername, text);
			ProxRadio(20.0, playerid, string, COLOR_FADE);
		}
	}
	return 1;
}
//============================================//
COMMAND:setfreq(playerid, params[])
{
	new amount, string[128];
	if(sscanf(params, "i", amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setfreq [1-9999]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
	    if(!CheckInvItem(playerid, 402)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a walkie talkie.");
	    if(amount < 1 || amount > 9999) return SendClientMessage(playerid, COLOR_WHITE, "Cannot go under 1 or above 9999.");
		if(amount == 911)
		{
		    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		    {
		        format(string, sizeof(string), "Walkie Talkie frequency set to: %d (SWAT)", amount);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        SetPVarInt(playerid, "WalkieFreq", 911);
		        return 1;
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Walkie Talkie frequency has restricted transmission.");
		}
		format(string, sizeof(string), "Walkie Talkie frequency set to: %d", amount);
		SetPVarInt(playerid, "WalkieFreq", amount);
	}
	return 1;
}
//============================================//
COMMAND:stats(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
    PrintStats(playerid, playerid);
	return 1;
}
//============================================//
COMMAND:low(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME],type;
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /low [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Just talk, it will automatically set it to /low for you.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL && GetPVarInt(playerid, "Dead") == 0)
        {
            if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown";
		    if(GetPVarInt(playerid, "PayPhone") == 1) format(string, sizeof(string), "Payphone: %s", text);
		    else format(string, sizeof(string), "%s says [low] (cellphone): %s", sendername, text);
		    ProxDetector(5.0, playerid, string,COLOR_FADE);
			if(IsPlayerConnected(GetPVarInt(playerid, "Mobile")))
			{
			    if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid)
				{
				    if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Speaker") == 1) ProxDetector(5.0, GetPVarInt(playerid, "Mobile"), string, COLOR_FADE);
					else SendClientMessage(GetPVarInt(playerid, "Mobile"), COLOR_YELLOW, string);
			    }
			}
			return 1;
        }
    	if (IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
        {
            switch(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows])
			{
                case 0:
                {
                    format(string, sizeof(string), "[Windows Shut]: %s says [low]: %s", sendername, text);
                    type=1;
                }
                case 1: format(string, sizeof(string), "[Windows Open]: %s says [low]: %s", sendername, text);
            }
        }
        else format(string, sizeof(string), "%s says [low]: %s", sendername, text);
		if(type == 1)
		{
		    SendInCarMessage(GetPlayerVehicleID(playerid), string);
		}
		else ProxDetector(5.0, playerid, string, COLOR_GREY);
	}
	return 1;
}
//============================================//
COMMAND:say(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /say {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		if(GetPVarInt(playerid, "BizEnter") != 0 && GetPlayerVirtualWorld(playerid) == BizInfo[GetPVarInt(playerid, "BizEnter")][VwIn])
		{
		    if(BizInfo[GetPVarInt(playerid, "BizEnter")][Low] > 0) {
			format(string, sizeof(string), "%s says [low]: %s", sendername, text);
			ProxDetector(5.0, playerid, string, COLOR_GREY);
			return 1; }
		}
        format(string, sizeof(string), "%s %s: %s", sendername, PrintPrefix(playerid), text);
        new type = 0;
        if (IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
        {
            switch(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows])
			{
                case 0:
                {
                    format(string, sizeof(string), "[Windows Shut]: %s %s: %s", sendername, PrintPrefix(playerid), text);
                    type=1;
                }
                case 1: format(string, sizeof(string), "[Windows Open]: %s %s: %s", sendername, PrintPrefix(playerid), text);
            }
        }
		if(type == 0) ProxDetector(30.0, playerid, string, COLOR_FADE), SetPlayerChatBubble(playerid, string, COLOR_WHITE, 10.0, strlen(text)*100);
		else
		{
		    SendInCarMessage(GetPlayerVehicleID(playerid), string);
		}
	}
	return 1;
}

ALTCOMMAND:c->say;
ALTCOMMAND:l->say;
//============================================//
COMMAND:me(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /me {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "* %s %s", sendername, text);
    	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	}
	
	return 1;
}

COMMAND:my(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /my {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "* %s's %s", sendername, text);
    	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	}
	
	return 1;
}

/*COMMAND:me(playerid, params[]) {
	if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");		
	new msg[MAX_MSG_LENGTH];
	if(sscanf(params, "s[144]", msg)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /me {FFFFFF}[Action]");
	new len = strlen(msg);
	if(strlen("*  ") + MAX_PLAYER_NAME + len > MAX_MSG_LENGTH) {
		splitString(msg, buffer);
	} else {
	}
	
	return 1;
}*/
//============================================//
COMMAND:ame(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ame [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "* %s %s", sendername, text);
    	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
    	format(string, sizeof(string), "> %s ", text);
    	SendClientMessage(playerid, COLOR_PURPLE, string);
	}
	return 1;
}
//============================================//
COMMAND:do(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /do {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "* %s (( %s ))", text, sendername);
    	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	}
	return 1;
}
//============================================//
COMMAND:shout(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /shout {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "%s shouts: %s!", sendername, text);
    	ProxDetector(50.0, playerid, string, COLOR_FADE);
    	SetPlayerChatBubble(playerid, string, COLOR_FADE, 30.0, strlen(text)*100);
    	foreach(new h : HouseIterator)
		{
	    	if(IsPlayerInRangeOfPoint(playerid,10.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	    	{
            	foreach(new p : Player)
				{
                	if(IsPlayerInRangeOfPoint(p,30.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
                	{
						if(GetPlayerVirtualWorld(p) == HouseInfo[h][hVwIn])
						{
						    format(string, sizeof(string), "[OUTSIDE-HOUSE-DOOR]: %s shouts: %s!", sendername, text);
				        	SendClientMessage(p, COLOR_WHITE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
	    	    {
            	    foreach(new p : Player)
				    {
                	    if(IsPlayerInRangeOfPoint(p, 15.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
                	    {
						    if(GetPlayerVirtualWorld(p) == 0)
						    {
						        format(string, sizeof(string), "[INSIDE-HOUSE-DOOR]: %s shouts: %s!", sendername, text);
				        	    SendClientMessage(p, COLOR_WHITE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}
	}
	return 1;
}
ALTCOMMAND:s->shout;
//============================================//
COMMAND:b(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /b {FFFFFF}[ooc chat]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		switch(GetPVarInt(playerid, "MaskUse"))
		{
		    case 0: format(string, sizeof(string), "(( [%i] %s: %s ))", playerid, sendername, text);
		    case 1: format(string, sizeof(string), "(( %s: %s ))", sendername, text);
		}
		if(GetPVarInt(playerid, "Admin") == 11 && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
		    format(string, sizeof(string), "(( Hidden: %s ))", text);
		}
		switch(GetPVarInt(playerid, "Admin"))
		{
		    case 0:
		    {
		    	if(GetPVarInt(playerid, "HelperDuty") >= 1)
		    	{
		    		format(string, sizeof(string), "(( %s: %s ))", AdminName(playerid), text);
		    		ProxDetector(20.0, playerid, string, COLOR_HELPER);
		    	}
		    	else
		    	{
		    		SendOOCMessage(20.0, playerid, string);
		    	}
		    }
		    case 1 .. 11:
		    {
		        switch(GetPVarInt(playerid, "AdminDuty"))
		        {
		            case 0: ProxDetector(20.0, playerid, string, COLOR_FADE);
		            case 1:
					{
						format(string, sizeof(string), "(( %s: %s ))", AdminName(playerid), text);
						switch(GetPVarInt(playerid, "Admin"))
						{
						    case 1 .. 3: ProxDetector(20.0, playerid, string, COLOR_ADMIN); // Moderator
						    case 4 .. 9: ProxDetector(20.0, playerid, string, COLOR_SENIOR_ADMIN); // Senior
						    case 10 .. 11:
						    {
							    ProxDetector(20.0, playerid, string, COLOR_LEAD_ADMIN); // Lead Admin
							}
						}
					}
		        }
		    }
		}
	}
	return 1;
}

COMMAND:ab(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);

	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ab {FFFFFF}[ooc chat]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);

		format(string, sizeof(string), "(( %s: %s ))", AdminName(playerid), text);

		if(GetPVarInt(playerid, "Admin") == 11 && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
		    format(string, sizeof(string), "(( Hidden: %s ))", text);
		}

		switch(GetPVarInt(playerid, "Admin"))
		{
		    case 1 .. 3: ProxDetector(20.0, playerid, string, COLOR_ADMIN); // Moderator
		    case 4 .. 9: ProxDetector(20.0, playerid, string, COLOR_SENIOR_ADMIN); // Senior
		    case 10 .. 11: ProxDetector(20.0, playerid, string, COLOR_LEAD_ADMIN); // Lead Admin
		}
	}
	return 1;
}
//============================================//
COMMAND:eject(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /eject {FFFFFF}[playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPlayerVehicleID(targetid) == GetPlayerVehicleID(playerid))
	    {
	        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
            GiveNameSpace(sendername);
            format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
            GiveNameSpace(giveplayer);
      	    format(string, sizeof(string), "You ejected %s from the vehicle.", giveplayer);
      	    SendClientMessage(playerid, COLOR_WHITE, string);
      	    format(string, sizeof(string), "You were ejected by driver %s.", sendername);
      	    SendClientMessage(targetid, COLOR_WHITE, string);
      	    RemovePlayerFromVehicle(targetid);
      	}
	}
	return 1;
}
//============================================//
COMMAND:shake(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /shake [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pay to yourself.");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,8.0))
   			{
				SetPVarInt(targetid, "ShakeOffer", playerid);
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "You offered %s a handshake.", giveplayer);
           		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            	format(string, sizeof(string), "%s gave you a handshake (/accept shake [1-8]).", sendername);
            	SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
   			}
   			else
   			{
   			    SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
   			}
		}
	}
	return 1;
}
//============================================//
COMMAND:blindfold(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /blindfold [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot blind yourself.");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,5.0))
   			{
				SetPVarInt(targetid, "BlindOffer", playerid);
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "You offered %s a blindfold.", giveplayer);
           		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            	format(string, sizeof(string), "%s is trying to wrap a blindfold over your eyes (/accept blind).", sendername);
            	SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:unblind(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unblind [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pay to yourself.");
		if(IsPlayerConnected(targetid))
		{
		    if (GetPVarInt(targetid, "Blinded") == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player is not blinded.");
		    if(PlayerToPlayer(playerid,targetid,5.0))
   			{
				DeletePVar(targetid,"Blinded");
				TextDrawHideForPlayer(targetid,BlindDraw);
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "You removed %s's blindfold.", giveplayer);
           		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            	format(string, sizeof(string), "%s removed your blindfold.", sendername);
            	SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:pay(playerid, params[])
{
	new amount,targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ii", targetid, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /pay {FFFFFF}[playerid/maskid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(amount < 1 || amount > 50000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1 or above 50000.");
        if(amount > GetPlayerMoneyEx(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You don't have that much money on you.");
	    if(GetPVarInt(playerid, "ConnectTime") < 2) return SendClientMessage(playerid, COLOR_ERROR, "You need 2 Time-In-LS to use this command.");
	    new found = 0;
		if(!IsPlayerConnected(targetid))
		{
		    foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
	            {
	                targetid=i;
	                found++;
	            }
	        }
	        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
		}
		if (playerid != targetid)
		{
		    if(PlayerToPlayer(playerid,targetid,3.0))
   			{
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    PlayerPlaySound(targetid, 1083, 0.0, 0.0, 0.0);
        	    PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
        	    if(amount >= 40000)
	    	    {
	        	    if(GetPVarInt(playerid, "Admin") == 0)
	        	    {
	            	    format(string, sizeof(string), "AdmWarn: %s has given %s %s.", PlayerInfo[playerid][pName], PlayerInfo[targetid][pName], FormatMoney(amount));
                	    SendAdminMessage(COLOR_YELLOW,string);
	        	    }
	    	    }

	    	    if(!strcmp(PlayerInfo[playerid][pIP], PlayerInfo[targetid][pIP]))
	    	    {
	    	    	format(string, sizeof(string), "AdmWarn: %s (ID: %i) has transfered money to %s (ID: %i) who has the same IP.", 
    					PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid);
            	    SendAdminMessage(COLOR_YELLOW, string);
	    	    }

            	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
            	format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
            	format(string, sizeof(string), "*** %s takes out %s and hands it to %s.", sendername, FormatMoney(amount), giveplayer);
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				format(string, sizeof(string), "You gave %s [%s].", giveplayer, FormatMoney(amount));
				SendClientMessage(playerid,COLOR_WHITE,string);

				ServerLog(LOG_PAY, PlayerInfo[playerid][pUsername], string);

				format(string, sizeof(string), "%s gave you [%s].", sendername, FormatMoney(amount));
                SendClientMessage(targetid,COLOR_WHITE,string);
                GivePlayerMoneyEx(playerid,-amount);
                SetTimerEx("GiveMoneyPlayer", 1000, false, "ii", targetid, amount);
            	format(string, sizeof(string), "*** %s takes out %s and hands it to %s.", PlayerInfo[playerid][pName], FormatMoney(amount), PlayerInfo[targetid][pName]);
				PayLog(string);
				SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You cannot pay to yourself.");
	}
	return 1;
}
//============================================//
COMMAND:wiretransfer(playerid, params[])
{
	new amount,targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ii", targetid, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /wiretransfer {FFFFFF}[playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(amount < 25000 || amount > 5000000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 25000 or above 5000000.");
        if(amount > GetPVarInt(playerid, "Bank")) return SendClientMessage(playerid, COLOR_ERROR, "You don't have that much money in your bank.");
        if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	    if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
	    if(GetPVarInt(targetid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "This player needs 8 Time-In-LS to continue.");
	    if(GetPVarInt(playerid, "IntEnter") != 4) return scm(playerid, COLOR_ERROR, "You need to be in the bank interior to use this!");
		if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid,COLOR_WHITE,"There is no-one online with that playerid.");
		if (playerid != targetid)
		{
		    if(IsPlayerConnected(playerid))
   			{
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    PlayerPlaySound(targetid, 1083, 0.0, 0.0, 0.0);
        	    PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);

        	    if(amount >= 40000)
	    	    {
	        	    if(GetPVarInt(playerid, "Admin") == 0)
	        	    {
	            	    format(string, sizeof(string), "AdmWarn: %s has wire transfered %s to %s.", PlayerInfo[playerid][pName], FormatMoney(amount), PlayerInfo[targetid][pName]);
                	    SendAdminMessage(COLOR_YELLOW,string);
	        	    }
	    	    }

	    	    if(!strcmp(PlayerInfo[playerid][pIP], PlayerInfo[targetid][pIP]))
	    	    {
	    	    	format(string, sizeof(string), "AdmWarn: %s (ID: %i) has transfered money to %s (ID: %i) who has the same IP.", 
    					PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid);
            	    SendAdminMessage(COLOR_YELLOW, string);
	    	    }

            	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
            	format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
            	//==========//
            	SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
                format(string, sizeof(string), "Old Balance: %s", FormatMoney(GetPVarInt(playerid, "Bank")));
			    SendClientMessage(playerid, COLOR_GREEN, string);
			    format(string, sizeof(string), "New Balance: %s", FormatMoney(GetPVarInt(playerid, "Bank")-amount));
			    SendClientMessage(playerid, COLOR_GREEN, string);
			    format(string, sizeof(string), "%s wired to %s's bank account.", FormatMoney(amount), giveplayer);
			    SendClientMessage(playerid, COLOR_ERROR, string);
			    //==========//
				format(string, sizeof(string), "%s has wired %s to your bank account", sendername, FormatMoney(amount));
                SendPlayerSMS(targetid, string, "LS Bank");
                //==========//
                SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-amount);
                SetPVarInt(targetid, "Bank", GetPVarInt(targetid, "Bank")+amount);
                //==========//
            	format(string, sizeof(string), "* %s wired %s to %s.", PlayerInfo[playerid][pName], FormatMoney(amount), PlayerInfo[targetid][pName]);
				PayLog(string);
				SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not connected.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You cannot pay to yourself.");
	}
	return 1;
}
//============================================//
ALTCOMMAND:w->whisper;
COMMAND:whisper(playerid, params[])
{
	new text[128],targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /(w)hisper {FFFFFF}[playerid] [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot whisper to yourself.");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,5.0))
   			{
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "*** %s whispers something to %s.", sendername, giveplayer);
        	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
		        format(string, sizeof(string), "%s whispers: %s", sendername, text);
				SendClientMessage(targetid,  COLOR_YELLOW, string);
				SendClientMessage(playerid,  COLOR_YELLOW, string);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:pmmsg(playerid, params[])
{
	new text[128];
	if(strcmp(PlayerInfo[playerid][pPMMsg], "None", true) == 0){}
	else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "Message on PM's disabled.");
		strmid(PlayerInfo[playerid][pPMMsg], "None", 0, strlen("None"), 255);
		return 1;
	}
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /pmmsg [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "DonateRank") >= 1)
		{
		    if(strcmp(PlayerInfo[playerid][pPMMsg], "None", true) == 0)
			{
			    SendClientMessage(playerid, COLOR_ERROR, "Message on PM's enabled.");
			    strmid(PlayerInfo[playerid][pPMMsg], text, 0, strlen(text), 255);
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

ALTCOMMAND:p->pm;
COMMAND:pm(playerid, params[])
{
	new text[128], targetid;
		
	if(sscanf(params, "us[128]", targetid, text)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /(p)m {FFFFFF}[playerid] [Message]");
	if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pm yourself.");
	if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(targetid, "TogPM") == 1) return SendClientMessage(playerid,COLOR_ERROR,"Players private messages are currently blocked.");
	if(GetPVarInt(playerid, "Admin") == 0 && PlayerInfo[targetid][pBlockPM][playerid] == 1) return SendClientMessage(playerid,COLOR_ERROR,"This player has disabled Private Chats from you.");
	if(GetPVarInt(playerid, "Admin") == 0 && PlayerInfo[playerid][pBlockPM][targetid] == 1) return SendClientMessage(playerid,COLOR_ERROR,"You have disabled Private Chats with this player.");
	if(GetPVarInt(playerid, "TogPM") == 1 && GetPVarInt(playerid, "Admin") == 0) return error(playerid, "Your private messages are blocked.");
 	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if(IsPlayerConnected(targetid))
	{
		if(GetPVarInt(targetid, "Admin") >= 4 && GetPVarInt(targetid, "Admin") <= 11 && GetPVarInt(playerid, "APMWRN") == 0)
		{
		    SetPVarString(playerid, "APMMSG", text);
		    SetPVarInt(playerid, "APMID", targetid);
		    ShowPlayerDialogEx(playerid, 206, DIALOG_STYLE_MSGBOX, "Management Warning", "Management is usualy busy, and it is important not to spam them with meaningless messages.\nAre you sure you want to send this PM?", "Yes", "No");
  		}
  		else
  		{
  		    new string[MAX_MSG_LENGTH];
        	if(strcmp(PlayerInfo[targetid][pPMMsg], "None", true) == 0)
        	{
        	    if(strlen(text) > MAX_MSG_LENGTH - 50)
        	    {
	        	    new buffer[MAX_MSG_LENGTH];
				    strmid(buffer, text, MAX_MSG_LENGTH - 50, strlen(text), MAX_MSG_LENGTH);
				    strdel(text, MAX_MSG_LENGTH - 50, strlen(text));
				    strins(text, "...", MAX_MSG_LENGTH - 50, strlen(text));
				    strins(buffer, "...", 0, MAX_MSG_LENGTH);

				    if(GetPVarInt(playerid, "AdminDuty") >= 1 || GetPVarInt(playerid, "HelperDuty") >= 1)
					{
						format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, AdminName(playerid), text);
				    	SendClientMessage(targetid,  0xF9F900FF, string);
					}
					else
					{
					    format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, PlayerInfo[playerid][pName], text);
				    	SendClientMessage(targetid,  0xF9F900FF, string);
					}
				    format(string, sizeof(string), "%s ))", buffer);
				    SendClientMessage(targetid,  0xF9F900FF, string);

					if(GetPVarInt(targetid, "AdminDuty") >= 1 || GetPVarInt(targetid, "HelperDuty") >= 1)
					{
						format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, AdminName(targetid), text);
						SendClientMessage(playerid,  0xE5C43EAA, string);
					}
					else
					{
					    format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, PlayerInfo[targetid][pName], text);
					    SendClientMessage(playerid,  0xE5C43EAA, string);
					}
				    format(string, sizeof(string), "%s ))", buffer);
				    SendClientMessage(playerid,  0xE5C43EAA, string);

				    format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
			        ShowPMs(string);
			        SeePM(playerid, string);
			        SeePM(targetid, string);
			        format(string, sizeof(string), "%s ))", buffer);
			        ShowPMs(string);
			        SeePM(playerid, string);
			        SeePM(targetid, string);
				}
				else
				{
				    if(GetPVarInt(playerid, "AdminDuty") >= 1 || GetPVarInt(playerid, "HelperDuty") >= 1)
					{
						format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, AdminName(playerid), text);
				    	SendClientMessage(targetid,  0xF9F900FF, string);
					}
					else
					{
					    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, PlayerInfo[playerid][pName], text);
				    	SendClientMessage(targetid,  0xF9F900FF, string);
					}

				    if(GetPVarInt(targetid, "AdminDuty") >= 1 || GetPVarInt(targetid, "HelperDuty") >= 1)
					{
						format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, AdminName(targetid), text);
						SendClientMessage(playerid,  0xE5C43EAA, string);
					}
					else
					{
					    format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], text);
					    SendClientMessage(playerid,  0xE5C43EAA, string);
					}

				    format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
			        ShowPMs(string);
			        SeePM(playerid, string);
			        SeePM(targetid, string);
				}
			}
			else
			{
			    if(strlen(text) > MAX_MSG_LENGTH - 50)
			    {
	        	    new buffer[MAX_MSG_LENGTH];
				    strmid(buffer, text, MAX_MSG_LENGTH - 50, strlen(text), MAX_MSG_LENGTH);
				    strdel(text, MAX_MSG_LENGTH - 50, strlen(text));
				    strins(text, "-..", MAX_MSG_LENGTH - 50, strlen(text));
				    strins(buffer, "..-", 0, MAX_MSG_LENGTH);
				    format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, PlayerInfo[playerid][pName], text);
				    SendClientMessage(targetid,  0xF9F900FF, string);
				    format(string, sizeof(string), "%s ))", buffer);
				    SendClientMessage(targetid,  0xF9F900FF, string);
				    format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", playerid, PlayerInfo[playerid][pName], PlayerInfo[targetid][pPMMsg]);
		        	SendClientMessage(targetid,  0xE5C43EAA, string);
				    format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, PlayerInfo[targetid][pName], text);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				    format(string, sizeof(string), "%s ))", buffer);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], PlayerInfo[targetid][pPMMsg]);
		        	SendClientMessage(playerid,  0xF9F900FF, string);
		        	format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
			        ShowPMs(string);
			        SeePM(playerid, string);
			        SeePM(targetid, string);
			        format(string, sizeof(string), "%s ))", buffer);
			        ShowPMs(string);
			        SeePM(playerid, string);
			        SeePM(targetid, string);
				}
				else
				{
				    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, PlayerInfo[playerid][pName], text);
				    SendClientMessage(targetid,  0xF9F900FF, string);
				    format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", playerid, PlayerInfo[playerid][pName], PlayerInfo[targetid][pPMMsg]);
		        	SendClientMessage(targetid,  0xE5C43EAA, string);
				    format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], text);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], PlayerInfo[targetid][pPMMsg]);
		        	SendClientMessage(playerid,  0xF9F900FF, string);
		        	format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
			        ShowPMs(string);
			        SeePM(playerid, string);
			        SeePM(targetid, string);
				}
			}
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}
//============================================//
COMMAND:blocklist(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "DonateRank") >= 1)
	{
	    SendClientMessage(playerid, COLOR_ERROR, "People You Blocked:");
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[playerid][pBlockPM][i] == 1)
	        {
	            format(string, sizeof(string), "** ID: %d ** %s", i, PlayerInfo[i][pName]);
				SendClientMessage(playerid, COLOR_ERROR, string);
	        }
	    }
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "WARNING: You must be a donater to use this.");
	}
	return 1;
}
//============================================//
COMMAND:blockpm(playerid, params[])
{
	new targetid;
	if(sscanf(params, "ui", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /blockpm {FFFFFF}[playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if(GetPVarInt(playerid, "DonateRank") == 0) return SendClientMessage(playerid,COLOR_ERROR,"You need to be a Donater to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot block to yourself.");
		if(IsPlayerConnected(targetid))
		{
			switch(PlayerInfo[playerid][pBlockPM][targetid])
			{
			    case 0:
			    {
					SendClientMessage(playerid,COLOR_ERROR,"You now block PM's from this person (/blocklist, /blockall, /unblockall).");
			        PlayerInfo[playerid][pBlockPM][targetid] = 1;
			    }
			    case 1:
			    {
			        SendClientMessage(playerid,COLOR_ERROR,"You now Un-blocked PM's from this person.");
			        PlayerInfo[playerid][pBlockPM][targetid] = 0;
			    }
			}
		}
	}
	return 1;
}
//============================================//
COMMAND:blockall(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "DonateRank") >= 1)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        PlayerInfo[playerid][pBlockPM][i] = 1;
	    }
	    SendClientMessage(playerid,COLOR_ERROR, "Blocked all users from PMing.");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "WARNING: You must be a donater to use this.");
	}
	return 1;
}
//============================================//
COMMAND:unblockall(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "DonateRank") >= 1)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        PlayerInfo[playerid][pBlockPM][i] = 0;
	    }
	    SendClientMessage(playerid,COLOR_ERROR, "Un-Blocked all users from PMing.");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "WARNING: You must be a donater to use this.");
	}
	return 1;
}
//============================================//
COMMAND:appearance(playerid, params[])
{
	new text[128], line;
	if(strcmp(PlayerInfo[playerid][pDescribe], "None", true) == -1 && strcmp(PlayerInfo[playerid][pDescribe2], "None", true) == -1)
	{
	    SendClientMessage(playerid, COLOR_ERROR, "Appearance disabled.");
		strmid(PlayerInfo[playerid][pDescribe], "None", 0, strlen("None"), 255);
		strmid(PlayerInfo[playerid][pDescribe2], "None", 0, strlen("None"), 255);
		return true;
	}
	if(sscanf(params, "is[128]", line, text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /appearance [line (1-2)] [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(strlen(text) >= 100) return SendClientMessage(playerid, COLOR_WHITE, "Appearance is too long.");
	    if(line < 1 || line > 2) return SendClientMessage(playerid, COLOR_ERROR, "Can not go under 1 or above 2.");
	    switch(line)
	    {
	        case 1: strmid(PlayerInfo[playerid][pDescribe], text, 0, strlen(text), 255), SendClientMessage(playerid, COLOR_ERROR, "Appearance line (1) added.");
	        case 2:
	        {
	            if(strcmp(PlayerInfo[playerid][pDescribe], "None", true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to have line (1) used first.");
			    strmid(PlayerInfo[playerid][pDescribe2], text, 0, strlen(text), 255), SendClientMessage(playerid, COLOR_ERROR, "Appearance line (2) added.");
			}
		}
	}
	return 1;
}
//============================================//
COMMAND:describe(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME], stext[10];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /describe [playerid/maskid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    new found = 0, type = 0;
		if(!IsPlayerConnected(targetid))
		{
		    foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
	            {
	                targetid=i;
	                found++;
	                type=1;
	            }
	        }
	        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
		}
        if(type == 0) format(sendername, sizeof(sendername), "%s", PlayerInfo[targetid][pUsername]);
        else format(sendername, sizeof(sendername), "%s", PlayerNameEx(targetid));
		GiveNameSpace(sendername);
		format(string, sizeof(string), "%s's appearance:", sendername);
		SendClientMessage(playerid,COLOR_WHITE,string);
		switch (GetPVarInt(targetid, "Sex"))
		{
	        case 1: stext = "Male";
	        case 2: stext = "Female";
		}
		format(string, sizeof(string), "Age: %d | Sex: %s.", GetPVarInt(targetid, "Age"), stext);
		SendClientMessage(playerid,COLOR_WHITE,string);
		format(string, sizeof(string), "%s.", PlayerInfo[targetid][pDescribe]);
		if(strcmp(PlayerInfo[targetid][pDescribe], "None", true) == 0) {}
		else SendClientMessage(playerid,COLOR_PURPLE,string);
		format(string, sizeof(string), "%s.", PlayerInfo[targetid][pDescribe2]);
		if(strcmp(PlayerInfo[targetid][pDescribe2], "None", true) == 0) {}
		else SendClientMessage(playerid,COLOR_PURPLE,string);
		if(GetPVarInt(targetid, "DrugTime") >= 1) SendClientMessage(playerid,COLOR_PURPLE,"Would appear to consumed narcotics.");
	}
	return 1;
}
//============================================//
COMMAND:give(playerid, params[])
{
	new type[128],amount,targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]uI(0)", type, targetid, amount)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /give {FFFFFF}[weapon/armour/ciggy/beer/wine/acid/cocaine/crystal/ecstasy/meth/pcp/cannabis/crack] [playerid/maskid]");

	if(amount < 0) return 1;
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(targetid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while the player dead.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead.");
    if(GetPVarInt(targetid, "Mute") == 1) return SendClientMessage(playerid,COLOR_ERROR,"WARNING: The player is currently muted.");
    if(GetPVarInt(targetid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "The player is not able to use this.");
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	
	new found = 0;
	if(!IsPlayerConnected(targetid))
	{
	    foreach(new i : Player)
        {
            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
            {
                targetid=i;
                found++;
            }
        }
        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
	}
	if(playerid != targetid)
	{
	    if(PlayerToPlayer(playerid,targetid, 3.0))
		{
		    if(strcmp(type, "weapon", true) == 0)
		    {
				if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(targetid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR ,"LSPD armour can not be shared out of the department.");
				if(GetPVarInt(playerid, "Member") == FACTION_LSG && GetPVarInt(targetid, "Member") != FACTION_LSG) return SendClientMessage(playerid, COLOR_ERROR ,"Government armoury can not be shared out of the department.");
				if(GetPVarInt(targetid, "ConnectTime") < 8) return error(playerid, "Player doesn't have 8 TLS.");
				if(PlayerInfo[playerid][pPlayerWeapon] == 0) return SendClientMessage(playerid, COLOR_ERROR ,"You don't have a weapon equipped!");
				if(PlayerInfo[targetid][pPlayerWeapon] >= 1) return SendClientMessage(playerid, COLOR_ERROR ,"This player already has a weapon equipped.");
				if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You cannot give out weapons when your character has died.");
				format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
   				format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
	        	GiveNameSpace(sendername);
   	        	GiveNameSpace(giveplayer);
   	        	PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
   	        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "*** %s gives %s %s to %s.", sendername, CheckSex(playerid), PrintIName(PlayerInfo[playerid][pPlayerWeapon]), giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				WepLog(string);
				ServerLog(LOG_WEAPON_GIVE, PlayerInfo[playerid][pUsername], string);
				PlayerInfo[targetid][pPlayerWeapon]=PlayerInfo[playerid][pPlayerWeapon];
				PlayerInfo[targetid][pPlayerAmmo]=PlayerInfo[playerid][pPlayerAmmo];
				PlayerInfo[targetid][pAmmoType]=PlayerInfo[playerid][pAmmoType];
				PlayerInfo[targetid][pPlayerSerial]=PlayerInfo[playerid][pPlayerSerial];
				if(PlayerInfo[playerid][pPlayerAmmo] >= 1) GivePlayerWeaponEx(targetid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo]), CallRemoteFunction("LoadHolsters","i",targetid);
				//==========//
				PlayerInfo[playerid][pPlayerWeapon]=0;
				PlayerInfo[playerid][pPlayerAmmo]=0;
				PlayerInfo[playerid][pAmmoType]=0;
				PlayerInfo[playerid][pPlayerSerial]=0;
				ResetPlayerWeaponsEx(playerid);
				//==========//
				SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
        	}
        	else if(strcmp(type, "armour", true) == 0)
		    {
		        new Float:PlayersArmour;
		        GetPlayerArmourEx(playerid,PlayersArmour);
		        if(PlayersArmour <= 1.0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have any kevlar to give.");
				if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(targetid, "Member") == FACTION_LSG) return SendClientMessage(playerid, COLOR_ERROR ,"Armour can not be shared out of your faction.");
				format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
   				format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
	        	GiveNameSpace(sendername);
   	        	GiveNameSpace(giveplayer);
   	        	PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
   	        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "*** %s gives %s kevlar to %s.", sendername, CheckSex(playerid), giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
				format(string, sizeof(string), "AdmWarn: %s has given %s a %.1f kevlar.", PlayerInfo[playerid][pName], PlayerInfo[targetid][pName], PlayersArmour);
   				if(PlayersArmour >= 50.0) SendAdminMessage(COLOR_YELLOW,string);
   				SetPlayerArmourEx(playerid, 0.0);
   				SetPlayerArmourEx(targetid, PlayersArmour);
				SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
        	}
		    else if(strcmp(type, "ciggy", true) == 0)
		    {
			    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a ciggy.");
			    if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid, COLOR_ERROR, "That player already has a ciggy.");
			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    	        format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
  		        GiveNameSpace(sendername);
    	        GiveNameSpace(giveplayer);
    	        PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	        SetPlayerSpecialAction(targetid,SPECIAL_ACTION_SMOKE_CIGGY);
    	        SendClientMessage(targetid,COLOR_WHITE,"Type (/ciggy) to place your ciggy on your mouth or hand.");
    	        format(string, sizeof(string),"You gave %s your %s.", giveplayer, type);
    	        SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(string, sizeof(string),"%s gave you %s %s.", sendername, CheckSex(playerid), type);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
			    SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
		    }
		    else if(strcmp(type, "beer", true) == 0)
		    {
			    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a beer bottle.");
			    if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_DRINK_BEER) return SendClientMessage(playerid, COLOR_ERROR, "That player already has a beer bottle.");
		        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    	        format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
  		        GiveNameSpace(sendername);
    	        GiveNameSpace(giveplayer);
    	        PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	        SetPlayerSpecialAction(targetid,SPECIAL_ACTION_DRINK_BEER);
    	        format(string, sizeof(string),"You gave %s your %s.", giveplayer, type);
    	        SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(string, sizeof(string),"%s gave you %s %s.", sendername, CheckSex(playerid), type);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
			    SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
		    }
		    else if(strcmp(type, "wine", true) == 0)
		    {
			    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a wine bottle.");
			    if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_DRINK_WINE) return SendClientMessage(playerid, COLOR_ERROR, "That player already has a wine bottle.");
		        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    	        format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
  		        GiveNameSpace(sendername);
    	        GiveNameSpace(giveplayer);
    	        PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	        SetPlayerSpecialAction(targetid,SPECIAL_ACTION_DRINK_WINE);
    	        format(string, sizeof(string),"You gave %s your %s.", giveplayer, type);
    	        SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(string, sizeof(string),"%s gave you %s %s.", sendername, CheckSex(playerid), type);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
			    SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
		    }
		    else if(strcmp(type, "acid", true) == 0 || strcmp(type, "cocaine", true) == 0 ||
			strcmp(type, "crystal", true) == 0 || strcmp(type, "ecstasy", true) == 0 ||
			strcmp(type, "meth", true) == 0 || strcmp(type, "pcp", true) == 0 ||
			strcmp(type, "cannabis", true) == 0 || strcmp(type, "crack", true) == 0)
		    {
				new itemid = 500;
				//==========//
				if(strcmp(type, "acid", true) == 0) { itemid = 500; }
				else if(strcmp(type, "cocaine", true) == 0) { itemid = 501; }
				else if(strcmp(type, "crystal", true) == 0) { itemid = 502; }
				else if(strcmp(type, "ecstasy", true) == 0) { itemid = 503; }
				else if(strcmp(type, "meth", true) == 0) { itemid = 504; }
				else if(strcmp(type, "pcp", true) == 0) { itemid = 505; }
				else if(strcmp(type, "cannabis", true) == 0) { itemid = 506; }
				else if(strcmp(type, "crack", true) == 0) { itemid = 507; }
				//==========//
		        if(amount == (0))
				{
				    format(string, sizeof(string),"USAGE: /give {FFFFFF}[%s] [playerid] [amount]", type);
				    SendClientMessage(playerid, COLOR_ERROR, string);
				    return true;
				}

		        if(!CheckInvItem(playerid, itemid)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have this item!");

		        new quantity = 0;
		        for(new i = 0; i < MAX_INV_SLOTS; i++)
		        {
		        	if(PlayerInfo[playerid][pInvItem][i] == itemid)
		            {
		            	quantity += PlayerInfo[playerid][pInvQ][i];
		            }
		        }

		        if(quantity < amount) return SendClientMessage(playerid, COLOR_ERROR, "You don't have that many drugs on you.");

		        new removed_amount;

		        for(new i = 0; i < MAX_INV_SLOTS; i++)
		        {
		        	if(removed_amount < amount)
		        	{
			        	if(PlayerInfo[playerid][pInvItem][i] == itemid)
	            		{
			            	if(PlayerInfo[playerid][pInvQ][i] <= amount - removed_amount)
			            	{
			            		removed_amount += PlayerInfo[playerid][pInvQ][i];
			            		RemoveInvItem(playerid, i);
			            		i--;
			            	}
			            	else
			            	{
			            		PlayerInfo[playerid][pInvQ][i] -= amount - removed_amount;
			            		removed_amount += amount - removed_amount;
			            	}
		            	}
	        		}
	        		else 
	        		{
	        			break;
	        		}
		        }

		        GiveInvItem(targetid, itemid, amount, 0);

		        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    	        format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
  		        GiveNameSpace(sendername);
    	        GiveNameSpace(giveplayer);
    	        PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    	        format(string, sizeof(string),"You gave %s %d grams of %s.", giveplayer, amount, type);
    	        SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(string, sizeof(string),"%s gave you %d grams of %s.", sendername, amount, type);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
			    SetPVarInt(playerid, "Delay", GetCount()+2000); SetPVarInt(targetid, "Delay", GetCount()+2000);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "USAGE: /give {FFFFFF}[housekey/weapon/armour/rentkey/ciggy/beer/wine/acid/cocaine/crystal/ecstasy/meth/pcp/cannabis/crack] [playerid/maskid]");
		}
		else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	}
	else SendClientMessage(playerid, COLOR_ERROR, "You cannot give stuff to yourself.");

	return 1;
}
//============================================//
COMMAND:id(playerid, params[]) {
	new id;
	if(sscanf(params, "i", id)) {
	    new part[MAX_PLAYER_NAME];
		if(sscanf(params, "s[24]", part)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /id {FFFFFF}[PlayerID/PartOfName]");
		new found = 0,
		    string[80];
		    
		foreach(new i : Player) {
			if(strfind(PlayerInfo[i][pUsername], part, true, 0) != -1)
			{
                format(string, sizeof(string), "ID: (%d) %s - TLS: %d - Ping: %d", i, PlayerInfo[i][pName], GetPVarInt(i, "ConnectTime"), GetPlayerPing(i));
		    	SendClientMessage(playerid, COLOR_ERROR, string);
		    	found++;
			}
		}

		if(found == 0) {
            SendClientMessage(playerid, COLOR_ERROR, "No connected user matches your search criteria.");
		}
	} else {
	 	if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	  	if(IsPlayerConnected(id))
	  	{
	  	    new string[80];
		    format(string, sizeof(string), "ID: (%d) %s - TLS: %d - Ping: %d", id, PlayerInfo[id][pName], GetPVarInt(id, "ConnectTime"), GetPlayerPing(id));
		    SendClientMessage(playerid, COLOR_ERROR, string);
		}
		else
		{
  			SendClientMessage(playerid, COLOR_ERROR, "No connected user matches your search criteria.");
		}
	}
	
	return 1;
}
//============================================//
ALTCOMMAND:cc->clearchat;
COMMAND:clearchat(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    ClearChatbox(playerid, 20);
	return 1;
}
//============================================//
COMMAND:try(playerid, params[])
{
	new text[128],string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /try {FFFFFF}[text] {FF0000}(This is for your own character only!)");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	new coin = random(2)+1,coinname[20];
    	switch(coin)
    	{
    	    case 1: coinname = "succeeds";
    	    default: coinname = "fails";
    	}
    	format(string, sizeof(string), "*** %s tries to %s and %s.", sendername,text,coinname);
		ProxDetector(10.0, playerid, string, COLOR_PURPLE);
	}
	return 1;
}
//============================================//
COMMAND:coin(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME];
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
	new coin = random(2)+1, coinname[20];
	if(coin == 1) { coinname = "head"; }
	else { coinname = "tail"; }
    format(string, sizeof(string), "*** %s flips a coin and lands on a %s.", sendername,coinname);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE);
	return 1;
}
//============================================//
COMMAND:dice(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
    if(!CheckInvItem(playerid, 400)) return SendClientMessage(playerid, COLOR_WHITE, "You do not have any dice.");
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    GiveNameSpace(sendername);
    new dice = random(6)+1;
    format(string, sizeof(string), "*** %s throws %s dice that lands on %d.", sendername, CheckSex(playerid), dice);
	ProxDetector(5.0, playerid, string, COLOR_PURPLE);
	return 1;
}
//============================================//
COMMAND:time(playerid, params[])
{
    new string[256],year,month,day,mtext[50],Hour, Minute, Second;
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
	getdate(year, month, day), gettime(Hour, Minute, Second);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}

	if(GetPVarInt(playerid, "Jailed") == 0)
	{
		if(!CheckInvItem(playerid, 404)) return SendClientMessage(playerid,COLOR_ERROR,"You don't have a watch.");
	}

	/*format(montxt, 25, "%d", month);
	if(month < 10) format(montxt, 25, "0%d", month);
	
	format(daytxt, 25, "%d", day);
	if(day < 10) format(daytxt, 25, "0%d", day);
	
	format(string, 256, "YYYY/MM/DD: %d/%s/%s", year, montxt, daytxt);
	scm(playerid, COLOR_ERROR, string);*/
	
	if(Minute < 10) format(string, 256, "~y~OOC Time: ~w~%d:0%d", Hour, Minute);
	else format(string, 256, "~y~OOC Time: ~w~%d:%d", Hour, Minute);
	//scm(playerid, COLOR_ERROR, string);
	
	if (GMMin < 10) format(string, 256, "%s~n~~b~IC Time: ~w~%d:0%d", string, GMHour, GMMin);
	else format(string, 256, "%s~n~~b~IC Time: ~w~%d:%d", string, GMHour, GMMin);
	//scm(playerid, COLOR_ERROR, string);
	
	GameTextForPlayer(playerid, string, 5000, 1);
	
	format(string, 256, "Playtime: %d seconds | Next Payday: %d minutes.", GetPVarInt(playerid, "PlayTime"), 60-GetPVarInt(playerid, "PayDay"));
	scm(playerid, COLOR_ERROR, string);
	
	//ApplyAnimationEx(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);

	//format(string, sizeof(string), "*** %s checks the time.", PlayerInfo[playerid][pName]);
	//SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);

	if(GetPVarInt(playerid, "Jailed") > 0)
	{
		if(GetPVarInt(playerid, "Jailed") == 3)
		{
		    format(string, sizeof(string), "Release date: %s", PlayerInfo[playerid][pJailedUntil]);
		    SendClientMessage(playerid, COLOR_ERROR, string);
		}
		else
		{
		    format(string, sizeof(string), "Released in %i minute(s) and %i second(s).", floatround(GetPVarInt(playerid, "JailTime") / 60, floatround_floor), GetPVarInt(playerid, "JailTime") % 60);
		    SendClientMessage(playerid, COLOR_ERROR, string);
		}
	}
	return 1;
}
//============================================//
COMMAND:windows(playerid, params[])
{
    new string[128],sendername[MAX_PLAYER_NAME];
    new idcar = GetPlayerVehicleID(playerid);
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
	if (!IsAWindowCar(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not possess windows");
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
	switch(VehicleInfo[idcar][vWindows])
	{
    	case 0:
    	{
    		format(string, sizeof(string), "The %ss window is now [DOWN].", VehicleName[GetVehicleModel(idcar)-400]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			VehicleInfo[idcar][vWindows] = 1;
			SetVehicleParamsCarWindows(idcar, 0, 0, 0, 0);
    	}
    	case 1:
    	{
    		format(string, sizeof(string), "The %ss window is now [UP].", VehicleName[GetVehicleModel(idcar)-400]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			VehicleInfo[idcar][vWindows] = 0;
			SetVehicleParamsCarWindows(idcar, 1, 1, 1, 1);
    	}
    }
	return 1;
}
ALTCOMMAND:wi->windows;
//============================================//
COMMAND:lock(playerid, params[]) {
    new idcar = 0, key = 0;
    if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "RentKey") != 0) idcar = GetPVarInt(playerid, "RentKey");
    if(GetPVarInt(playerid, "RouteVeh") >= 1 && idcar == 0) idcar = GetPVarInt(playerid, "RouteVeh");
	foreach(new car : VehicleIterator)
	{
	    if(CopInfo[car][Created] == 1 && idcar == 0) {
		    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
			    idcar = car;
			    break;
		    }
	    }
	}
	
	if(idcar == 0) {
	    key = IsPlayerVehicleSpawned(playerid);
   	    if(key != -1) {
	    	cmd_v(playerid, "lock");
		    return true;
		}
		
		SendClientMessage(playerid, COLOR_ERROR, "You don't have a rental vehicle, job vehicle or faction vehicle spawned!");
	    return true;
	} else {
		switch(VehicleInfo[idcar][vLock]) {
	    	case 0: {
				VehicleInfo[idcar][vLock] = 1;
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Locked", 4000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				foreach(new i : Player) {
				    SetVehicleParamsForPlayer(idcar,i,0,1);
				}
	    	}
	    	case 1: {
				VehicleInfo[idcar][vLock] = 0;
				GameTextForPlayer(playerid, "~w~Vehicle~n~~g~Unlocked", 4000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				foreach(new i : Player) {
				    SetVehicleParamsForPlayer(idcar,i,0,0);
				}
	    	}
	    }
	}
    
	return 1;
}
//============================================//
COMMAND:unrent(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
	if(GetPVarInt(playerid, "RentKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not possess a rented vehicle.");
	if(VehicleInfo[GetPVarInt(playerid, "RentKey")][vType] != VEHICLE_RENTAL) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle is not a rentable vehicle.");
	GameTextForPlayer(playerid, "~w~You no longer rent a vehicle!", 5000, 3);
	DespawnVehicle(GetPVarInt(playerid, "RentKey"));
	DeletePVar(playerid, "RentKey");
	PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	return 1;
}
//============================================//
COMMAND:accept(playerid, params[])
{
	new type[128], string[128], sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME],
	Float:x, Float:y, Float:z, sn;
	if(sscanf(params, "s[128]I(-1)", type, sn)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /accept {FFFFFF}[death/drag/invite/shake/blindfold/refill/repair/sellto/hsellto/bsellto/live/divorce]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
   	    if(strcmp(type, "death", true) == 0)
   	    {
   	        if (GetPVarInt(playerid, "Dead") != 2) return SendClientMessage(playerid, COLOR_WHITE, "You are not dead.");
   	        if(GetPVarInt(playerid, "DeathTime") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait before accepting death.");
   	        if(GetPVarInt(playerid, "JailTime") >= 1) return SendClientMessage(playerid, COLOR_WHITE, "You cannot accept death inside the prison, you must wait for a gaurd or prisoner to RP with you!");
   	        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
	        GiveNameSpace(sendername);
   	        format(string, sizeof(string), "%s has accepted death.",sendername);
   	        ProxDetector(20.0, playerid, string, COLOR_WHITE);
   	        //CreateCorpse(playerid, GetPVarInt(playerid, "Model"));
   	        SetPVarInt(playerid, "Drag", INVALID_MAXPL);
   	        SetPVarInt(playerid, "Cuffed", 0);
   	        SetPVarInt(playerid, "CuffedTime", 0);
   	        SetPVarInt(playerid, "Deaths", GetPVarInt(playerid, "Deaths")+1);
            ResetPlayerWeaponsEx(playerid);
            ResetScriptWiseWeapon(playerid);
	        ClearChatbox(playerid,50);
	        DeletePVar(playerid, "FadeToDeath");
	        //PlayAudioStreamForPlayerEx(playerid, "http://fresh.pr-rp.net/gta/hospitalloop.mp3");
	        ClearChatbox(playerid, 10);
   	        /*TextDrawHideForPlayer(playerid, MoneyDraw[playerid]);
   	        TextDrawHideForPlayer(playerid, MoneyDraw2);
   	        TextDrawHideForPlayer(playerid, LocationDraw[playerid]);*/
   	        TextDrawHideForPlayer(playerid, BlindDraw);
   	        DeletePVar(playerid,"Blinded");
			for(new p = 0; p < MAX_INV_SLOTS; p++)
			{
			    if(PlayerInfo[playerid][pInvItem][p] != 401 && PlayerInfo[playerid][pInvItem][p] != 402 && PlayerInfo[playerid][pInvItem][p] != 404 && PlayerInfo[playerid][pInvItem][p] != 405)
			    {
					PlayerInfo[playerid][pInvItem][p]=0;
					PlayerInfo[playerid][pInvQ][p]=0;
					PlayerInfo[playerid][pInvEx][p]=0;
					PlayerInfo[playerid][pInvS][p]=0;
				}
			}
			RemoveInvItem(playerid, GetInvSlotFromID(playerid, 406));
			CallRemoteFunction("FixInv", "i", playerid);
			DeathPlayer(playerid, "You need to rest to regain consciousness.");
			//OnPlayerSpawn(playerid); ITS BUGGED, PLEASE ARE STUCK AT THE HOSPITAL.

			DestroyDynamic3DTextLabel(PlayerInfo[playerid][pInjuriesText]);
		}
   	    else if(strcmp(type, "invite", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "InviteOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "InviteOffer")))
   	            {
					new targetid = GetPVarInt(playerid, "InviteOffer");
   	                format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]), format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		        GiveNameSpace(sendername), GiveNameSpace(giveplayer);
        	        PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0), PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        	        SetPVarInt(playerid, "Member", GetPVarInt(targetid, "Member")), SetPVarInt(playerid, "Rank", 1);
        	        format(string, sizeof(string), "%s accepted your faction invite.", sendername);
        	        SendClientMessage(targetid,COLOR_ERROR,string);
        	        format(string, sizeof(string), "You accepted %s's faction invite.", giveplayer);
        	        SendClientMessage(playerid,COLOR_ERROR,string);
                    SetPVarInt(playerid, "InviteOffer", INVALID_MAXPL);
                    SetPVarInt(playerid, "Suspend", 0);
                    for(new i = 0; i < MAX_LSPD_DIVISIONS; i++) {
	                PlayerInfo[playerid][pDivision][i]=0; }
	                OnPlayerDataSave(playerid);
   	            }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a invite is offline."), SetPVarInt(playerid, "InviteOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a invite.");
   	    }
   	    else if(strcmp(type, "drag", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "DragOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "DragOffer")))
			    {
                    if(PlayerToPlayer(playerid,GetPVarInt(playerid, "DragOffer"),5.0) && GetPVarInt(playerid, "Dead") != 0)
                    {
			            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	            format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(GetPVarInt(playerid, "DragOffer")));
      		            GiveNameSpace(sendername);
                        GiveNameSpace(giveplayer);
					    format(string, sizeof(string), "You accepted %s's drag offer.", giveplayer);
           		        SendClientMessage(playerid, COLOR_WHITE, string);
            	        format(string, sizeof(string), "%s has accepted your drag offer.", sendername);
            	        SendClientMessage(GetPVarInt(playerid, "DragOffer"), COLOR_LIGHTBLUE, string);
            	        format(string, sizeof(string), "*** %s starts to drag %s.", giveplayer, sendername);
    	                ProxDetector(30.0, GetPVarInt(playerid, "DragOffer"), string, COLOR_PURPLE);
    	                TogglePlayerControllableEx(playerid,false);
    	                SetPVarInt(playerid, "Drag", GetPVarInt(playerid, "DragOffer"));
			            SetPVarInt(playerid, "DragOffer", INVALID_MAXPL);
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the drag."), SetPVarInt(playerid, "DragOffer", INVALID_MAXPL);
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a drag is offline."), SetPVarInt(playerid, "DragOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a drag.");
   	    }
   	    else if(strcmp(type, "repair", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "RepairOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "RepairOffer")))
			    {
			        if(GetPlayerMoneyEx(playerid) >= GetPVarInt(playerid, "RepairPrice"))
			        {
                        if(PlayerToPlayer(playerid, GetPVarInt(playerid, "RepairOffer"), 8.0))
                        {
		                    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    	                    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(GetPVarInt(playerid, "RepairOffer")));
  		                    GiveNameSpace(sendername);
    	                    GiveNameSpace(giveplayer);
						    GivePlayerMoneyEx(playerid,-GetPVarInt(playerid, "RepairPrice"));
						    SetPVarInt(GetPVarInt(playerid, "RepairOffer"), "CheckEarn", GetPVarInt(playerid, "RepairPrice")+GetPVarInt(GetPVarInt(playerid, "RepairOffer"), "CheckEarn"));
						    format(string, sizeof(string), "*** Accepted %s's repair offer (( %s ))", giveplayer, sendername);
	                        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
						    format(string, sizeof(string), "You accepted %s a repair contract for %s.", giveplayer, FormatMoney(GetPVarInt(playerid, "RepairPrice")));
       		                SendClientMessage(playerid, COLOR_WHITE, string);
        	                format(string, sizeof(string), "%s has accepted your repair contract, %s has been added to your paycheck.", sendername, FormatMoney(GetPVarInt(playerid, "RepairPrice")));
        	                SendClientMessage(GetPVarInt(playerid, "RepairOffer"), COLOR_JOB, string);
        	                //==========//
    	                    switch(GetPVarInt(playerid, "RepairType"))
    	                    {
    	                        case 1:
    	                        {
    	                            new max2 = GetPerkMax(GetPVarInt(playerid, "RepairVehicleID"), 1);
    	                            VehicleInfo[GetPVarInt(playerid, "RepairVehicleID")][vEngineStats][1] = max2;

    	                            SetVehicleHealth(GetPVarInt(playerid, "RepairVehicleID"), 1000.0);
    	                        }
    	                        case 2:
    	                        {
    	                            new max2 = GetPerkMax(GetPVarInt(playerid, "RepairVehicleID"), 2);
    	                            VehicleInfo[GetPVarInt(playerid, "RepairVehicleID")][vBattery][1] = max2;
    	                        }
    	                        case 3:
    	                        {
    	                        	new Float:previous_health;
    	                        	GetVehicleHealth(GetPVarInt(playerid, "RepairVehicleID"), previous_health);
    	                            RepairVehicle(GetPVarInt(playerid, "RepairVehicleID"));
    	                            SetVehicleHealth(GetPVarInt(playerid, "RepairVehicleID"), previous_health);
    	                        }
    	                    }
        	                //==========//
        	                SetPVarInt(playerid, "RepairOffer", INVALID_MAXPL);
		                    SetPVarInt(playerid, "RepairPrice", 0);
		                    SetPVarInt(playerid, "RepairVehicleID", 0);
		                }
		                else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the repair.");
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You cannot afford the price offered.");
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a repair is offline."), SetPVarInt(playerid, "RepairOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a repair.");
   	    }
   	    else if(strcmp(type, "refill", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "RefillOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "RefillOffer")))
			    {
			        if(GetPlayerMoneyEx(playerid) >= GetPVarInt(playerid, "RefillPrice"))
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                if(PlayerToPlayer(playerid, GetPVarInt(playerid, "RefillOffer"), 8.0))
                            {
			                    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	                    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(GetPVarInt(playerid, "RefillOffer")));
      		                    GiveNameSpace(sendername);
        	                    GiveNameSpace(giveplayer);
							    GivePlayerMoneyEx(playerid,-GetPVarInt(playerid, "RefillPrice"));
							    SetPVarInt(GetPVarInt(playerid, "RefillOffer"), "CheckEarn", GetPVarInt(playerid, "RefillPrice")+GetPVarInt(GetPVarInt(playerid, "RefillOffer"), "CheckEarn"));
							    format(string, sizeof(string), "*** Accepted %s's refill offer (( %s ))", giveplayer, sendername);
    	                        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
							    format(string, sizeof(string), "You accepted %s a refill contract for %s.", giveplayer, FormatMoney(GetPVarInt(playerid, "RefillPrice")));
                                SendClientMessage(playerid, COLOR_WHITE, string);
            	                format(string, sizeof(string), "%s has accepted your refill contract, %s has been added to your paycheck.", sendername, FormatMoney(GetPVarInt(playerid, "RefillPrice")));
            	                SendClientMessage(GetPVarInt(playerid, "RefillOffer"), COLOR_LIGHTBLUE, string);
            	                SetPVarInt(GetPVarInt(playerid, "RepairOffer"), "CheckEarn", GetPVarInt(GetPVarInt(playerid, "RepairOffer"), "CheckEarn")+GetPVarInt(playerid, "RepairPrice"));
            	                VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] = 100;
			                    SetPVarInt(playerid, "RefillOffer", INVALID_MAXPL);
			                    SetPVarInt(playerid, "RefillPrice", 0);
			                }
			                else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the refill.");
			            }
			            else SendClientMessage(playerid, COLOR_ERROR, "You are not inside a vehicle.");
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You cannot afford the price offered.");
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a refill is offline."), SetPVarInt(playerid, "RefillOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a refill.");
   	    }
   	    else if(strcmp(type, "taxi", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
	        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
   	        if (GetPVarInt(playerid, "Job") != 5) return SendClientMessage(playerid, COLOR_WHITE, "You are not a Taxi Driver.");
   	        if (GetPVarInt(playerid, "OnRoute") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not on route.");
   	        if (TaxiCall == INVALID_MAXPL) return SendClientMessage(playerid, COLOR_WHITE, "No taxi calls available.");
   	        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
	    	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[TaxiCall][pUsername]);
      		GiveNameSpace(sendername);
        	GiveNameSpace(giveplayer);
			format(string, sizeof(string), "You have accepted %s's call, location:[%s]!", giveplayer, GetPlayerArea(TaxiCall));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(TaxiCall, COLOR_YELLOW, "TXT: Your requested taxi will arrive shortly, Sender: 'LS Taxi Co.'.");
			PlayerPlaySound(TaxiCall, 1052, 0.0, 0.0, 0.0);
            GetPlayerPos(TaxiCall,x,y,z);
            SetPlayerCheckpoint(playerid, x, y, z, 5.0);
            GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Goto redmarker", 5000, 1);
		    TaxiCall = INVALID_MAXPL;
   	    }
   	    else if(strcmp(type, "mech", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
	        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
   	        if (GetPVarInt(playerid, "Job") != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_WHITE, "You are not a Mechanic.");
   	        if (GetPVarInt(playerid, "OnRoute") == 0 && PlayerInfo[playerid][pJobStatus] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not on route.");
   	        if(sn == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /accept mech [ID]");
   	        if(PlayerInfo[sn][pMechCall] != 1) return SendClientMessage(playerid, COLOR_ERROR, "This player has not requested a mechanic.");
   	        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
	    	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[sn][pUsername]);
      		GiveNameSpace(sendername);
        	GiveNameSpace(giveplayer);
			format(string, sizeof(string), "You have accepted %s's (Ph: %i) call! Location:[%s]", giveplayer, GetPVarInt(sn, "PhoneNum"), GetPlayerArea(sn));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(sn, COLOR_PHONE, "TXT: Your requested has been accpted and a Tow Truck has been dispatched. (From: 311)");
			PlayerPlaySound(sn, 1052, 0.0, 0.0, 0.0);
            GetPlayerPos(sn, x, y, z);
            PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, x, y, z, 0.0, 0.0, 0.0, 3, -1, -1, playerid);
		    PlayerInfo[sn][pMechCall] = 0;
   	    }
   	    else if(strcmp(type, "blind", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "BlindOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "BlindOffer")))
			    {
                    if(PlayerToPlayer(playerid,GetPVarInt(playerid, "BlindOffer"),8.0))
                    {
			            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	            format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(GetPVarInt(playerid, "BlindOffer")));
      		            GiveNameSpace(sendername);
                        GiveNameSpace(giveplayer);
					    format(string, sizeof(string), "You accepted %s's blindfold.", giveplayer);
           		        SendClientMessage(playerid, COLOR_WHITE, string);
            	        format(string, sizeof(string), "%s has accepted your blindfold, (/unblind) to remove the blindfold.", sendername);
            	        SendClientMessage(GetPVarInt(playerid, "BlindOffer"), COLOR_LIGHTBLUE, string);
			            SetPVarInt(playerid, "BlindOffer", INVALID_MAXPL);
			            TextDrawShowForPlayer(playerid,BlindDraw);
			            SetPVarInt(playerid, "Blinded", 1);
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the blind."), SetPVarInt(playerid, "BlindOffer", INVALID_MAXPL);
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a blind is offline."), SetPVarInt(playerid, "BlindOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a blind.");
   	    }
   	    else if(strcmp(type, "divorce", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "DivorceOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "DivorceOffer")))
			    {
                    if(PlayerToPlayer(playerid,GetPVarInt(playerid, "DivorceOffer"),8.0))
                    {
			            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	            format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(GetPVarInt(playerid, "DivorceOffer")));
      		            GiveNameSpace(sendername);
                        GiveNameSpace(giveplayer);
                        strmid(PlayerInfo[playerid][pMarriedTo], "None", 0, strlen("None"), 255);
                        strmid(PlayerInfo[GetPVarInt(playerid, "DivorceOffer")][pMarriedTo], "None", 0, strlen("None"), 255);
					    format(string, sizeof(string), "You accepted %s's divorce.", giveplayer);
           		        SendClientMessage(playerid, COLOR_WHITE, string);
            	        format(string, sizeof(string), "%s has accepted your divorce.", sendername);
            	        SendClientMessage(GetPVarInt(playerid, "DivorceOffer"), COLOR_LIGHTBLUE, string);
			            SetPVarInt(playerid, "DivorceOffer", INVALID_MAXPL);
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the divorce."), SetPVarInt(playerid, "DivorceOffer", INVALID_MAXPL);
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a divorce is offline."), SetPVarInt(playerid, "DivorceOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a divorcr.");
   	    }
   	    else if(strcmp(type, "shake", true) == 0)
   	    {
   	        if(sn == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /accept shake (1-8)");
   	        if(sn < 1 || sn > 8) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /accept shake (1-8)");
   	        if(GetPVarInt(playerid, "ShakeOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "ShakeOffer")))
			    {
                    if(PlayerToPlayer(playerid,GetPVarInt(playerid, "ShakeOffer"),8.0))
                    {
                        SetPlayerToFacePlayer(playerid, GetPVarInt(playerid, "ShakeOffer"));
                        SetPlayerToFacePlayer(GetPVarInt(playerid, "ShakeOffer"), playerid);
			            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	            format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(GetPVarInt(playerid, "ShakeOffer")));
      		            GiveNameSpace(sendername);
                        GiveNameSpace(giveplayer);
					    format(string, sizeof(string), "You accepted %s's handshake.", giveplayer);
           		        SendClientMessage(playerid, COLOR_WHITE, string);
            	        format(string, sizeof(string), "%s has accepted your handshake.", sendername);
            	        SendClientMessage(GetPVarInt(playerid, "ShakeOffer"), COLOR_LIGHTBLUE, string);
            	        new anim[128];
            	        switch(sn)
            	        {
            	            case 1: anim="hndshkaa";
            	            case 2: anim="hndshkba";
            	            case 3: anim="hndshkca";
            	            case 4: anim="hndshkcb";
            	            case 5: anim="hndshkda";
            	            case 6: anim="hndshkea";
            	            case 7: anim="hndshkfa";
            	            case 8: anim="prtial_hndshk_biz_01";
            	        }
            	        ApplyAnimationEx(playerid,"GANGS", anim,4.0,0,0,0,0,0);
			            ApplyAnimationEx(GetPVarInt(playerid, "ShakeOffer"), "GANGS", anim,4.0,0,0,0,0,0);
			            SetPVarInt(playerid, "ShakeOffer", INVALID_MAXPL);
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the shake.");
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a shake is offline."), SetPVarInt(playerid, "ShakeOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a shake.");
   	    } else if(strcmp(type, "sellto", true) == 0) {
			new seller = GetPVarInt(playerid, "VehicleOffer");
   	        if(seller == INVALID_MAXPL) return SendClientMessage(playerid, COLOR_ERROR, "There are no outstanding offer to buy a vehicle.");
   	        if(!Iter_Contains(Player, seller)) {
   	            SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
   	            SetPVarInt(playerid, "VehicleOfferPrice", 0);
   	            SetPVarInt(playerid, "VehicleOfferID", 0);
                return SendClientMessage(playerid, COLOR_ERROR, "The seller offering the acquisition of his vehicle is no longer connected.");
			}
			
			if(PlayerSpawnedVehicles(playerid) >= 2) {
			    SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
   	            SetPVarInt(playerid, "VehicleOfferPrice", 0);
   	            SetPVarInt(playerid, "VehicleOfferID", 0);
				return SendClientMessage(playerid, COLOR_ERROR, "You already have the maximum ammount of vehicles spawned and therefore cannot accept the offer.");
			}
			
			if(PlayerToPlayer(playerid, seller, VEHICLE_SELL_RANGE)) {
				if(GetPlayerMoneyEx(playerid) >= GetPVarInt(playerid, "VehicleOfferPrice")) {

					if(PlayerSpawnedVehicles(seller) == 0)
					{
						SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
		   	            DeletePVar(playerid, "VehicleOfferPrice");
		   	            DeletePVar(playerid, "VehicleOfferID");
						SendClientMessage(playerid, COLOR_ERROR, "The seller offering the acquisition does not have a vehicle spawned.");
					}

				    new vehicleID = -1;
					for(new i = 0; i < PlayerSpawnedVehicles(seller); i++)
					{
						new veh = GetSpawnedVehicle(seller, i);
						if(GetPlayerVehicleID(seller) == veh)
						{
							vehicleID = veh;
						}
					}
					
					if(vehicleID == -1) {
					    SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
		   	            DeletePVar(playerid, "VehicleOfferPrice");
		   	            DeletePVar(playerid, "VehicleOfferID");
						return SendClientMessage(playerid, COLOR_ERROR, "The seller offering the aquisition is not in his vehicle.");
					}
					
				    if(GetPVarInt(playerid, "VehicleOfferID") != VehicleInfo[vehicleID][vID]) {
				        SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
		   	            DeletePVar(playerid, "VehicleOfferPrice");
		   	            DeletePVar(playerid, "VehicleOfferID");
						return SendClientMessage(playerid, COLOR_ERROR, "The seller offered an aquisition for a different vehicle.");
                    }
				    new msg[90];
    				GivePlayerMoneyEx(seller, GetPVarInt(playerid, "VehicleOfferPrice"));
 			    	GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "VehicleOfferPrice"));
   		    		format(msg, sizeof(msg), "%s accepted your offer for %s.", PlayerInfo[playerid][pName], FormatMoney(GetPVarInt(playerid, "VehicleOfferPrice")));
   		    		SendClientMessage(seller, COLOR_WHITE, msg);
     		    	format(msg, sizeof(msg), "You accepted %s's offer for %s.", PlayerInfo[seller][pName], FormatMoney(GetPVarInt(playerid, "VehicleOfferPrice")));
        	        SendClientMessage(playerid, COLOR_WHITE, msg);
       	         	SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
        	        DeletePVar(playerid, "VehicleOfferPrice");
        	        DeletePVar(playerid, "VehicleOfferID");
        	        format(VehicleInfo[vehicleID][vOwner], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pUsername]);
        	        RemovePlayerFromVehicle(seller);
        	        mysql_format(handlesql, msg, sizeof(msg), "UPDATE `vehicles` SET `Owner` = '%e' WHERE `ID` = %i;", PlayerInfo[playerid][pUsername], VehicleInfo[vehicleID][vID]);
        	        mysql_pquery(handlesql, msg);
				} else	{
					SendClientMessage(playerid, COLOR_ERROR, "You do not have enough money to acquire the vehicle.");
					SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
					DeletePVar(playerid, "VehicleOfferPrice");
   	            	DeletePVar(playerid, "VehicleOfferID");
				}
        	} else {
				SendClientMessage(playerid, COLOR_ERROR, "You aren't close enough to the seller of the vehicle.");
				SetPVarInt(playerid, "VehicleOffer", INVALID_MAXPL);
				DeletePVar(playerid, "VehicleOfferPrice");
   	            DeletePVar(playerid, "VehicleOfferID");
			}
   	    } else if(strcmp(type, "hsellto", true) == 0) {
   	        if(GetPVarInt(playerid, "HouseOffer") != 501)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "HouseOffer")))
   	            {
   	                if(PlayerToPlayer(playerid,GetPVarInt(playerid, "HouseOffer"),5.0))
   	                {
						if(GetPlayerMoneyEx(playerid) >= GetPVarInt(playerid, "HouseOfferPrice"))
						{
					   		new targetid = GetPVarInt(playerid, "HouseOffer"), key = GetPVarInt(GetPVarInt(playerid, "HouseOffer"), "HouseKey");
					   		if(strcmp(HouseInfo[key][hOwner], PlayerInfo[targetid][pUsername], true) == 0)
					   		{
					   		    GivePlayerMoneyEx(targetid,GetPVarInt(playerid, "HouseOfferPrice"));
					   			GivePlayerMoneyEx(playerid,-GetPVarInt(playerid, "HouseOfferPrice"));
        	            		format(string, sizeof(string), "%s accepted your house sellto offer for %s!", PlayerInfo[playerid][pName], FormatMoney(GetPVarInt(playerid, "HouseOfferPrice")));
        	            		SendClientMessage(targetid,COLOR_ERROR,string);
        	            		format(string, sizeof(string), "You accepted %s's house sellto offer for %s!", PlayerInfo[targetid][pName], FormatMoney(GetPVarInt(playerid, "HouseOfferPrice")));
        	            		SendClientMessage(playerid,COLOR_ERROR,string);
        	            		SetPVarInt(playerid, "HouseKey", key);
        	            		SetPVarInt(targetid, "HouseKey", 0);
        	            		SetPVarInt(playerid, "HouseOffer", INVALID_MAXPL);
        	            		DeletePVar(playerid,"HouseOfferPrice");
        	            		strmid(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
        	            		SaveHouseID(key, 1);
        	            	}
        	            	else SendClientMessage(playerid, COLOR_ERROR, "The player who offered a sellto doesn't own the house."), SetPVarInt(playerid, "HouseOffer", INVALID_MAXPL);
        	            }
        	            else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"), SetPVarInt(playerid, "HouseOffer", INVALID_MAXPL);
        	        }
        	        else SendClientMessage(playerid, COLOR_ERROR, "You aren't around the player who offered the sellto."), SetPVarInt(playerid, "HouseOffer", INVALID_MAXPL);
   	            }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a sellto is offline."), SetPVarInt(playerid, "HouseOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a sellto."), SetPVarInt(playerid, "HouseOffer", INVALID_MAXPL);
   	    }
   	    else if(strcmp(type, "rentoffer", true) == 0) {
   	        if(GetPVarInt(playerid, "RentOffer") != 501)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "RentOffer")))
   	            {
   	                if(PlayerToPlayer(playerid,GetPVarInt(playerid, "RentOffer"),5.0))
   	                {
					    new targetid = GetPVarInt(playerid, "RentOffer"), key = GetPVarInt(GetPVarInt(playerid, "RentOffer"), "HouseKey");
					   	if(strcmp(HouseInfo[key][hOwner], PlayerInfo[targetid][pUsername], true) == 0)
					   	{
        	                format(string, sizeof(string), "%s accepted your rental offer!", PlayerInfo[playerid][pName]);
        	            	SendClientMessage(targetid,COLOR_ERROR,string);
        	            	format(string, sizeof(string), "You accepted %s's rental offer!", PlayerInfo[targetid][pName]);
        	            	SendClientMessage(playerid,COLOR_ERROR,string);
        	            	SetPVarInt(playerid, "HouseKey", key);
        	            }
        	            else SendClientMessage(playerid, COLOR_ERROR, "The player who offered a rentto doesn't own the house."), SetPVarInt(playerid, "RentOffer", INVALID_MAXPL);
        	        }
        	        else SendClientMessage(playerid, COLOR_ERROR, "You aren't around the player who offered the rentto."), SetPVarInt(playerid, "RentOffer", INVALID_MAXPL);
   	            }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a rentto is offline."), SetPVarInt(playerid, "RentOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a rentto."), SetPVarInt(playerid, "RentOffer", INVALID_MAXPL);
   	    }
   	    else if(strcmp(type, "bsellto", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "BizOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "BizOffer")))
   	            {
   	                if(PlayerToPlayer(playerid,GetPVarInt(playerid, "BizOffer"), 5.0))
   	                {
						if(GetPlayerMoneyEx(playerid) >= GetPVarInt(playerid, "BizOfferPrice"))
						{
					   		new targetid = GetPVarInt(playerid, "BizOffer"), key = GetPVarInt(GetPVarInt(playerid, "BizOffer"), "BizKey");
					   		if(strcmp(BizInfo[key][Owner], PlayerInfo[targetid][pUsername], true) == 0)
					   		{
					   		    if(BizInfo[key][Value] >= 10000)
					   		    {
					   			    GivePlayerMoneyEx(targetid,GetPVarInt(playerid, "BizOfferPrice"));
					   			    GivePlayerMoneyEx(playerid,-GetPVarInt(playerid, "BizOfferPrice"));
        	            		    format(string, sizeof(string), "%s accepted your business sellto.", PlayerInfo[playerid][pName]);
        	            		    SendClientMessage(targetid,COLOR_ERROR,string);
        	            		    format(string, sizeof(string), "You accepted %s's business sellto.", PlayerInfo[targetid][pName]);
        	            		    SendClientMessage(playerid,COLOR_ERROR,string);
        	            		    SetPVarInt(playerid, "BizKey", key);
        	            		    SetPVarInt(targetid, "BizKey", 0);
        	            		    SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
        	            		    DeletePVar(playerid,"BizOfferPrice");
        	            		    strmid(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
        	            		    SaveBizID(key, 1);
        	            		}
        	            		else SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
        	            	}
        	            	else SendClientMessage(playerid, COLOR_ERROR, "The player who offered a sellto doesn't own the business."), SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
        	            }
        	            else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"), SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
        	        }
        	        else SendClientMessage(playerid, COLOR_ERROR, "You aren't around the player who offered the sellto."), SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
   	            }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a sellto is offline."), SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a sellto."), SetPVarInt(playerid, "BizOffer", INVALID_MAXPL);
   	    }
   	    else if(strcmp(type, "live", true) == 0)
   	    {
   	        if(GetPVarInt(playerid, "LiveOffer") != INVALID_MAXPL)
   	        {
   	            if(IsPlayerConnected(GetPVarInt(playerid, "LiveOffer")))
			    {
                    if(PlayerToPlayer(playerid,GetPVarInt(playerid, "LiveOffer"),5.0))
                    {
                        new targetid = GetPVarInt(playerid, "LiveOffer");
			            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	            format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		            GiveNameSpace(sendername);
                        GiveNameSpace(giveplayer);
                        switch(GetPVarInt(targetid, "Member"))
                        {
                            case 4:
                            {
				                switch(PlayerInfo[playerid][pLiveOffer][0])
				                {
				                    case 0:
				                    {
				                        format(string, sizeof(string), "* %s accepted to go live on SAN Network.", sendername);
						                SendClientMessage(targetid, COLOR_WHITE, string);
						                format(string, sizeof(string), "* Accepted %s's broadcast on SAN Network.", giveplayer);
						                SendClientMessage(playerid, COLOR_WHITE, string);
						                PlayerInfo[playerid][pLiveOffer][0] = 1;
						                PlayerInfo[targetid][pLiveOffer][0] = 1;
				                    }
				                    case 1:
				                    {
				                        foreach(new i : Player)
				                        {
				                            if(PlayerInfo[i][pLiveOffer][0] == 1)
				                            {
				                                PlayerInfo[i][pLiveOffer][0] = 0;
				                                SendClientMessage(i,COLOR_WHITE,"News Broadcast has ended.");
				                            }
				                        }
				                    }
				                }
                            }
							case 3:
							{
							    switch(PlayerInfo[playerid][pLiveOffer][1])
				        	    {
				            	    case 0:
				            	    {
				                	    format(string, sizeof(string), "* %s to go live on Radio Los Santos.", sendername);
						        	    SendClientMessage(targetid, COLOR_WHITE, string);
						       	        format(string, sizeof(string), "* %s broadcast on radio los santos.", giveplayer);
						       	        SendClientMessage(playerid, COLOR_WHITE, string);
						        	    PlayerInfo[playerid][pLiveOffer][1] = 1;
						        	    PlayerInfo[targetid][pLiveOffer][1] = 1;
				            	    }
				            	    case 1:
				            	    {
				                	    foreach(new i : Player)
				                	    {
				                    	    if(PlayerInfo[i][pLiveOffer][1] == 1)
				                    	    {
				                        	    PlayerInfo[i][pLiveOffer][1] = 0;
				                        	    SendClientMessage(i,COLOR_WHITE,"Broadcast has ended.");
				                    	    }
				                	    }
				            	    }
				        	    }
							}
                        }
                        SetPVarInt(playerid, "LiveOffer", INVALID_MAXPL);
			        }
			        else SendClientMessage(playerid, COLOR_ERROR, "You must be around the person who offered the live.");
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "The person who offered a live is offline."), SetPVarInt(playerid, "LiveOffer", INVALID_MAXPL);
   	        }
   	        else SendClientMessage(playerid, COLOR_ERROR, "You havent been offered for a live.");
   	    }
   	    else if(strcmp(type, "forumname", true) == 0)
   	    {
   	    	if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
   	    	if(sn == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /accept forumname [id]");
   	    	if(GetPVarInt(sn, "PendingForumName") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player is not waiting for a forum name change.");
   	    
   	    	new forum_name[64];
   	    	GetPVarString(sn, "PendingForumNameString", forum_name, sizeof(forum_name));

   	    	SetPVarString(sn, "ForumName", forum_name);
			OnPlayerDataSave(sn);

			SendClientMessage(sn, COLOR_WHITE, "Your request was approved and your forum name has been updated.");

			DeletePVar(sn, "PendingForumName");

			format(string, sizeof(string), "AdmCmd: %s has approved %s's forum name change.", 
				GetPlayerForumName(playerid),
				GiveNameSpaceEx(PlayerInfo[sn][pUsername]));
			SendAdminMessage(COLOR_YELLOW, string);
   	    }
   	    else if(strcmp(type, "name", true) == 0)
   	    {
   	    	if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
   	    	if(sn == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /accept name [id]");
   	    	if(GetPVarInt(sn, "PendingChangeName") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player is not waiting for a name change.");

			DeletePVar(sn, "PendingChangeName");

			if(GetPlayerMoneyEx(sn) < 35000 && GetPVarInt(sn, "Changes") == 0)
			{
				SendClientMessage(sn, COLOR_ERROR, "You are required to have $35,000 on-hand or a name change ticket in order to change your name.");
				SendClientMessage(playerid, COLOR_ERROR, "This player does not have enough money on-hand nor does he have a name change ticket, therefore his request has been denied.");
				return 1;
			}

			new name[MAX_PLAYER_NAME];
			GetPVarString(sn, "PendingChangeNameString", name, sizeof(name));

			format(string, sizeof(string), "AdmCmd: %s has approved %s's name change.", 
				GetPlayerForumName(playerid),
				GiveNameSpaceEx(PlayerInfo[sn][pUsername]));
			SendAdminMessage(COLOR_YELLOW, string);

			new query[256];
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Name='%s' WHERE Name='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE businesses SET Owner='%s' WHERE Owner='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE houses SET Owner='%s' WHERE Owner='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE logs_adminjails SET Name='%s' WHERE Name='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE logs_bans SET bUsername='%s' WHERE bUsername='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE logs_kicks SET Name='%s' WHERE Name='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE logs SET Name='%s' WHERE Name='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			mysql_format(handlesql, query, sizeof(query), "UPDATE toys SET PlayerName='%s' WHERE PlayerName='%s'", name, PlayerInfo[sn][pUsername]);
			mysql_pquery(handlesql, query, "");

			new Year, Month, Day, changed[32];
			getdate(Year, Month, Day);

			format(changed, sizeof(changed), "%d-%02d-%02d", Day, Month, Year);

			mysql_format(handlesql, query, sizeof(query), "INSERT INTO `logs_changename` (FromT, ToT, Date) VALUES ('%e', '%e', '%e')", name, PlayerInfo[sn][pUsername], changed);
			mysql_pquery(handlesql, query, "");

			foreach(new i : BizIterator)
			{
				if(strcmp(BizInfo[i][Owner], PlayerInfo[sn][pUsername]) == 0)
				{
					format(BizInfo[i][Owner], MAX_PLAYER_NAME, name);
				}
			}

			foreach(new i : HouseIterator)
			{
				if(strcmp(HouseInfo[i][hOwner], PlayerInfo[sn][pUsername]) == 0)
				{
					format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, name);
				}
			}

			foreach(new i : VehicleIterator)
			{
				if(strcmp(VehicleInfo[i][vOwner], PlayerInfo[sn][pUsername]) == 0)
				{
					format(VehicleInfo[i][vOwner], MAX_PLAYER_NAME, name);
				}
			}

   	    	GetPVarString(sn, "PendingChangeNameString", name, sizeof(name));

			SetPlayerName(sn, name);

			if(GetPVarInt(sn, "Changes") > 0)
			{
				SetPVarInt(sn, "Changes", GetPVarInt(sn, "Changes") - 1);
			}
			else
			{
				GivePlayerMoneyEx(sn, -35000);
			}

			format(PlayerInfo[sn][pUsername], MAX_PLAYER_NAME, name);
			format(PlayerInfo[sn][pName], MAX_PLAYER_NAME, name);

			GiveNameSpace(PlayerInfo[sn][pName]);

			// GunLicense removal
			if(GetPVarInt(sn, "GunLic") != 3) {
				SetPVarInt(sn, "GunLic", 0);
			}

			SetPVarInt(sn, "MedLic", 0); // MedLic removal.

			//new string[128];
			format(string, sizeof(string), "Your request was approved and you are now known as %s.", GiveNameSpaceEx(name));
			SendClientMessage(sn, COLOR_WHITE, string);
   	    }
   	    else if(strcmp(type, "prefix", true) == 0)
   	    {
   	    	if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(playerid, "Helper") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
   	    	if(sn == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /accept prefix [id]");
   	    	if(GetPVarInt(sn, "PendingPrefix") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player is not waiting for a prefix change.");
   	    
   	    	new prefix[64];
   	    	GetPVarString(sn, "PendingPrefixString", prefix, sizeof(prefix));

   	    	format(PlayerInfo[playerid][pAccent], 64, "%s", prefix);

			SendClientMessage(sn, COLOR_WHITE, "Your request was approved and your prefix has been updated.");

			DeletePVar(sn, "PendingPrefix");

			format(string, sizeof(string), "REQUEST: %s has approved %s's prefix (%s) change.", 
				GetPlayerForumName(playerid),
				GiveNameSpaceEx(PlayerInfo[sn][pUsername]),
				prefix);
			
			if(GetHelperCount() > 0)
			{
				SendHelperMessage(COLOR_LIGHTBLUE, string);
			}
			else
			{
				SendAdminMessage(COLOR_LIGHTBLUE, string);
			}
   	    }
	}
	return 1;
}

COMMAND:deny(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(playerid, "Helper") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new option[32], targetid;
	if(sscanf(params, "s[128]I(-1)", option, targetid)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /deny [forumname/name/prefix]");

	if(strcmp(option, "forumname", true) == 0)
   	{
   		if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

   		if(targetid == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /deny forumname [id]");
   		if(GetPVarInt(targetid, "PendingForumName") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player is not waiting for a forum name change.");

   	    new string[128];
   	    format(string, sizeof(string), "Your forum name change was denied by %s (ID %i).", 
   	    	GetPlayerForumName(playerid), 
   	    	playerid);
   	    SendClientMessage(targetid, COLOR_ERROR, string);

   	    DeletePVar(targetid, "PendingForumName");

   	    format(string, sizeof(string), "AdmCmd: %s has denied %s's forum name change.", 
			GetPlayerForumName(playerid),
			GiveNameSpaceEx(PlayerInfo[targetid][pUsername]));
		SendAdminMessage(COLOR_YELLOW, string);
   	}
   	else if(strcmp(option, "name", true) == 0)
   	{
   		if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

   		if(targetid == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /deny name [id]");
   	    if(GetPVarInt(targetid, "PendingChangeName") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player is not waiting for a name change.");

   	    new string[128];
   	    format(string, sizeof(string), "Your name change was denied by %s (ID %i).", 
   	    	GetPlayerForumName(playerid), 
   	    	playerid);
   	    SendClientMessage(targetid, COLOR_ERROR, string);

   	    DeletePVar(targetid, "PendingChangeName");

   	    format(string, sizeof(string), "AdmCmd: %s has denied %s's name change.", 
			GetPlayerForumName(playerid),
			GiveNameSpaceEx(PlayerInfo[targetid][pUsername]));
		SendAdminMessage(COLOR_YELLOW, string);
   	}
   	else if(strcmp(option, "prefix", true) == 0)
   	{
   		if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(playerid, "Helper") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

   		if(targetid == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /deny prefix [id]");
   	    if(GetPVarInt(targetid, "PendingPrefix") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player is not waiting for a prefix change.");

   	    new string[128];
   	    format(string, sizeof(string), "Your prefix change was denied by %s (ID %i).", 
   	    	GetPlayerForumName(playerid), 
   	    	playerid);
   	    SendClientMessage(targetid, COLOR_ERROR, string);

   	    new prefix[64];
   	    GetPVarString(targetid, "PendingPrefixString", prefix, sizeof(prefix));

   	    DeletePVar(targetid, "PendingPrefix");

   	    format(string, sizeof(string), "REQUEST: %s has denied %s's prefix (%s) change.", 
			GetPlayerForumName(playerid),
			GiveNameSpaceEx(PlayerInfo[targetid][pUsername]),
			prefix);
		
		if(GetHelperCount() > 0)
		{
			SendHelperMessage(COLOR_LIGHTBLUE, string);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTBLUE, string);
		}
   	}
	return 1;
}
//============================================//
ALTCOMMAND:sb->seatbelt;
COMMAND:seatbelt(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
    if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a seatbelt system.");
    if(IsHelmetCar(GetPlayerVehicleID(playerid)))  return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a seatbelt system.");
    switch(GetPVarInt(playerid, "Seatbelt"))
    {
        case 0:
        {
            GameTextForPlayer(playerid, "~w~Seatbelt ~g~On", 5000, 6);
            SetPVarInt(playerid, "Seatbelt", 1);
            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
        }
        case 1:
        {
            GameTextForPlayer(playerid, "~w~Seatbelt ~r~Off", 5000, 6);
            SetPVarInt(playerid, "Seatbelt", 0);
            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
        }
    }
	return 1;
}
//============================================//
COMMAND:helmet(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");

    if(GetPVarInt(playerid, "WearingHelmet") == 1)  // Removes helmet if its on without checking is person in car.
    {
        GameTextForPlayer(playerid, "~w~Helmet ~r~Off", 5000, 6);
        SetPVarInt(playerid, "Seatbelt", 0);
        SetPVarInt(playerid, "WearingHelmet", 0);
        if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_ITEM)) RemovePlayerAttachedObject(playerid,HOLDOBJECT_ITEM);

        return 1;
    }

    if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
    if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a helmet system.");
    if(!IsHelmetCar(GetPlayerVehicleID(playerid)))  return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a helmet system.");
    switch(GetPVarInt(playerid, "Seatbelt"))
    {
        case 0:
        {
            GameTextForPlayer(playerid, "~w~Helmet ~g~On", 5000, 6);
            SetPVarInt(playerid, "Seatbelt", 1);
            SetPVarInt(playerid, "WearingHelmet", 1);
            ShowPlayerDialogEx(playerid, 21, DIALOG_STYLE_LIST, "Helmets","Red White Flames Helmet\nDirtbike Helmet\nRed Helmet\nWhite Helmet\nPurple Helmet","Select", "");
        }
        case 1:
        {
            GameTextForPlayer(playerid, "~w~Helmet ~r~Off", 5000, 6);
            SetPVarInt(playerid, "Seatbelt", 0);
            SetPVarInt(playerid, "WearingHelmet", 0);
            if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_ITEM)) RemovePlayerAttachedObject(playerid,HOLDOBJECT_ITEM);
        }
    }
	return 1;
}
//============================================//
COMMAND:hood(playerid, params[])
{
	new type[128];
	if(sscanf(params, "s[128]", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hood [open/close]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
	    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_ERROR, "You must be on-foot.");
	    if(!PlayerToCar(playerid,1,4.0)) return SendClientMessage(playerid, COLOR_ERROR, "WARNING: You are not close to any vehicle.");
	    new carid = PlayerToCar(playerid,2,4.0);
	    if(IsNotAEngineCar(carid)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle dosent have an engine.");
	    if(IsHelmetCar(carid))  return SendClientMessage(playerid, COLOR_ERROR, "This vehicle dosent even have a hood system.");
	    //if(VehicleInfo[carid][vEngine] != 0) return SendClientMessage(playerid, COLOR_ERROR, "The vehicles engine must be off before performing this command.");
        if(strcmp(type, "open", true) == 0)
	    {
			new engine,lights,alarm,doors,bonnet,boot,objective;
            GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(carid,engine,lights,alarm,doors,1,boot,objective);
            ApplyAnimationEx(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
	    }
	    else if(strcmp(type, "close", true) == 0)
	    {
			new engine,lights,alarm,doors,bonnet,boot,objective;
            GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(carid,engine,lights,alarm,doors,0,boot,objective);
            ApplyAnimationEx(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hood [open/close]");
	    }
	}
	return 1;
}
//============================================//
COMMAND:setdonate(playerid, params[])
{
	new type, targetid, days;
	if(sscanf(params, "uiI(-1)", targetid, type, days)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setdonate [playerid] [level 0-5]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(type < 0 || type > 5) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 5.");
		if(GetPVarInt(playerid, "Admin") >= 6)
		{
		    if(IsPlayerConnected(targetid))
		    {
      		    SetPVarInt(targetid, "DonateRank", type);
      		    switch(type)
      		    {
      		        case 1: SetPVarInt(targetid, "Changes", 2); // Bronze
      		        case 2: SetPVarInt(targetid, "Changes", 3); // Silver
      		        case 3: // Gold
      		        {
      		            SetPVarInt(targetid, "CarTicket", 1);
      		            SetPVarInt(targetid, "Changes", 5);
      		        }
      		        case 4: // Premium
      		        {
      		            SetPVarInt(targetid, "CarTicket", 1);
      		            SetPVarInt(targetid, "Changes", 10);
      		        }
      		        //case 5: // Club
      		        //{
      		        //	if(days == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setdonate [playerid] [5] [days]");
      		        //	SetPVarInt(targetid, "MonthDon", type);
      		    	//	SetPVarInt(targetid, "MonthDonT", days);
      		        //}
      		    }
      		    SendClientMessage(playerid,COLOR_ERROR,"Player's Donate Rank & Perks has been given.");
      		    SendClientMessage(targetid,COLOR_ERROR,"You have received your Donation Rank and Perks.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setstat(playerid, params[])
{
	new type[128], targetid, amount, string[128], forall;
	if(sscanf(params, "us[128]iI(0)", targetid, type, amount, forall))
	{
	    SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setstat [playerid(name)] [stat code] [amount]");
	    SendClientMessage(playerid, COLOR_ERROR, "| ConnectTime, Addiction, Bank, HouseKey, BizKey, PayCheck |");
	    SendClientMessage(playerid, COLOR_ERROR, "| GunLic, DriveLic, MedLic, PhoneNum, DonateRank, Member |");
	    SendClientMessage(playerid, COLOR_ERROR, "| Rank, CarTicket, Changes, Kills, Deaths, MaskID |");
	    SendClientMessage(playerid, COLOR_ERROR, "| PayDay, RentKey, Job, DrugTime |");
	}
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 9)
		{
			format(string, sizeof(string),"AdmWarn: %s (%s) has set %s's (ID: %i) %s to %i", PlayerInfo[playerid][pName], AdminName(playerid), PlayerInfo[targetid][pName], targetid, type, amount);
			SendAdminMessage(COLOR_YELLOW, string);
			ADMLog(string);

		    if(strcmp(type, "Admin", true) == 0 || strcmp(type, "Helper", true) == 0 || strcmp(type, "Bot", true) == 0)
		    {
		        if(GetPVarInt(playerid, "Admin") < 10) return 1;
		    }

		    if(forall != 0)
		    {
		    	foreach(new i : Player)
		    	{
		    		if(i != playerid)
		    		{
		    			SetPVarInt(i, type, amount);
		    		}
		    	}
		    }
		    else
		    {
		    	SetPVarInt(targetid, type, amount);
				OnPlayerDataSave(targetid);
		    }
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gasprice(playerid, params[])
{
	new amount,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gasprice [equals the price of one liter]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 10)
		{
		    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has set the gas pump liter cost to %d.", sendername, amount);
      		SendAdminMessage(COLOR_YELLOW,string);
      		GasPrice = amount;
      		for(new h = 0; h < sizeof(GasStations); h++)
	  		{
	  		    format(string, sizeof(string),"Gas Pump\nLiter: %s", FormatMoney(GasPrice));
	            UpdateDynamic3DTextLabelText(GasPumpText[h], 0xFFFFFFFF, string);
	  		}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:tod(playerid, params[])
{
	new a1,a2,a3;
	if(sscanf(params, "iii", a1,a2,a3)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /tod [hour minute second]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 10)
		{
		    if(a1 < 0 || a1 > 24) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 24.");
		    if(a2 < 0 || a2 > 60) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 60.");
		    if(a3 < 0 || a3 > 60) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 60.");
		    GMHour=a1;
		    GMMin=a2;
		    GMSec=a3;
		    SetWorldTimeEx();
		    scm(playerid, -1, "Time changed!");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:awound(playerid, params[])
{
	new id1, id2;
	if(sscanf(params, "ii", id1, id2)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /awound [id] [0-1]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Admin") >= 10)
	    {
	        PlayerWound(playerid, id1, id2);
	    }
	}
	return 1;
}
//============================================//
COMMAND:atag(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    new size, font[25];
    if(sscanf(params, "is[25]", size, font)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /atag [fontsize] [font]");
	else
	{
	    if(GetPVarInt(playerid, "Admin") >= 10)
	    {
	        new Float:X, Float:Y, Float:Z, obj = 0;
		    GetPlayerPos(playerid, X, Y, Z);
		    obj = CreatePlayerObject(playerid, 19353, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		    SetPlayerObjectMaterialText(playerid, obj, "{FFFFFF}GRAFFITI STATIC OBJECT", 0, OBJECT_MATERIAL_SIZE_256x128,\
		    "Arial", 28, 0, 0xFFFF8200, 0xFF000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		    SetPVarInt(playerid, "FurnObject", obj);
		    SetPVarInt(playerid, "EditorMode", 6);
		    SetPVarInt(playerid, "Mute", 1);
		    SetPVarString(playerid, "TagFont", font);
		    SetPVarInt(playerid, "TagSize", size);
		    EditPlayerObject(playerid, obj);
		    SendClientMessage(playerid, COLOR_WHITE, "Place the tag on a wall of your choice, use the SPRINT key to navigate.");
	    }
	}
	return 1;
}

//============================================//
COMMAND:fill(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_ERROR, "You need to be in a vehicle to use this!");
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You need to be the driver of this vehicle to continue.");
    if(GetPVarInt(playerid, "RefillAM") > 0)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You are already refueling the vehicle!");
		return true;
	}
    if (IsAtGasStation(playerid))
    {
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] >= 99) return SendClientMessage(playerid, COLOR_WHITE, "Your gas tank is full!");
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vEngine] != 0) return SendClientMessage(playerid, COLOR_ERROR, "The vehicles engine must be off before performing this command.");
		new string[2000], amount, cost;
		amount = 100 - VehicleInfo[GetPlayerVehicleID(playerid)][vFuel];
		switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
		    case 400, 408, 413, 422, 440, 459, 470, 478, 482, 489, 495, 500, 505, 522, 531, 543, 552, 554, 579, 582, 605: cost = 1*3;
			case 414, 455, 456, 498, 499, 524, 578, 609: cost = 1*4;
			case 403, 443, 514, 515: cost = 1*5;
			default: cost = 1*2;
		}
		if(GetPVarInt(playerid, "DonateRank") >= 2) cost = 0;
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD) cost = 0;
		format(string, 2000, "Enter the amount of liters you would like to put in the vehicle.\n%s each liter.\nMaximum amount: %d liters.", FormatMoney(cost), amount);
        ShowPlayerDialogEx(playerid, 15, DIALOG_STYLE_INPUT, "Gas Station", string,"Enter", "Cancel");
	}
	else SendClientMessage(playerid, COLOR_ERROR, "You are not around any gas tanks.");
	return 1;
}
//============================================//
/*COMMAND:afkers(playerid, params[])
{
	new string[128];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1) {
	new online = 0, players = 0;
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "AFKTime") >= 5)
        {
		    if(GetPVarInt(i, "PlayerLogged") == 1)
			{
			    online++;
			}
	    }
	}
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "PlayerLogged") != 0)
		{
		    players++;
		}
	}
	format(string, sizeof(string), "(( There are %d/%d afkers online. ))", online, players);
	SendClientMessage(playerid, 0x8080FF96, string);
	} else {
	SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!"); }
	return 1;
}*/
//============================================//
COMMAND:hackers(playerid, params[])
{
	new string[128];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") >= 1) {
	foreach(new i : Player)
    {
        if(PlayerInfo[i][pHacker] > 0)
        {
			format(string, sizeof(string), "%s [ID: %d].", PlayerInfo[i][pUsername], i);
			SendClientMessage(playerid, COLOR_FADE, string);
        }
    }
	} else {
	SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!"); }
	return 1;
}
//============================================//
COMMAND:aidle(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME],string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
    {
        new found = 0;
        foreach(new i : Player)
        {
            if(PlayerInfo[i][pIdleTime] > 0)
            {
                format(sendername, sizeof(sendername), "%s", PlayerInfo[i][pUsername]);
      		    GiveNameSpace(sendername);
			    format(string, sizeof(string), "%s (ID: %i) - Idle for %i minutes.", sendername, i, PlayerInfo[i][pIdleTime]);
			 	SendClientMessage(playerid, COLOR_FADE, string);
			    found++;
            }
        }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:checkveh(playerid, params[])
{
	new targetid,string[128],giveplayer[MAX_PLAYER_NAME],Float:health;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /checkveh [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
			GetVehicleHealth(GetPlayerVehicleID(targetid),health);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "%s driving vehicleid: %d with Health: %.1f.", giveplayer, GetPlayerVehicleID(targetid), health);
	        SendClientMessage(playerid, COLOR_ERROR, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:checkhealth(playerid, params[])
{
	new targetid,string[128],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /checkhealth [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    new Float:shealth;
			GetPlayerHealth(targetid,shealth);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "%s Health is: %.1f.", giveplayer ,shealth);
	        SendClientMessage(playerid, COLOR_ERROR, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:checkarmour(playerid, params[])
{
	new targetid,string[128],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /checkarmour [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    new Float:shealth;
			GetPlayerArmourEx(targetid,shealth);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "%s Armour is: %.1f.", giveplayer ,shealth);
	        SendClientMessage(playerid, COLOR_ERROR, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:checkweapons(playerid, params[])
{
	new targetid,string[128],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /checkweapons [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    new sweapon, sammo, gunname[128];
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "%s has the following weapons:", giveplayer);
	        SendClientMessage(playerid, COLOR_ERROR, string);
	        for (new i=0; i<9; i++)
	        {
		        GetPlayerWeaponData(targetid, i, sweapon, sammo);
		        if(sweapon != 0)
		        {
		            GetWeaponName(sweapon, gunname, sizeof(gunname));
		            format(string, sizeof(string), "%d: %s (%d)", i, gunname, sammo);
		    	    SendClientMessage(playerid, COLOR_ERROR, string);
			    }
	        }
	        if(PlayerInfo[targetid][pPlayerWeapon] > 0 && PlayerInfo[targetid][pPlayerAmmo] <= 0)
		    {
		        GetWeaponName(PlayerInfo[targetid][pPlayerWeapon], gunname, sizeof(gunname));
		        format(string, sizeof(string), "%s (%d)", gunname, PlayerInfo[targetid][pPlayerAmmo]);
		    	SendClientMessage(playerid, COLOR_ERROR, string);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:a(playerid, params[])
{
	new text[128],string[256],sendername[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /a [Admin-Chat]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		new arank[128];
      		switch(GetPVarInt(playerid, "Admin"))
      		{
      		    case 1: arank = "Level 1 Moderator";
      		    case 2: arank = "Level 2 Admin";
      		    case 3: arank = "Level 3 Admin";
      		    case 4 .. 9: arank = "Senior Admin";
      		    case 10: arank = "Lead Admin";
      		    case 11: arank = "Lead Admin";
      		}
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
            format(string, sizeof(string), "*** %s [%i] %s *** %s", arank,  playerid, AdminName(playerid), text);
    	    SendAdminMessage(COLOR_LIME, string, 1);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}

COMMAND:mt(playerid, params[])
{
	new text[128],string[256],sendername[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /mt [Management-Chat]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		new arank[128];
      		switch(GetPVarInt(playerid, "Admin"))
      		{
      		    case 4 .. 9: arank = "Senior Admin";
      		    case 10: arank = "Lead Admin";
      		    case 11: arank = "Lead Admin";
      		}
      		//if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
            format(string, sizeof(string), "[MGMT] %s [%i] %s: %s", arank,  playerid, AdminName(playerid), text);
    	    SendManagementMessage(COLOR_LIGHTBLUE, string, 1);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}

COMMAND:toga(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	if(PlayerInfo[playerid][pTogAdminChat] == 0)
	{
		PlayerInfo[playerid][pTogAdminChat] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Admin chat has been toggled OFF.");
	}
	else
	{
		PlayerInfo[playerid][pTogAdminChat] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Admin chat has been toggled ON.");
	}
	return 1;
}
//============================================//
COMMAND:plantpresent(playerid, params[])
{
	new one;
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") >= 10)
	{
	    new Float:X, Float:Y, Float:Z, obj = 0;
	    new rand = random(5)+1;
	    switch(rand)
	    {
		    case 1: one=19054;
		    case 2: one=19055;
		    case 3: one=19056;
		    case 4: one=19057;
		    default: one=19058;
	    }
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, one, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		PlayerInfo[playerid][pFurnID]=one;
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 11);
		SetPVarInt(playerid, "Mute", 1);
		EditPlayerObject(playerid, obj);
		SendClientMessage(playerid, COLOR_WHITE, "Place the object in the position of your choice.");
	}
	return 1;
}
//============================================//
COMMAND:atrunk(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 9)
    {
        if(PlayerToCar(playerid, 1, 5.0))
        {
            new vehicleID = PlayerToCar(playerid, 2, 4.0), string[128], sendername[MAX_PLAYER_NAME];
            if(VehicleInfo[vehicleID][vID] == 0) return 1;
            if(VehicleInfo[vehicleID][vType] != VEHICLE_PERSONAL) return 1;
            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		    GiveNameSpace(sendername);
            switch(VehicleInfo[vehicleID][vTrunk])
		    {
		        case 0: {
		            VehicleInfo[vehicleID][vTrunk]=1;
		            format(string, sizeof(string), "* %s opens the %s's trunk.", sendername, PrintVehName(vehicleID));
		        }
		        case 1: {
		            VehicleInfo[vehicleID][vTrunk]=0;
		            format(string, sizeof(string), "* %s closes the %s's trunk.", sendername, PrintVehName(vehicleID));
		        }
		    }
		    ProxDetector(30.0, playerid, string, COLOR_PURPLE);
            VehicleTrunk(vehicleID, VehicleInfo[vehicleID][vTrunk]);
        }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:gmx(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 7) GameModeExit();
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:togtls(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 10)
    {
        switch(DoubleTLS)
        {
            case 0:
            {
                DoubleTLS=1;
                SendClientMessage(playerid, COLOR_ERROR, "DoubleTLS enabled!");
            }
            case 1:
            {
                DoubleTLS=0;
                SendClientMessage(playerid, COLOR_ERROR, "DoubleTLS disabled!");
            }
        }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
ALTCOMMAND:o->ooc;
COMMAND:ooc(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ooc [OOC-Chat]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (OOCChat == 0 && GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_WHITE, "OOC Chat has been disabled.");
   		format(sendername, sizeof(sendername), "%s", AdminName(playerid));
      	GiveNameSpace(sendername);
        format(string, sizeof(string), "OOC: %s: %s", sendername, text);
    	SendClientMessageToAll(0xB1C8FBAA, string);
	}
	return 1;
}
//============================================//
COMMAND:booc(playerid, params[])
{
	new text[128],string[256];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /booc [OOC-Chat]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Admin") >= 9)
	    {
            format(string, sizeof(string), "OOC: %s", text);
    	    SendClientMessageToAll(0xB1C8FBAA, string);
    	}
	}
	return 1;
}
//============================================//
COMMAND:noooc(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") >= 4)
	{
		switch(OOCChat)
		{
		    case 0:
			{
			    OOCChat=1;
			    SendClientMessageToAll(COLOR_WHITE, "OOC Chat has been enabled by Admin.");
			}
			case 1:
			{
			    OOCChat=0;
			    SendClientMessageToAll(COLOR_WHITE, "OOC Chat has been disabled by Admin.");
		    }
		}
	}
	else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
/*
COMMAND:bonus(playerid, params[])
{
	new targetid, amount, string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bonus [playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");

		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_RLS || GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE || GetPVarInt(playerid, "Member") == FACTION_LSG)
		{
	        if(amount < 0 || amount > 1000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 1000.");
			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
  		    format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
  		    GiveNameSpace(sendername);
  		    GiveNameSpace(giveplayer);
  		    format(string, sizeof(string), "%s's bonus paycheck value set to %s.", giveplayer, FormatMoney(amount));
  		    SCM(playerid, COLOR_WHITE, string);
  		    format(string, sizeof(string), "%s has set your bonus paycheck value to %s.", sendername, FormatMoney(amount));
  		    SCM(targetid, COLOR_WHITE, string);
  		    SetPVarInt(playerid, "Bonus", amount);
		}
      	else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
*/
//============================================//
COMMAND:slap(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /slap [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was slapped by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
			new Float:x,Float:y,Float:z,Float:health;
			GetPlayerHealth(targetid,health);
			GetPlayerPos(targetid,x,y,z);
      		SetPlayerPosEx(targetid,x,y,z+5);
      		SetPlayerHealthEx(targetid,health-15.0);
      		GameTextForPlayer(targetid, "~r~Slapped", 5000, 3);
      		PlayerPlaySound(targetid,1190, 0.0, 0.0, 0.0);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:forbid(playerid, params[])
{
	new targetid,hr,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, hr)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /forbid [playerid] [hours]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was forbidden by %s for %d hours.", giveplayer, sendername, hr);
      		SendAdminMessage(COLOR_YELLOW,string);
      		SetPVarInt(targetid, "Forbid", hr);
      		format(string, sizeof(string), "You have been forbidden to use weapons for %d hours.", hr);
      		scm(targetid, COLOR_ERROR,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:unforbid(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unforbid [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was unforbidden by %s", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		SetPVarInt(targetid, "Forbid", 0);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:pk(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") > 0)
	{
		return SendClientMessage(playerid, COLOR_ERROR, "Don't use this, twat.");
	}
	else
	{
		return SendClientMessage(playerid, COLOR_ERROR, "No access.");
	}

/*	new targetid, reason[128];
	if(sscanf(params, "us[128]", targetid, reason)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /pk [playerid] [reason]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
			new sendername[MAX_PLAYER_NAME + 1];
			new giveplayer[MAX_PLAYER_NAME + 1];

   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);

      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		
      		new string[256];
      		format(string, sizeof(string), "AdmCmd: %s was Player Killed by Admin %s. (Reason: %s)", giveplayer, sendername, reason);
      		SendAdminMessage(COLOR_YELLOW,string);
      		
      		SendClientMessage(targetid, COLOR_WHITE, "You have been Player Killed.");
      		SendClientMessage(targetid, COLOR_WHITE, "This character will not have any memory of their previous character's expierences.");
      		SendClientMessage(targetid, COLOR_WHITE, "Your on-hand money, half of your bank money, non-donator vehicles and properties have been removed.");

      		GivePlayerMoneyEx(targetid, -GetPlayerMoneyEx(targetid));
      		SetPVarInt(targetid, "Bank", GetPVarInt(targetid, "Bank") / 2);

      		new query[512];
      		mysql_format(handlesql, query, sizeof(query), "DELETE FROM vehicles WHERE Owner='%e' AND Donate=0", PlayerInfo[targetid][pUsername]);
			mysql_pquery(handlesql, query);

			mysql_format(handlesql, query, sizeof(query), "UPDATE houses SET Owned=0, Owner='None' WHERE Owner='%e'", PlayerInfo[targetid][pUsername]);
			mysql_pquery(handlesql, query);

			foreach(new i : HouseIterator)
			{
				if(strlen(HouseInfo[i][hOwner]) != 0 && strcmp(PlayerInfo[targetid][pUsername], HouseInfo[i][hOwner]) == 0)
				{
					format(HouseInfo[i][hOwner], MAX_PLAYER_NAME + 1, "None");
					HouseInfo[i][hOwned] = 0;
					SetPVarInt(playerid, "HouseKey", 0);
				}
			}

			mysql_format(handlesql, query, sizeof(query), "UPDATE businesses SET Owned=0, Owner='None' WHERE Owner='%e'", PlayerInfo[targetid][pUsername]);
			mysql_pquery(handlesql, query);

			foreach(new i : BizIterator)
			{
				if(strlen(BizInfo[i][Owner]) != 0 && strcmp(PlayerInfo[targetid][pUsername], BizInfo[i][Owner]) == 0)
				{
					format(BizInfo[i][Owner], MAX_PLAYER_NAME + 1, "None");
					BizInfo[i][Owned] = 0;
					SetPVarInt(playerid, "BizKey", 0);
				}
			}

      		for(new i = 0; i < PlayerSpawnedVehicles(targetid); i++)
    		{
    			if(VehicleInfo[GetSpawnedVehicle(targetid, i)][vDonate] == 0)
    			{
    				DespawnVehicle(GetSpawnedVehicle(targetid, i));
    			}
    		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
*/
}
//============================================//
COMMAND:slapcar(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /slapcar [vehicleid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s slapped vehicleid %d.", sendername, targetid);
      		SendAdminMessage(COLOR_YELLOW,string);
			new Float:x,Float:y,Float:z;
			GetVehiclePos(targetid,x,y,z);
      		SetVehiclePosEx(targetid,x,y,z+5);
      		PlayerPlaySound(targetid,1190, 0.0, 0.0, 0.0);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:getcar(playerid, params[])
{
	new targetid;
	if(sscanf(params, "i", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /getcar [vehicleid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
			new Float:x,Float:y,Float:z, Float:px,Float:py,Float:pz;
			GetVehiclePos(targetid, x, y, z), GetPlayerPos(playerid, px, py, pz);
			GetXYInFrontOfPlayer(playerid, px, py, 3.0);
			SetVehiclePosEx(targetid, px, py, pz);
			LinkVehicleToInteriorEx(targetid, GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));

			VehicleInfo[GetPlayerVehicleID(playerid)][vInterior] = GetPlayerInterior(playerid);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:explode(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /explode [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was exploded by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
			new Float:x,Float:y,Float:z;
			GetPlayerPos(targetid,x,y,z);
			CreateExplosion(x, y, z, 2, 10.0);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:weaponid(playerid, params[])
{
	new maskid,string[128];
	if(sscanf(params, "i", maskid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /weaponid [Weapon-ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    SendClientMessage(playerid, COLOR_ERROR, "People with Weapon-ID:");
		    foreach(new i : Player)
	        {
	            if(GetPlayerWeapon(i) == maskid)
	            {
	                format(string, sizeof(string), "** ID: %d ** %s", i, PlayerInfo[i][pName]);
				    SendClientMessage(playerid, COLOR_ERROR, string);
	            }
	        }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:skinid(playerid, params[])
{
	new maskid,string[128];
	if(sscanf(params, "i", maskid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /skinid [Skin-ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    SendClientMessage(playerid, COLOR_ERROR, "People with Skin-ID:");
		    foreach(new i : Player)
	        {
	            if(GetPlayerSkin(i) == maskid)
	            {
	                format(string, sizeof(string), "** ID: %d ** %s", i, PlayerInfo[i][pName]);
				    SendClientMessage(playerid, COLOR_ERROR, string);
	            }
	        }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:sendtols(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sendtols [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if (GetPVarInt(playerid, "Jailed") != 0) return true;
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
		    SetPlayerPosEx(targetid, 1529.6,-1691.2,13.3);
			SetPlayerInterior(targetid,0);
			SetPlayerVirtualWorld(targetid,0);
		    SendClientMessage(targetid, 0xFF000000, "You have been sent to Los Santos!.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:aflist(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /aflist [factionid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Faction Members Online:");
            foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "PlayerLogged") == 1 && GetPVarInt(i, "Member") == id)
	            {
	                format(sendername, sizeof(sendername), "%s", PlayerInfo[i][pUsername]);
      		        GiveNameSpace(sendername);
                    format(string, sizeof(string), "%s, Rank: %d.", sendername, GetPVarInt(i, "Rank"));
                    SendClientMessage(playerid, COLOR_WHITE, string);
	            }
	        }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:forceincar(playerid, params[])
{
	new targetid,vehicleid,seatid;
	if(sscanf(params, "uii", targetid, vehicleid, seatid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /forceincar [playerid] [vehicleid] [seatid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 4) PutPlayerInVehicleEx(targetid, vehicleid, seatid);
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:freeze(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /freeze [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was frozen by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		TogglePlayerControllableEx(targetid,false);
      		GameTextForPlayer(targetid, "~w~Frozen", 5000, 3);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:unfreeze(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unfreeze [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was Un-frozen by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		TogglePlayerControllableEx(targetid,true);
      		GameTextForPlayer(targetid, "~w~Un-Frozen", 5000, 3);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:netstats(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new targetid, giveplayer[64];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /netstats [playerid]");
	else
	{
		if(GetPVarInt(playerid, "Mute") == 1) return nal(playerid);
		if(GetPVarInt(playerid, "PlayerLogged") == 1)
		{
	        new stats[400+1];
	        format(giveplayer, sizeof(giveplayer), "{FFA500}%s's netstats", PlayerInfo[targetid][pUsername]);
	        GiveNameSpace(giveplayer);
	        GetPlayerNetworkStats(targetid, stats, sizeof(stats));
	        ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, giveplayer, stats, "Close", "");
	    }
	}
    return 1;
}
//============================================//
COMMAND:resetplayer(playerid, params[])
{
	new targetid, string[128], sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /resetplayer [playerid]");
	else
	{
		if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was reset by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		GameTextForPlayer(targetid, "~w~RESET", 5000, 3);
      		new skin = GetPlayerSkin(targetid);
			new pint = GetPlayerInterior(targetid);
			new pvir = GetPlayerVirtualWorld(targetid);
      		GetPlayerPos(targetid, X, Y, Z);
            SetPlayerPos(targetid, X, Y, Z);
            SetPlayerInterior(targetid, pint);
            SetPlayerVirtualWorld(targetid, pvir);
            SetPlayerSkin(targetid, skin);
   			SetPVarInt(targetid, "Mute", 0);
			SetPVarInt(targetid, "Drag", INVALID_MAXPL);
    	    SetPVarInt(targetid, "Control", 0);
            TogglePlayerSpectating(targetid, false);
            TogglePlayerControllableEx(targetid, true);
		}
	}
	return 1;
}
//============================================//
COMMAND:mute(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /mute [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was silenced by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		SetPVarInt(targetid, "Mute", 1);
      		GameTextForPlayer(targetid, "~w~Silenced", 5000, 3);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:unmute(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unmute [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was un-silenced by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		SetPVarInt(targetid, "Mute", 0);
      		GameTextForPlayer(targetid, "~w~Un-Silenced", 5000, 3);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:getip(playerid, params[])
{
	new targetid,string[128],giveplayer[MAX_PLAYER_NAME],playersip[128];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /getip [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "RegTeam") > 0 || GetPVarInt(playerid, "Helper") > 0)
		{
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(giveplayer);
      		GetPlayerIp(targetid,playersip,sizeof(playersip));

            format(string, sizeof(string), "Player: %s - ID: %d - IP: %s",giveplayer,targetid,playersip);
			SendClientMessage(playerid,COLOR_ERROR,string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
ALTCOMMAND:al->alist;
COMMAND:alist(playerid, params[])
{
    new admtext[128],sendername[MAX_PLAYER_NAME],string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_WHITE, "You do not have access to this command.");
    SendClientMessage(playerid, COLOR_WHITE, "__________________________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "                         Admins List :");
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Admin") >= 1)
        {
            switch(GetPVarInt(i, "Admin"))
            {
                case 11: admtext = "Hidden Lead";
                case 10: admtext = "Lead Administrator";
                case 4 .. 9: admtext = "Senior Administrator";
                case 3: admtext = "Level 3 Administrator";
                case 2: admtext = "Level 2 Administrator";
                case 1: admtext = "Level 1 Moderator";
            }
            format(sendername, sizeof(sendername), "%s", PlayerInfo[i][pUsername]);
      		GiveNameSpace(sendername);
			switch(GetPVarInt(i, "AHide"))
			{
			    case 0:
			    {
			        format(string, sizeof(string), "%s: %s [ID: %d]", admtext, AdminName(i), i);
		     	    SendClientMessage(playerid, COLOR_FADE, string);
			    }
			    case 1:
			    {
			        format(string, sizeof(string), "%s: %s [ID: %d] (Hidden)", admtext, AdminName(i), i);
		     	    SendClientMessage(playerid, COLOR_ERROR, string);
			    }
			}
        }
    }
    SendClientMessage(playerid, COLOR_WHITE, "__________________________________________________");
	return 1;
}
//============================================//
COMMAND:ahide(playerid, params[])
{
	new aimid, string[128];
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ahide [0-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Admin") <= 8) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	    SetPVarInt(playerid, "AHide", aimid);
	    format(string, 128, "Hidden Admin set to %d.", aimid);
	    scm(playerid, -1, string);
	}
	
	return 1;
}
//============================================//
COMMAND:showpms(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");

	new option[32], target;
	new forum[64], admwarn[256];
	if(sscanf(params, "s[32]R(-1)", option, target)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /showpms [player/all/off]");

	GetPVarString(playerid, "ForumName", forum, sizeof(forum));

	if(!strcmp(option, "all"))
	{
		if(GetPVarInt(playerid, "SeePM") != INVALID_MAXPL)
		{
			SetPVarInt(playerid, "SeePM", INVALID_MAXPL);
			SendClientMessage(playerid, COLOR_ERROR, "Player's private messages will no longer appear.");
		}

		if(GetPVarInt(playerid, "ShowPMs") == 0)
		{
			SetPVarInt(playerid, "ShowPMs", 1);
			SendClientMessage(playerid ,COLOR_ERROR, "All private messages will now appear.");
			if(GetPVarInt(playerid, "Admin") < 9)
			{
				format(admwarn, sizeof(admwarn), "%s [%d] is now watching everyone's private messages.", forum, playerid);
				SendAdminMessage(COLOR_ORANGE, admwarn);
			}
		}
		else
		{
			SetPVarInt(playerid, "ShowPMs", 0);
			SendClientMessage(playerid, COLOR_ERROR, "All private messages will no longer appear.");
			if(GetPVarInt(playerid, "Admin") < 9)
			{
				format(admwarn, sizeof(admwarn), "%s [%d] has stopped watching everyone's private messages.", forum, playerid);
				SendAdminMessage(COLOR_ORANGE, admwarn);
			}
		}
	}
	else if(!strcmp(option, "player"))
	{
		if(target == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /showpms [player] [playerid]");
		if(!IsPlayerConnected(target)) return SendClientMessage(playerid, COLOR_ERROR, "This player is not connected.");
		
		if(GetPVarInt(playerid, "ShowPMs") == 1)
		{
			SetPVarInt(playerid, "ShowPMs", 0);
			SendClientMessage(playerid, COLOR_ERROR, "All private messages will no longer appear.");
			if(GetPVarInt(playerid, "Admin") < 9)
			{
				format(admwarn, sizeof(admwarn), "%s [%d] has stopped watching the private messages of %s (%d).", forum, playerid, PlayerInfo[target][pName], target);
				SendAdminMessage(COLOR_ORANGE, admwarn);
			}
		}

		if(GetPVarInt(playerid, "SeePM") == INVALID_MAXPL)
		{
			new string[128];
			SetPVarInt(playerid, "SeePM", target);
			format(string, 128, "You will now see %s's private messages.", PlayerInfo[target][pName]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			if(GetPVarInt(playerid, "Admin") < 9)
			{
				format(admwarn, sizeof(admwarn), "%s [%d] is now watching the private messages of %s (%d).", forum, playerid, PlayerInfo[target][pName], target);
				SendAdminMessage(COLOR_ORANGE, admwarn);
			}
		}
	}
	else if(!strcmp(option, "off"))
	{
		SetPVarInt(playerid, "ShowPMs", 0);
		SetPVarInt(playerid, "SeePM", INVALID_MAXPL);
		SendClientMessage(playerid, COLOR_ERROR, "Private messages will no longer appear.");
		if(GetPVarInt(playerid, "Admin") < 9)
		{
			format(admwarn, sizeof(admwarn), "%s [%d] has stopped watching private messages.", forum, playerid);
			SendAdminMessage(COLOR_ORANGE, admwarn);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /showpms [player/all/off]");
	}
	return 1;
}
//============================================//
COMMAND:admins(playerid, params[])
{
    new string[128], admtext[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    new found = GetAdminCount(3);
    if(found == 0) return SendClientMessage(playerid, 0x8080FF96, "(( There are no admins online. ))");
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
        SendClientMessage(playerid, COLOR_WHITE, "                         Admins Online:");
        foreach(new i : Player)
        {
            if(GetPVarInt(i, "Admin") >= 1)
            {
                switch(GetPVarInt(i, "Admin"))
                {
                    case 11: admtext = "Hidden Lead";
                    case 10: admtext = "Lead Administrator";
                    case 4 .. 9: admtext = "Senior Administrator";
                    case 3: admtext = "Level 3 Administrator";
                    case 2: admtext = "Level 2 Administrator";
                    case 1: admtext = "Level 1 Moderator";
                } // || GetPVarInt(i, "AFKTime") > 300
			    format(string, sizeof(string), "%s: %s", admtext, AdminName(i));
			    if(GetPVarInt(i, "AHide") > 0) { string="Hidden Admin"; }
		        if(GetPVarInt(i, "AHide") != 2 && GetPVarInt(i, "AFKTime") < 300) { SendClientMessage(playerid, COLOR_FADE, string); }
            }
        }
        SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
	    SendClientMessage(playerid, 0x8080FF96, "Type (/ra) for any administrative assistance and (/report) to report rulebreakers!");
	}
	return 1;
}
//============================================//
COMMAND:ara(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ara [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "ReqAdmin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player's request time has dropped or he never requested!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "AdmCmd: %s has accepted %s's admin request.", AdminName(playerid), giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		format(string, sizeof(string), "Admin %s has accepted your request.", AdminName(playerid));
      		SendClientMessage(targetid,COLOR_GREEN,string);
      		SetPVarInt(targetid, "ReqAdmin", 0);
      		SetPVarInt(playerid, "sa_assists", GetPVarInt(playerid, "sa_assists") + 1);
      		ra = 0;
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
ALTCOMMAND:ra->requestadmin;
COMMAND:requestadmin(playerid, params[])
{
	if(ra > 0) return SendClientMessage(playerid, COLOR_ERROR, "There is already an admin request pending.");

    new sendername[MAX_PLAYER_NAME], string[256], req[128];
    if(sscanf(params, "s[128]", req)) return usage(playerid, "USAGE: /ra [Help Request]");
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "ReqAdmin") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "Please wait a minute before sumbitting another admin request.");
    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
    GiveNameSpace(sendername);
	format(string, 256, "%s [%d] is requesting admin assistance, reason: %s.", sendername, playerid, req);
	SendAdminMessage(0xFF0000FF,string);
	SendClientMessage(playerid,COLOR_GREEN,"Your request has been sent to all the online Admins.");
	SetPVarInt(playerid, "ReqAdmin", GetCount()+60000);
	ra += 30;
	return 1;
}
//============================================//
ALTCOMMAND:tra->trashrequestadmin;
COMMAND:trashrequestadmin(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /trashrequestadmin [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(targetid, "ReqAdmin") <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This player's admin request time has dropped or he never requested assistance.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "AHide") == 1 || GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has trashed %s's admin request.", AdminName(playerid), giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		format(string, sizeof(string), "You trashed %s's report.", giveplayer);
      		SendClientMessage(playerid,COLOR_GREEN,string);
      		format(string, sizeof(string), "Admin %s has trashed your admin request.", AdminName(playerid));
      		SendClientMessage(targetid,COLOR_GREEN,string);
      		ra = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
ALTCOMMAND:ar->acceptreport;
COMMAND:acceptreport(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /acceptreport [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "Reported") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player's report time has dropped or he never reported.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "AHide") == 1 || GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has accepted %s's report.", AdminName(playerid), giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		format(string, sizeof(string), "Admin %s has accepted your report.", AdminName(playerid));
      		SendClientMessage(targetid,COLOR_GREEN,string);
      		SetPVarInt(targetid, "Reported", 0);
      		SetPVarInt(playerid, "sa_reports", GetPVarInt(playerid, "sa_reports") + 1);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
ALTCOMMAND:tr->trashreport;
COMMAND:trashreport(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /trashreport [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "Reported") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player's report time has dropped or he never reported.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "AHide") == 1 || GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has trashed %s's report.", AdminName(playerid), giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		format(string, sizeof(string), "You trashed %s's report.", giveplayer);
      		SendClientMessage(playerid,COLOR_GREEN,string);
      		format(string, sizeof(string), "Admin %s has trashed your report.", AdminName(playerid));
      		SendClientMessage(targetid,COLOR_GREEN,string);
      		SetPVarInt(targetid, "Reported", 0);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:mreport(playerid, params[])
{
	new text[128],targetid,string[256],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "is[128]", targetid, text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /mreport [maskid] [reason]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Reported") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You have recently reported.");
	    new findid = 500;
	    foreach(new i : Player)
	    {
	        if(GetPVarInt(i, "MaskID") == targetid)
	        {
	            findid=i;
	        }
	    }
	    if(findid == playerid) return SendClientMessage(playerid,COLOR_WHITE,"You can't report yourself.");
	    if(findid == 500) return SendClientMessage(playerid,COLOR_WHITE,"There are no one with that mask-id online.");
   		format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[findid][pUsername]);
      	GiveNameSpace(sendername);
      	GiveNameSpace(giveplayer);
      	format(string, sizeof(string), "REPORT: %s [ID:%d] has reported %s [ID:%d].", sendername, playerid, giveplayer, findid);
		SendAdminMessage(0xE19898AA,string);
		format(string, sizeof(string), "REPORT: Reason: %s.", text);
		SendAdminMessage(0xE19898AA,string);
		format(string, sizeof(string), "REPORT: Use /acceptreport %d or /trashreport %d for this report.", playerid, playerid);
		SendAdminMessage(0xE19898AA,string);
		SendClientMessage(playerid,COLOR_GREEN,"Your report has been sent to all the online Admins.");
		SetPVarInt(playerid, "Reported", GetCount()+120000);

	}
	return 1;
}
//============================================//
COMMAND:report(playerid, params[])
{
	new text[128],targetid,string[256],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /report [playerid] [reason]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot do this to yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(playerid, "Reported") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You have recently reported.");
   		format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      	GiveNameSpace(sendername);
      	GiveNameSpace(giveplayer);
      	format(string, sizeof(string), "REPORT: %s [ID:%d] has reported %s [ID:%d].", sendername, playerid, giveplayer, targetid);
		SendAdminMessage(0xE19898AA,string);
		format(string, sizeof(string), "REPORT: Reason: %s.", text);
		SendAdminMessage(0xE19898AA,string);
		SendClientMessage(playerid,COLOR_GREEN,"Your report has been sent to all online Administrators.");
		SetPVarInt(playerid, "Reported", GetCount()+120000);

	}
	return 1;
}
//============================================//
COMMAND:skick(playerid, params[])
{
	new text[128],targetid,string[256],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /skick [playerid] [reason]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot do this to yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    //if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if(GetPVarInt(playerid, "Admin") <= 4 && GetPVarInt(targetid, "Admin") >= 1 && GetPVarInt(targetid, "Admin") <= 10) return SendClientMessage(playerid, COLOR_ERROR, "You can't kick admins.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was kicked by Admin %s. (Reason: %s)", giveplayer, AdminName(playerid), text);
			SendAdminMessage(COLOR_YELLOW, string);
			format(string, sizeof(string), "You were silent-kicked. (Reason: %s)", text);
			SendClientMessage(targetid, COLOR_PUBLIC_ADMIN, string);
			SetPVarInt(targetid, "Kicks", GetPVarInt(targetid, "Kicks")+1);
			new query[516];
			new year,month,day, datum[64];
			getdate(year, month, day);
			format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
			if(strfind(text, "afk", true) != -1)
			{
				mysql_format(handlesql, query, sizeof(query),"INSERT INTO `logs_kicks`(`Name`, `Admin`, `Reason`, `Date`) VALUES ('%e','%e','%e','%e')", giveplayer, AdminName(playerid), text, datum);
			}
			else
			{
			    mysql_format(handlesql, query, sizeof(query),"INSERT INTO `logs_kicks`(`Name`, `Admin`, `Reason`, `Date`, `afk`) VALUES ('%e','%e','%e','%e', 1)", giveplayer, AdminName(playerid), text, datum);
			}
			
			mysql_pquery(handlesql, query);
			Kick(targetid);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:disarm(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /disarm [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was disarmed by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_YELLOW,string);
      		ResetPlayerWeaponsEx(targetid);
      		ResetPlayerWeapons(targetid);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}//============================================//
COMMAND:clear(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /clear [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has cleared %s's inventory from weapons and drugs.", sendername, giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		
      		for(new i = 0; i < MAX_INV_SLOTS; i++)
			{
				if(PlayerInfo[targetid][pInvItem][i] >= 1 && PlayerInfo[targetid][pInvItem][i] <= 128) // Remove weapons and ammo
				{
					PlayerInfo[targetid][pInvItem][i] = 0;
					PlayerInfo[targetid][pInvQ][i] = 0;
					PlayerInfo[targetid][pInvEx][i] = 0;
					PlayerInfo[targetid][pInvS][i] = 0;
				}

				if(PlayerInfo[targetid][pInvItem][i] >= 500 && PlayerInfo[targetid][pInvItem][i] <= 507) // Remove drugs
				{
					PlayerInfo[targetid][pInvItem][i] = 0;
					PlayerInfo[targetid][pInvQ][i] = 0;
					PlayerInfo[targetid][pInvEx][i] = 0;
					PlayerInfo[targetid][pInvS][i] = 0;
				}
			}

			FixInv(targetid);
			LoadHolsters(targetid);
			OnPlayerDataSave(targetid);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:clearall(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /clear [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has cleared %s's inventory.", sendername, giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		
      		for(new i = 0; i < MAX_INV_SLOTS; i++)
			{
				PlayerInfo[targetid][pInvItem][i] = 0;
				PlayerInfo[targetid][pInvQ][i] = 0;
				PlayerInfo[targetid][pInvEx][i] = 0;
				PlayerInfo[targetid][pInvS][i] = 0;
			}

			FixInv(targetid);
			LoadHolsters(targetid);
			OnPlayerDataSave(targetid);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:vehicleclear(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /vehicleclear [vehicleid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		format(string, sizeof(string), "AdmCmd: %s cleared vehicle %d's inventory.", sendername, id);
      		SendAdminMessage(COLOR_YELLOW,string);
      		for(new i = 0; i < MAX_VEH_SLOTS; i++)
      		{
      			VehicleInfo[id][vInvID][i]=0;
				VehicleInfo[id][vInvQ][i]=0;
				VehicleInfo[id][vInvE][i]=0;
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:houseclear(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseclear [houseid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		format(string, sizeof(string), "AdmCmd: %s cleared house %d's inventory.", sendername, id);
      		SendAdminMessage(COLOR_YELLOW,string);
      		for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
      		{
      			HouseInfo[id][hInvID][i]=0;
				HouseInfo[id][hInvQ][i]=0;
				HouseInfo[id][hInvE][i]=0;
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:bizclear(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizclear [businessid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s cleared business %d's inventory.", sendername, id);
      		SendAdminMessage(COLOR_YELLOW,string);
      		for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
      		{
      			BizInfo[id][InvID][i]=0;
				BizInfo[id][InvQ][i]=0;
				BizInfo[id][InvE][i]=0;
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:bizclearfurniture(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizclearfurniture [businessid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s cleared business %d's furniture.", sendername, id);
      		SendAdminMessage(COLOR_YELLOW,string);
      		RemoveBizObjects(id);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:houseclearfurniture(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseclearfurniture [houseid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		format(string, sizeof(string), "AdmCmd: %s cleared house %d's furniture.", sendername, id);
      		SendAdminMessage(COLOR_YELLOW,string);
      		RemoveHouseObjects(id);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:kick(playerid, params[])
{
	new text[128],targetid,string[256],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /kick [playerid] [reason]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "AHide") == 1 || GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was kicked by Admin %s. (Reason: %s)", giveplayer, AdminName(playerid), text);
			SendClientMessageToAll(COLOR_PUBLIC_ADMIN, string);
			SetPVarInt(targetid, "Kicks", GetPVarInt(targetid, "Kicks")+1);
			new query[516];
			new year,month,day, datum[64];
			getdate(year, month, day);
			format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
			if(strfind(text, "afk", true) != -1)
			{
				mysql_format(handlesql, query, sizeof(query),"INSERT INTO `logs_kicks`(`Name`, `Admin`, `Reason`, `Date`) VALUES ('%e','%e','%e','%e')", giveplayer, AdminName(playerid), text, datum);
			}
			else
			{
			    mysql_format(handlesql, query, sizeof(query),"INSERT INTO `logs_kicks`(`Name`, `Admin`, `Reason`, `Date`, `afk`) VALUES ('%e','%e','%e','%e', 1)", giveplayer, AdminName(playerid), text, datum);
			}
			
			mysql_pquery(handlesql, query);
			Kick(targetid);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:check(playerid, params[])
{
	new targetid, string[128];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /check [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
			if(GetPVarInt(playerid, "Admin") >= 1)
			{
				format(string, sizeof(string), "Player has been idle for %d minutes and tabbed for %d seconds.", PlayerInfo[targetid][pIdleTime], GetPVarInt(targetid, "AFKTime"));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
		    switch(GetPVarInt(targetid, "Jailed"))
			{
			    case 1:
			    {
			        format(string, sizeof(string), "AJAIL: %d Seconds", GetPVarInt(targetid, "JailTime"));
	                SendClientMessage(playerid,COLOR_ERROR,string);
			    }
			    case 3:
			    {
			        format(string, sizeof(string), "COUNTY JAIL: %d Seconds", GetPVarInt(targetid, "JailTime"));
	                SendClientMessage(playerid,COLOR_ERROR,string);
			    }
			}
			PrintStats(targetid, playerid);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:setint(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setint [playerid] [interior]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 1000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 1000.");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPlayerInterior(targetid,type);
      		format(string, sizeof(string),"Admin/Helper %s has set your interior to %d.", sendername, type);
      		SendClientMessage(targetid,COLOR_ERROR,string);
      		format(string, sizeof(string),"You have set %s's interior to %d.", giveplayer, type);
      		SendClientMessage(playerid,COLOR_ERROR,string);
      		if(GetPVarInt(playerid, "Helper") > 0)
      		{
      		    format(string, sizeof(string),"HelpCmd: Helper %s has set %s's interior to %d", sendername, giveplayer, type);
      		    SendAdminMessage(COLOR_YELLOW,string);
      		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setvw(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setvw [playerid] [world]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 10000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 10000.");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPlayerVirtualWorld(targetid,type);
      		format(string, sizeof(string),"Admin/Helper %s has set your world to %d.", sendername, type);
      		SendClientMessage(targetid,COLOR_ERROR,string);
      		format(string, sizeof(string),"You have set %s's world to %d", giveplayer, type);
      		SendClientMessage(playerid,COLOR_ERROR,string);
      		if(GetPVarInt(playerid, "Helper") > 0)
      		{
      		    format(string, sizeof(string),"HelpCmd: Helper %s has set %s's world to %d", sendername, giveplayer, type);
      		    SendAdminMessage(COLOR_YELLOW,string);
      		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setskin(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setskin [playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(playerid, "Admin") == 0 && IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if(type < 0 || type > 311) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 311.");//////////////////
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
		    if(GetPVarInt(playerid, "Admin") < 1 && GetPVarInt(targetid, "Member") != FACTION_LSPD && GetPVarInt(targetid, "Member") != FACTION_LSFD && GetPVarInt(targetid, "Member") != FACTION_LSG) return error(playerid, "Helpers can only change the skins of LSPD, LSFD and LSG members.");
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPlayerSkinEx(targetid, type);
      		SetPVarInt(targetid, "Model", type);
      		format(string, sizeof(string),"%s has set your skin to %d.", sendername, type);
      		SendClientMessage(targetid,COLOR_ERROR,string);
      		format(string, sizeof(string),"You set %s's skin to %d.", giveplayer, type);
      		SendClientMessage(playerid,COLOR_ERROR,string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:makeleader(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /makeleader [playerid] [factionid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(playerid, "Admin") == 0 && IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if(type < 1 || type > 299) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1 or above 299.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPVarInt(targetid, "Member", type);
      		SetPVarInt(targetid, "Frights", 1);

      		new amount = 0;
      		for(new i = 1; i < MAX_FACTION_RANKS; i++)
	    	{
				if(strlen(FactionRankInfo[type][i][fRank]) >= 2)
				{
					amount++;
				}
	    	}

      		SetPVarInt(targetid, "Rank", amount);
      		format(string, sizeof(string),"%s has set you as the leader of %s.", sendername, FactionInfo[type][fName]);
      		SendClientMessage(targetid,COLOR_ERROR,string);
      		format(string, sizeof(string),"You set %s as the leader of %s.", giveplayer, FactionInfo[type][fName]);
      		SendClientMessage(playerid,COLOR_ERROR,string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:makefrank(playerid, params[])
{
	new targetid,type,rank,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "uii", targetid, type, rank)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /makefrank [playerid] [factionid] [rank]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(playerid, "Admin") == 0 && IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if(type < 1 || type > 299) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1 or above 299.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPVarInt(targetid, "Member", type);
      		//SetPVarInt(targetid, "Frights", 1);
      		SetPVarInt(targetid, "Rank", rank);
      		format(string, sizeof(string),"%s has set you as %s in %s.", sendername, FactionRankInfo[type][rank][fRank], FactionInfo[type][fName]);
      		SendClientMessage(targetid,COLOR_ERROR,string);
      		format(string, sizeof(string),"You set %s as %s in %s.", giveplayer, FactionRankInfo[type][rank][fRank], FactionInfo[type][fName]);
      		SendClientMessage(playerid,COLOR_ERROR,string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:goto(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /goto [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
			if(GetPVarInt(playerid, "Helper") >= 1 && GetPVarInt(playerid, "Admin") == 0)
			{
				if(GetPVarInt(playerid, "HelperDuty") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be on helper-duty to use this command.");
			}
			new Float:x,Float:y,Float:z;
			GetPlayerPos(targetid,x,y,z);
			if(IsPlayerInAnyVehicle(playerid))
		    {
                SetVehiclePosEx(GetPlayerVehicleID(playerid),x,y+4,z);
      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));
      		    SetPlayerInterior(playerid,GetPlayerInterior(targetid));
      		    LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid),GetPlayerInterior(targetid));
      		    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(targetid));
	    	}
		    else
		    {
		        SetPlayerPosEx(playerid, x,y+2,z);
      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));
      		    SetPlayerInterior(playerid,GetPlayerInterior(targetid));
		    }
      		SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");

      		SetPVarInt(playerid, "IntEnter", GetPVarInt(targetid, "IntEnter"));
      		SetPVarInt(playerid, "BizEnter", GetPVarInt(targetid, "BizEnter"));
      		SetPVarInt(playerid, "HouseEnter", GetPVarInt(targetid, "HouseEnter"));
      		SetPVarInt(playerid, "GarageEnter", GetPVarInt(targetid, "GarageEnter"));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:connectmessages(playerid, params[]) {
	if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	switch(GetPVarInt(playerid, "connectmessages")) {
		case 0: {
			SetPVarInt(playerid, "connectmessages", 1);
			SendClientMessage(playerid, COLOR_WHITE, "Connect messages enabled, you will now receive messages about connecting players.");
		}
		default: {
			SetPVarInt(playerid, "connectmessages", 0);
			SendClientMessage(playerid, COLOR_WHITE, "Connect messages disabled, you will no longer receive messages about connecting players.");
		}
	}
	
	return 1;
}
//============================================//
COMMAND:gethere(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gethere [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			if(IsPlayerInAnyVehicle(targetid))
		    {
                SetVehiclePosEx(GetPlayerVehicleID(targetid),x,y+4,z);
      		    SetPlayerVirtualWorld(targetid,GetPlayerVirtualWorld(playerid));
      		    SetPlayerInterior(targetid,GetPlayerInterior(playerid));
      		    LinkVehicleToInteriorEx(GetPlayerVehicleID(targetid),GetPlayerInterior(playerid));
      		    SetVehicleVirtualWorld(GetPlayerVehicleID(targetid),GetPlayerVirtualWorld(playerid));
	    	}
		    else
		    {
		        SetPlayerPosEx(targetid,x,y+2,z);
      		    SetPlayerVirtualWorld(targetid,GetPlayerVirtualWorld(playerid));
      		    SetPlayerInterior(targetid,GetPlayerInterior(playerid));
		    }
      		SendClientMessage(targetid,COLOR_ERROR,"You have been teleported.");
      		
      		SetPVarInt(targetid, "IntEnter", GetPVarInt(playerid, "IntEnter"));
      		SetPVarInt(targetid, "BizEnter", GetPVarInt(playerid, "BizEnter"));
      		SetPVarInt(targetid, "HouseEnter", GetPVarInt(playerid, "HouseEnter"));
      		SetPVarInt(targetid, "GarageEnter", GetPVarInt(playerid, "GarageEnter"));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:mark(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
	{
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
	    SetPVarFloat(playerid,"MarkX",x);
	    SetPVarFloat(playerid,"MarkY",y);
	    SetPVarFloat(playerid,"MarkZ",z);
	    SendClientMessage(playerid,COLOR_ERROR,"Marker created, /gotomark useable.");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotomark(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),GetPVarFloat(playerid,"MarkX"),GetPVarFloat(playerid,"MarkY"),GetPVarFloat(playerid,"MarkZ"));
		}
		else
		{
		    SetPlayerPosEx(playerid,GetPVarFloat(playerid,"MarkX"),GetPVarFloat(playerid,"MarkY"),GetPVarFloat(playerid,"MarkZ"));
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:despawncar(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
    if(GetPVarInt(playerid, "Admin") >= 1) {
        DespawnVehicle(GetPlayerVehicleID(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "Vehicle destroyed.");
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:rcc(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 2)
	{
	    if(PlayerToCar(playerid,1,5.0))
	    {
			new vehicleid = PlayerToCar(playerid,2,5.0);
	        SetVehicleToRespawn(vehicleid);
	        if(VehicleInfo[vehicleid][vID] != 0)
	        {
	            if(VehicleInfo[vehicleid][vCreated] == 1 && VehicleInfo[vehicleid][vInt] == 0) {
                    DespawnVehicle(GetPlayerVehicleID(playerid));
	            }
	        }
	        format(string, sizeof(string),"Car-ID:%d - respawned.",vehicleid);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_ERROR, "WARNING: You are not close to any vehicle.");
	    }
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:rtc(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    SendClientMessage(playerid,COLOR_WHITE,"Vehicle respawned.");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:aarmour(playerid, params[])
{
	new type;
	if(sscanf(params, "ii", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /aarmour [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
      		SetPlayerArmourEx(playerid,type);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:ahealth(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 7)
	{
	    SetPlayerHealthEx(playerid,99.0);
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:weatherall(playerid, params[])
{
	new id,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /weatherall [id]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s has set the weather to %d for everyone.", sendername, id);
      		SendAdminMessage(COLOR_YELLOW,string);
      		SetWeatherEx(id);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:aveh(playerid, params[])
{
	new type[64];
	if(sscanf(params, "s[64]", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /aveh [vehicle model id/model name] [respawn 1/0]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
			new model;
			if(IsNumeric(type))
			{
				model = strval(type);
			}
			else
			{
				for(new i = 0; i < sizeof(VehicleName) - 1; i++)
				{
					if(strfind(VehicleName[i], type, true) != -1)
					{
						model = 400 + i;
						break;
					}
				}
			}

			new Float:X,Float:Y,Float:Z,vehicleid;
			GetPlayerPos(playerid,X,Y,Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 3.0);
			vehicleid = CreateVehicle(model,X,Y,Z, 90.7350, -1, -1, -1);
			VehicleInfo[vehicleid][vFuel] = 100;
			VehicleInfo[vehicleid][vWindows] = 0;
			VehicleInfo[vehicleid][vEngine] = 0;
			VehicleInfo[vehicleid][vType] = VEHICLE_ADMIN;
			VehicleInfo[vehicleid][vID] = 0;
			VehicleInfo[vehicleid][vEngineStats][1] = 1;
			VehicleInfo[vehicleid][vEngineStats][2] = 1;
			VehicleInfo[vehicleid][vBattery][1] = 1;
			VehicleInfo[vehicleid][vBattery][2] = 1;
			Iter_Add(VehicleIterator, vehicleid);
			LinkVehicleToInteriorEx(vehicleid, GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
			SendClientMessage(playerid, COLOR_WHITE, "Vehicle has been spawned.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:repaircar(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    RepairVehicle(GetPlayerVehicleID(playerid));
	    SendClientMessage(playerid,COLOR_WHITE,"Vehicle repaired.");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:fuelcars(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 4)
	{
		foreach(new c : VehicleIterator)
		{
		    VehicleInfo[c][vFuel] = 100;
	    }
	    SendClientMessage(playerid,COLOR_WHITE,"All vehicles refueled.");
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:rac(playerid, params[])
{
	new string[128], sendername[MAX_PLAYER_NAME];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 3)
	{
	   	for(new v = 1; v <= MAX_VEHICLES; v++)
		{
			new bool:despawn = true;
			foreach(new i : Player)
     		{
     			if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == v)
     			{
     				despawn = false;
     			}
     		}

	        if(despawn == true)
	        {
			    DespawnVehicle(v);
		    }
	    }

	    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	GiveNameSpace(sendername);
	    format(string, sizeof(string), "All unused cars despawned by %s.", sendername);
	    SendClientMessage(playerid,COLOR_WHITE,string);
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:givemoney(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /givemoney [playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 99999999) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 99999999.");
		if(GetPVarInt(playerid, "Admin") >= 9)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		GivePlayerMoneyEx(targetid,type);
      		format(string, sizeof(string),"AdmCmd: %s (%s) has given %s %s", sendername, AdminName(playerid), giveplayer, FormatMoney(type));
      		SendAdminMessage(COLOR_YELLOW,string);
      		ADMLog(string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:money(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /money [playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 99999999) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 99999999.");
		if(GetPVarInt(playerid, "Admin") >= 9)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPVarInt(targetid, "Cash", type);
      		SetSlidedMoneyBar(targetid);
      		format(string, sizeof(string),"AdmCmd: %s (%s) has set %s's money to %s", sendername, AdminName(playerid), giveplayer, FormatMoney(type));
      		SendAdminMessage(COLOR_YELLOW,string);
      		ADMLog(string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:sethp(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sethp [playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 99) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 99.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPlayerHealthEx(targetid,type);
      		format(string, sizeof(string),"AdmCmd: %s has set %s's health to %d", sendername, giveplayer, type);
      		SendAdminMessage(COLOR_YELLOW,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setcarint(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "ii", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setcarint [carid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		LinkVehicleToInteriorEx(targetid,type);
      		format(string, sizeof(string),"AdmCmd: %s has set carid %d int to %d", sendername, targetid, type);
      		SendAdminMessage(COLOR_YELLOW,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setcarhp(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "ii", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setcarhp [carid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetVehicleHealth(targetid,type);
      		format(string, sizeof(string),"AdmCmd: %s has set carid %d health to %d", sendername, targetid, type);
      		SendAdminMessage(COLOR_YELLOW,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setarmour(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setarmour [playerid] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 99) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 99.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPlayerArmourEx(targetid,type);
      		format(string, sizeof(string),"AdmCmd: %s has set %s's armour to %d", sendername, giveplayer, type);
      		SendAdminMessage(COLOR_YELLOW,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setjob(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setjob [playerid] [id]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 50) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 50.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPVarInt(targetid, "Job", type);
      		format(string, sizeof(string),"AdmCmd: %s has set %s's job to %d", sendername, giveplayer, type);
      		SendAdminMessage(COLOR_YELLOW,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setage(playerid, params[])
{
	new targetid,type,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setage [playerid] [id]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(type < 0 || type > 110) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 110.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		SetPVarInt(targetid, "Age", type);
      		format(string, sizeof(string),"AdmCmd: %s has set %s's age to %d", sendername, giveplayer, type);
      		SendAdminMessage(COLOR_YELLOW,string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:setsex(playerid, params[])
{
	new targetid, sex[16], string[128], sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[16]", targetid, sex)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setsex [playerid] [male/female]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);

			if(strcmp(sex, "male") == 0)
			{
				SetPVarInt(targetid, "Sex", 1);
				format(string, sizeof(string),"AdmCmd: %s has set %s's sex to Male.", sendername, giveplayer);
      			SendAdminMessage(COLOR_YELLOW,string);
			}
			else if(strcmp(sex, "female") == 0)
			{
				SetPVarInt(targetid, "Sex", 2);
				format(string, sizeof(string),"AdmCmd: %s has set %s's sex to Female.", sendername, giveplayer);
      			SendAdminMessage(COLOR_YELLOW,string);
			}
			else
			{
				return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setsex [playerid] [male/female]");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:gotocar(playerid, params[])
{
	new type;
	if(sscanf(params, "i", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gotocar [Vehicle ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(type < 0 || type > 5000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 5000.");
		if(GetPVarInt(playerid, "Admin") >= 3)
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(type,x,y,z);
			GetXYInFrontOfVehicle(type, x, y, 3.0);
			SetPlayerPosEx(playerid,x,y,z);
      		SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:goincar(playerid, params[])
{
	new type;
	if(sscanf(params, "i", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /goincar [Vehicle ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(type < 0 || type > 5000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 5000.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    PutPlayerInVehicleEx(playerid,type,0);
      		SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:hack(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hack [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Admin") >= 2)
		{
			new Float:health;
			GetPlayerHealth(targetid,health);
			SetPlayerHealthEx(targetid,health-1.0);
			SendClientMessage(playerid,COLOR_YELLOW,"Players health has been -1 down.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:aduty(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    switch(GetPVarInt(playerid, "AdminDuty"))
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "AdminDuty", 1);
	            SetPlayerArmour(playerid, 999);
				SetPlayerHealth(playerid, 999);
				SetPlayerColor(playerid,COLOR_YELLOW);
				switch(GetPVarInt(playerid, "Admin"))
				{
				    case 1 .. 3: SetPlayerColor(playerid, COLOR_ADMIN); // Moderator
					case 4 .. 9: SetPlayerColor(playerid, COLOR_SENIOR_ADMIN); // Senior
					case 10 .. 11: SetPlayerColor(playerid, COLOR_LEAD_ADMIN); // Lead Admin
				}
	            format(string, sizeof(string),"AdmCmd: %s is now On-Duty as an Administrator.", PlayerInfo[playerid][pName]);
      		    switch(GetPVarInt(playerid, "Admin"))
				{
				    case 1 .. 3: SendAdminMessage(COLOR_ADMIN, string); // Moderator
					case 4 .. 9: SendAdminMessage(COLOR_SENIOR_ADMIN, string); // Senior
					case 10 .. 11: SendAdminMessage(COLOR_LEAD_ADMIN, string); // Lead Admin
				}
	        }
			case 1:
			{
			    SetPVarInt(playerid, "AdminDuty", 0);
			    SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "Armour"));
				SetPlayerHealthEx(playerid, GetPVarFloat(playerid, "Health"));
				SetPlayerColor(playerid, COLOR_WHITE);
			    format(string, sizeof(string),"AdmCmd: %s is now Off-Duty as an Administrator.", PlayerInfo[playerid][pName]);
			    SendAdminMessage(COLOR_YELLOW,string);
			}
	    }
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:aactivity(playerid, params[]) {
	if(GetPVarInt(playerid, "Admin") < 10) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new name[32],
	    days,
	    query[500];
	    
	if(sscanf(params, "is[32]", days, name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /aactivity [days] [forum name]");
	
	mysql_format(handlesql, query, sizeof(query), "SELECT IFNULL(`a`.`Admin`, -1) AS `level`, IFNULL(SUM(TIMESTAMPDIFF(MINUTE, `sa`.`from`, `sa`.`until`)), 0) AS `minutes`, \
		IFNULL(SUM(`sa`.`assists`), 0) AS `assists`, IFNULL(SUM(`sa`.`reports`), 0) AS `reports`, IFNULL(SUM(`sa`.`helpmes`), 0) AS `helpmes` \
		FROM `accounts` `a` JOIN `staff_activity` `sa` ON `sa`.`pID` = `a`.`ID` WHERE `a`.`ForumName` = '%e' AND \
		TIMESTAMPDIFF(DAY, `sa`.`from`, NOW()) <= %i;", name, days);

	mysql_pquery(handlesql, query, "sa_AdminActivity", "isi", playerid, name, days);
	return 1;
}

forward sa_AdminActivity(playerid, name[], days);
public sa_AdminActivity(playerid, name[], days)
{
	if(cache_get_row_count() > 0)
	{
		new msg[MAX_MSG_LENGTH],
			id = GetPlayerID(name);

		format(msg, sizeof(msg), "Administrator %s (Rank %i):", GetNameWithSpace(name), cache_get_field_content_int(0, "level"));
		SendClientMessage(playerid, COLOR_ERROR, msg);
		if(id != -1) {
			format(msg, sizeof(msg), "Online Time: %i Minute(s), Accepted Assistance Requests: %i, Accepted Reports: %i, Accepted Helpmes: %i.",
									  cache_get_field_content_int(0, "minutes") + floatround(GetPVarInt(id, "sa_counter") / 60), cache_get_field_content_int(0, "assists") + GetPVarInt(id, "sa_assists"),
									  cache_get_field_content_int(0, "reports") + GetPVarInt(id, "sa_reports"), cache_get_field_content_int(0, "helpmes") + GetPVarInt(id, "sa_helpmes"));
		} else {
			format(msg, sizeof(msg), "Online Time: %i Minute(s), Accepted Assistance Requests: %i, Accepted Reports: %i, Accepted Helpmes: %i.",
									  cache_get_field_content_int(0, "minutes"), cache_get_field_content_int(0, "assists"),
									  cache_get_field_content_int(0, "reports"), cache_get_field_content_int(0, "helpmes"));
		}
								  
		SendClientMessage(playerid, COLOR_WHITE, msg);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "No player could be found under the mentioned name.");
	}
}

forward sa_AdminActivityUpdate();
public sa_AdminActivityUpdate()
{	
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		new query[128], forum_name[32];

	    cache_get_field_content(i, "ForumName", forum_name);

		mysql_format(handlesql, query, sizeof(query), "UPDATE `staff_activity` SET `ForumName`='%s' WHERE `pID` = %i", forum_name, cache_get_field_content_int(i, "ID"));
		mysql_pquery(handlesql, query);
	}
}

COMMAND:hactivity(playerid, params[]) 
{
	if(GetPVarInt(playerid, "Admin") < 10 && GetPVarInt(playerid, "Helper") < 2) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new name[32],
	    days,
	    query[500];
	    
	if(sscanf(params, "is[32]", days, name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hactivity [days] [forum name]");
	
	mysql_format(handlesql, query, sizeof(query), "SELECT IFNULL(`a`.`Helper`, -1) AS `level`, IFNULL(SUM(TIMESTAMPDIFF(MINUTE, `sa`.`from`, `sa`.`until`)), 0) AS `minutes`, \
		IFNULL(SUM(`sa`.`helpmes`), 0) AS `helpmes`, IFNULL(SUM(`sa`.`reviews`), 0) AS `reviews` FROM `accounts` `a` JOIN `staff_activity` `sa` ON `sa`.`pID` = `a`.`ID` WHERE \
		`a`.`ForumName` = '%e' AND TIMESTAMPDIFF(DAY, `sa`.`from`, NOW()) <= %i;", name, days);

	mysql_pquery(handlesql, query, "sa_HelperActivity", "isi", playerid, name, days);
	return 1;
}

forward sa_HelperActivity(playerid, name[], days);
public sa_HelperActivity(playerid, name[], days) {
	if(cache_get_row_count() > 0)
	{
		new msg[MAX_MSG_LENGTH],
			id = GetPlayerID(name);
			
		format(msg, sizeof(msg), "Helper %s (Rank %i):", GetNameWithSpace(name), cache_get_field_content_int(0, "level"));
		SendClientMessage(playerid, COLOR_ERROR, msg);
		if(id != -1) {
			format(msg, sizeof(msg), "Online Time: %i Minute(s), Accepted Helpmes: %i, Registration Tickets: %i.", cache_get_field_content_int(0, "minutes") + floatround(GetPVarInt(id, "sa_counter") / 60), cache_get_field_content_int(0, "helpmes") + GetPVarInt(id, "sa_helpmes"), cache_get_field_content_int(0, "reviews"));
		} else {
			format(msg, sizeof(msg), "Online Time: %i Minute(s), Accepted Helpmes: %i, Registration Tickets: %i.", cache_get_field_content_int(0, "minutes"), cache_get_field_content_int(0, "helpmes"), cache_get_field_content_int(0, "reviews"));
		}
		
		SendClientMessage(playerid, COLOR_WHITE, msg);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "No player could be found under the mentioned name.");
	}
}

COMMAND:unsethduty(playerid, params[]) {
	if(GetPVarInt(playerid, "Admin") < 4 && GetPVarInt(playerid, "Helper") < 2) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new user;
	if(sscanf(params, "u", user)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unsethduty [PlayerID/PartOfName]");
	if(!IsPlayerConnected(user)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	if(GetPVarInt(user, "HelperDuty") == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player is not on helper duty!");
	new msg[110];
	SetPVarInt(user, "HelperDuty", 0);
	SetPlayerColor(user, COLOR_WHITE);
	format(msg, sizeof(msg), "HelpCmd: %s forced %s to go Off-Duty as a Helper.", AdminName(playerid), AdminName(user));
    SendHelperMessage(0xFF0000FF, msg);
	return 1;
}
//============================================//
COMMAND:speclist(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid,"Admin") < 7) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
    foreach(new i : Player)
	{
	    if(GetPVarInt(i, "PlayerLogged") == 1 && GetPVarInt(i, "Admin") > 0 && GetPlayerState(i) == PLAYER_STATE_SPECTATING && IsPlayerConnected(GetPVarInt(i, "SpecID")))
	    {
			format(string, sizeof(string), "%s is spectating %s.", PlayerInfo[i][pName], PlayerInfo[GetPVarInt(i, "SpecID")][pName]);
      		SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}
//============================================//
COMMAND:spec(playerid, params[])
{
	new targetid, string[128];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /spec [playerid]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(playerid == targetid) return SendClientMessage(playerid, COLOR_WHITE, "You can not spectate yourself.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
			if(GetPVarInt(playerid, "PlayerSpectate") == 0)
			{
				new Float:health,Float:armour,Float:x, Float:y, Float:z,world = GetPlayerVirtualWorld(playerid), interior = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid,x,y,z); GetPlayerHealth(playerid,health); GetPlayerArmourEx(playerid,armour);
            	SetPVarFloat(playerid,"MarkX",x);
            	SetPVarFloat(playerid,"MarkY",y);
            	SetPVarFloat(playerid,"MarkZ",z);
            	SetPVarFloat(playerid, "Health", health);
            	SetPVarFloat(playerid, "Armour", armour);
            	SetPVarInt(playerid, "Int", interior);
            	SetPVarInt(playerid, "World", world);
			}

			TogglePlayerSpectatingEx(playerid, 1);

			SetPlayerInterior(playerid,GetPlayerInterior(targetid));
			SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));

			if(IsPlayerInAnyVehicle(targetid))
			{
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
			}
			else
			{
				PlayerSpectatePlayer(playerid, targetid);
			}

			SetPVarInt(playerid, "SpecID", targetid);

    	    if(GetPVarInt(targetid, "Admin") >= 10)
    	    {
				format(string, sizeof(string), "Lead-Warning: %s is spectating you.", PlayerInfo[playerid][pName]);
    	    	SendClientMessage(targetid,COLOR_ERROR,string);
    	    }

    	    new Float:health, Float:armour;
			GetPlayerHealth(targetid, health);
			GetPlayerArmourEx(targetid, armour);

			if(PlayerInfo[targetid][pPlayerWeapon] == 0)
			{
				format(string, sizeof(string), "[SPECTATE] %s [ID: %i] | Money: %s | Health: %.1f | Armour: %.1f", 
					PlayerInfo[targetid][pName], 
					targetid, 
					FormatMoney(GetPlayerMoneyEx(targetid)), 
					health,
					armour);
			}
			else
			{
				format(string, sizeof(string), "[SPECTATE] %s [ID: %i] | Money: %s | Health: %.1f | Armour: %.1f | Weapon: %s (%d) [%s]", 
					PlayerInfo[targetid][pName], 
					targetid, 
					FormatMoney(GetPlayerMoneyEx(targetid)), 
					health,
					armour,
					PrintIName(PlayerInfo[targetid][pPlayerWeapon]),
					PlayerInfo[targetid][pPlayerAmmo], 
					PlayerInfo[targetid][pPlayerSerial]);
			}

			SendClientMessage(playerid, COLOR_PURPLE, string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:specoff(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "PlayerSpectate") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not spectating.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    TogglePlayerSpectatingEx(playerid, 0);
		SetPlayerInterior(playerid,GetPVarInt(playerid, "Int"));
		SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "World"));
		SetPlayerPosEx(playerid,GetPVarFloat(playerid,"MarkX"),GetPVarFloat(playerid,"MarkY"),GetPVarFloat(playerid,"MarkZ"));
		TogglePlayerControllableEx(playerid,true);
	    if(GetPVarFloat(playerid, "Health") > 0) SetPlayerHealthEx(playerid,GetPVarFloat(playerid, "Health"));
	    if(GetPVarFloat(playerid, "Armour") > 0) SetPlayerArmourEx(playerid,GetPVarFloat(playerid, "Armour"));
	    ResetPlayerWeapons(playerid);
	    SetPVarInt(playerid, "SpecID", INVALID_MAXPL);
	    if(PlayerInfo[playerid][pPlayerWeapon] != 0 && PlayerInfo[playerid][pPlayerAmmo] != 0)
	    {
	        GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo]);
	        CallRemoteFunction("LoadHolsters","i",playerid);
	    }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:gotols(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1529.6,-1691.2,13.3);
		}
		else
		{
		    SetPlayerPosEx(playerid,1529.6,-1691.2,13.3);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotolv(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1699.2, 1435.1, 10.7);
		}
		else
		{
		    SetPlayerPosEx(playerid,1699.2, 1435.1, 10.7);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotosf(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),-1417.0,-295.8,14.1);
		}
		else
		{
		    SetPlayerPosEx(playerid,-1417.0,-295.8,14.1);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotodemo(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),-383.5794,2851.5256,113.9010);
		}
		else
		{
		    SetPlayerPosEx(playerid,-383.5794,2851.5256,113.9010);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotogas(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosEx(GetPlayerVehicleID(playerid),1925.4385,-1759.2397,13.5469);
		else SetPlayerPosEx(playerid,1925.4385,-1759.2397,13.5469), SetPlayerInterior(playerid,0), SetPlayerVirtualWorld(playerid,0);
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:gotohos(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosEx(GetPlayerVehicleID(playerid),1182.5016,-1321.9572,13.5788);
		else SetPlayerPosEx(playerid,1182.5016,-1321.9572,13.5788), SetPlayerInterior(playerid,0), SetPlayerVirtualWorld(playerid,0);
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:gotoelcorona(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1908.7719,-2020.0188,13.5469);
		}
		else
		{
		    SetPlayerPosEx(playerid,1908.7719,-2020.0188,13.5469);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotonewbie(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1568.3518,-2276.5513,13.5537);
		}
		else
		{
		    SetPlayerPosEx(playerid,1568.3518,-2276.5513,13.5537);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotogrove(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2529.5720,-1667.7911,15.1690);
		}
		else
		{
		    SetPlayerPosEx(playerid,2529.5720,-1667.7911,15.1690);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotosan(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1786.6350,-1294.6017,13.4879);
		}
		else
		{
		    SetPlayerPosEx(playerid,1786.6350,-1294.6017,13.4879);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotoseville(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2783.2827,-2025.6841,13.5620);
		}
		else
		{
		    SetPlayerPosEx(playerid,2783.2827,-2025.6841,13.5620);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotomotel(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2196.0056,-1139.6841,38.1016);
		}
		else
		{
		    SetPlayerPosEx(playerid,2196.0056,-1139.6841,38.1016);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotobank(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1448.1796,-1010.7741,26.8438);
		}
		else
		{
		    SetPlayerPosEx(playerid,1448.1796,-1010.7741,26.8438);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotodonut(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1038.6437,-1344.3074,29.6374);
		}
		else
		{
		    SetPlayerPosEx(playerid,1038.6437,-1344.3074,29.6374);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotopier(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),848.3141,-1909.2942,14.8499);
		}
		else
		{
		    SetPlayerPosEx(playerid,848.3141,-1909.2942,14.8499);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotomechanic(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2103.4734,-1910.3563,13.5404);
		}
		else
		{
		    SetPlayerPosEx(playerid,2103.4734,-1910.3563,13.5404);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gototaxi(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1766.1370,-1897.0927,13.5634);
		}
		else
		{
		    SetPlayerPosEx(playerid,1766.1370,-1897.0927,13.5634);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotopizza(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2095.5962,-1806.5247,13.5517);
		}
		else
		{
		    SetPlayerPosEx(playerid,2095.5962,-1806.5247,13.5517);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gototrucker(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),96.2950,-259.8899,8.2663);
		}
		else
		{
		    SetPlayerPosEx(playerid,96.2950,-259.8899,8.2663);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotosweeper(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),1616.5408,-1891.8784,13.5479);
		}
		else
		{
		    SetPlayerPosEx(playerid,1616.5408,-1891.8784,13.5479);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotogarbage(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2199.6106,-1977.2163,13.5580);
		}
		else
		{
		    SetPlayerPosEx(playerid,2199.6106,-1977.2163,13.5580);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotofarmer(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),-379.8044,-1425.6467,25.7266);
		}
		else
		{
		    SetPlayerPosEx(playerid,-379.8044,-1425.6467,25.7266);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotofish(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
		if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid),2947.6697,-1967.7576,9.0171);
		}
		else
		{
		    SetPlayerPosEx(playerid,2947.6697,-1967.7576,9.0171);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		}
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:countdown(playerid, params[])
{
	new targetid;
	if(sscanf(params, "i", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /countdown [time]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 3)
		{
		    CountDown=targetid;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:banip(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);
	new reason[128], ip[64], string[128];
	if(sscanf(params, "s[128]s[64]", ip, reason)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /banip [IP] [reason]");
	else
	{
		if(strlen(reason) >= 100) return SendClientMessage(playerid, COLOR_ERROR, "Ban Reason is too long.");
		format(string, sizeof(string), "AdmCmd: %s was IP banned by Admin %s. (Reason: %s)", ip, AdminName(playerid), reason);
		SendAdminMessage(COLOR_YELLOW, string);
		BanPlayerO("IP BAN", ip, reason, AdminName(playerid));
	}
	return 1;
}
//============================================//
COMMAND:find(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /find [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
			new Float:x,Float:y,Float:z;
			GetPlayerPos(targetid,x,y,z);
			SetPlayerCheckpoint(playerid,x,y,z,5.0);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:carplate(playerid, params[])
{
	new plate[50],string[128];
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vID] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This is not an ownable vehicle.");
	if(sscanf(params, "s[50]", plate)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /carplate [PLATE NAME]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7 || GetPVarInt(playerid, "DonateRank") >= 3)
		{
			if(GetPVarInt(playerid, "Admin") < 7) // Not an admin
			{
				new vehicleID = -1;
				for(new i = 0; i < PlayerSpawnedVehicles(playerid); i++)
				{
					new veh = GetSpawnedVehicle(playerid, i);
					if(GetPlayerVehicleID(playerid) == veh)
					{
						vehicleID = veh;
					}
				}

				if(vehicleID == -1) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in your personal vehicle in order to do this.");
			}

			if(strlen(plate) > 9) return SendClientMessage(playerid, COLOR_ERROR, "The vehicle number plate can contain a maximum of 9 characters.");

			new h = GetPlayerVehicleID(playerid),
			    query[115];
			    
			strmid(VehicleInfo[h][vPlate], plate, 0, strlen(plate), 255);
		    format(string, sizeof(string), "This vehicle's plate has been set to '%s'.", plate);
		    SendClientMessage(playerid, COLOR_WHITE, string);

			mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Plate` = '%e' WHERE `ID` = %i;", plate, VehicleInfo[h][vID]);
			mysql_pquery(handlesql, query);

			SetVehicleNumberPlate(h, plate);

		    SendClientMessage(playerid, COLOR_WHITE, "Re-spawn your vehicle to update the vehicle's number plate.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
    return 1;
}
//============================================//
COMMAND:helpers(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME],string[128],helptext[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    new found = 0;
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Helper") >= 1)
		{
		    found++;
		}
	}
	if(found == 0) return SendClientMessage(playerid, COLOR_FADE, "There are no helpers online.");
	SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "                           Helpers Online:");
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Helper") >= 1)
        {
            format(sendername, sizeof(sendername), "%s", PlayerInfo[i][pUsername]);
      		GiveNameSpace(sendername);
      		switch(GetPVarInt(i, "Helper"))
            {
                case 3: helptext = "Lead Helper";
                case 2: helptext = "Helper Moderator";
                case 1: helptext = "Helper";
            }
			switch(GetPVarInt(i, "HelperDuty"))
			{
			    case 0:
			    {
				    if(GetPVarInt(i, "Helper") < 3) format(string, sizeof(string), "%s: %s [ID: %d]", helptext, AdminName(i), i);
				    if(GetPVarInt(i, "Helper") == 3) format(string, sizeof(string), "%s: %s [ID: HIDDEN]", helptext, AdminName(i));
			        SendClientMessage(playerid, COLOR_FADE, string);
			    }
			    case 1:
			    {
				    format(string, sizeof(string), "%s: %s [ID: %d] (On Duty)", helptext, AdminName(i), i);
			        SendClientMessage(playerid, 0x40808096, string);
			    }
			}
        }
    }
    SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
	return 1;
}
//============================================//
COMMAND:togha(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    switch(GetPVarInt(playerid, "TogHa"))
    {
        case 0:
        {
            SetPVarInt(playerid,"TogHa",1);
            SendClientMessage(playerid, COLOR_ERROR, "Local Staff Chat disabled!");
        }
        case 1:
        {
            DeletePVar(playerid,"TogHa");
            SendClientMessage(playerid, COLOR_ERROR, "Local Staff Chat enabled!");
        }
    }
	return 1;
}
//============================================//
COMMAND:ha(playerid, params[])
{
	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ha [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1 || GetPVarInt(playerid, "RegTeam") >= 1) {
      		new arank[40],
      		    string[256];
      		    
            switch(GetPVarInt(playerid, "RegTeam")) {
                case 3: arank = "Lead Registrator";
                case 2: arank = "Reg Moderator";
                case 1: arank = "Registrator";
            }
            
            switch(GetPVarInt(playerid, "Helper")) {
                case 3: arank = "Lead Helper";
                case 2: arank = "Helper Moderator";
                case 1: arank = "Helper";
            }
            
            switch(GetPVarInt(playerid, "Admin")) {
      		    case 1: arank = "Level 1 Moderator";
      		    case 2: arank = "Level 2 Admin";
      		    case 3: arank = "Level 3 Admin";
      		    case 4 .. 9: arank = "Senior Admin";
      		    case 10: arank = "Lead Admin";
      		    case 11: arank = "1337 Admin";
      		}
      		
            format(string, sizeof(string), "*** %s [%i] %s *** %s", arank,  playerid, AdminName(playerid), text);
    	    SendStaffMessage(0x009B4E96, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:rc(playerid, params[])
{
	new text[128],string[128],sendername[MAX_PLAYER_NAME],helptext[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /rc [Register-Chat]");
	if(GetPVarInt(playerid, "Reg") < 2) return nal(playerid);
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Reg") >= 1)
		{
		    switch(GetPVarInt(playerid, "Reg"))
            {
                case 3: helptext = "Lead Registrator";
                case 2: helptext = "Registrator Moderator";
                case 1: helptext = "Registrator";
            }
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		GiveNameSpace(sendername);
            format(string, sizeof(string), "*%s %s: %s", helptext, AdminName(playerid), text);
    	    SendRegMessage(0x0080FF96, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:ht(playerid, params[])
{
	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ht [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Helper") >= 1)
		{
		    new helptext[30],
		        string[256];
		        
		    switch(GetPVarInt(playerid, "Helper"))
            {
                case 3: helptext = "Lead Helper";
                case 2: helptext = "Helper Moderator";
                case 1: helptext = "Helper";
            }

            format(string, sizeof(string), "*%s %s: %s", helptext, AdminName(playerid), text);
    	    SendHelperMessage(0x40808096, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:helpme(playerid, params[])
{
	new text[128],string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /helpme [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "HelpMe") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You have recently posted a HelpMe.");
	    if(GetPVarInt(playerid, "TogPM") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You can't use /helpme if your PMs are togged (/togpm).");
   		format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	GiveNameSpace(sendername);
      	new found = 0;
        foreach(new i : Player)
        {
            if(GetPVarInt(i, "Helper") >= 1)
            {
			    found++;
            }
        }
        if(found == 0)
        {
            format(string, sizeof(string), "HELPME: %s [ID:%d]: %s.", sendername, playerid, text);
		    SendAdminMessage(0xFF0000FF,string);
		    format(string, sizeof(string), "HELPME: Use /accepthelpme [%d] to respond to the helpme.", playerid);
		    SendAdminMessage(0xFF0000FF,string);
		    SendClientMessage(playerid,COLOR_GREEN,"Your request has been sent to all the online Helpers.");
		    SetPVarInt(playerid, "HelpMe", GetCount()+60000);
			return 1;
        }
      	format(string, sizeof(string), "HELPME: %s [ID:%d]: %s.", sendername, playerid, text);
		SendHelperMessage(0xFF0000FF,string);
		format(string, sizeof(string), "HELPME: Use /accepthelpme [%d] to respond to the helpme.", playerid);
		SendHelperMessage(0xFF0000FF,string);
		SendClientMessage(playerid,COLOR_GREEN,"Your request has been sent to all the online Helpers.");
		SetPVarInt(playerid, "HelpMe", GetCount()+60000);
	}
	return 1;
}
//============================================//
ALTCOMMAND:ahm->accepthelpme;
COMMAND:accepthelpme(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /accepthelpme [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "HelpMe") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player's helpme time has dropped or he never requested one.");
		if(GetPVarInt(playerid, "Helper") >= 1 || GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "HelpCmd: %s has accepted %s's helpme.", AdminName(playerid), giveplayer);
      		SendHelperMessage(0xFF0000FF,string);
      		format(string, sizeof(string), "You accepted %s's helpme.", giveplayer);
      		SendClientMessage(playerid,COLOR_GREEN,string);
      		format(string, sizeof(string), "Helper %s has accepted your helpme.", AdminName(playerid));
      		SendClientMessage(targetid,COLOR_GREEN,string);
      		SetPVarInt(targetid, "HelpMe", 0);
			SetPVarInt(playerid, "helpmes", GetPVarInt(playerid, "helpmes") + 1); //Amount of helpme's answered by helper.
			SetPVarInt(playerid, "sa_helpmes", GetPVarInt(playerid, "sa_helpmes") + 1);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:hduty(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Helper") >= 1)
	{
	    switch(GetPVarInt(playerid, "HelperDuty"))
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "HelperDuty", 1);
	            SetPlayerColor(playerid, COLOR_HELPER);
	            format(string, sizeof(string),"HelpCmd: %s is now On-Duty as a Helper.", AdminName(playerid));
      		    SendHelperMessage(0xFF0000FF,string);
	        }
			case 1:
			{
			    SetPVarInt(playerid, "HelperDuty", 0);
			    SetPlayerColor(playerid,COLOR_WHITE);
			    format(string, sizeof(string),"HelpCmd: %s is now Off-Duty as a Helper.", AdminName(playerid));
      		    SendHelperMessage(0xFF0000FF,string);
			}
	    }
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gi(playerid, params[])
{
	new itemid, quantity, ex1;
	if(sscanf(params, "iii", itemid, quantity, ex1)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gi [itemid] [amount] [ex1]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Admin") >= 7)
	    {
	        GiveInvItem(playerid, itemid, quantity, ex1, 1337);

	        new string[128];
	        format(string, sizeof(string), "AdmWarn: %s has given himself an item: %s (%i)", PlayerInfo[playerid][pUsername], PrintIName(itemid), quantity);
            SendAdminMessage(COLOR_YELLOW, string);

            ServerLog(LOG_ADMIN_SPAWN_ITEM, PlayerInfo[playerid][pUsername], string);
	    }
	}
	return 1;
}
//============================================//
COMMAND:up(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 2)
	{
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
        SetPlayerPosEx(playerid,x,y,z+2);
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
ALTCOMMAND:down->dn;
COMMAND:dn(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 2)
	{
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
        SetPlayerPosEx(playerid,x,y,z-2);
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:jetpack(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 7)
	{
	    SetPlayerSpecialAction(playerid, 2);
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:gotointt(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gotointt [1-74]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
        if(GetPVarInt(playerid, "Admin") >= 9)
	    {
	        switch(aimid)
		    {
		        case 1: SetPlayerInterior(playerid,14), SetPlayerPosEx(playerid,-1827.147338,7.207418,1061.143554);
		        case 2: SetPlayerInterior(playerid,14), SetPlayerPosEx(playerid,-1855.568725,41.263156,1061.143554);
		        case 3: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,2.384830,33.103397,1199.849976);
		        case 4: SetPlayerInterior(playerid,9), SetPlayerPosEx(playerid,315.856170,1024.496459,1949.797363);
		        case 5: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,235.508994,1189.169897,1080.339966);
		        case 6: SetPlayerInterior(playerid,2), SetPlayerPosEx(playerid,225.756989,1240.000000,1082.149902);
		        case 7: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,223.043991,1289.259888,1082.199951);
		        case 8: SetPlayerInterior(playerid,7), SetPlayerPosEx(playerid,225.630997,1022.479980,1084.069946);
		        case 9: SetPlayerInterior(playerid,5), SetPlayerPosEx(playerid,15295.138977,1474.469971,1080.519897);
		        case 10: SetPlayerInterior(playerid,6), SetPlayerPosEx(playerid,15328.493988,1480.589966,1084.449951);
		        case 11: SetPlayerInterior(playerid,7), SetPlayerPosEx(playerid,15385.803986,1471.769897,1080.209961);
		        case 12: SetPlayerInterior(playerid,18), SetPlayerPosEx(playerid,1726.18,-1641.00,20.23);
		        case 13: SetPlayerInterior(playerid,2), SetPlayerPosEx(playerid,2567.52,-1294.59,1063.25);
		        case 14: SetPlayerInterior(playerid,15), SetPlayerPosEx(playerid,-1394.20,987.62,1023.96);
		        case 15: SetPlayerInterior(playerid,5), SetPlayerPosEx(playerid,2338.32,-1180.61,1027.98);
		        case 16: SetPlayerInterior(playerid,8), SetPlayerPosEx(playerid,2807.63,-1170.15,1025.57);
		        case 17: SetPlayerInterior(playerid,17), SetPlayerPosEx(playerid,376.99,-191.21,1000.63);
		        case 18: SetPlayerInterior(playerid,14), SetPlayerPosEx(playerid,-1830.81,16.83,1061.14);
		        case 19: SetPlayerInterior(playerid,15), SetPlayerPosEx(playerid,2220.26,-1148.01,1025.80);
		        case 20: SetPlayerInterior(playerid,14), SetPlayerPosEx(playerid,-1410.72,1591.16,1052.53);
		        case 21: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,-750.80,491.00,1371.70);
		        case 22: SetPlayerInterior(playerid,14), SetPlayerPosEx(playerid,-1870.80,59.81,1056.25);
		        case 23: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,-2637.69,1404.24,906.46);
		        case 24: SetPlayerInterior(playerid,10), SetPlayerPosEx(playerid,-1079.99,1061.58,1343.04);
		        case 25: SetPlayerInterior(playerid,2), SetPlayerPosEx(playerid,2451.77,-1699.80,1013.51);
		        case 26: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,-2042.42,178.59,28.84);
		        case 27: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,2535.83,-1674.32,1015.50);
		        case 28: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,681.66,-453.32,-25.61);
		        case 29: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,-2158.72,641.29,1052.38);
		        case 30: SetPlayerInterior(playerid,7), SetPlayerPosEx(playerid,-1395.958,-208.197,1051.170);
		        case 31: SetPlayerInterior(playerid,4), SetPlayerPosEx(playerid,-1424.9319,-664.5869,1059.8585);
		        case 32: SetPlayerInterior(playerid,5), SetPlayerPosEx(playerid,318.565,1115.210,1082.98);
		        case 33: SetPlayerInterior(playerid,9), SetPlayerPosEx(playerid,2251.85,-1138.16,1050.63);
		        case 34: SetPlayerInterior(playerid,10), SetPlayerPosEx(playerid,2260.76,-1210.45,1049.02);
		        case 35: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,2496.65,-1696.55,1014.74);
		        case 36: SetPlayerInterior(playerid,5), SetPlayerPosEx(playerid,1299.14,-794.77,1084.00);
		        case 37: SetPlayerInterior(playerid,10), SetPlayerPosEx(playerid,2262.83,-1137.71,1050.63);
		        case 38: SetPlayerInterior(playerid,8), SetPlayerPosEx(playerid,2365.42,-1131.85,1050.88);
		        case 39: SetPlayerInterior(playerid,6), SetPlayerPosEx(playerid,-2240.00,131.00,1035.40);
		        case 40: SetPlayerInterior(playerid,16), SetPlayerPosEx(playerid,-203.0764,-24.1658,1002.2734);
		        case 41: SetPlayerInterior(playerid,10), SetPlayerPosEx(playerid,363.4129,-74.5786,1001.5078);
		        case 42: SetPlayerInterior(playerid,5), SetPlayerPosEx(playerid,372.3520,-131.6510,1001.4922);
		        case 43: SetPlayerInterior(playerid,9), SetPlayerPosEx(playerid,365.7158,-9.8873,1001.8516);
		        case 44: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,2233.8032,1712.2303,1011.7632);
		        case 45: SetPlayerInterior(playerid,12), SetPlayerPosEx(playerid,1118.8878,-10.2737,1002.0859);
		        case 46: SetPlayerInterior(playerid,10), SetPlayerPosEx(playerid,2016.2699,1017.7790,996.8750);
		        case 47: SetPlayerInterior(playerid,17), SetPlayerPosEx(playerid,378.026,-190.5155,1000.6328);
		        case 48: SetPlayerInterior(playerid,2), SetPlayerPosEx(playerid,616.7820,-74.8151,997.6350);
		        case 49: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,615.2851,-124.2390,997.6350);
		        case 50: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,963.418762,2108.292480,1011.030273);
		        case 51: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,2169.461181,1618.798339,999.976562);
		        case 52: SetPlayerInterior(playerid,17), SetPlayerPosEx(playerid,493.390991,-22.722799,1000.679687);
		        case 53: SetPlayerInterior(playerid,11), SetPlayerPosEx(playerid,501.980987,-69.150199,998.757812);
		        case 54: SetPlayerInterior(playerid,18), SetPlayerPosEx(playerid,-227.027999,1401.229980,27.765625);
		        case 55: SetPlayerInterior(playerid,4), SetPlayerPosEx(playerid,457.304748,-88.428497,999.554687);
		        case 56: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,452.489990,-18.179698,1001.132812);
		        case 57: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,681.557861,-455.680053,-25.609874);
		        case 58: SetPlayerInterior(playerid,17), SetPlayerPosEx(playerid,-959.564392,1848.576782,9.000000);
		        case 59: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,384.808624,173.804992,1008.382812);
		        case 60: SetPlayerInterior(playerid,6), SetPlayerPosEx(playerid,774.213989,-48.924297,1000.585937);
		        case 61: SetPlayerInterior(playerid,7), SetPlayerPosEx(playerid,773.579956,-77.096694,1000.655029);
		        case 62: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,1527.229980,-11.574499,1002.097106);
		        case 63: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,2527.654052,-1679.388305,1015.498596);
		        case 64: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,1212.019897,-28.663099,1000.953125);
		        case 65: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,942.171997,-16.542755,1000.929687);
		        case 66: SetPlayerInterior(playerid,3), SetPlayerPosEx(playerid,964.106994,-53.205497,1001.124572);
		        case 67: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,1412.639892,-1.787510,1000.924377);
		        case 68: SetPlayerInterior(playerid,15), SetPlayerPosEx(playerid,-1398.103515,937.631164,1036.479125);
		        case 69: SetPlayerInterior(playerid,18), SetPlayerPosEx(playerid,1710.433715,-1669.379272,20.225049);
		        case 70: SetPlayerInterior(playerid,6), SetPlayerPosEx(playerid,2333.11,-1077.1,1048.04);
		        case 71: SetPlayerInterior(playerid,8), SetPlayerPosEx(playerid,-42.58,1405.61,1083.45);
		        case 72: SetPlayerInterior(playerid,6), SetPlayerPosEx(playerid,2196.79,-1204.35,1048.05);
		        case 73: SetPlayerInterior(playerid,7), SetPlayerPosEx(playerid,314.820983,-141.431991,999.601562);
		        case 74: SetPlayerInterior(playerid,6), SetPlayerPosEx(playerid,296.919982,-108.071998,1001.515625);
		        case 75: SetPlayerInterior(playerid,1), SetPlayerPosEx(playerid,17.5380, -1.9900, 1000.6829 );
		        default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gotointt [1-74]");
		    }
        }
        else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:intcreate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 7) return SendClientMessage(playerid, COLOR_WHITE, "You do not have access to this command.");

	for(new i = 1; i < MAX_INTS; i++)
	{
		if(IntInfo[i][iiXo] != 0.0 && IntInfo[i][iiYo] != 0.0 && IntInfo[i][iiZo] != 0.0) continue;

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		IntInfo[i][iiVirtualWorldo] = GetPlayerVirtualWorld(playerid);
		IntInfo[i][iiInterioro] = GetPlayerInterior(playerid);

		IntInfo[i][iiXo] = x;
		IntInfo[i][iiYo] = y;
		IntInfo[i][iiZo] = z;

		IntInfo[i][iiPickupo] = CreateDynamicPickup(1318, 1, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo], IntInfo[i][iiVirtualWorldo], IntInfo[i][iiInterioro]);
		IntInfo[i][iiTextLabelo] = CreateDynamic3DTextLabel(IntInfo[i][iiName], 0xFFFFFFFF, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo] + 0.5, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[i][iiVirtualWorldo], IntInfo[i][iiInterioro]);
	
		new query[512];
		mysql_format(handlesql, query, sizeof(query), "INSERT INTO interiors (VirtualWorldo, Interioro, Xo, Yo, Zo) VALUES (%i, %i, %f, %f, %f)",
			IntInfo[i][iiVirtualWorldo], IntInfo[i][iiInterioro], IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]);
		mysql_pquery(handlesql, query, "OnInteriorCreated", "i", i);

		SendClientMessage(playerid, COLOR_WHITE, "Interior created.");

		Iter_Add(IntIterator, i);
		return 1;
	}
	return 1;
}

COMMAND:intremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 7) return SendClientMessage(playerid, COLOR_WHITE, "You do not have access to this command.");
		
	new interiorid;
	if(sscanf(params, "i", interiorid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /intremove [interiorid]");

	if(IntInfo[interiorid][iiXo] == 0.0 && IntInfo[interiorid][iiYo] == 0.0 && IntInfo[interiorid][iiZo] == 0.0) return SendClientMessage(playerid, COLOR_ERROR, "Interior doesn't exist.");

	IntInfo[interiorid][iiXo] = 0;
	IntInfo[interiorid][iiYo] = 0;
	IntInfo[interiorid][iiZo] = 0;

	IntInfo[interiorid][iiXi] = 0;
	IntInfo[interiorid][iiYi] = 0;
	IntInfo[interiorid][iiZi] = 0;

	DestroyDynamicPickup(IntInfo[interiorid][iiPickupo]);
	DestroyDynamicPickup(IntInfo[interiorid][iiPickupi]);
	DestroyDynamic3DTextLabel(IntInfo[interiorid][iiTextLabelo]);
	DestroyDynamic3DTextLabel(IntInfo[interiorid][iiTextLabeli]);

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM interiors WHERE ID=%i", IntInfo[interiorid][iiID]);
	mysql_pquery(handlesql, query);

	IntInfo[interiorid][iiID] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "Interior deleted.");

	Iter_Remove(IntIterator, interiorid);
	return 1;
}
//============================================//
COMMAND:vehicleedit(playerid, params[])
{
	new vehicleid,type[32],amount[32],string[128];
	//if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
	//if(VehicleInfo[GetPlayerVehicleID(playerid)][vID] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This is not an ownable vehicle.");
	if(sscanf(params, "is[32]s[32]", vehicleid, type, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /vehicleedit [vehicleid (/dl)] [owner/modelid/donate/price/paint/delay/engine/battery/mileage/englvl/batlvl/locklvl/alarmlvl] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
			new h = vehicleid,
			    query[75];
			    
			if(strcmp(type, "owner", true) == 0)
		    {
				format(VehicleInfo[h][vOwner], 32, "%s", amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Owner` = '%s' WHERE `ID` = %i;", amount, VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    if(strcmp(type, "modelid", true) == 0)
		    {
				VehicleInfo[h][vModel] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Model` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "donate", true) == 0)
		    {
	            VehicleInfo[h][vDonate] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Donate` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "price", true) == 0)
		    {
	            VehicleInfo[h][vValue] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Value` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "mileage", true) == 0)
		    {
	            VehicleInfo[h][vMileage][1] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mileage01` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "battery", true) == 0)
		    {
	            VehicleInfo[h][vBattery][1] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Battery1` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "engine", true) == 0)
		    {
	            VehicleInfo[h][vEngineStats][1] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Engine1` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "englvl", true) == 0)
		    {
	            VehicleInfo[h][vEngLvl] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `EngLvl` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "batlvl", true) == 0)
		    {
	            VehicleInfo[h][vBatLvl] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `BatLvl` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "locklvl", true) == 0)
		    {
	            VehicleInfo[h][vLockLvl] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `LockLvl` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		    else if(strcmp(type, "alarmlvl", true) == 0)
		    {
	            VehicleInfo[h][vAlarmLvl] = strval(amount);
		        format(string, sizeof(string), "Edited CarID: %d's %s to %d.", h, type, strval(amount));
		        SendClientMessage(playerid,COLOR_ERROR,string);
		        mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `AlarmLvl` = %i WHERE `ID` = %i;", strval(amount), VehicleInfo[h][vID]);
		        mysql_pquery(handlesql, query);
		    }
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:intedit(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 7) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new interiorid, option[32], optional[32];
	if(sscanf(params, "is[32]S(-1)[32]", interiorid, option, optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /intedit [interiorid] [entrance/exit/name/virtualworld/interior/freeze]");
	if(IntInfo[interiorid][iiXo] == 0.0 && IntInfo[interiorid][iiYo] == 0.0 && IntInfo[interiorid][iiZo] == 0.0) return SendClientMessage(playerid, COLOR_ERROR, "This interior doesn't exist.");

	if(strcmp(option, "entrance") == 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		IntInfo[interiorid][iiXo] = x;
		IntInfo[interiorid][iiYo] = y;
		IntInfo[interiorid][iiZo] = z;

		IntInfo[interiorid][iiVirtualWorldo] = GetPlayerVirtualWorld(playerid);
		IntInfo[interiorid][iiInterioro] = GetPlayerInterior(playerid);

		DestroyDynamicPickup(IntInfo[interiorid][iiPickupo]);
		DestroyDynamic3DTextLabel(IntInfo[interiorid][iiTextLabelo]);

		IntInfo[interiorid][iiPickupo] = CreateDynamicPickup(1318, 1, IntInfo[interiorid][iiXo], IntInfo[interiorid][iiYo], IntInfo[interiorid][iiZo], IntInfo[interiorid][iiVirtualWorldo], IntInfo[interiorid][iiInterioro]);
		IntInfo[interiorid][iiTextLabelo] = CreateDynamic3DTextLabel(IntInfo[interiorid][iiName], 0xFFFFFFFF, IntInfo[interiorid][iiXo], IntInfo[interiorid][iiYo], IntInfo[interiorid][iiZo] + 0.5, 50.0, 
			INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[interiorid][iiVirtualWorldo], IntInfo[interiorid][iiInterioro]);

		SaveInterior(interiorid);
		SendClientMessage(playerid, COLOR_WHITE, "Interior entrance updated.");
	}
	else if(strcmp(option, "exit") == 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		IntInfo[interiorid][iiXi] = x;
		IntInfo[interiorid][iiYi] = y;
		IntInfo[interiorid][iiZi] = z;

		IntInfo[interiorid][iiVirtualWorldi] = GetPlayerVirtualWorld(playerid);
		IntInfo[interiorid][iiInteriori] = GetPlayerInterior(playerid);

		DestroyDynamicPickup(IntInfo[interiorid][iiPickupi]);
		DestroyDynamic3DTextLabel(IntInfo[interiorid][iiTextLabeli]);

		new exit_name[64];
		format(exit_name, sizeof(exit_name), "%s Exit", IntInfo[interiorid][iiName]);

		IntInfo[interiorid][iiPickupi] = CreateDynamicPickup(1318, 1, IntInfo[interiorid][iiXi], IntInfo[interiorid][iiYi], IntInfo[interiorid][iiZi], IntInfo[interiorid][iiVirtualWorldi], IntInfo[interiorid][iiInteriori]);
		IntInfo[interiorid][iiTextLabeli] = CreateDynamic3DTextLabel(exit_name, 0xFFFFFFFF, IntInfo[interiorid][iiXi], IntInfo[interiorid][iiYi], IntInfo[interiorid][iiZi] + 0.5, 50.0, 
			INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[interiorid][iiVirtualWorldi], IntInfo[interiorid][iiInteriori]);

		SaveInterior(interiorid);
		SendClientMessage(playerid, COLOR_WHITE, "Interior exit updated.");
	}
	else if(strcmp(option, "name") == 0)
	{
		if(strcmp(optional, "-1") == 0) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /intedit [interiorid] [name] [text]");

		format(IntInfo[interiorid][iiName], 32, "%s", optional);

		DestroyDynamic3DTextLabel(IntInfo[interiorid][iiTextLabelo]);
		DestroyDynamic3DTextLabel(IntInfo[interiorid][iiTextLabeli]);

		IntInfo[interiorid][iiTextLabelo] = CreateDynamic3DTextLabel(IntInfo[interiorid][iiName], 0xFFFFFFFF, IntInfo[interiorid][iiXo], IntInfo[interiorid][iiYo], IntInfo[interiorid][iiZo] + 0.5, 50.0, 
			INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[interiorid][iiVirtualWorldo], IntInfo[interiorid][iiInterioro]);

		new exit_name[64];
		format(exit_name, sizeof(exit_name), "%s Exit", IntInfo[interiorid][iiName]);

		IntInfo[interiorid][iiTextLabeli] = CreateDynamic3DTextLabel(exit_name, 0xFFFFFFFF, IntInfo[interiorid][iiXi], IntInfo[interiorid][iiYi], IntInfo[interiorid][iiZi] + 0.5, 50.0, 
			INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[interiorid][iiVirtualWorldi], IntInfo[interiorid][iiInteriori]);

		SaveInterior(interiorid);

		new string[128];
		format(string, sizeof(string), "Interior name updated to: %s", optional);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(strcmp(option, "virtualworld") == 0)
	{
		if(strcmp(optional, "-1") == 0 || !IsNumeric(optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /intedit [interiorid] [virtualworld] [number]");

		IntInfo[interiorid][iiVirtualWorldi] = strval(optional);

		SaveInterior(interiorid);
		SendClientMessage(playerid, COLOR_WHITE, "Interior updated.");
	}
	else if(strcmp(option, "interior") == 0)
	{
		if(strcmp(optional, "-1") == 0 || !IsNumeric(optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /intedit [interiorid] [interior] [number]");

		IntInfo[interiorid][iiInteriori] = strval(optional);

		SaveInterior(interiorid);
		SendClientMessage(playerid, COLOR_WHITE, "Interior updated.");
	}
	else if(strcmp(option, "freeze") == 0)
	{
		if(IntInfo[interiorid][iiFreeze] == 0)
		{
			IntInfo[interiorid][iiFreeze] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Players who enter or exit this interior will now be frozen.");
		}
		else
		{
			IntInfo[interiorid][iiFreeze] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Players who enter or exit this interior will no longer be frozen.");
		}

		SaveInterior(interiorid);
	}
	else
	{
		cmd_intedit(playerid, "");
	}
	return 1;
}
//============================================//
COMMAND:crack(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return scm(playerid, COLOR_ERROR, "USAGE: /crack [1-4]");
    switch(type)
    {
		case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid,"CRACK", "crckidle1", 4.0, 1, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid,"CRACK","crckidle3", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid,"CRACK","crckidle4", 4.0, 1, 0, 0, 0, 0);
		default: scm(playerid, -1, "USAGE: /crack [1-4]");
    }
    return 1;
}
//============================================//
COMMAND:sleep(playerid, params[])
{
	ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 1);
    return 1;
}
//============================================//
COMMAND:handsup(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}
//============================================//
COMMAND:stopanim(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimUse") == 0 && GetPVarInt(playerid, "AnimLoop") == 0) return scm(playerid, COLOR_WHITE, "You did not recently use any anim, therefore you are unable to (/stopanim).");
    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
    DeletePVar(playerid,"AnimUse");
	return 1;
}

COMMAND:sa(playerid, params[])
{
	return cmd_stopanim(playerid, params);
}
//============================================//
COMMAND:piss(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    SetPlayerSpecialAction(playerid, 68);
	return 1;
}
//============================================//
COMMAND:slapass(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0);
	return 1;
}
//============================================//
COMMAND:chairsit(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    //if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
//============================================//
COMMAND:drunk(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}
//============================================//
COMMAND:gwalk(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gwalk [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
            case 2: ApplyAnimationEx(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gwalk [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:laugh(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
//============================================//
COMMAND:crossarms(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /crossarms [1-5]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
            case 2: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
            case 3: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
            case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.0, 0, 1, 1, 1, -1);
            case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.0, 0, 1, 1, 1, -1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /crossarms [1-5]");
		}
	}
	return 1;
}
//============================================//
COMMAND:lay(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
//============================================//
COMMAND:wave(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
//============================================//
COMMAND:msit(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /msit [1-4]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
		    case 2: ApplyAnimationEx(playerid,"SUNBATHE","ParkSit_M_IdleA", 4.0, 1, 0, 0, 0, 0);
		    case 3: ApplyAnimationEx(playerid,"SUNBATHE","ParkSit_M_IdleB", 4.0, 1, 0, 0, 0, 0);
		    case 4: ApplyAnimationEx(playerid,"SUNBATHE","ParkSit_M_IdleC", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /msit [1-4]");
		}
	}
	return 1;
}
//============================================//
COMMAND:fsit(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /fsit [1-4]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		    case 2: ApplyAnimationEx(playerid,"SUNBATHE","ParkSit_W_IdleA", 4.0, 1, 0, 0, 0, 0);
		    case 3: ApplyAnimationEx(playerid,"SUNBATHE","ParkSit_W_IdleB", 4.0, 1, 0, 0, 0, 0);
		    case 4: ApplyAnimationEx(playerid,"SUNBATHE","ParkSit_W_IdleC", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /fsit [1-4]");
		}
	}
	return 1;
}
//============================================//
COMMAND:relax(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /relax [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"BEACH","Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
            case 2: ApplyAnimationEx(playerid,"BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /relax [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:bat(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bat [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"CRACK","Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
            case 2: ApplyAnimationEx(playerid,"CRACK","Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bat [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:mwalk(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"ped","WALK_player",4.1,1,1,1,1,1);
	return 1;
}
//============================================//
COMMAND:fwalk(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"ped","WOMAN_walksexy",4.1,1,1,1,1,1);
	return 1;
}
//============================================//
COMMAND:angry(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0);
	return 1;
}
//============================================//
COMMAND:aim(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /aim [1-7]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
            case 2: ApplyAnimationEx(playerid, "SHOP", "SHP_Gun_Aim", 4.0, 0, 1, 1, 1, -1);
            case 3: ApplyAnimationEx(playerid,"PED","Driveby_L",4.0, 0, 1, 1, 1, -1);
            case 4: ApplyAnimationEx(playerid,"PED","Driveby_R",4.0, 0, 1, 1, 1, -1);
            case 5: ApplyAnimationEx(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
            case 6: ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
            case 7: ApplyAnimationEx(playerid, "PED", "GUN_STAND", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /aim [1-7]");
		}
	}
	return 1;
}
//============================================//
COMMAND:die(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /die [1-6]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		    case 2: ApplyAnimationEx(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		    case 3: ApplyAnimationEx(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		    case 4: ApplyAnimationEx(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
            case 5: ApplyAnimationEx(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
			case 6: ApplyAnimationEx(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
            default: return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /die [1-6]");
		}
	}
	return 1;
}
//============================================//
COMMAND:gsign(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gsign [1-5]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"GHANDS","gsign1",4.0,0,1,1,1,1);
            case 2: ApplyAnimationEx(playerid,"GHANDS","gsign2",4.0,0,1,1,1,1);
            case 3: ApplyAnimationEx(playerid,"GHANDS","gsign3",4.0,0,1,1,1,1);
            case 4: ApplyAnimationEx(playerid,"GHANDS","gsign4",4.0,0,1,1,1,1);
            case 5: ApplyAnimationEx(playerid,"GHANDS","gsign5",4.0,0,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gsign [1-5]");
		}
	}
	return 1;
}
//============================================//
COMMAND:cpr(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"MEDIC","CPR", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:hitch(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:injured(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /injured [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
            case 2: ApplyAnimationEx(playerid,"SWAT","gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /injured [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:slapped(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);

    new aimid;
	if(sscanf(params, "i", aimid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /slapped [1-2]");

	switch(aimid)
	{
		case 1: ApplyAnimationEx(playerid,"SWEET","ho_ass_slapped",4.0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_M", 4.1, 0, 0, 0, 0, 0, 1);
	}
    return 1;
}
//============================================//
COMMAND:invite1(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
    return 1;
}
//============================================//
COMMAND:invite2(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
    return 1;
}
//============================================//
COMMAND:scratch(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:bomb(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0); // Place Bomb
    return 1;
}
//============================================//
COMMAND:vomit(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
    PlaySoundPlyRadius(playerid, 32201, 5.0);
    return 1;
}
//============================================//
COMMAND:eat(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:doorkick(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "POLICE", "Door_Kick", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:eatgum(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "ped", "gum_eat", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:friskanim(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /friskanim [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid, "POLICE", "plc_drgbst_01", 3.0, 0, 0, 0, 0, 0);
            case 2: ApplyAnimationEx(playerid, "POLICE", "plc_drgbst_02", 3.0, 0, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /friskanim [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:drink(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "GANGS", "drnkbr_prtl", 3.0,1,1,1,1,1);
    return 1;
}
//============================================//
COMMAND:deal(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /deal [1-6]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
		    case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
		    case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
		    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
		    case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
		    case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /deal [1-6]");
		}
	}
	return 1;
}
//============================================//
COMMAND:chat(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /chat [1-9]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"PED","IDLE_CHAT",4.1,1,1,1,1,1);
            case 2: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkA", 4.0, 0, 1, 1, 1, -1);
            case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkB", 4.0, 0, 1, 1, 1, -1);
            case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkC", 4.0, 0, 1, 1, 1, -1);
            case 5: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 1, 1, 1, -1);
            case 6: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkE", 4.0, 0, 1, 1, 1, -1);
            case 7: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkF", 4.0, 0, 1, 1, 1, -1);
            case 8: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkG", 4.0, 0, 1, 1, 1, -1);
            case 9: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 4.0, 0, 1, 1, 1, -1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /chat [1-9]");
		}
	}
	return 1;
}
//============================================//
COMMAND:fucku(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"PED","fucku",4.0,0,0,0,0,0);
    return 1;
}
//============================================//
COMMAND:taichi(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:cry(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /cry [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"GRAVEYARD","mrnF_loop", 4.0, 1, 0, 0, 0, 0);
            case 2: ApplyAnimationEx(playerid,"GRAVEYARD","mrnM_loop", 4.0, 1, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /cry [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:kiss(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /kiss [1-6]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"KISSING","Grlfrd_Kiss_01",4.0,0,0,0,0,0);
            case 2: ApplyAnimationEx(playerid,"KISSING","Grlfrd_Kiss_02",4.0,0,0,0,0,0);
            case 3: ApplyAnimationEx(playerid,"KISSING","Grlfrd_Kiss_03",4.0,0,0,0,0,0);
            case 4: ApplyAnimationEx(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
            case 5: ApplyAnimationEx(playerid,"KISSING","Playa_Kiss_02",4.0,0,0,0,0,0);
            case 6: ApplyAnimationEx(playerid,"KISSING","Playa_Kiss_03",4.0,0,0,0,0,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /kiss [1-6]");
		}
	}
	return 1;
}
//============================================//
COMMAND:carsit(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"CAR","Tap_hand", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:stretch(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"PLAYIDLES","stretch",4.0,0,0,0,0,0);
    return 1;
}
//============================================//
COMMAND:chant(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"RIOT","RIOT_CHANT", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:ghand(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ghand [1-5]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"GHANDS","gsign1LH",4.0,0,1,1,1,1);
            case 2: ApplyAnimationEx(playerid,"GHANDS","gsign2LH",4.0,0,1,1,1,1);
            case 3: ApplyAnimationEx(playerid,"GHANDS","gsign3LH",4.0,0,1,1,1,1);
            case 4: ApplyAnimationEx(playerid,"GHANDS","gsign4LH",4.0,0,1,1,1,1);
            case 5: ApplyAnimationEx(playerid,"GHANDS","gsign5LH",4.0,0,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ghand [1-5]");
		}
	}
	return 1;
}
//============================================//
COMMAND:exhausted(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:carsmoke(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"PED","Smoke_in_car", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:basket(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /basket [1-7]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_def_loop", 4.0, 1, 0, 0, 0, 0);
            case 2: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_idleloop", 4.0, 1, 0, 0, 0, 0);
            case 3: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
            case 4: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
            case 5: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
            case 6: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
            case 7: ApplyAnimationEx(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /basket [1-7]");
		}
	}
	return 1;
}
//============================================//
COMMAND:cockgun(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:toss(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "GRENADE", "WEAPON_throw", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:open(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "AIRPORT", "thrw_barl_thrw", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:liftup(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:putdown(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:hide(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:smoke(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /smoke [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 1, 0);
            case 2: ApplyAnimationEx(playerid,"GANGS","smkcig_prtl",4.0,0,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /smoke [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:spray(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /spray [1-4]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"GRAFFITI", "graffiti_Chkout", 4.0,1,1,1,1,1);
            case 2: ApplyAnimationEx(playerid,"GRAFFITI","spraycan_fire",4.0,0,1,1,1,1);
            case 3: ApplyAnimationEx(playerid,"SPRAYCAN","spraycan_fire",4.0,0,1,1,1,1);
            case 4: ApplyAnimationEx(playerid,"SPRAYCAN","spraycan_full",4.0,0,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sray [1-4]");
		}
	}
	return 1;
}
//============================================//
COMMAND:lean(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lean [1-3]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"GANGS","leanIDLE",4.0,0,0,0,1,0);
            case 2: ApplyAnimationEx(playerid,"MISC","Plyrlean_loop",4.0,0,0,0,1,0);
            case 3: ApplyAnimationEx(playerid,"BAR","BARman_idle",3.0,0,1,1,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lean [1-3]");
		}
	}
	return 1;
}

//============================================//
COMMAND:stance(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return scm(playerid, COLOR_ERROR, "USAGE: /stance [1-11]");
    switch(type)
    {
		case 1: ApplyAnimationEx(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
		case 2: ApplyAnimationEx(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
		case 3: ApplyAnimationEx(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
		case 4: ApplyAnimationEx(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
		case 5: ApplyAnimationEx(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
		case 6: ApplyAnimationEx(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		case 7: ApplyAnimationEx(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
		case 8: ApplyAnimationEx(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
		case 9: ApplyAnimationEx(playerid,"PED","turn_l",4.0,1,0,0,0,0);
		case 10: ApplyAnimationEx(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0);
		case 11: ApplyAnimationEx(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0);
		default: scm(playerid, COLOR_ERROR, "USAGE: /stance [1-11]");
    }
    return 1;
}
//============================================//
COMMAND:bar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bar [1-12]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"BAR","Barcustom_get",4.0,0,0,0,1,0);
		    case 2: ApplyAnimationEx(playerid,"BAR","Barcustom_loop",4.0,0,0,0,1,0);
		    case 3: ApplyAnimationEx(playerid,"BAR","Barcustom_order",4.0,0,0,0,1,0);
		    case 4: ApplyAnimationEx(playerid,"BAR","BARman_idle",4.0, 1, 0, 0, 1, 0);
		    case 5: ApplyAnimationEx(playerid,"BAR","Barserve_bottle",4.0,0,0,0,1,0);
		    case 6: ApplyAnimationEx(playerid,"BAR","Barserve_give",4.0,0,0,0,1,0);
		    case 7: ApplyAnimationEx(playerid,"BAR","Barserve_glass",4.0,0,0,0,1,0);
		    case 8: ApplyAnimationEx(playerid,"BAR","Barserve_in",4.0,0,0,0,1,0);
		    case 9: ApplyAnimationEx(playerid,"BAR","Barserve_loop",4.0,0,0,0,1,0);
		    case 10: ApplyAnimationEx(playerid,"BAR","Barserve_order",4.0,0,0,0,1,0);
		    case 11: ApplyAnimationEx(playerid,"BAR","dnk_stndF_loop",4.0,0,0,0,1,0);
		    case 12: ApplyAnimationEx(playerid,"BAR","dnk_stndM_loop",4.0,0,0,0,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lean [1-12]");
		}
	}
	return 1;
}
//============================================//
COMMAND:bench(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bench [1-5]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"benchpress","gym_bp_geton",4.0,0,0,0,1,0);
		    case 2: ApplyAnimationEx(playerid,"benchpress","gym_bp_getoff",4.0,0,0,0,1,0);
		    case 3: ApplyAnimationEx(playerid,"benchpress","gym_bp_down",4.0,0,0,0,1,0);
		    case 4: ApplyAnimationEx(playerid,"benchpress","gym_bp_up_A",4.0,0,0,0,1,0);
		    case 5: ApplyAnimationEx(playerid,"benchpress","gym_bp_up_B",4.0,0,0,0,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bench [1-5]");
		}
	}
	return 1;
}
//============================================//
COMMAND:dance(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dance [1-15]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
            case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
            case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
            case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
            case 5: ApplyAnimationEx(playerid,"DANCING","bd_clap",4.0, 1, 0, 0, 1, 0);
            case 6: ApplyAnimationEx(playerid,"DANCING","DAN_Down_A",4.0, 1, 0, 0, 1, 0);
            case 7: ApplyAnimationEx(playerid,"DANCING","DAN_Left_A",4.0, 1, 0, 0, 1, 0);
            case 8: ApplyAnimationEx(playerid,"DANCING","DAN_Loop_A",4.0, 1, 0, 0, 1, 0);
            case 9: ApplyAnimationEx(playerid,"DANCING","DAN_Right_A",4.0, 1, 0, 0, 1, 0);
            case 10: ApplyAnimationEx(playerid,"DANCING","DAN_Up_A",4.0, 1, 0, 0, 1, 0);
            case 11: ApplyAnimationEx(playerid,"DANCING","dnce_M_a",4.0, 1, 0, 0, 1, 0);
            case 12: ApplyAnimationEx(playerid,"DANCING","dnce_M_b",4.0, 1, 0, 0, 1, 0);
            case 13: ApplyAnimationEx(playerid,"DANCING","dnce_M_c",4.0, 1, 0, 0, 1, 0);
            case 14: ApplyAnimationEx(playerid,"DANCING","dnce_M_d",4.0, 1, 0, 0, 1, 0);
            case 15: ApplyAnimationEx(playerid,"DANCING","dnce_M_e",4.0, 1, 0, 0, 1, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dance [1-15]");
		}
	}
	return 1;
}
//============================================//
COMMAND:rap(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /rap [1-3]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
            case 2: ApplyAnimationEx(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
            case 3: ApplyAnimationEx(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /rap [1-3]");
		}
	}
	return 1;
}
//============================================//
COMMAND:wankoff(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /wankoff [1-3]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
            case 2: ApplyAnimationEx(playerid,"PAULNMAC","wank_loop",4.0, 1, 0, 0, 1, 0);
            case 3: ApplyAnimationEx(playerid,"PAULNMAC","wank_out",4.0,1,1,1,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /wankoff [1-3]");
		}
	}
	return 1;
}
//============================================//
COMMAND:strip(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /strip [1-7]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"STRIP","strip_A",4.0,1,1,1,1,0);
            case 2: ApplyAnimationEx(playerid,"STRIP","strip_B",4.0,1,1,1,1,0);
            case 3: ApplyAnimationEx(playerid,"STRIP","strip_C",4.0,1,1,1,1,0);
            case 4: ApplyAnimationEx(playerid,"STRIP","strip_D",4.0,1,1,1,1,0);
            case 5: ApplyAnimationEx(playerid,"STRIP","strip_E",4.0,1,1,1,1,0);
            case 6: ApplyAnimationEx(playerid,"STRIP","strip_F",4.0,1,1,1,1,0);
            case 7: ApplyAnimationEx(playerid,"STRIP","strip_G",4.0,1,1,1,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /strip [1-7]");
		}
	}
	return 1;
}
//============================================//
COMMAND:sexy(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sexy [1-8]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1);
            case 2: ApplyAnimationEx(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,1);
            case 3: ApplyAnimationEx(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,1);
            case 4: ApplyAnimationEx(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,1);
            case 5: ApplyAnimationEx(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1);
            case 6: ApplyAnimationEx(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,1);
            case 7: ApplyAnimationEx(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,1);
            case 8: ApplyAnimationEx(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sexy [1-8]");
		}
	}
	return 1;
}
//============================================//
COMMAND:bj(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bj [1-18]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
            case 2: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
            case 3: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1);
            case 4: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
            case 5: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
            case 6: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
            case 7: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
            case 8: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
            case 9: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,1);
            case 10: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,1);
            case 11: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
            case 12: ApplyAnimationEx(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
            case 13: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_CAR_START_W", 4.0, 0, 1, 1, 1, -1);
		    case 14: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 1, 1, 1, -1);
		    case 15: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 1, 1, 1, 1, 0);
		    case 16: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_P", 4.0, 1, 1, 1, 1, 0);
		    case 17: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_CAR_END_W", 4.0, 0, 1, 1, 1, -1);
		    case 18: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 1, 1, 1, -1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bj [1-18]");
		}
	}
	return 1;
}
//============================================//
COMMAND:elbow(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
    return 1;
}
//============================================//
COMMAND:fstance(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
    return 1;
}
//============================================//
COMMAND:gpunch(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
    return 1;
}
//============================================//
COMMAND:airkick(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
    return 1;
}
//============================================//
COMMAND:gkick(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
    return 1;
}
//============================================//
COMMAND:dpunch(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FIGHT_B","FightB_1",4.0,0,1,1,0,0);
    return 1;
}
//============================================//
COMMAND:getup(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0 && GetPVarInt(playerid, "Dead") != 5) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    if(GetPVarInt(playerid, "Dead") == 5)
    {
        if(GetPVarInt(playerid, "CrackTime") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait atleast 1 minute before getting up.");
        SetPVarInt(playerid, "Dead", 0);
        SetPlayerHealthEx(playerid, 10);
        TogglePlayerControllable(playerid, true);

        DestroyDynamic3DTextLabel(PlayerInfo[playerid][pInjuriesText]);
    }
    ApplyAnimationEx(playerid,"PED","getup",4.0,0,0,0,0,0);
    return 1;
}
//============================================//
COMMAND:cuff(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"COP_AMBIENT","Copbrowse_shake",4.0, 0, 1, 1, 1, -1);
    return 1;
}
//============================================//
COMMAND:celebrate(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"benchpress","gym_bp_celebrate", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:eatsit(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"FOOD","FF_Sit_Loop", 4.0, 1, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:dive(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dive [1-3]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
            case 1: ApplyAnimationEx(playerid,"ped","Crouch_Roll_L",4.0,0,1,1,0,0);
            case 2: ApplyAnimationEx(playerid,"ped","Crouch_Roll_R",4.0,0,1,1,0,0);
            case 3: ApplyAnimationEx(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dive [1-3]");
		}
	}
	return 1;
}
//============================================//
COMMAND:hold(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "ped", "IDLE_armed", 4.0, 1, 0, 0, 1, 0);
    return 1;
}
//============================================//
COMMAND:pool(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /pool [1-11]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1);
		    case 2: ApplyAnimationEx(playerid,"POOL","POOL_Idle_Stance",4.0, 0, 1, 1, 1, -1);
		    case 3: ApplyAnimationEx(playerid,"POOL","POOL_Long_Shot",4.0, 0, 1, 1, 1, -1);
		    case 4: ApplyAnimationEx(playerid,"POOL","POOL_Long_Start",4.0, 0, 1, 1, 1, -1);
		    case 5: ApplyAnimationEx(playerid,"POOL","POOL_Med_Shot",4.0, 0, 1, 1, 1, -1);
		    case 6: ApplyAnimationEx(playerid,"POOL","POOL_Med_Start",4.0, 0, 1, 1, 1, -1);
		    case 7: ApplyAnimationEx(playerid,"POOL","POOL_Place_White",4.0, 0, 1, 1, 1, -1);
		    case 8: ApplyAnimationEx(playerid,"POOL","POOL_Short_Shot",4.0, 0, 1, 1, 1, -1);
		    case 9: ApplyAnimationEx(playerid,"POOL","POOL_Short_Start",4.0, 0, 1, 1, 1, -1);
		    case 10: ApplyAnimationEx(playerid,"POOL","POOL_XLong_Shot",4.0, 0, 1, 1, 1, -1);
		    case 11: ApplyAnimationEx(playerid,"POOL","POOL_XLong_Start",4.0, 0, 1, 1, 1, -1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /pool [1-11]");
		}
	}
	return 1;
}
//============================================//
COMMAND:gfunk(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gfunk [1-17]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid,"GFUNK","DANCE_LOOP",4.0, 1, 0, 0, 1, 0);
		    case 2: ApplyAnimationEx(playerid,"GFUNK","DANCE_G3",4.0, 1, 0, 0, 1, 0);
		    case 3: ApplyAnimationEx(playerid,"GFUNK","DANCE_G4",4.0, 1, 0, 0, 1, 0);
		    case 4: ApplyAnimationEx(playerid,"GFUNK","DANCE_G2",4.0, 1, 0, 0, 1, 0);
		    case 5: ApplyAnimationEx(playerid,"GFUNK","DANCE_G1",4.0, 1, 0, 0, 1, 0);
		    case 6: ApplyAnimationEx(playerid,"GFUNK","DANCE_G10",4.0, 1, 0, 0, 1, 0);
		    case 7: ApplyAnimationEx(playerid,"GFUNK","DANCE_G9",4.0, 1, 0, 0, 1, 0);
		    case 8: ApplyAnimationEx(playerid,"GFUNK","DANCE_G11",4.0, 1, 0, 0, 1, 0);
		    case 9: ApplyAnimationEx(playerid,"GFUNK","DANCE_G12",4.0, 1, 0, 0, 1, 0);
		    case 10: ApplyAnimationEx(playerid,"WOP","DANCE_LOOP",4.0, 1, 0, 0, 1, 0);
		    case 11: ApplyAnimationEx(playerid,"WOP","DANCE_G10",4.0, 1, 0, 0, 1, 0);
		    case 12: ApplyAnimationEx(playerid,"WOP","DANCE_G9",4.0, 1, 0, 0, 1, 0);
		    case 13: ApplyAnimationEx(playerid,"WOP","DANCE_G12",4.0, 1, 0, 0, 1, 0);
		    case 14: ApplyAnimationEx(playerid,"WOP","DANCE_G11",4.0, 1, 0, 0, 1, 0);
		    case 15: ApplyAnimationEx(playerid,"WOP","DANCE_G2",4.0, 1, 0, 0, 1, 0);
		    case 16: ApplyAnimationEx(playerid,"WOP","DANCE_G1",4.0, 1, 0, 0, 1, 0);
		    case 17: ApplyAnimationEx(playerid,"WOP","DANCE_G4",4.0, 1, 0, 0, 1, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gfunk [1-17]");
		}
	}
	return 1;
}
//============================================//
COMMAND:idle(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /idle [1-4]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_HBHB", 4.0, 1, 0, 0, 1, 0);
		    case 2: ApplyAnimationEx(playerid, "PLAYIDLES", "shift", 4.0,1,1,1,1,0);
		    case 3: ApplyAnimationEx(playerid, "PLAYIDLES", "shldr", 4.0,1,1,1,1,0);
		    case 4: ApplyAnimationEx(playerid, "PLAYIDLES", "strleg", 4.0,1,1,1,1,0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /idle [1-4]");
		}
	}
	return 1;
}
//============================================//
COMMAND:box(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"GYMNASIUM","gym_shadowbox",4.1,1,1,1,1,1);
    return 1;
}
//============================================//
COMMAND:hoodfrisked(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
    return 1;
}
//============================================//
COMMAND:lookout(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:follow(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
    return 1;
}
//============================================//
COMMAND:facepalm(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "MISC", "plyr_shkhead", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:cover(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /cover [1-6]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
            case 1: ApplyAnimationEx(playerid, "SWAT", "swt_wllshoot_in_L", 4.0, 0, 1, 1, 1, -1);
            case 2: ApplyAnimationEx(playerid, "SWAT", "swt_wllshoot_in_R", 4.0, 0, 1, 1, 1, -1);
            case 3: ApplyAnimationEx(playerid, "SWAT", "swt_wllshoot_out_L", 4.0, 0, 1, 1, 1, -1);
            case 4: ApplyAnimationEx(playerid, "SWAT", "swt_wllshoot_out_R", 4.0, 0, 1, 1, 1, -1);
            case 5: ApplyAnimationEx(playerid, "SWAT", "swt_wllpk_L", 4.0, 0, 1, 1, 1, -1);
            case 6: ApplyAnimationEx(playerid, "SWAT", "swt_wllpk_R", 4.0, 0, 1, 1, 1, -1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /cover [1-6]");
		}
	}
	return 1;
}
//============================================//
COMMAND:fixcar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /fixcar [1-2]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid, "CAR","Fixn_Car_Loop", 4.0, 1, 0, 0, 1, 0);
            case 2: ApplyAnimationEx(playerid, "CAR","Fixn_Car_Out", 3.0, 0, 0, 0, 0, 0);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /fixcar [1-2]");
		}
	}
	return 1;
}
//============================================//
COMMAND:lowrider(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lowrider [1-8]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
        if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
        SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
		switch(aimid)
		{
		    case 1: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_hair", 4.0, 0, 1, 1, 1, -1);
		    case 2: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_hurry", 4.0, 0, 1, 1, 1, -1);
		    case 3: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_idleloop", 4.0, 0, 1, 1, 1, -1);
		    case 4: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_idle_to_l0", 4.0, 0, 1, 1, 1, -1);
		    case 5: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_l0_loop", 4.0, 0, 1, 1, 1, -1);
		    case 6: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_l1_loop", 4.0, 0, 1, 1, 1, -1);
		    case 7: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_l1_to_l2", 4.0, 0, 1, 1, 1, -1);
		    case 8: ApplyAnimationEx(playerid, "LOWRIDER","lrgirl_l2_to_l3", 4.0, 0, 1, 1, 1, -1);
            default: SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lowrider [1-8]");
		}
	}
	return 1;
}
//============================================//
COMMAND:yell(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "RIOT", "RIOT_shout", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:sit(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return scm(playerid, COLOR_ERROR, "USAGE: /sit [1-6]");
    switch(type)
    {
		case 1: ApplyAnimationEx(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
		case 2: ApplyAnimationEx(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
		case 3: ApplyAnimationEx(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
		case 4: ApplyAnimationEx(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
		case 5: ApplyAnimationEx(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid,"BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		default: scm(playerid, COLOR_ERROR, "USAGE: /sit [1-6]");
    }
    return 1;
}
//============================================//
COMMAND:puton(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
    if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
    SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
    ApplyAnimationEx(playerid, "goggles", "goggles_put_on", 3.0, 0, 0, 0, 0, 0);
    return 1;
}
//============================================//
COMMAND:fdduty(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You can not use this while not on duty.");
    if(!PlayerToCar(playerid,1,3.0)) return SendClientMessage(playerid, COLOR_ERROR, "WARNING: You are not close to any vehicle.");
    new carid = PlayerToCar(playerid,2,3.0);
    if(IsNotAEngineCar(carid)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle dosent have an engine.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1)
    {
		switch(GetPVarInt(playerid, "Rank"))
		{
		    case 1:
		    {
			    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to fire dept equipment.");
			    return true;
			}
		}
        switch(GetVehicleModel(carid))
        {
            case 407, 427, 490, 544, 596, 597, 598, 599:
            {
                ShowPlayerDialogEx(playerid,101,DIALOG_STYLE_LIST,"LSFD Equipment","Toggle Duty\nFirefighter Equipment\nScuba Gear","Select", "");
            }
            default: SendClientMessage(playerid, COLOR_ERROR, "You can only access this command around a firetruck!");
        }
    }
	return 1;
}
//============================================//
COMMAND:fdlocate(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You can not use this while not on duty.");
    if(GetPVarInt(playerid, "FDDUTY") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You can not use this while not on fire duty.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1)
    {
		new string[128], found = 0;
      	for(new i = 0; i < sizeof(FireInfo); i++)
  	    {
		    if(FireInfo[i][fiTime] > 0)
		    {
				SendClientMessage(playerid, COLOR_PINK, "DISPATCH: We've marked a located fire on your GPS.");
				format(string, 128, "DISPATCH: Location: %s.", GetZone(FireInfo[i][fiX], FireInfo[i][fiY], FireInfo[i][fiZ]));
				SendClientMessage(playerid, COLOR_PINK, string);
	            SetPlayerCheckpoint(playerid,FireInfo[i][fiX], FireInfo[i][fiY], FireInfo[i][fiZ],2.0);
		        found++;
		        return true;
		    }
  	    }
  	    if(found == 0) return SendClientMessage(playerid, COLOR_ERROR, "There are no fires to locate!");
    }
	return 1;
}
//============================================//
COMMAND:treatwound(playerid, params[])
{
	new string[128], charge, Float:health, hp;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
	if(GetPVarInt(playerid,"Wound_T") == 0 && GetPVarInt(playerid,"Wound_A") == 0 && GetPVarInt(playerid,"Wound_L") == 0 && GetPVarInt(playerid,"Wound_K") == 0) return SendClientMessage(playerid,COLOR_ERROR,"You don't have any wounds.");
    if(IsPlayerInRangeOfPoint(playerid,3.0,2041.0728,-1337.5627,1271.4860))
    {
		charge = 150;
		if(GetPVarInt(playerid,"Wound_T") > 0) charge +=100;
		if(GetPVarInt(playerid,"Wound_A") > 0) charge +=50;
		if(GetPVarInt(playerid,"Wound_L") > 0) charge +=80;
		if(GetPVarInt(playerid,"Wound_K") > 0) charge +=80;
		GetPlayerHealth(playerid, health);
		hp = floatround(health);
		switch(hp)
		{
		    case 0 .. 20: charge +=100;
		    case 21 .. 40: charge +=80;
		    case 41 .. 60: charge +=60;
		    case 61 .. 80: charge +=40;
		    case 81 .. 150: charge +=20;
		}
		SetPVarInt(playerid, "WoundC", charge);
		format(string, 128, "Would you like to treat your wound(s)?\nCost: %s", FormatMoney(charge));
		ShowPlayerDialogEx(playerid, 104, DIALOG_STYLE_MSGBOX, "Treat Wounds", string, "Yes", "No");
    }
    else SendClientMessage(playerid,COLOR_ERROR,"You are not around the hospital table.");
    return 1;
}
//============================================//
COMMAND:treatplayer(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /treatplayer [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(targetid,"Wound_T") == 0 && GetPVarInt(targetid,"Wound_A") == 0 && GetPVarInt(targetid,"Wound_L") == 0 && GetPVarInt(playerid,"Wound_K") == 0) return SendClientMessage(playerid,COLOR_ERROR,"This player doesn't have any wounds.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1 || GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "MedLic") > 1)
		{
		    if(PlayerToPlayer(playerid,targetid,3.0))
		    {
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
                format(string, sizeof(string), "*** %s treats %s's wound.", sendername, giveplayer);
    	        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
                SetPVarInt(targetid, "Wound_T", 0);
    	        SetPVarInt(targetid, "Wound_A", 0);
    	        SetPVarInt(targetid, "Wound_L", 0);
    	        SetPVarInt(targetid, "Wound_K", 0);
    	        PlayerWound(targetid, 0, 0);

				if(GetPVarInt(playerid, "MedLic") >= 2 && GetPVarInt(playerid, "Admin") < 1)
				{
					format(string, sizeof(string),"AdmWarn: %s has treated %s's (ID: %i) wounds with MedLic.", PlayerInfo[playerid][pName], PlayerInfo[targetid][pName], targetid);
					SendAdminMessage(COLOR_YELLOW, string);
				}
    	    }
    	    else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:revive(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") >= 1 || (GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1) || GetPVarInt(playerid, "MedLic") > 2)
	{
		new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
		if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /revive [playerid]");
		else
		{
		    if(targetid == playerid && GetPVarInt(playerid, "Admin") < 1) return error(playerid, "Cannot revive yourself.");
		    if (GetPVarInt(targetid, "Dead") == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player is not dead yet.");
	 		if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
 			if(PlayerToPlayer(playerid,targetid,5.0) || targetid == playerid)
    		{
				format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
			    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
		   		GiveNameSpace(sendername);
				GiveNameSpace(giveplayer);
			    format(string, sizeof(string), "*** %s uses %s defibrillator on %s.", sendername, CheckSex(playerid), giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		  		SetPVarInt(targetid, "Dead", 0);
		  		SetPVarInt(targetid, "Mute", 0);
				TogglePlayerControllableEx(targetid,true);
				SetPlayerHealthEx(targetid,10.0);
				PlayerWound(targetid, 0, 0);
				PlaySoundPlyRadius(targetid, 6003, 10.0);
				if(GetPVarInt(targetid, "Member") == FACTION_LSPD && GetPVarInt(targetid, "Duty") == 1)
        		{
            		format(string, sizeof(string),"%s", PlayerNameEx(targetid));
            		SetPlayerColor(targetid, 0x8080FFFF);
		    		if(GetPVarInt(targetid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[targetid], 0x8080FFFF, string);
				}
        		if(GetPVarInt(targetid, "Member") == FACTION_LSFD && GetPVarInt(targetid, "Duty") == 1)
        		{
            		format(string, sizeof(string),"%s", PlayerNameEx(targetid));
            		SetPlayerColor(targetid, COLOR_PINK);
		    		if(GetPVarInt(targetid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[targetid], COLOR_PINK, string);
				}
				if(GetPVarInt(playerid, "MedLic") > 2 && GetPVarInt(playerid, "Admin") < 1)
				{
					format(string, sizeof(string),"AdmWarn: %s (ID: %i) has revived %s (ID: %i) with medical license.", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid);
					SendAdminMessage(COLOR_YELLOW, string);
				}
			}
		}
	}
	else nal(playerid);
	return 1;
}
//============================================//
ALTCOMMAND:savedata->saveaccounts;
COMMAND:saveaccounts(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 7)
    {
        foreach(new i : Player)
        {
            OnPlayerDataSave(i);
        }
        
       	SaveHouses(0);
       	SaveBizes(0);

   	    foreach(new i : VehicleIterator)
   	    {
   	        if(VehicleInfo[i][vID] != 0)
   	        {
				SaveVehicleData(i);
		    }
		}

		for(new i = 1; i < MAX_FACTIONS; i++)
		{
			SaveFaction(i);
		}
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
    return 1;
}
//============================================//
COMMAND:gametext(playerid, params[])
{
	new string[128], style;
	if(sscanf(params, "s[128]i", string, style)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gametext [string] [style]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7) GameTextForPlayer(playerid,string,5000,style);
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:factionon(playerid, params[])
{
	new amount,string[128];
	if(sscanf(params, "i", amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionon [factionid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(amount < 1 || amount > MAX_FACTIONS) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1 or above 50.");
		new online = 0;
		foreach(new i : Player)
		{
		    if(GetPVarInt(i, "Member") == amount)
		    {
				if(GetPVarInt(i, "PlayerLogged") == 1)
				{
				    online++;
			    }
		    }
	    }
		if(isnull(FactionInfo[amount][fName])) return SCM(playerid, COLOR_ERROR, "Invalid faction-ID!");
		format(string, sizeof(string), "(( There are %d members of the %s online ))",online, FactionInfo[amount][fName]);
		SendClientMessage(playerid, 0x8080FF96, string);
	}
	return 1;
}
//============================================//
COMMAND:rank(playerid, params[])
{
	new targetid,rank,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, rank)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /rank [playerid] [rank]");

    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	if(rank < 1 || rank > GetPVarInt(playerid, "Rank"))
	{
		format(string, 128, "Cannot go under 1 or above %d.", GetPVarInt(playerid, "Rank"));
		SendClientMessage(playerid, COLOR_ERROR, string);
		return true;
	}
    if (GetPVarInt(targetid, "Member") != GetPVarInt(playerid, "Member")) return SendClientMessage(playerid, COLOR_WHITE, "That player is not in the same faction as yours.");

	if(IsPlayerConnected(targetid))
	{
		if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")) || (GetPVarInt(playerid, "Member") == 1 && GetPVarInt(playerid, "Rank") > 10) || (GetPVarInt(playerid, "Member") == 2 && GetPVarInt(playerid, "Rank") > 9) || (GetPVarInt(playerid, "Member") == 5 && GetPVarInt(playerid, "Rank") > 9))
		{
			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
	    	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
	  		GiveNameSpace(sendername);
	    	GiveNameSpace(giveplayer);
	    	new pdtxt[50];
	    	if(rank > GetPVarInt(targetid, "Rank")) pdtxt="promoted";
	    	if(rank < GetPVarInt(targetid, "Rank")) pdtxt="demoted";
	    	SetPVarInt(targetid, "Rank", rank);
	    	format(string, sizeof(string), "You have been %s by %s.", pdtxt, sendername);
	       	SendClientMessage(targetid,COLOR_ERROR,string);
	        format(string, sizeof(string), "You have %s %s.", pdtxt, giveplayer);
	        SendClientMessage(playerid,COLOR_ERROR,string);
		}
	}
	return 1;
}
//============================================//
COMMAND:rights(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /rights [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	    if (GetPVarInt(targetid, "Member") != GetPVarInt(playerid, "Member")) return SendClientMessage(playerid, COLOR_WHITE, "That player is not in the same faction as yours.");
		if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")))
		{
   		    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
	    	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
        	GiveNameSpace(giveplayer);

        	if(GetPVarInt(targetid, "Frights") == 0)
        	{
        		SetPVarInt(targetid, "Frights", 1);
        		format(string, sizeof(string), "Warehouse rights given to %s by leader %s.", giveplayer, sendername);
        	}
        	else
        	{
        		SetPVarInt(targetid, "Frights", 0);
        		format(string, sizeof(string), "Warehouse rights taken from %s by leader %s.", giveplayer, sendername);
        	}
			SendFactionMessage(GetPVarInt(playerid, "Member"), COLOR_WHITE, string);
		}
	}
	return 1;
}
//============================================//
COMMAND:division(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR, "You must be in LSPD to use this.");
	if(GetPVarInt(playerid, "Rank") < 11) return SendClientMessage(playerid, COLOR_ERROR, "You do not have permission to this command!");

	new targetid, option[32], division, string[128], sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "s[32]ui", option, targetid, division))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /division [add/remove] [playerid] [divsion]");
		SendClientMessage(playerid, COLOR_ERROR, "1: SWAT | 2: Detective | 3: Traffic | 4: Air Support");
	}
	else
	{
		if(GetPVarInt(targetid, "Member") != GetPVarInt(playerid, "Member")) return SendClientMessage(playerid, COLOR_WHITE, "That player is not in the same faction as yours.");

		if(division < 1 || division > 4)
		{
			SendClientMessage(playerid, COLOR_ERROR, "USAGE: /division [add/remove] [playerid] [divsion]");
			SendClientMessage(playerid, COLOR_ERROR, "1: SWAT | 2: Detective | 3: Traffic | 4: Air Support");
			return 1;
		}

		format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
    	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
  		GiveNameSpace(sendername);
    	GiveNameSpace(giveplayer);

	    if(!strcmp(option, "add"))
	    {
	    	for(new i = 0; i < MAX_LSPD_DIVISIONS; i++)
	    	{
	    		if(PlayerInfo[targetid][pDivision][i] == division)
	    		{
	    			format(string, sizeof(string), "%s is already apart of the %s division.", giveplayer, LSPDDivisions[division]);
	    			return SendClientMessage(playerid, COLOR_ERROR, string);
	    		}
	    	}

    	    for(new i = 0; i < MAX_LSPD_DIVISIONS; i++)
        	{
        		if(PlayerInfo[targetid][pDivision][i] == 0)
        		{
    	    		format(string, sizeof(string), "You have promoted %s to the %s division.", giveplayer, LSPDDivisions[division]);
    	    		SendClientMessage(playerid, COLOR_WHITE, string);

        			PlayerInfo[targetid][pDivision][i] = division;
    	    		format(string, sizeof(string), "You have been promoted to %s division by %s.", LSPDDivisions[division], sendername);
    	    		SendClientMessage(targetid, COLOR_WHITE, string);
        			return 1;
        		}
        	}
        }
        else if(!strcmp(option, "remove"))
        {
        	for(new i = 0; i < MAX_LSPD_DIVISIONS; i++)
	    	{
	    		if(PlayerInfo[targetid][pDivision][i] == division)
	    		{
	    			format(string, sizeof(string), "You have removed %s from the %s division.", giveplayer, LSPDDivisions[division]);
    	    		SendClientMessage(playerid, COLOR_WHITE, string);

	    			PlayerInfo[targetid][pDivision][i] = 0;
    	    		format(string, sizeof(string), "You have been removed from the %s division by %s.", LSPDDivisions[division], sendername);
    	    		SendClientMessage(targetid, COLOR_WHITE, string);
    	    		return 1;
	    		}
	    	}
	    	format(string, sizeof(string), "%s is not a part of the %s division.", giveplayer, LSPDDivisions[division]);
    	    SendClientMessage(playerid, COLOR_ERROR, string);
        }
	}
	return 1;
}
//============================================//
COMMAND:tag(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	if(GetPVarInt(playerid, "Rank") >= 1)
	{
		new font, size;
		if(sscanf(params, "ii", font, size)) return SendClientMessage(playerid, COLOR_ERROR, "/tag [font] [size]"),
			SendClientMessage(playerid, COLOR_ERROR, "FONTS: 1 = Arial, 2 = Constantia, 3 = Gabriola, 4 = Impact"),
			SendClientMessage(playerid, COLOR_ERROR, "SIZE: 16 - 64");

		switch(font)
		{
			case 1: SetPVarString(playerid, "TagFont", "Arial");
			case 2: SetPVarString(playerid, "TagFont", "Constantia");
			case 3: SetPVarString(playerid, "TagFont", "Gabriola");
			case 4: SetPVarString(playerid, "TagFont", "Impact");
			default: return cmd_tag(playerid, "");
		}

		if(size <= 64 && size >= 16)
		{
			SetPVarInt(playerid, "TagSize", size);
		}
		else
		{
			return cmd_tag(playerid, "");
		}

        if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be outside to use this command!");
        if (GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be outside to use this command!");
        if (FactionInfo[GetPVarInt(playerid, "Member")][fTagRights] == 0) return scm(playerid, COLOR_ERROR, "You do not have permission to this command!");
        if(PlayerInfo[playerid][pPlayerWeapon] != 41) return scm(playerid, COLOR_ERROR, "You need a spraycan to use this!");
        new Float:X, Float:Y, Float:Z, obj = 0;
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, 19353, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);

		new font_name[32];
		GetPVarString(playerid, "TagFont", font_name, sizeof(font_name));

		SetPlayerObjectMaterialText(playerid, obj, "Generic Text 123", 0, OBJECT_MATERIAL_SIZE_256x128,\
		font_name, size, 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 6);
		SetPVarInt(playerid, "Mute", 1);
		EditPlayerObject(playerid, obj);
		SendClientMessage(playerid, COLOR_WHITE, "Place the tag on a wall of your choice, use the SPRINT key to navigate.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You do not have permission to this command!");
	return 1;
}
//============================================//
COMMAND:factionranks(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") >= 4)
	{
		new factionid;
		if(sscanf(params, "i", factionid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionranks [factionid]");
		
		new string[128];
		format(string, sizeof(string), "Facton ID %i ranks:", factionid);
		SendClientMessage(playerid, COLOR_WHITE, string);

		for(new i = 1; i < MAX_FACTION_RANKS; i++)
		{
			if(!isnull(FactionRankInfo[factionid][i][fRank]))
			{
				format(string, sizeof(string), "Rank %i: %s (%s)", i, FactionRankInfo[factionid][i][fRank], FormatMoney(FactionRankInfo[factionid][i][fRankBonus]));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}
	else if(GetPVarInt(playerid, "Member") > 0 && GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")))
	{
		new string[128], factionid = GetPVarInt(playerid, "Member");
		format(string, sizeof(string), "%s ranks:", FactionInfo[factionid][fName], factionid);
		SendClientMessage(playerid, COLOR_WHITE, string);

		for(new i = 1; i < MAX_FACTION_RANKS; i++)
		{
			if(!isnull(FactionRankInfo[factionid][i][fRank]))
			{
				format(string, sizeof(string), "Rank %i: %s (%s)", i, FactionRankInfo[factionid][i][fRank], FormatMoney(FactionRankInfo[factionid][i][fRankBonus]));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");
		return 1;
	}
	return 1;
}
COMMAND:factionrank(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");

	new factionid, rankid, name[64];
	if(sscanf(params, "iis[64]", factionid, rankid, name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionrank [factionid] [rankid] [name]");
	if(strlen(name) >= 64) return SendClientMessage(playerid, COLOR_WHITE, "Faction rank is too long.");

	new string[128];
	format(string, 128, "Faction ID %i rank %d set to %s.", factionid, rankid, name);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(FactionRankInfo[factionid][rankid][fRank], 64, name);
	SaveFaction(factionid);
	return 1;
}
//
COMMAND:factionrankremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");

	new factionid, rankid;
	if(sscanf(params, "ii", factionid, rankid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionrankremove [factionid] [rankid]");

	new string[128];
	format(string, 128, "Faction ID %i rank %d removed.", factionid, rankid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(FactionRankInfo[factionid][rankid][fRank], 64, "");
	SaveFaction(factionid);
	return 1;
}
//============================================//
COMMAND:factionrankbonus(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");

	new factionid, rankid, bonus;
	if(sscanf(params, "iii", factionid, rankid, bonus)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionrankbonus [factionid] [rankid] [bonus]");
	if(bonus < 0) return SendClientMessage(playerid, COLOR_WHITE, "Faction rank bonus can't be under 0.");

	new string[128];
	format(string, 128, "Faction ID %i rank %d bonus set to %i.", factionid, rankid, bonus);
	SendClientMessage(playerid, COLOR_WHITE, string);
	FactionRankInfo[factionid][rankid][fRankBonus] = bonus;
	SaveFaction(factionid);
	return 1;
}

COMMAND:towcars(playerid, params[])
{
 	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_RLS || GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE || GetPVarInt(playerid, "Member") == FACTION_LSG)
	{
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") < 10)
		{
			return 1;
		}

		if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") < 9)
		{
			return 1;
		}

		if(GetPVarInt(playerid, "Member") == FACTION_RLS && GetPVarInt(playerid, "Rank") < 5)
		{
			return 1;
		}

		if(GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE && GetPVarInt(playerid, "Rank") < 10)
		{
			return 1;
		}

		if(GetPVarInt(playerid, "Member") == FACTION_LSG && GetPVarInt(playerid, "Rank") < 10)
		{
			return 1;
		}

		foreach(new i : VehicleIterator)
		{
        	new found = 0;
        	switch(GetPVarInt(playerid, "Member"))
        	{
        		case 1:
        		{
        			if(VehicleInfo[i][vType] == VEHICLE_LSPD)
        			{
        				foreach(new i2 : Player)
						{
        					if(GetPlayerVehicleID(i2) == i)
        					{
        						found++;
        					}
        				}

        				if(found == 0)
        				{
        					VehicleInfo[i][vType] = 0;
					        CopInfo[i][Created] = 0;
					        CopInfo[i][Gun_Rack_Weapon] = 0;
							CopInfo[i][Gun_Rack_Ammo] = 0;
							CopInfo[i][Gun_Rack_E] = 0;
							CopInfo[i][Gun_Rack_Serial] = 0;
					        strmid(CopInfo[i][Owner], "None", 0, strlen("None"), 255);
        					DespawnVehicle(i);
        				}
        			}
        		}

        		case 2:
        		{
        			if(VehicleInfo[i][vType] == VEHICLE_LSFD)
        			{
        				foreach(new i2 : Player)
    					{
        					if(GetPlayerVehicleID(i2) == i)
        					{
        						found++;
        					}
        				}

        				if(found == 0)
        				{
        					VehicleInfo[i][vType] = 0;
        					DespawnVehicle(i);
        				}
        			}
        		}

        		case 3:
        		{
        			if(VehicleInfo[i][vType] == VEHICLE_RLS)
        			{
        				foreach(new i2 : Player)
    					{
        					if(GetPlayerVehicleID(i2) == i)
        					{
        						found++;
        					}
        				}

        				if(found == 0)
        				{
        					VehicleInfo[i][vType] = 0;
        					DespawnVehicle(i);
        				}
        			}
        		}

        		case 4:
        		{
        			if(VehicleInfo[i][vType] == VEHICLE_SAN)
        			{
        				foreach(new i2 : Player)
    					{
        					if(GetPlayerVehicleID(i2) == i)
        					{
        						found++;
        					}
        				}

        				if(found == 0)
        				{
        					VehicleInfo[i][vType] = 0;
        					DespawnVehicle(i);
        				}
        			}
        		}

        		case 8:
        		{
        			if(VehicleInfo[i][vType] == VEHICLE_GOV)
        			{
        				foreach(new i2 : Player)
						{
        					if(GetPlayerVehicleID(i2) == i)
        					{
        						found++;
        					}
        				}

        				if(found == 0)
        				{
        					VehicleInfo[i][vType] = 0;
        					DespawnVehicle(i);
        				}
        			}
        		}
        	}
        }

        SendClientMessage(playerid, COLOR_WHITE, "All unused faction vehicles despawned.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:invite(playerid, params[])
{
	new targetid,string[128];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /invite [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot invite yourself.");
	    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	    if (GetPVarInt(targetid, "Member") != 0) return SendClientMessage(playerid, COLOR_WHITE, "That player is already in a faction.");
		if(IsPlayerConnected(targetid))
		{
			if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")) || (GetPVarInt(playerid, "Member") == 1 && GetPVarInt(playerid, "Rank") > 10) || (GetPVarInt(playerid, "Member") == 2 && GetPVarInt(playerid, "Rank") > 9) || (GetPVarInt(playerid, "Member") == 5 && GetPVarInt(playerid, "Rank") > 9))
			{
   			    format(string, sizeof(string),"You gave %s a faction invite.", PlayerInfo[targetid][pName]);
				SendClientMessage(playerid,COLOR_ERROR,string);
				format(string, sizeof(string),"%s offered a faction invite (/accept invite).", PlayerInfo[playerid][pName]);
				SendClientMessage(targetid,COLOR_ERROR,string);
				SetPVarInt(targetid, "InviteOffer", playerid);
   			}
		}
	}
	return 1;
}
//============================================//
COMMAND:auninvite(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /uninvite [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (GetPVarInt(playerid, "Admin") == 0) return nal(playerid);
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot invite yourself.");
		if(IsPlayerConnected(targetid))
		{
			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
  		    GiveNameSpace(sendername);
    	    GiveNameSpace(giveplayer);
    	    SetPVarInt(targetid, "Member", 0);
    	    SetPVarInt(targetid, "Rank", 0);
    	    SetPVarInt(targetid, "Duty", 0);
    	    format(string, sizeof(string), "You have been uninvited by leader %s.", sendername);
       		SendClientMessage(targetid,COLOR_ERROR,string);
        	format(string, sizeof(string), "You have sent a uninvite to %s.", giveplayer);
        	SendClientMessage(playerid,COLOR_ERROR,string);
		}
	}
	return 1;
}

COMMAND:uninvite(playerid, params[])
{
	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return usage(playerid, "USAGE: /uninvite [Firstname_Lastname]");
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
 	if(GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");

	if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")) || (GetPVarInt(playerid, "Member") == 1 && GetPVarInt(playerid, "Rank") > 10) || (GetPVarInt(playerid, "Member") == 2 && GetPVarInt(playerid, "Rank") > 9) || (GetPVarInt(playerid, "Member") == 5 && GetPVarInt(playerid, "Rank") > 9))
	{
		foreach(new i : Player) 
		{
		    if(strcmp(name, PlayerInfo[i][pUsername], true) == 0) 
		    {
				new msg[70];
		        if(GetPVarInt(i, "Member") != GetPVarInt(playerid, "Member")) return SCM(playerid, COLOR_ERROR, "This player is not in your faction!");
				if(GetPVarInt(i, "Rank") >= MaxRank(GetPVarInt(playerid, "Member"))) return SCM(playerid, COLOR_ERROR, "This player is a leader of the faction and can't be removed!");
				SetPVarInt(i, "Member", 0);
				SetPVarInt(i, "Rank", 0);
				SetPVarInt(i, "Duty", 0);
				format(msg, sizeof(msg), "[INFO] You have uninvited %s.", name);
				scm(playerid, -1, msg);
				format(msg, sizeof(msg), "You have been univited from your faction %s.", name);
				scm(i, -1, msg);
				return 1;
			}
		}

		new query[90];
		mysql_format(handlesql, query, sizeof(query), "SELECT `Member`, `Rank` FROM `accounts` WHERE `Name` = '%e';", name);
		mysql_pquery(handlesql, query, "OnFactionUninviteValidation", "is", playerid, name);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

forward OnFactionUninviteValidation(playerid, name[]);
public OnFactionUninviteValidation(playerid, name[]) {
	if(cache_get_row_count() > 0) {
		new query[100];
		if(cache_get_field_content_int(0, "Member") != GetPVarInt(playerid, "Member")) {
			SCM(playerid, COLOR_ERROR, "This player is not in your faction!");
		} else if(cache_get_field_content_int(0, "Rank") >= MaxRank(GetPVarInt(playerid, "Member"))) {
			SCM(playerid, COLOR_ERROR, "This player is a leader of the faction and can't be removed!");
		} else {
			mysql_format(handlesql, query, sizeof(query), "UPDATE `accounts` SET `Member` = '0', `Rank` = '0' WHERE `Name` = '%e';", name);
			mysql_pquery(handlesql, query);
			format(query, sizeof(query), "[INFO] You have uninvited %s.", name);
			scm(playerid, -1, query);
		}
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "This player could not be found in the database.");
	}
}

COMMAND:suspend(playerid, params[]) {
	new name[MAX_PLAYER_NAME], am;
	if(sscanf(params, "s[24]i", name, am)) return usage(playerid, "USAGE: /suspend [Firstname_Lastname] [0-1]");
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
 	if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_WHITE, "You must be in LSPD to use this.");
 	if(am < 0 || am > 1) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 1.");
	if(GetPVarInt(playerid, "Rank") >= 7) {
		foreach(new i : Player) {
		    if(strcmp(name, PlayerInfo[i][pUsername], true) == 0) {
				new msg[70];
		        if(GetPVarInt(i, "Member") != GetPVarInt(playerid, "Member")) return SCM(playerid, COLOR_ERROR, "This player is not in your faction!");
				if(GetPVarInt(i, "Rank") >= MaxRank(GetPVarInt(playerid, "Member"))) return SCM(playerid, COLOR_ERROR, "This player is a leader of the faction and can't be suspended!");
				SetPVarInt(i, "Suspend", am);
				if(am == 1) {
				    format(msg, sizeof(msg), "[INFO] You have suspended %s.", name);
				    scm(playerid, -1, msg);
				    format(msg, sizeof(msg), "You have been suspended from your faction %s.", name);
				    scm(i, -1, msg);
				} else {
				    format(msg, sizeof(msg), "[INFO] You have revoked %s's suspension.", name);
				    scm(playerid, -1, msg);
				    format(msg, sizeof(msg), "You have been un-suspended from your faction %s.", name);
				    scm(i, -1, msg);
				}
				return 1;
			}
		}

		new query[90];
		mysql_format(handlesql, query, sizeof(query), "SELECT `Member`, `Rank` FROM `accounts` WHERE `Name` = '%e';", name);
		mysql_pquery(handlesql, query, "OnSuspendValidation", "isi", playerid, name, am);
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}

	return 1;
}

forward OnSuspendValidation(playerid, name[], num);
public OnSuspendValidation(playerid, name[], num) {
	if(cache_get_row_count() > 0) {
		new query[100];
		if(cache_get_field_content_int(0, "Member") != GetPVarInt(playerid, "Member")) {
			SCM(playerid, COLOR_ERROR, "This player is not in your faction!");
		} else if(cache_get_field_content_int(0, "Rank") >= MaxRank(GetPVarInt(playerid, "Member"))) {
			SCM(playerid, -1, "This player is a leader of the faction and can't be suspended!");
		} else {
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Suspend = %d WHERE Name = '%e'", num, name);
			mysql_pquery(handlesql, query);
			if(num == 1) {
			    format(query, sizeof(query), "[INFO] You have suspended %s.", name);
			} else {
			    format(query, sizeof(query), "[INFO] You have revoked %s's suspension.", name);
			}
			scm(playerid, -1, query);
		}
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "This player could not be found in the database.");
	}
}
//============================================//
COMMAND:factionedit(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new factionid, option[32], optional[128];
	if(sscanf(params, "is[32]S()[32]", factionid, option, optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factonedit [factionid] [name/motd/rights/tagrights/factionchat/packages]");

	else if(strcmp(option, "name", true) == 0)
	{
		format(FactionInfo[factionid][fName], 128, optional);
		SendClientMessage(playerid, COLOR_WHITE, "Faction name updated!");
	}
	else if(strcmp(option, "info", true) == 0)
	{
		new msg[128];
		format(msg, 128, "Faction info of %s [%i]", FactionInfo[factionid][fName], factionid);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg, 128, "Available Packages: %i | Daily Packages: %i", FactionInfo[factionid][fAvailablePackages], FactionInfo[factionid][fDailyPackages]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
	}
	else if(strcmp(option, "motd", true) == 0)
	{
		format(FactionInfo[factionid][fMOTD], 128, optional);
		SendClientMessage(playerid, COLOR_WHITE, "Faction MOTD updated!");
	}
	else if(strcmp(option, "rights", true) == 0)
	{
		if(!IsNumeric(optional) || strval(optional) < 0 || strval(optional) > 3)
		{
			SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factonedit [factionid] [rights] [1-3]");
			SendClientMessage(playerid, COLOR_ERROR, "0: None | 1: Gun Rights | 2: Drug Rights | 3: Drug Rights (more)");
			return 1;
		}

		FactionInfo[factionid][fRights] = strval(optional);
		SendClientMessage(playerid, COLOR_WHITE, "Faction rights updated!");

		if(FactionInfo[factionid][fRights] == 1)
		{
			FactionInfo[factionid][fAvailablePackages] = 8;
		}
		else if(FactionInfo[factionid][fRights] == 2 || FactionInfo[factionid][fRights] == 3)
		{
			FactionInfo[factionid][fAvailablePackages] = 6;
		}
	}
	else if(strcmp(option, "tagrights", true) == 0)
	{
		if(FactionInfo[factionid][fTagRights] == 0)
		{
			FactionInfo[factionid][fTagRights] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Faction tag rights granted!");
		}
		else
		{
			FactionInfo[factionid][fTagRights] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Faction tag rights revoked!");
		}
	}
	else if(strcmp(option, "factionchat", true) == 0)
	{
		if(FactionInfo[factionid][fFactionChat] == 0)
		{
			FactionInfo[factionid][fFactionChat] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Faction chat closed!");
		}
		else
		{
			FactionInfo[factionid][fFactionChat] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Faction chat opened!");
		}
	}
	else if(strcmp(option, "packages", true) == 0)
	{
		if(!IsNumeric(optional))
		{
			SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factonedit [factionid] [packages] [amount]");
			return 1;
		}

		FactionInfo[factionid][fAvailablePackages] = strval(optional);
		SendClientMessage(playerid, COLOR_WHITE, "Faction's available packages updated.");
	}
	else if(strcmp(option, "dailypackages", true) == 0)
	{
		if(!IsNumeric(optional))
		{
			SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factonedit [factionid] [dailypackages] [amount]");
			return 1;
		}

		FactionInfo[factionid][fDailyPackages] = strval(optional);
		SendClientMessage(playerid, COLOR_WHITE, "Faction's daily packages updated.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factonedit [factionid] [name/motd/rights/tagrights/factionchat/packages/dailypackages]");
	}
	return 1;
}
//============================================//
COMMAND:factionwarehouse(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new factionid, option[32];
	if(sscanf(params, "is[32]", factionid, option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionwarehouse [factionid] [set/remove]");

	if(strcmp(option, "set", true) == 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		FactionInfo[factionid][fWarehouseX] = x;
		FactionInfo[factionid][fWarehouseY] = y;
		FactionInfo[factionid][fWarehouseZ] = z;
		FactionInfo[factionid][fWarehouseVirtualWorld] = GetPlayerVirtualWorld(playerid);
		FactionInfo[factionid][fWarehouseInterior] = GetPlayerInterior(playerid);

		if(FactionCP[factionid] != -1)
		{
			DestroyDynamicCP(FactionCP[factionid]);
		}

		FactionCP[factionid] = CreateDynamicCP(FactionInfo[factionid][fWarehouseX], FactionInfo[factionid][fWarehouseY], FactionInfo[factionid][fWarehouseZ], 
			1.0, FactionInfo[factionid][fWarehouseVirtualWorld], FactionInfo[factionid][fWarehouseInterior]);

		SendClientMessage(playerid, COLOR_WHITE, "Faction warehouse set!");
	}
	else if(strcmp(option, "remove", true) == 0)
	{
		if(FactionCP[factionid] != -1)
		{
			DestroyDynamicCP(FactionCP[factionid]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "Faction warehouse removed!");

		FactionInfo[factionid][fWarehouseX] = 0;
		FactionInfo[factionid][fWarehouseY] = 0;
		FactionInfo[factionid][fWarehouseZ] = 0;
		FactionInfo[factionid][fWarehouseVirtualWorld] = 0;
		FactionInfo[factionid][fWarehouseInterior] = 0;

		FactionCP[factionid] = -1;
	}
	return 1;
}
//============================================//
COMMAND:flist(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME], dtext[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	SendClientMessage(playerid, COLOR_WHITE, "Faction Members Online:");
    foreach(new i : Player)
	{
 		format(sendername, sizeof(sendername), "%s", PlayerInfo[i][pUsername]);
		GiveNameSpace(sendername);
	    if(GetPVarInt(i, "PlayerLogged") == 1 && GetPVarInt(i, "Member") == GetPVarInt(playerid, "Member"))
	    {
			new count = 0;
	        for(new i2 = 0; i2 < MAX_LSPD_DIVISIONS; i2++)
	        {
	            if(PlayerInfo[i][pDivision][i2] > 0)
	            {
					if(count == 0)
					{
	                    format(dtext, 128, "%s", LSPDDivisions[PlayerInfo[i][pDivision][i2]]);
	                }
	                else
	                {
	                    format(dtext, 128, "%s, %s", dtext, LSPDDivisions[PlayerInfo[i][pDivision][i2]]);
	                }
	                count++;
	            }
			}

			if(count == 0)
			{
				dtext = "";
			}
			else
			{
				format(dtext, 128, "[%s]", dtext);
			}

			if(strlen(PlayerInfo[playerid][pFDSubRank]) > 2 && GetPVarInt(playerid, "Member") == FACTION_LSFD)
			{
				format(dtext, 128, "[%s]", PlayerInfo[playerid][pFDSubRank]);
			}

	        if(GetPVarInt(i, "Duty") == 1) { format(string, sizeof(string), "{32CD32}(On-Duty) %s - Rank: %d(%s) %s", sendername, GetPVarInt(i, "Rank"), FactionRankInfo[GetPVarInt(i, "Member")][GetPVarInt(i, "Rank")][fRank], dtext); }
	        else { format(string, sizeof(string), "%s - Rank: %d(%s) %s", sendername, GetPVarInt(i, "Rank"), FactionRankInfo[GetPVarInt(i, "Member")][GetPVarInt(i, "Rank")][fRank], dtext); }
	        if(GetPVarInt(i, "Suspend") == 1) {
	            format(string, sizeof(string), "%s - Rank: %d(%s) {FF0000}(Suspended)", sendername, GetPVarInt(i, "Rank"), FactionRankInfo[GetPVarInt(i, "Member")][GetPVarInt(i, "Rank")][fRank]);
	        }
      		SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}
//============================================//
COMMAND:frights(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	SendClientMessage(playerid, COLOR_WHITE, "Faction Members With Warehouse Rights:");
    
    new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT `Frights`, `Name` FROM `accounts` WHERE `Frights` = 1 AND `Member`=%i", GetPVarInt(playerid, "Member"));
	mysql_pquery(handlesql, query, "OnFrights", "i", playerid);
	return 1;
}
//============================================//
COMMAND:quitfaction(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a faction to quit from.");
	SendClientMessage(playerid,COLOR_WHITE,"You have left your faction.");
	format(string, sizeof(string), "%s has quit the faction.", PlayerInfo[playerid][pName]);
	SendFactionMessage(GetPVarInt(playerid, "Member"),COLOR_WHITE,string);
   	SetPVarInt(playerid, "Duty", 0);
   	for(new i = 0; i < MAX_LSPD_DIVISIONS; i++) {
	PlayerInfo[playerid][pDivision][i]=0; }
   	SetPVarInt(playerid, "Suspend", 0);
	if(GetPVarInt(playerid, "Member") == 1)
	{
		ResetPlayerWeaponsEx(playerid);
		ResetPlayerWeapons(playerid);
		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if(PlayerInfo[playerid][pInvItem][i] >= 1 && PlayerInfo[playerid][pInvItem][i] <= 128) // Remove weapons and ammo
			{
				PlayerInfo[playerid][pInvItem][i] = 0;
				PlayerInfo[playerid][pInvQ][i] = 0;
				PlayerInfo[playerid][pInvEx][i] = 0;
				PlayerInfo[playerid][pInvS][i] = 0;
			}
			if(PlayerInfo[playerid][pInvItem][i] >= 500 && PlayerInfo[playerid][pInvItem][i] <= 507) // Remove drugs
			{
				PlayerInfo[playerid][pInvItem][i] = 0;
				PlayerInfo[playerid][pInvQ][i] = 0;
				PlayerInfo[playerid][pInvEx][i] = 0;
				PlayerInfo[playerid][pInvS][i] = 0;
			}
		}
	}
	FixInv(playerid);
	SetPVarInt(playerid, "Member", 0);
	SetPVarInt(playerid, "Rank", 0);
	return 1;
}
//============================================//
COMMAND:earpiece(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSG)
    {
	    switch(GetPVarInt(playerid, "EarPiece"))
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "EarPiece", 1);
	            SendClientMessage(playerid, COLOR_ERROR, "You have put your earpiece in.");
	        }
	        case 1:
	        {
	            SetPVarInt(playerid, "EarPiece", 0);
	            SendClientMessage(playerid, COLOR_ERROR, "You have taken out your earpiece.");
	        }
	    }
	}
	return 1;
}

//============================================//
ALTCOMMAND:r->radio;
COMMAND:radio(playerid, params[])
{
	new text[128], string[256],sendername[MAX_PLAYER_NAME], faction = GetPVarInt(playerid, "Member");
	if(sscanf(params, "s[128]", text)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /radio [text]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0)   return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1)           return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted.");
	    if(GetPVarInt(playerid, "Member") == 0)         return SendClientMessage(playerid, COLOR_ERROR, "You must be in a faction to use this.");
	    if(GetPVarInt(playerid, "Jailed") > 0)          return SendClientMessage(playerid, COLOR_ERROR, "You cannot use this whilst in jail.");
	    if(IsPlayerInWater(playerid))                   return SendClientMessage(playerid, COLOR_ERROR, "You cannot use this whilst in water.");
	    if(GetPVarInt(playerid, "Member") != 0)
	    {
	        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	        GiveNameSpace(sendername);
			switch(faction) // Incase we decide to upload more factions with /radios, shortens down memory.
			{
			    case 1: // LSPD
			    {
			        format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
			        SendFactionMessage(1, 0x8080FF96, string);
			        if(GetPVarInt(playerid, "EarPiece") != 1)
			        {
			        	ProxRadio(20.0, playerid, string, COLOR_FADE);
					}
					if(IsInLS(playerid)) {
					format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
					SendScannerMessage(GetPVarInt(playerid, "Member"), string); }
				}
				case 2: // LSFD
				{
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
				    SendFactionMessage(2, 0x8080FF96, string);
			        if(GetPVarInt(playerid, "EarPiece") != 1)
			        {
			        	ProxRadio(20.0, playerid, string, COLOR_FADE);
					}
				    if(IsInLS(playerid)) {
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
					SendScannerMessage(GetPVarInt(playerid, "Member"), string); }
				}
				case 5: // GOV
				{
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
				    SendFactionMessage(5, 0x8080FF96, string);
				    if(GetPVarInt(playerid, "EarPiece") != 1)
			        {
			        	ProxRadio(20.0, playerid, string, COLOR_FADE);	
					}
				}
				case 7: // LOS SANTOS CORPORATION OFFICIAL SLOT
				{
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
				    SendFactionMessage(7, 0x8080FF96, string);
				    if(GetPVarInt(playerid, "EarPiece") != 1)
			        {
			        	ProxRadio(20.0, playerid, string, COLOR_FADE);
					}
				
				}
			}
		}
	}
	return 1;
}
/*
ALTCOMMAND:r->radio;
COMMAND:radio(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /radio [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	    if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSFD && GetPVarInt(playerid, "Member") != FACTION_LSG) return error(playerid, "Your faction cannot use the radio.");
	    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
   		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      	GiveNameSpace(sendername);
		format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
        SendFactionMessage(GetPVarInt(playerid, "Member"),0x8080FF96,string);
        ProxRadio(20.0, playerid, string, COLOR_FADE);
	}
	return 1;
}
*/
//============================================//
ALTCOMMAND:d->departments;
COMMAND:departments(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /departments [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	    if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSFD && GetPVarInt(playerid, "Member") != FACTION_LSG) return error(playerid, "Your faction cannot use the radio.");
	    if(GetPVarInt(playerid, "Member") == FACTION_LSG && GetPVarInt(playerid, "Rank") < 4) return SendClientMessage(playerid, COLOR_WHITE, "You are not high enough rank!"); 
	    if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You can not use the radio while not on duty.");
   		format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	GiveNameSpace(sendername);
		format(string, sizeof(string), "**  %s %s: %s  **",  FactionRankInfo[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")][fRank], sendername, text);
      	SendFactionMessage(1, COLOR_PINK, string);
      	SendFactionMessage(2, COLOR_PINK, string);
      	SendFactionMessage(5, COLOR_PINK, string);
        format(string, sizeof(string), "** %s(radio): %s **", sendername, text);
        ProxRadio(20.0, playerid, string, COLOR_FADE);
	}
	return 1;
}
//============================================//
COMMAND:closef(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
    
    if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")))
	{
        switch(FactionInfo[GetPVarInt(playerid, "Member")][fFactionChat])
        {
            case 0:
            {
                FactionInfo[GetPVarInt(playerid, "Member")][fFactionChat] = 1;
                SendFactionMessage(GetPVarInt(playerid, "Member"), COLOR_ERROR, "Faction Chat is closed!");
            }
            case 1:
            {
                FactionInfo[GetPVarInt(playerid, "Member")][fFactionChat] = 0;
                SendFactionMessage(GetPVarInt(playerid, "Member"), COLOR_ERROR, "Faction Chat is open!");
            }
        }
	}
	return 1;
}
//============================================//
COMMAND:f(playerid, params[])
{
	new msg[MAX_MSG_LENGTH];
	if(sscanf(params, "s[128]", msg)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /f [Message]");
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if(GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	if(FactionInfo[GetPVarInt(playerid, "Member")][fFactionChat] == 1) return SendClientMessage(playerid, COLOR_ERROR, "Faction chat is closed.");
 	new string[256];
    format(string, sizeof(string), "** (( %s %s: %s )) **", FactionRankInfo[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")][fRank], PlayerInfo[playerid][pName], msg);
	SendFactionMessageEx(GetPVarInt(playerid, "Member"), 0x7BDDA5AA, string);
	return 1;
}

COMMAND:togf(playerid, params[])
{
	if(GetPVarInt(playerid, "TogF") == 0) SetPVarInt(playerid, "TogF", 1);
	else SetPVarInt(playerid, "TogF", 0);
	SCM(playerid, -1, "Faction chat toggled.");
	return 1;
}
//============================================//
COMMAND:factioncreate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new name[128];
	if(sscanf(params, "s[128]", name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factioncreate [Faction Name]");
	
	for(new i = 1; i < MAX_FACTIONS; i++)
	{
		if(isnull(FactionInfo[i][fName]))
		{
			format(FactionInfo[i][fName], 128, name);

			new query[256];
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO factions (ID, Name) VALUES (%i, '%e')", i, name);
			mysql_pquery(handlesql, query);

			SendClientMessage(playerid, COLOR_WHITE, "Faction created!");

			FactionInfo[i][fDBID] = i;
			return 1;
		}
	}
	return 1;
}
//============================================//
COMMAND:factionremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");
	new factionid;
	if(sscanf(params, "i", factionid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /factionremove [factionid]");

	DestroyDynamicCP(FactionCP[factionid]);
	FactionInfo[factionid][fName] = 0;

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM factions WHERE ID=%i", FactionInfo[factionid][fDBID]);
	mysql_pquery(handlesql, query);

	mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Member=0, Rank=0 WHERE Member=%i", FactionInfo[factionid][fDBID]);
	mysql_pquery(handlesql, query);

	foreach(new i : Player)
	{
		if(GetPVarInt(i, "Member") == FactionInfo[factionid][fDBID])
		{
			SetPVarInt(i, "Member", 0);
			SetPVarInt(i, "Rank", 0);
		}
	}

	if(FactionCP[factionid] != -1)
	{
		DestroyDynamicCP(FactionCP[factionid]);
	}

	SendClientMessage(playerid, COLOR_WHITE, "Faction removed!");
	return 1;
}
//============================================//
//HOUSE SYSTEM
//============================================//
COMMAND:knock(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
	foreach(new h : HouseIterator)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	    {
	        format(string, sizeof(string), "*** %s knocks on the door.", sendername);
            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
            SetPVarInt(playerid, "Delay", GetCount()+5000);
            format(string, sizeof(string), "*** Someone is knocking on the door.");
            foreach(new p : Player)
			{
                if(IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
                {
					if(GetPlayerVirtualWorld(p) == HouseInfo[h][hVwIn])
					{
				        SendClientMessage(p, COLOR_PURPLE, string);
				    }
				}
		    }
	    }
	}
	foreach(new h : BizIterator)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo])) {
	        format(string, sizeof(string), "*** %s knocks on the door.", sendername);
            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
            SetPVarInt(playerid, "Delay", GetCount()+5000);
            format(string, sizeof(string), "*** Someone is knocking on the door.");
            foreach(new p : Player)
			{
                if(IsPlayerInRangeOfPoint(p, 30.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]))
                {
					if(GetPlayerVirtualWorld(p) == BizInfo[h][VwIn])
					{
				        SendClientMessage(p, COLOR_PURPLE, string);
				    }
				}
		    }
	    }
	}
	return 1;
}
//============================================//
COMMAND:doorbell(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	    {
	        SetPVarInt(playerid, "Delay", GetCount()+5000);
	        format(string, sizeof(string), "*** %s rings the doorbell.", sendername);
            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
            PlaySoundPlyRadius(playerid, 20801, 10.0);
            foreach(new p : Player)
			{
                if(IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
                {
                    if(GetPlayerVirtualWorld(p) == HouseInfo[h][hVwIn])
					{
				        SendClientMessage(p, COLOR_PURPLE, "*** The doorbell rings.");
				        PlayerPlaySound(playerid, 20801, 0, 0, 0);
				    }
				}
		    }
	    }
	}
	return 1;
}
//============================================//
COMMAND:housetypes(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new msg[128];
	SCM(playerid, -1, "_________________________________________________________________");
	for(new i=0; i < sizeof(HouseCoordinates); i++)
	{
	    format(msg, sizeof(msg), "ID (%d) - Name (%s)", i, HouseCoordinates[i][HouseName]);
		SCM(playerid, -1, msg);
	}
	return 1;
}
//============================================//
COMMAND:housecreate(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new houseid, price, Float:X, Float:Y, Float:Z, UID, text[128];
	if(sscanf(params,"ii",houseid, price)) return usage(playerid, "USAGE: /housecreate [class] [value] (classes consist of 1 (small), 2 (medium), 3 (big) and 4 (mansion))");
	if(houseid < 1 || houseid > 4) return error(playerid, "Invalid house ID.");
	new found = 0;
	for(new i = 1; i < MAX_HOUSES; i++)
	{
		if(HouseInfo[i][hID] == 0 && found == 0)
		{
		    found++;
		    UID = i;
			format(text, sizeof(text), "House id is %d", UID);
			SendClientMessage(playerid, -1, text);
		}
	}
	new count = 0;
	for(new i = 0; i < sizeof(HouseCoordinates); i++)
	{
	    if(count == 0)
	    {
	        if(HouseCoordinates[i][Class] == houseid)
	        {
		        count++;
				HouseInfo[UID][hXi] = HouseCoordinates[i][mbX];
				HouseInfo[UID][hYi] = HouseCoordinates[i][mbY];
				HouseInfo[UID][hZi] = HouseCoordinates[i][mbZ];
				HouseInfo[UID][hIntIn] = HouseCoordinates[i][HouseInt];
			}
		}
	}
	HouseInfo[UID][hID] = UID;
	HouseInfo[UID][hValue] = price;
	HouseInfo[UID][hClass] = houseid;
	HouseInfo[UID][hIntOut] = GetPlayerInterior(playerid);
	HouseInfo[UID][hVwOut] = GetPlayerVirtualWorld(playerid);
	HouseInfo[UID][hVwIn] = MAX_INTS + UID;
	GetPlayerPos(playerid, X, Y, Z);
	HouseInfo[UID][hXo] = X;
	HouseInfo[UID][hYo] = Y;
	HouseInfo[UID][hZo] = Z;
	new query[516], owner[25];
	format(owner, sizeof(owner), "None");
	mysql_format(handlesql, query, sizeof(query),"INSERT INTO `houses`(`ID`, `Xo`, `Yo`, `Zo`, `Xi`, `Yi`, `Zi`, `IntOut`, `IntIn`, `VwOut`, `Owner`, `Value`) VALUES (%d, %f, %f, %f, %f, %f, %f, %d, %d, %d, '%e', %d)",
 	UID, X, Y, Z, HouseInfo[UID][hXi], HouseInfo[UID][hYi], HouseInfo[UID][hZi], HouseInfo[UID][hIntOut], HouseInfo[UID][hIntIn], HouseInfo[UID][hVwOut],
	owner, price);
	mysql_pquery(handlesql, query);
	//HouseInfo[UID][hIcon]=CreateDynamicPickup(1273, 1, HouseInfo[UID][hXo], HouseInfo[UID][hYo], HouseInfo[UID][hZo],HouseInfo[UID][hVwOut],HouseInfo[UID][hVwOut] );
	HouseInfo[UID][hIcon] = CreateDynamicCP(HouseInfo[UID][hXo], HouseInfo[UID][hYo], HouseInfo[UID][hZo], 1.5, HouseInfo[UID][hVwOut], -1, -1, 20.0);
	HouseInfo[UID][hIconi] = CreateDynamicCP(HouseInfo[UID][hXi], HouseInfo[UID][hYi], HouseInfo[UID][hZi], 1.5, HouseInfo[UID][hVwIn], -1, -1, 20.0);
	Iter_Add(HouseIterator, UID);
	return 1;
}

COMMAND:houseremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseremove [houseid]");

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM `houses` WHERE `ID`=%i", HouseInfo[id][hID]);
	mysql_pquery(handlesql, query);

	DestroyDynamicCP(HouseInfo[id][hIcon]);
	DestroyDynamicCP(HouseInfo[id][hIconi]);
	DestroyDynamicCP(HouseInfo[id][gIcon]);
	DestroyDynamicCP(HouseInfo[id][hbdoIcon]);
	DestroyDynamicCP(HouseInfo[id][hbdiIcon]);

	HouseInfo[id][hID] = 0;

	HouseInfo[id][hXo] = 0;
	HouseInfo[id][hYo] = 0;
	HouseInfo[id][hZo] = 0;
	HouseInfo[id][hXi] = 0;
	HouseInfo[id][hYi] = 0;
	HouseInfo[id][hZi] = 0;

	HouseInfo[id][hbdXo] = 0;
	HouseInfo[id][hbdYo] = 0;
	HouseInfo[id][hbdZo] = 0;
	HouseInfo[id][hbdXi] = 0;
	HouseInfo[id][hbdYi] = 0;
	HouseInfo[id][hbdZi] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "House removed.");

	Iter_Remove(HouseIterator, id);
	return 1;
}

//============================================//
COMMAND:houseid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	foreach(new i : HouseIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVwOut])
		{
			new string[128];
			format(string, sizeof(string), "WARNING: House ID: %i, House database ID: %i.", i, HouseInfo[i][hID]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hXi], HouseInfo[i][hYi], HouseInfo[i][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVwIn])
		{
			new string[128];
			format(string, sizeof(string), "WARNING: House ID: %i, House database ID: %i.", i, HouseInfo[i][hID]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "There are no houses near by.");
	return 1;
}

COMMAND:bizid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	foreach(new i : BizIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]) && GetPlayerVirtualWorld(playerid) == BizInfo[i][VwOut])
		{
			new string[128];
			format(string, sizeof(string), "WARNING: Business ID: %i, Business database ID: %i.", i, BizInfo[i][ID]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][Xi], BizInfo[i][Yi], BizInfo[i][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[i][VwIn])
		{
			new string[128];
			format(string, sizeof(string), "WARNING: Business ID: %i, House Business ID: %i.", i, BizInfo[i][ID]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "There are no businesses near by.");
	return 1;
}

COMMAND:intid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	foreach(new i : IntIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]))
		{
			new string[128];
			format(string, sizeof(string), "WARNING: Interior ID: %i.", i);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[i][iiXi], IntInfo[i][iiYi], IntInfo[i][iiZi]))
		{
			new string[128];
			format(string, sizeof(string), "WARNING: Interior ID: %i.", i);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "There are no interiors nearby.");
	return 1;
}
/*
COMMAND:housegarage(playerid, params[])
{
	new houseid, interior;
	if(sscanf(params, "ii", houseid, interior)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housegarage [houseid] [interior]");

	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
  		
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new string[128];
	format(string, sizeof(string), "WARNING: Moved Property ID: %d's garage to %.2f, %.2f, %.2f.", houseid, x, y, z);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	DestroyDynamicCP(HouseInfo[houseid][gIcon]);
	HouseInfo[houseid][gIcon] = CreateDynamicCP(x, y, z, 1.5, HouseInfo[houseid][hVwOut], -1, -1, 10.0);
	HouseInfo[houseid][hgXo] = x;
	HouseInfo[houseid][hgYo] = y;
	HouseInfo[houseid][hgZo] = z;
	HouseInfo[houseid][hgAo] = a;

	HouseInfo[houseid][hgXi] = GarageInterior[interior][giX];
	HouseInfo[houseid][hgYi] = GarageInterior[interior][giY];
	HouseInfo[houseid][hgZi] = GarageInterior[interior][giZ];
	HouseInfo[houseid][hgAi] = GarageInterior[interior][giA];
	HouseInfo[houseid][gInterior] = GarageInterior[interior][giInterior];

	HouseInfo[houseid][Garage] = 1;

	SaveHouseID(houseid, 0);
	return 1;
}

COMMAND:housegarageinterior(playerid, params[])
{
	new houseid, interior;
	if(sscanf(params, "ii", houseid, interior)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housegarageinterior [houseid] [interior] (0-1 are the IDs of available interiors)");

	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new string[128];
	format(string, sizeof(string), "WARNING: Changed Property ID: %d's garage interior to %i.", houseid, interior);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	HouseInfo[houseid][hgXi] = GarageInterior[interior][giX];
	HouseInfo[houseid][hgYi] = GarageInterior[interior][giY];
	HouseInfo[houseid][hgZi] = GarageInterior[interior][giZ];
	HouseInfo[houseid][hgAi] = GarageInterior[interior][giA];
	HouseInfo[houseid][gInterior] = GarageInterior[interior][giInterior];

	SaveHouseID(houseid, 0);
	return 1;
}

COMMAND:housegarageremove(playerid, params[])
{
	new houseid;
	if(sscanf(params, "i", houseid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housegarageremove [houseid]");

	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new string[128];
	format(string, sizeof(string), "WARNING: Removed Property ID: %d's garage.", houseid);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	HouseInfo[houseid][hgXo] = 0;
	HouseInfo[houseid][hgYo] = 0;
	HouseInfo[houseid][hgZo] = 0;
	HouseInfo[houseid][hgAo] = 0;

	HouseInfo[houseid][hgXi] = 0;
	HouseInfo[houseid][hgYi] = 0;
	HouseInfo[houseid][hgZi] = 0;
	HouseInfo[houseid][hgAi] = 0;

	HouseInfo[houseid][gInterior] = 0;
	HouseInfo[houseid][Garage] = 0;

	DestroyDynamicCP(HouseInfo[houseid][gIcon]);

	SaveHouseID(houseid, 0);
	return 1;
}
*/

COMMAND:housebackdoor(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2) return nal(playerid);

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housebackdoor [houseid]");

	if(GetPVarInt(playerid, "HouseEnter") == id)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		HouseInfo[id][hbdXi] = pos[0];
		HouseInfo[id][hbdYi] = pos[1];
		HouseInfo[id][hbdZi] = pos[2];

		DestroyDynamicCP(HouseInfo[id][hbdiIcon]);
		HouseInfo[id][hbdiIcon] = CreateDynamicCP(HouseInfo[id][hbdXi], HouseInfo[id][hbdYi], HouseInfo[id][hbdZi], 1.5, HouseInfo[id][hVwIn], -1, -1, 5.0);

		SaveHouseID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Set Property ID: %d's inside backdoor to %.2f %.2f %.2f.", id, pos[0], pos[1], pos[2]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(GetPVarInt(playerid, "HouseEnter") == 0)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		HouseInfo[id][hbdXo] = pos[0];
		HouseInfo[id][hbdYo] = pos[1];
		HouseInfo[id][hbdZo] = pos[2];

		DestroyDynamicCP(HouseInfo[id][hbdoIcon]);
		HouseInfo[id][hbdoIcon] = CreateDynamicCP(HouseInfo[id][hbdXo], HouseInfo[id][hbdYo], HouseInfo[id][hbdZo], 1.5, HouseInfo[id][hVwOut], -1, -1, 5.0);

		SaveHouseID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Set Property ID: %d's outside backdoor to %.2f %.2f %.2f.", id, pos[0], pos[1], pos[2]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

COMMAND:housebackdoorremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2) return nal(playerid);

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housebackdoorremove [houseid]");

	if(GetPVarInt(playerid, "HouseEnter") == id)
	{
		HouseInfo[id][hbdXi] = 0;
		HouseInfo[id][hbdYi] = 0;
		HouseInfo[id][hbdZi] = 0;

		DestroyDynamicCP(HouseInfo[id][hbdiIcon]);

		SaveHouseID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Removed Property ID: %d's inside backdoor.", id);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(GetPVarInt(playerid, "HouseEnter") == 0)
	{
		HouseInfo[id][hbdXo] = 0;
		HouseInfo[id][hbdYo] = 0;
		HouseInfo[id][hbdZo] = 0;

		DestroyDynamicCP(HouseInfo[id][hbdoIcon]);

		SaveHouseID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Removed Property ID: %d's outside backdoor.", id);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}
//============================================//
COMMAND:houseentrance(playerid, params[])
{
	new houseid,string[128];
	if(sscanf(params, "i", houseid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseentrance [House-ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
      		new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
      		format(string, sizeof(string), "WARNING: Moved Property ID: %d's entrance to %.2f, %.2f, %.2f.", houseid, x, y, z);
      		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
      		HouseInfo[houseid][hXo] = x;
			HouseInfo[houseid][hYo] = y;
			HouseInfo[houseid][hZo] = z;
			HouseInfo[houseid][hVwOut] = GetPlayerVirtualWorld(playerid);
			DestroyDynamicCP(HouseInfo[houseid][hIcon]);
			HouseInfo[houseid][hIcon] = CreateDynamicCP(HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], 1.5, HouseInfo[houseid][hVwOut], -1, -1, 10.0);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:bizexit(playerid, params[])
{
	new houseid,string[128];
	if(sscanf(params, "i", houseid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizexit [businessid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
      		new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
      		format(string, sizeof(string), "WARNING: Moved Business ID: %d's exit to %.2f, %.2f, %.2f.", houseid, x, y, z);
      		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
      		BizInfo[houseid][Xi] = x;
			BizInfo[houseid][Yi] = y;
			BizInfo[houseid][Zi] = z;
			BizInfo[houseid][IntIn] = GetPlayerInterior(playerid);
			SaveBizID(houseid, 0);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:bizentrance(playerid, params[])
{
	new houseid,string[128];
	if(sscanf(params, "i", houseid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizentrance [businessid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
      		new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);

      		format(string, sizeof(string), "WARNING: Moved Property ID: %d's entrance to %.2f, %.2f, %.2f.", houseid, x, y, z);
      		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

      		BizInfo[houseid][Xo] = x;
			BizInfo[houseid][Yo] = y;
			BizInfo[houseid][Zo] = z;

			DestroyDynamicPickup(BizInfo[houseid][Icon]);
			BizInfo[houseid][Icon] = CreateDynamicPickup(1272, 1, BizInfo[houseid][Xo], BizInfo[houseid][Yo], BizInfo[houseid][Zo]);

			DestroyDynamic3DTextLabel(BizInfo[houseid][Text]);
			
			new msg[70];
			format(msg, sizeof(msg), "%s",BizInfo[houseid][Name]);
			BizInfo[houseid][Text] = CreateDynamic3DTextLabel(msg, COLOR_WHITE, BizInfo[houseid][Xo], BizInfo[houseid][Yo], BizInfo[houseid][Zo] + 0.5, 20.0);

			SaveBizID(houseid, 0);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:bizbackdoor(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizbackdoor [businessid]");

	if(GetPVarInt(playerid, "BizEnter") == id)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		BizInfo[id][bbdXi] = pos[0];
		BizInfo[id][bbdYi] = pos[1];
		BizInfo[id][bbdZi] = pos[2];

		DestroyDynamicCP(BizInfo[id][bbdiIcon]);
		BizInfo[id][bbdiIcon] = CreateDynamicCP(BizInfo[id][bbdXi], BizInfo[id][bbdYi], BizInfo[id][bbdZi], 1.5, BizInfo[id][VwIn], -1, -1, 5.0);

		SaveBizID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Set business ID: %d's inside backdoor to %.2f %.2f %.2f.", id, pos[0], pos[1], pos[2]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(GetPVarInt(playerid, "BizEnter") == 0)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

		BizInfo[id][bbdXo] = pos[0];
		BizInfo[id][bbdYo] = pos[1];
		BizInfo[id][bbdZo] = pos[2];

		DestroyDynamicCP(BizInfo[id][bbdoIcon]);
		BizInfo[id][bbdoIcon] = CreateDynamicCP(BizInfo[id][bbdXo], BizInfo[id][bbdYo], BizInfo[id][bbdZo], 1.5, BizInfo[id][VwOut], -1, -1, 5.0);

		SaveBizID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Set business ID: %d's outside backdoor to %.2f %.2f %.2f.", id, pos[0], pos[1], pos[2]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

COMMAND:bizbackdoorremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizbackdoorremove [businessid]");

	if(GetPVarInt(playerid, "BizEnter") == id)
	{
		BizInfo[id][bbdXi] = 0;
		BizInfo[id][bbdYi] = 0;
		BizInfo[id][bbdZi] = 0;

		DestroyDynamicCP(BizInfo[id][bbdiIcon]);

		SaveBizID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Removed business ID: %d's inside backdoor.", id);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(GetPVarInt(playerid, "BizEnter") == 0)
	{
		BizInfo[id][bbdXo] = 0;
		BizInfo[id][bbdYo] = 0;
		BizInfo[id][bbdZo] = 0;

		DestroyDynamicCP(BizInfo[id][bbdoIcon]);

		SaveBizID(id, 0);

		new string[128];
		format(string, sizeof(string), "WARNING: Removed business ID: %d's outside backdoor.", id);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}
//============================================//
COMMAND:houseexit(playerid, params[])
{
	new houseid,string[128];
	if(sscanf(params, "i", houseid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housexit [House-ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
      		new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
      		format(string, sizeof(string), "WARNING: Moved Property ID: %d's exit to %.2f, %.2f, %.2f.", houseid, x, y, z);
      		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
      		HouseInfo[houseid][hXi] = x;
			HouseInfo[houseid][hYi] = y;
			HouseInfo[houseid][hZi] = z;
			HouseInfo[houseid][hIntIn] = GetPlayerInterior(playerid);

			DestroyDynamicCP(HouseInfo[houseid][hIconi]);
			HouseInfo[houseid][hIconi] = CreateDynamicCP(HouseInfo[houseid][hXi], HouseInfo[houseid][hYi], HouseInfo[houseid][hZi], 1.5, HouseInfo[houseid][hVwIn], -1, -1, 20.0);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
CMD:xgoto(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") >= 8)
	{
		new Float:x, Float:y, Float:z;
		new string[100];
		if(sscanf(params, "p<,>fff", x, y, z)) SendClientMessage(playerid, 0xFF0000AA, "USAGE: /xgoto <X> <Y> <Z>");
		else
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SetVehiclePosEx(GetPlayerVehicleID(playerid), x,y,z);
			}
			else
			{
		    	SetPlayerPosEx(playerid, x, y, z);
			}
		    format(string, sizeof(string), "You've set your coordinates to %.2f, %.2f, %.2f.", x, y, z);
		    SendClientMessage(playerid, 0xBBBBBBAA, string);
	 	}
	}
 	return 1;
}
//============================================//
COMMAND:housegoto(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housegoto [houseid]");

    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") >= 7)
	{
	    SetPlayerPosEx(playerid, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo]);
	    SetPlayerVirtualWorld(playerid, HouseInfo[id][hVwOut]);
	    SetPlayerInterior(playerid, HouseInfo[id][hIntOut]);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:bizgoto(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizgoto [businessid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
		    SetPlayerPosEx(playerid,BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo]);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
COMMAND:intgoto(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /intgoto [interiorid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
		    SetPlayerPos(playerid,IntInfo[id][iiXo], IntInfo[id][iiYo], IntInfo[id][iiZo]);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:bizowner(playerid, params[])
{
	new id,id2[128];
	if(sscanf(params, "is[128]", id, id2)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizowner [businessid] [Firstname_Lastname]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
		    strmid(BizInfo[id][Owner], id2, 0, strlen(id2), 255);
		    SaveBizID(id, 1);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:houseowner(playerid, params[])
{
	new houseid, name[MAX_PLAYER_NAME];
	if(sscanf(params, "is[128]", houseid, name)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseowner [houseid] [Firstname_Lastname]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
		    new bool:found = false;
		    foreach(new i : Player)
		    {
		    	new playername[MAX_PLAYER_NAME];
				GetPlayerName(i, playername, MAX_PLAYER_NAME);
				if(!strcmp(playername, name))
				{
		    		HouseInfo[houseid][hOwned] = 1;
					HouseInfo[houseid][hCode] = 0;
		    		SetPVarInt(playerid, "HouseKey", houseid);
		    		found = true;

		    		format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, "%s", name);
					SaveHouseID(houseid, 1);
		    	}
		    }

		    if(found == false)
		    {
		    	HouseInfo[houseid][hOwned] = 1;
				HouseInfo[houseid][hCode] = 0;

		    	new query[128];
				mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET HouseKey=%i WHERE Name='%s'",
					houseid,
					name);
				mysql_pquery(handlesql, query);

				format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, "%s", name);
				SaveHouseID(houseid, 1);
		    }

		    SendClientMessage(playerid, COLOR_WHITE, "House owner updated.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:carowner(playerid, params[])
{
	new id,id2[128];
	if(sscanf(params, "is[128]", id, id2)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /carowner [CAR-ID] [Firstname_Lastname]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
			foreach(new i : VehicleIterator) {
				if(VehicleInfo[i][vID] == id) {
				    strmid(VehicleInfo[i][vOwner], id2, 0, strlen(id2), 255);
				    SaveVehicleData(i, 1);
					break;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:bizedit(playerid, params[])
{
	new type[128],amount,string[128];
	if(sscanf(params, "s[128]i", type, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizedit [price/fee/lock/bank/prod] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 9)
		{
			foreach(new h : BizIterator)
			{
	            if(IsPlayerInRangeOfPoint(playerid,2.0,BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
	            {
			        if(strcmp(type, "price", true) == 0)
		            {
		                BizInfo[h][Value] = amount;
			            format(string, sizeof(string), "Edited business %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveBizID(h);
			        }
			        else if(strcmp(type, "fee", true) == 0)
		            {
		                BizInfo[h][EnterPrice] = amount;
			            format(string, sizeof(string), "Edited business %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveBizID(h);
			        }
			        else if(strcmp(type, "lock", true) == 0)
		            {
		                BizInfo[h][Locked] = amount;
			            format(string, sizeof(string), "Edited business %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveBizID(h);
			        }
			        else if(strcmp(type, "Bank", true) == 0)
		            {
		                BizInfo[h][Bank] = amount;
			            format(string, sizeof(string), "Edited business %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveBizID(h);
			        }
			        else if(strcmp(type, "Prod", true) == 0)
		            {
		                BizInfo[h][bProd] = amount;
			            format(string, sizeof(string), "Edited business %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveBizID(h);
			        }
			        else
			        {
			            format(string, sizeof(string), "Business %d.", h);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			        }
			    }
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:houseedit(playerid, params[])
{
	new type[128],amount,string[128];
	if(sscanf(params, "s[128]i", type, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseedit [price/lock/class] [amount]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 7)
		{
			foreach(new h : HouseIterator)
			{
	            if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	            {
			        if(strcmp(type, "price", true) == 0)
		            {
		                HouseInfo[h][hValue] = amount;
			            format(string, sizeof(string), "Edited HouseID: %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveHouses(0);
			        }
			        else if(strcmp(type, "lock", true) == 0)
		            {
		                HouseInfo[h][hLocked] = amount;
			            format(string, sizeof(string), "Edited HouseID: %d's %s to %d.", h, type, amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveHouses(0);
			        }
			        else if(strcmp(type, "class", true) == 0)
		            {
		                if(amount < 1 || amount > 4) return error(playerid, "Invalid class.");
		                HouseInfo[h][hClass] = amount;
			            format(string, sizeof(string), "Changed class of HouseID: %d to '%d'", h,amount);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			            SaveHouses(0);
			        }
			        else
			        {
			            format(string, sizeof(string), "HouseID: %d.", h);
			            SendClientMessage(playerid,COLOR_ERROR,string);
			        }
			    }
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:houseasell(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseasell [houseid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
		    foreach(new i : Player)
		    {
		    	new playername[MAX_PLAYER_NAME];
				GetPlayerName(i, playername, MAX_PLAYER_NAME);
		    	if(!strcmp(playername, HouseInfo[id][hOwner]))
		    	{
		    		SetPVarInt(i, "HouseKey", 0);
		    	}
		    }

		    HouseInfo[id][hOwned] = 0;
		    format(HouseInfo[id][hOwner], 128, "None");
		    SCM(playerid, COLOR_WHITE, "Property sold.");
		    SaveHouseID(id, 1);
		    new query[256];
		    format(query, sizeof(query), "UPDATE accounts SET HouseKey=0 WHERE HouseKey=%d", id);
		   	mysql_function_query(handlesql, query, true, "SendQuery", "");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:bizasell(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizasell [businessid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 4)
		{
		    BizInfo[id][Owned] = 0;
		    format(BizInfo[id][Owner], 128, "None");
		    SCM(playerid, COLOR_WHITE, "Business sold.");
		    SaveBizID(id, 1);
		    new query[256];
		    format(query, sizeof(query), "UPDATE accounts SET BizKey=0 WHERE BizKey=%d", id);
		   	mysql_function_query(handlesql, query, true, "SendQuery", "");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:asellcar(playerid, params[])
{
	new id, query[128];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /asellcar [Veh-ID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 6)
		{
		    /*foreach(new v : VehicleIterator)
		    {
			    if(v != 0)
			    {
		    	    if(VehicleInfo[v][vID] == id)
		    	    {
		    	        DespawnVehicle(v);
		    	    }
			    }
		    }*/
		    format(query,sizeof(query),"DELETE FROM `vehicles` WHERE ID=%d", id);
            mysql_pquery(handlesql, query);
			SCM(playerid, COLOR_WHITE, "Vehicle sold.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:unserial(playerid, params[])
{
	new id[64], query[128];
	if(sscanf(params, "s[64]", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unserial [name]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 6)
		{
		    format(query,sizeof(query),"DELETE FROM `serials` WHERE Name='%e'", id);
            mysql_pquery(handlesql, query);
			SCM(playerid, COLOR_WHITE, "Serial unlocked.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:undns(playerid, params[])
{
	new id[64], query[128];
	if(sscanf(params, "s[64]", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /undns [name]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 6)
		{
		    format(query,sizeof(query),"DELETE FROM `dns` WHERE Name='%e'", id);
            mysql_pquery(handlesql, query);
			SCM(playerid, COLOR_WHITE, "DNS unlocked.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:house(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	new string[128], param[64], amount, amount2, sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[64]I(-1)I(-1)", param, amount, amount2))
	{
	    scm(playerid, COLOR_ERROR, "USAGE: /house [usage]");
	    scm(playerid, COLOR_ERROR, "Stats | Upgrade | Lock | Sell | Unrent | Radio");
	    scm(playerid, COLOR_ERROR, "RentTo | RentFee | RentList | SellTo | Exit");
	    scm(playerid, COLOR_ERROR, "Breakin | Plant | Edit | RemoveAll | Interior");
	    scm(playerid, COLOR_ERROR, "Bank | Deposit | Withdraw | Rights | Backdoor");
	    scm(playerid, COLOR_ERROR, "Clothing | Select | Bareswitch | Exit");
	    return true;
	}
  	if(strcmp(param, "lock", true) == 0)
  	{
		new id = GetPlayerNearHouse(playerid);

		if(GetPVarInt(playerid, "HouseKey") != id && DoesPlayerHaveHouseKey(playerid, id) == 0) return
			SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this house.");

		if(HouseInfo[id][hLocked] == 1) //Locked
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	 		GameTextForPlayer(playerid, "~w~House~n~~g~Unlocked", 4000, 3);
	 		HouseInfo[id][hLocked] = 0;
		}
		else //Unlocked
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	  		GameTextForPlayer(playerid, "~w~House~n~~r~Locked", 4000, 3);
	  		HouseInfo[id][hLocked] = 1;
		}
		SaveHouses(0);
		return 1;
	}
	else if(strcmp(param, "sell", true) == 0)
  	{
		new id = GetPVarInt(playerid, "HouseKey");
		if(GetPVarInt(playerid, "HouseKey") == 0) return error(playerid, "You do not own a property.");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo])) return error(playerid, "You are not near your house door.");
		if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
		{
		    format(string, sizeof(string), "Would you like to sell your property?\nValue: %s - Earn: %s", FormatMoney(HouseInfo[id][hValue]), FormatMoney(HouseInfo[id][hValue] / 2));
	        ShowPlayerDialogEx(playerid, 427, DIALOG_STYLE_MSGBOX, "Sell Property", string, "Sell", "Cancel");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
		return 1;
	}
	else if(strcmp(param, "unrent", true) == 0)
  	{
		new id = GetPVarInt(playerid, "HouseKey");
		if(GetPVarInt(playerid, "HouseKey") == 0) return error(playerid, "You do not own a property.");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo])) return error(playerid, "You are not near your house door.");
		if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) == 0){}
		else
		{
			SetPVarInt(playerid, "HouseKey", 0);
			SCM(playerid, COLOR_WHITE, "You no longer rent at this property.");
		}
		return 1;
	}
	else if(strcmp(param, "radio", true) == 0)
   	{
   	    if(GetPVarInt(playerid, "HouseEnter") == GetPVarInt(playerid, "HouseKey") || 
			GetPVarInt(playerid, "GarageEnter") == GetPVarInt(playerid, "HouseKey") ||
			DoesPlayerHaveHouseKey(playerid, GetPVarInt(playerid, "HouseEnter")))
   	    {
   	        ShowPlayerDialogEx(playerid,68,DIALOG_STYLE_LIST,"House Radio","Radio Stations\nDirect URL\nTurn Off","Select", "Exit");
   	    }
   	    else SendClientMessage(playerid,COLOR_ERROR,"You are not inside of a house.");
   	}
   	else if(strcmp(param, "sellto", true) == 0)
    {
        if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
	    new key = GetPVarInt(playerid, "HouseKey");
	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(HouseInfo[key][hValue] <= 9999) return SendClientMessage(playerid, COLOR_ERROR, "You can't sell a donate house.");
	        if(amount == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /house sellto {FFFFFF}[playerid] [amount]");
	        if(amount2 == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /house sellto {FFFFFF}[playerid] [amount]");
	        if(amount2 < 1 || amount2 > 2500000)
	        {
				SendClientMessage(playerid, COLOR_ERROR, "Cannot go under $1 or above $2,500,000.");
				return true;
			}
	        if (!IsPlayerConnected(amount)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	        if(PlayerToPlayer(playerid,amount,5.0))
	        {
			    if(GetPVarInt(amount, "HouseKey") != 0) return SendClientMessage(playerid, COLOR_ERROR, "This player currently owns or rents a property.");
	            format(string, sizeof(string),"You offered %s to purchase your house for %s.", PlayerInfo[amount][pName], FormatMoney(amount2));
				SendClientMessage(playerid,COLOR_ERROR,string);
				format(string, sizeof(string),"%s offered you to purchase his house for %s (/accept hsellto).", PlayerInfo[playerid][pName], FormatMoney(amount2));
				SendClientMessage(amount,COLOR_ERROR,string);
				SetPVarInt(amount, "HouseOffer", playerid);
				SetPVarInt(amount, "HouseOfferPrice", amount2);
	        }
	        else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "breakin", true) == 0)
	{
	    for(new h = 0; h < sizeof(HouseInfo); h++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	        {
				if(h == GetPVarInt(playerid, "HouseKey")) return 1;
	            if(HouseInfo[h][hOwned] == 0) return SendClientMessage(playerid,COLOR_WHITE,"This house isn't owned.");
			    if(HouseInfo[h][hLocked] == 0) return SendClientMessage(playerid,COLOR_WHITE,"This house isn't locked.");
			    if(!CheckInvItem(playerid, 406)) return SendClientMessage(playerid,COLOR_ERROR,"You need a toolkit to use this.");
        	    SendClientMessage(playerid, 0xCCEEFF96, "You are now attempting to break into the house!");
        	    new Float:x, Float:y, Float:z, time = 60;
        	    switch(HouseInfo[h][hLockLvl])
        	    {
        	        case 1: time+=30;
        	        case 2: time+=60;
        	        case 3: time+=160;
        	    }
                SetPVarInt(playerid, "RamHouse", time);
        	    SetPVarInt(playerid, "RamHouseID", h);
        	    ProgressBar(playerid, "Ramming House...", time, 1);
        	    AddPlayerTag(playerid, "(ramming house)");
        	    GetPlayerPos(playerid, x, y, z);
        	    GiveAchievement(playerid, 9);
        	    new found;
				if(x > 46.7115 && y > -2755.979 && x < 2931.147 && y < -548.8602)
				{
				    if(HouseInfo[h][hAlarm] == 2 && HouseInfo[h][hBasic] == 1)
					{
			    	    SendFactionMessage(1, COLOR_BLUE, "HQ: All Units - HQ: House Burglary.");
						format(string, sizeof(string), "HQ: Location: %s", GetPlayerArea(playerid));
						SendFactionMessage(1, COLOR_BLUE, string);
						HouseAlarm(h, 1);
						PlaySoundInArea(3401, x, y, z, 20.0);
						found++;
					}
				}
				if(found != 0) {
				SendBurg(h, 1); }
	        }
	    }
	}
	else if(strcmp(param, "plant", true) == 0)
	{
		if(GetPVarInt(playerid, "Mute") == 1) return 1;

		new allow = FurnRight(playerid, 1);
		
	    if(allow > 0)
	    {
			if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && amount == -1)
			{
				if(outdoor_furn == 0)
				{
					SendClientMessage(playerid, COLOR_ERROR, "This feature has been temporarily disabled.");
					return 1;
				}

		    	if(GetHouseOutdoorObjects(allow) >= HOUSE_OUTDOOR_OBJECTS)
		    	{
		    		SendClientMessage(playerid, COLOR_ERROR, "You can only plant up to 20 objects outdoors.");
		    		return 1;
		    	}

		    	ShowModelSelectionMenuEx(playerid, OutdoorFurnObjs, sizeof(OutdoorFurnObjs), "Furniture List", 2, 16.0, 0.0, -55.0);
		    	return 1;
		    }
		    if(amount == -1)
		    {
                ShowModelSelectionMenuEx(playerid, FurnObjs, sizeof(FurnObjs), "Furniture List", 2, 16.0, 0.0, -55.0);
            }
            else
            {
                if(IsInvalidObjectID(amount)) return scm(playerid, COLOR_ERROR, "Invalid Object ID!");
                new found = 0, foundid;
                for(new i = 0; i < MAX_OBJECT_ARRAY; i++)
                {
					if(found == 0)
					{
                        if(ObjectList[i][oID] == amount)
                        {
                            found++;
                            foundid=i;
                        }
                    }
                }
                if(found == 0) return scm(playerid, COLOR_ERROR, "Invalid Object ID!");
                new Float:X, Float:Y, Float:Z, obj = 0;
		        GetPlayerPos(playerid, X, Y, Z);
		        obj = CreatePlayerObject(playerid, amount, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		        SetPVarInt(playerid, "FurnObject", obj);
		        SetPVarInt(playerid, "EditorMode", 1);
		        PlayerInfo[playerid][pFurnID]=amount;
		        EditPlayerObject(playerid, obj);
		        format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", ObjectList[foundid][oName]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        AddPlayerTag(playerid, "(planting furniture)");
            }
        }
	}
	else if(strcmp(param, "edit", true) == 0)
	{
	    new allow = FurnRight(playerid, 1);
	    if(allow > 0) {
		GetCloseHouseObject(playerid, FurnRight(playerid, 1)); }
	}
	else if(strcmp(param, "select", true) == 0)
	{
	    new allow = FurnRight(playerid, 1);
	    if(allow > 0)
	    {
			SelectObject(playerid);

			Streamer_ToggleItem(playerid, 2, HouseInfo[allow][hIconi], false);
			Streamer_ToggleItem(playerid, 2, HouseInfo[allow][hIcon], false);
			Streamer_ToggleItem(playerid, 2, HouseInfo[allow][hbdoIcon], false);
			Streamer_ToggleItem(playerid, 2, HouseInfo[allow][hbdiIcon], false);
			Streamer_Update(playerid, 2);
		}
	}
	else if(strcmp(param, "removeall", true) == 0)
	{
		if(GetPVarInt(playerid, "HouseEnter") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not inside of a house.");

	    if(FurnRight(playerid, 1) != -1)
		{
			ShowPlayerDialogEx(playerid, DIALOG_HOUSE_REMOVEALL, DIALOG_STYLE_MSGBOX, "Remove all furniture objects", "Are you sure you want to remove all of your current house furniture objects?", "Yes", "No");
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, "You do not have the permission to do this in this house.");
		}
	}
	else if(strcmp(param, "interior", true) == 0)
	{
		if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house.");
		new key = GetPVarInt(playerid, "HouseKey");

	    new Houseclass = HouseInfo[key][hClass];
        if(!IsPlayerInRangeOfPoint(playerid,10.0, HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo])) return error(playerid, "You must be at your housedoor (outside) to do this.");
        if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
        {
            new diatxt[1024];
		    for(new i = 0; i < sizeof(HouseCoordinates); i++)
		    {
		        if(HouseCoordinates[i][Class] == Houseclass)
		        {
		            format(diatxt, sizeof(diatxt), "%s{FF3333}%s {CCCCCC}(Click to use)\n", diatxt, HouseCoordinates[i][HouseName]);
		        }
		    }
		    if(Houseclass != 0) ShowPlayerDialogEx(playerid, 410, DIALOG_STYLE_LIST, "Select interior", diatxt, "Select","Cancel");
		    else
		    {
		        scm(playerid, COLOR_ERROR, "Please re-type the command!");
		        HouseInfo[key][hClass]=1;
		    }
		}
		else scm(playerid, COLOR_ERROR, "Insufficient permission!");
	}
	else if(strcmp(param, "rentto", true) == 0)
    {
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
	    new key = GetPVarInt(playerid, "HouseKey");
	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(amount == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /house rentto {FFFFFF}[playerid]");
	        if (!IsPlayerConnected(amount)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	        if(PlayerToPlayer(playerid,amount,5.0))
	        {
			    if(GetPVarInt(amount, "HouseKey") != 0) return SendClientMessage(playerid, COLOR_ERROR, "This player currently owns or rents a property.");
	            format(string, sizeof(string),"You offered %s to rent at your property.", PlayerInfo[amount][pName]);
				SendClientMessage(playerid,COLOR_ERROR,string);
				format(string, sizeof(string),"%s offered you to rent at his property. (/accept rentoffer).", PlayerInfo[playerid][pName]);
				SendClientMessage(amount,COLOR_ERROR,string);
				SetPVarInt(amount, "RentOffer", playerid);
	        }
	        else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
	else if(strcmp(param, "rentfee", true) == 0)
    {
        if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
	    new key = GetPVarInt(playerid, "HouseKey");
	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(amount == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /house rentfee {FFFFFF}[amount]");
	        if(amount < 0 || amount > 50)
	        {
				SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 50.");
				return true;
			}
			HouseInfo[key][hRentFee]=amount;
			format(string, 128, "Rent fee set to %s.", FormatMoney(amount));
			scm(playerid, COLOR_WHITE, string);
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "unrent", true) == 0)
  	{
		new id = GetPVarInt(playerid, "HouseKey");
		if(GetPVarInt(playerid, "HouseKey") == 0) return error(playerid, "You do not rent at a property.");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo])) return error(playerid, "You are not near your house door.");
		if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
		{
		    scm(playerid, COLOR_ERROR, "Insufficient permission!");
	    }
	    else
	    {
	        scm(playerid, COLOR_WHITE, "You no longer rent at this property.");
	        SetPVarInt(playerid, "HouseKey", 0);
	    }
		return 1;
	}
	else if(strcmp(param, "rentlist", true) == 0)
    {
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
        if(GetPVarInt(playerid, "Delay") > GetCount()) return 1; // Delay to avoid MySQL overload.
	    new key = GetPVarInt(playerid, "HouseKey");
	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        mysql_pquery(handlesql, "SELECT `HouseKey`, `Name` FROM `accounts`;", "RentListSQL", "ii", playerid, GetPVarInt(playerid, "HouseKey"));
	        SetPVarInt(playerid, "Delay", GetCount()+500);
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "stats", true) == 0)
    {
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house.");
		new key = GetPVarInt(playerid, "HouseKey");

	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "_____________________________________________________");
            format(string, sizeof(string), "                               {3366FF}HouseID: %d", key);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "Locked: %d | Value: %s | Class: %d | RentFee: %d/50", HouseInfo[key][hLocked], FormatMoney(HouseInfo[key][hValue]), HouseInfo[key][hClass], HouseInfo[key][hRentFee]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "Basic: %d/1 | Insurance: %d/3 | LockLvl: %d/3 | Alarm: %d/2", HouseInfo[key][hBasic], HouseInfo[key][hInsurance], HouseInfo[key][hLockLvl], HouseInfo[key][hAlarm]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            new fcount;
            for(new h = 0; h < MAX_HOUSE_OBJ; h++)
            {
                if(HouseInfo[key][hoID][h] > 0)
                {
                    fcount++;
                }
            }
            format(string, sizeof(string), "Furniture: %d/%d", fcount, MAX_HOUSE_OBJ);
            SendClientMessage(playerid, COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_WHITE, "_____________________________________________________");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "upgrade", true) == 0)
    {
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house.");
		new key = GetPVarInt(playerid, "HouseKey");

	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        ShowPlayerDialogEx(playerid, 435, DIALOG_STYLE_LIST, "House Upgrades", "Basic Essentials\nInsurance\nLock\nAlarm", "Select", "Close");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "rights", true) == 0)
    {
        if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house.");
		new key = GetPVarInt(playerid, "HouseKey");

	    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(amount == (-1)) {
			    SendClientMessage(playerid, COLOR_GREEN, "USAGE: /house rights {FFFFFF}[playerid]");
			    SendClientMessage(playerid, COLOR_GREEN, "If you select playerid as 501 the furn rights will disable.");
			    return 1;
			}
			if(amount == 501) {
			    strmid(HouseInfo[key][hFurnR], "None", 0, strlen("None"), 255);
			    scm(playerid, COLOR_WHITE, "Property furnishing rights are now disabled.");
			    return 1;
			}
	        if (!IsPlayerConnected(amount)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	        if(amount == playerid) return scm(playerid, COLOR_ERROR, "You can't give yourself furnish rights!");
	        if(PlayerToPlayer(playerid,amount,5.0))
	        {
	            format(string, 128, "You have given %s permission to furnish your property!", PlayerInfo[amount][pUsername]);
	            scm(playerid, COLOR_WHITE, string);
	            format(string, 128, "%s has given you permission to furnish their property!", PlayerInfo[playerid][pUsername]);
	            scm(amount, COLOR_WHITE, string);
	            strmid(HouseInfo[key][hFurnR], PlayerInfo[amount][pUsername], 0, strlen(PlayerInfo[amount][pUsername]), 255);
	        }
	        else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "exit", true) == 0)
	{
		if(GetPlayerInterior(playerid) == 0) return 1;
	    new allow = FurnRight(playerid, 1);
	    if(allow > 0)
		{
		    if(HouseInfo[FurnRight(playerid, 1)][hUD] >= 4) {
		    scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse."); return 1; }
		    ShowPlayerDialogEx(playerid, 445, DIALOG_STYLE_MSGBOX, "House Exit", "Would you like to move the house exit? {FFFFFF}Cost: $1,500\n{CC0000}Abusing this command will result to a permanent ban!", "Continue", "Cancel");
		}
	}
	else if(strcmp(param, "bank", true) == 0)
  	{
		new id = GetPVarInt(playerid, "HouseEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
		{
		    if(GetCloseHouseSafe(playerid, id))
			{
		        new msg[128];
		        format(msg, sizeof(msg), "Property Bank: %s.", FormatMoney(HouseInfo[id][hBank]));
		        SCM(playerid, COLOR_WHITE, msg);
		    } else {
			    error(playerid, "You are not near a opened property safe."); }
		}
		return 1;
	}
	else if(strcmp(param, "deposit", true) == 0)
  	{
		new id = GetPVarInt(playerid, "HouseEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
		{
		    if(GetCloseHouseSafe(playerid, id))
			{
		        if(amount == (-1)) return scm(playerid, COLOR_GREEN, "USAGE: /House deposit {FFFFFF} [amount]");
		        if(amount <= 0) return scm(playerid, COLOR_GREEN, "USAGE: /House deposit {FFFFFF} [amount]");
		        if(amount >= 99999999) return scm(playerid, COLOR_GREEN, "USAGE: /House deposit {FFFFFF} [amount]");
		        if(GetPlayerMoneyEx(playerid) >= amount)
		        {
		            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		            GiveNameSpace(sendername);
    	            format(string, sizeof(string), "* %s stored %s into the property safe.", sendername, FormatMoney(amount));
    	            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		            GivePlayerMoneyEx(playerid, -amount);
			        HouseInfo[id][hBank]+=amount;

			        SaveHouseID(id, 0);

			        format(string, 128, "%s stored %s into houseid: %d bank!", PlayerInfo[playerid][pUsername], FormatMoney(amount), id);
			        SafeLog(string);
			    }
			    else scm(playerid, COLOR_ERROR, "You don't have that much money on you.");
			} else {
			    error(playerid, "You are not near a opened property safe."); }
		}
		return 1;
	}
	else if(strcmp(param, "withdraw", true) == 0)
  	{
		new id = GetPVarInt(playerid, "HouseEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
		{
		    if(GetCloseHouseSafe(playerid, id))
			{
		    	if(amount == (-1)) return scm(playerid, COLOR_GREEN, "USAGE: /House withdraw {FFFFFF} [amount]");
		    	if(amount <= 0) return scm(playerid, COLOR_GREEN, "USAGE: /House withdraw {FFFFFF} [amount]");
		    	if(amount >= 99999999) return scm(playerid, COLOR_GREEN, "USAGE: /House withdraw {FFFFFF} [amount]");
		    	if(HouseInfo[id][hBank] <= 0) return scm(playerid, COLOR_ERROR, "There is no cash in the property bank.");
		    	if(HouseInfo[id][hBank] >= amount)
		    	{
			        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		            GiveNameSpace(sendername);
    	            format(string, sizeof(string), "* %s took %s from the property safe.", sendername, FormatMoney(amount));
    	            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
			        GivePlayerMoneyEx(playerid, amount);
			        HouseInfo[id][hBank] -= amount;

			        SaveHouseID(id, 0);

			        format(string, 128, "%s took %s from houseid: %d bank!", PlayerInfo[playerid][pUsername], FormatMoney(amount), id);
			        SafeLog(string);
				}
				else scm(playerid, COLOR_ERROR, "Insufficient amount!");
			} else {
			    error(playerid, "You are not near a opened property safe."); }
		}
		return 1;
	}
	else if(strcmp(param, "backdoor", true) == 0)
  	{
  		if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house.");
		new id = GetPVarInt(playerid, "HouseKey");

  		if(HouseInfo[id][hbdXo] == 0 && HouseInfo[id][hbdYo] == 0 && HouseInfo[id][hbdZo] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This house does not have a back door.");

  		if(GetPVarInt(playerid, "HouseEnter") == id)
  		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

			HouseInfo[id][hbdXi] = pos[0];
			HouseInfo[id][hbdYi] = pos[1];
			HouseInfo[id][hbdZi] = pos[2];

			DestroyDynamicCP(HouseInfo[id][hbdiIcon]);
			HouseInfo[id][hbdiIcon] = CreateDynamicCP(HouseInfo[id][hbdXi], HouseInfo[id][hbdYi], HouseInfo[id][hbdZi], 1.5, HouseInfo[id][hVwIn], -1, -1, 5.0);

			SendClientMessage(playerid, COLOR_WHITE, "Backdoor set!");
			SaveHouseID(id, 0);
  		}
  		else
  		{
  			SendClientMessage(playerid, COLOR_ERROR, "You are not inside of your house.");
  		}
  		return 1;
  	}
  	else if(strcmp(param, "clothing", true) == 0)
  	{
  		if(GetPVarInt(playerid, "HouseEnter") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You need to be inside of your house to use this.");

  		if(GetPVarInt(playerid, "HouseKey") != GetPVarInt(playerid, "HouseEnter") && !DoesPlayerHaveHouseKey(playerid, GetPVarInt(playerid, "HouseEnter"))) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this house.");

  		new count = 0;
  		new houseid = GetPVarInt(playerid, "HouseEnter");

  		for(new i = 0; i < MAX_HOUSE_SKINS; i++)
  		{
  			count++;
  			if(HouseInfo[houseid][hSkin][i] == 0)
  			{
  				format(string, sizeof(string), "%s%i: EMPTY SLOT\n", string, count, HouseInfo[houseid][hSkin][i]);
  			}
  			else
  			{
  				format(string, sizeof(string), "%s%i: Skin %i\n", string, count, HouseInfo[houseid][hSkin][i]);
  			}
  		}

  		ShowPlayerDialogEx(playerid, DIALOG_HOUSE_CLOTHING, DIALOG_STYLE_LIST, "Property Clothing", string, "Select", "Cancel");
  	}
	else if(strcmp(param, "safe", true) == 0)
  	{
		scm(playerid, COLOR_ERROR, "USAGE: Use the command (/safe)!");
		return 1;
	}
	else if(strcmp(param, "bareswitch", true) == 0)
	{
	    if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
  		if(GetPVarInt(playerid, "HouseKey") != GetPVarInt(playerid, "HouseEnter")) return SendClientMessage(playerid, COLOR_ERROR, "You need to be inside of your house to use this.");

  		new houseid = GetPVarInt(playerid, "HouseKey");

	    if(strcmp(HouseInfo[houseid][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
			if(GetPlayerMoneyEx(playerid) >= 2500)
			{
		    	scm(playerid, COLOR_WHITE, "House interior has been bare switched.");
		    	scm(playerid, COLOR_ERROR, "Note: When building a interior use /house exit to set the door exit.");
		    	HouseInfo[houseid][hXi] = 1412.639892;
				HouseInfo[houseid][hYi] = -1.787510;
				HouseInfo[houseid][hZi] = 1000.924377;
				HouseInfo[houseid][hIntIn] = 1;
				GivePlayerMoneyEx(playerid, -2500);
				GameTextForPlayer(playerid, "~r~-$2,500", 5000, 1);
				SaveHouseID(houseid, 0);

				SetPlayerPosEx(playerid, HouseInfo[houseid][hXi], HouseInfo[houseid][hYi], HouseInfo[houseid][hZi]);
				SetPlayerInterior(playerid, 1);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
	}
	else if(strcmp(param, "exit", true) == 0)
	{
		if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
  		if(GetPVarInt(playerid, "HouseKey") != GetPVarInt(playerid, "HouseEnter")) return SendClientMessage(playerid, COLOR_ERROR, "You need to be inside of your house to use this.");

		ShowPlayerDialogEx(playerid, DIALOG_HOUSE_EXIT, DIALOG_STYLE_MSGBOX, "House Exit", "Would you like to move the house exit? {FFFFFF}Cost: $1,500\n{CC0000}Abusing this command will result in a permanent ban!", "Continue", "Cancel");
	}
    else cmd_house(playerid, "");
	return 1;
}

COMMAND:evict(playerid, params[]) {
	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return usage(playerid, "USAGE: /evict [Firstname_Lastname]");
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	new key = GetPVarInt(playerid, "HouseKey");
	if(key == 0) return scm(playerid, COLOR_ERROR, "You don't own a property.");
	if(strcmp(name, PlayerInfo[playerid][pUsername], true) == 0) return scm(playerid, COLOR_ERROR, "You can't evict yourself.");
	if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
 	{
		foreach(new i : Player) {
		    if(strcmp(name, PlayerInfo[i][pUsername], true) == 0) {
				new msg[70];
		        if(GetPVarInt(i, "HouseKey") != GetPVarInt(playerid, "HouseKey")) return SCM(playerid, COLOR_ERROR, "This player does not rent at your property!");
				SetPVarInt(i, "HouseKey", 0);
				format(msg, sizeof(msg), "You have evicted %s from your property.", name);
				scm(playerid, COLOR_WHITE, msg);
				scm(i, COLOR_WHITE, "You have been evicted from your property!");
				return 1;
			}
		}

		new query[90];
		mysql_format(handlesql, query, sizeof(query), "SELECT `HouseKey` FROM `accounts` WHERE `Name` = '%e';", name);
		mysql_pquery(handlesql, query, "OnEvictValidation", "is", playerid, name);
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}

	return 1;
}

forward OnEvictValidation(playerid, name[]);
public OnEvictValidation(playerid, name[]) {
	if(cache_get_row_count() > 0) {
		new query[100];
		if(cache_get_field_content_int(0, "HouseKey") != GetPVarInt(playerid, "HouseKey")) {
			SCM(playerid, COLOR_ERROR, "This player does not rent at your property!");
		} else {
			mysql_format(handlesql, query, sizeof(query), "UPDATE `accounts` SET `HouseKey` =  '0' WHERE `Name` = '%e';", name);
			mysql_pquery(handlesql, query);
			format(query, sizeof(query), "You have evicted %s from your property.", name);
			scm(playerid, COLOR_WHITE, query);
		}
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "This player could not be found in the database.");
	}
}
//============================================//
/*COMMAND:door(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    new foundid, found = 0, key, Float:x, Float:y, Float:z, id, Float:adjust = 90.0;
    if(FurnRightEx(playerid, 1, 0))
	{
		key = FurnRightEx(playerid, 1, 1);
		if(key != 0) {
            for(new h = 0; h < MAX_HOUSE_OBJ; h++)
            {
                if(HouseInfo[key][hObject][h] != 0)
		        {
		            if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		            {
                        if(IsDoorObject(HouseInfo[key][hoID][h]))
                	    {
							if(found == 0)
							{
                                foundid=h;
						        found++;
						    }
		        	    }
		            }
                }
            }
	        if(found == 0) { SCM(playerid, COLOR_ERROR, "ERROR: Can't find any door!"); }
	        else
	        {
			    id = HouseInfo[key][hObject][foundid];
			    GetDynamicObjectRot(id, x, y, z);
			    if(z >= HouseInfo[key][horZ][foundid]+adjust-1.0) {
			        SetDynamicObjectRot(id, x, y, HouseInfo[key][horZ][foundid]);
			    } else {
			        SetDynamicObjectRot(id, x, y, z+adjust);
			    }
	        }
		}
	}
	if(FurnRightEx(playerid, 2, 0))
	{
		key = FurnRightEx(playerid, 2, 1);
		if(key != 0) {
            for(new h = 0; h < MAX_HOUSE_OBJ; h++)
            {
                if(BizInfo[key][bObject][h] != 0)
		        {
		            if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
		            {
                        if(IsDoorObject(BizInfo[key][boID][h]))
                	    {
							if(found == 0)
							{
                                foundid=h;
						        found++;
						    }
		        	    }
		            }
                }
            }
	        if(found == 0) { SCM(playerid, COLOR_ERROR, "ERROR: Can't find any door!"); }
	        else
	        {
			    id = BizInfo[key][bObject][foundid];
			    GetDynamicObjectRot(id, x, y, z);
			    if(z >= BizInfo[key][borZ][foundid]+adjust-1.0) {
			        SetDynamicObjectRot(id, x, y, BizInfo[key][borZ][foundid]);
			    } else {
			        SetDynamicObjectRot(id, x, y, z+adjust);
			    }
	        }
		}
	}
    return 1;
}*/

    

COMMAND:door(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    new foundid, found = 0, key = -1, Float:x, Float:y, Float:z, id, Float:adjust = 90.0, found_total = 0;
	
    if(GetPVarInt(playerid, "HouseEnter") != 0)
	{
		key = GetPVarInt(playerid, "HouseEnter");

		for(new h = 0; h < MAX_HOUSE_OBJ; h++)
		{
			if(HouseInfo[key][hObject][h] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
				{
					if(IsDoorObject(HouseInfo[key][hoID][h]))
					{
						if(found == 0)
						{
							foundid = h;
							found++;
							found_total++;
						}
					}
				}
			}
		}
		if(found != 0)
		{
			if(HouseInfo[key][Locked][foundid] != 1)
			{
				id = HouseInfo[key][hObject][foundid];
				GetDynamicObjectRot(id, x, y, z);
				
				if(z >= HouseInfo[key][horZ][foundid]+adjust-1.0)
				{
					SetDynamicObjectRot(id, x, y, HouseInfo[key][horZ][foundid]);
				}
				else
				{
					SetDynamicObjectRot(id, x, y, z+adjust);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_ERROR, "The door is locked.");
			}

			foundid = 0;
			found = 0;
		}
	}
	else
	{
		foreach(new i : HouseIterator)
		{
			if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]))
			{
				key = i;

				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(HouseInfo[key][hObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
						{
							if(IsDoorObject(HouseInfo[key][hoID][h]))
							{
								if(found == 0)
								{
									foundid=h;
									found++;
									found_total++;
								}
							}
						}
					}
				}
				if(found != 0)
				{
					if(HouseInfo[key][Locked][foundid] != 1)
					{
						id = HouseInfo[key][hObject][foundid];
						GetDynamicObjectRot(id, x, y, z);
						
						if(z >= HouseInfo[key][horZ][foundid]+adjust-1.0)
						{
							SetDynamicObjectRot(id, x, y, HouseInfo[key][horZ][foundid]);
						}
						else
						{
							SetDynamicObjectRot(id, x, y, z + adjust);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_ERROR, "The door is locked.");
					}

					foundid = 0;
					found = 0;
				}
			}
		}
	}
	
	if(GetPVarInt(playerid, "BizEnter") != 0)
	{
		key = GetPVarInt(playerid, "BizEnter");

		for(new h = 0; h < MAX_HOUSE_OBJ; h++)
		{
			if(BizInfo[key][bObject][h] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
				{
					if(IsDoorObject(BizInfo[key][boID][h]))
					{
						if(found == 0)
						{
							foundid=h;
							found++;
							found_total++;
						}
					}
				}
			}
		}
		if(found != 0)
		{
			if(BizInfo[key][bLocked][foundid] != 1)
			{
				id = BizInfo[key][bObject][foundid];
				GetDynamicObjectRot(id, x, y, z);
				if(z >= BizInfo[key][borZ][foundid]+adjust-1.0) {
					SetDynamicObjectRot(id, x, y, BizInfo[key][borZ][foundid]);
				} else {
					SetDynamicObjectRot(id, x, y, z+adjust);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_ERROR, "The door is locked.");
			}
			
			foundid = 0;
			found = 0;
		}
	}
	else
	{
		foreach(new i : BizIterator)
		{
			if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]))
			{
				key = i;

				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(BizInfo[key][bObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
						{
							if(IsDoorObject(BizInfo[key][boID][h]))
							{
								if(found == 0)
								{
									foundid=h;
									found++;
									found_total++;
								}
							}
						}
					}
				}
				if(found != 0)
				{
					if(BizInfo[key][bLocked][foundid] != 1)
					{
						id = BizInfo[key][bObject][foundid];
						GetDynamicObjectRot(id, x, y, z);
						if(z >= BizInfo[key][borZ][foundid]+adjust-1.0) {
							SetDynamicObjectRot(id, x, y, BizInfo[key][borZ][foundid]);
						} else {
							SetDynamicObjectRot(id, x, y, z+adjust);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_ERROR, "The door is locked.");
					}

					foundid = 0;
					found = 0;
				}
			}
		}
	}

	if(found_total == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");
	}
    return 1;
}
//============================================//
COMMAND:safe(playerid, params[])
{
	new result[64], pa1, id, string[256], sendername[MAX_PLAYER_NAME];
    if(sscanf(params, "s[64]I(-1)", result, pa1)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /safe [unlock/lock/set]");
	else
	{
	    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
	    if(strcmp(result, "unlock", true) == 0)
	    {
	        id = GetPVarInt(playerid, "HouseEnter");
	        if(id != 0)
	        {
	        	if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be the owner of this property to access the safe.");

	            if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]))
	            {
	                if(GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
	                {
	                    if(GetCloseHouseSafeEx(playerid, id))
	                    {
                            if(HouseInfo[id][hCode] <= 999)
                            {
                                if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
                                {
                                    scm(playerid, COLOR_ERROR, "This safe does not have a combination set. (/safe set)");
                                }
                                else
                                {
                                    scm(playerid, COLOR_ERROR, "Incorrect combination.");
                                }
                                return 1;
                            }
                            if(HouseInfo[id][hSafe] == 1) return scm(playerid, COLOR_ERROR, "This safe is already unlocked.");
                            if(pa1 == (-1)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /safe [unlock] [combination]");
                            if(pa1 == HouseInfo[id][hCode])
                            {
	                            HouseInfo[id][hSafe] = 1;
    	                        format(string, sizeof(string), "* %s unlocks the housesafe.", sendername);
    	                        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	                        format(string, sizeof(string), "%s unlocked HouseID %d's safe.", PlayerInfo[playerid][pUsername], id);
    	                        SafeLog(string);

    	                        if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
    	                        {
    	                            scm(playerid, COLOR_WHITE, "Safe unlocked!");
								}
                            }
                            else
                            {
                                scm(playerid, COLOR_ERROR, "Incorrect combination.");
                                SetPVarInt(playerid, "Delay", GetCount()+2000);
                            }
	                    }
	                    else
	                    {
	                    	scm(playerid, COLOR_ERROR, "You are not near a safe object.");
	                	}
	                }
	            }
	        }

	        id = GetPVarInt(playerid, "BizEnter");
	        if(id != 0)
	        {
	        	if(strcmp(BizInfo[id][Owner], PlayerInfo[playerid][pUsername], true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be the owner of this property to access the safe.");

	            if(IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]))
	            {
	                if(GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
	                {
	                    if(GetCloseBizSafeEx(playerid, id))
	                    {
                            if(BizInfo[id][Code] <= 999)
                            {
                                if(strcmp(BizInfo[id][Owner], PlayerInfo[playerid][pUsername], true) == 0)
                                {
                                    scm(playerid, COLOR_ERROR, "This safe does not have a combination set. (/safe set)");
                                }
                                else
                                {
                                    scm(playerid, COLOR_ERROR, "Incorrect combination.");
                                }
                                return 1;
                            }
                            if(BizInfo[id][Safe] == 1) return scm(playerid, COLOR_ERROR, "This safe is already unlocked.");
                            if(pa1 == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /safe [unlock] [combination]");
                            if(pa1 == BizInfo[id][Code])
                            {
	                            BizInfo[id][Safe]=1;
    	                        format(string, sizeof(string), "* %s unlocks the business safe.", sendername);
    	                        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	                        format(string, sizeof(string), "%s unlocked business %d's safe.", PlayerInfo[playerid][pUsername], id);
    	                        SafeLog(string);
    	                        if(strcmp(BizInfo[id][Owner], PlayerInfo[playerid][pUsername], true) == 0)
    	                        {
    	                            scm(playerid, COLOR_WHITE, "Safe unlocked!");
    	                        }
                            }
                            else
                            {
                                scm(playerid, COLOR_ERROR, "Incorrect combination.");
                                SetPVarInt(playerid, "Delay", GetCount()+2000);
                            }
	                    }
	                    else
	                    {
	                    	scm(playerid, COLOR_ERROR, "You are not near a safe object.");
	                	}
	                }
	            }
	        }
	    }
		else if(strcmp(result, "lock", true) == 0)
		{
		    id = GetPVarInt(playerid, "HouseEnter");
	        if(id != 0)
	        {
	        	// if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be the owner of this property to access the safe.");

	            if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]))
	            {
	                if(GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
	                {
	                    if(GetCloseHouseSafeEx(playerid, id))
	                    {
	                        if(HouseInfo[id][hSafe] == 1)
	                        {
	                            HouseInfo[id][hSafe]=0;
    	                        format(string, sizeof(string), "* %s locks the house safe.", sendername);
    	                        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	                        SetPVarInt(playerid, "Delay", GetCount()+2000);
	                        }
	                        else
	                        {
	                            scm(playerid, COLOR_ERROR, "This safe is already locked.");
	                        }
	                    }
	                    else
	                    {
	                    	scm(playerid, COLOR_ERROR, "You are not near a safe object.");
	                	}
	                }
	            }
	        }

	        id = GetPVarInt(playerid, "BizEnter");
	        if(id != 0)
	        {
	        	// if(strcmp(BizInfo[id][Owner], PlayerInfo[playerid][pUsername], true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be the owner of this property to access the safe.");

	            if(IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]))
	            {
	                if(GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
	                {
	                    if(GetCloseBizSafeEx(playerid, id))
	                    {
	                        if(BizInfo[id][Safe] == 1)
	                        {
	                            BizInfo[id][Safe]=0;
    	                        format(string, sizeof(string), "* %s locks the business safe.", sendername);
    	                        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	                        SetPVarInt(playerid, "Delay", GetCount()+2000);
	                        }
	                        else
	                        {
	                            scm(playerid, COLOR_ERROR, "This safe is already locked.");
	                        }
	                    }
	                    else
	                    {
	                    	scm(playerid, COLOR_ERROR, "You are not near a safe object.");
	                	}
	                }
	            }
	        }
	    }
		else if(strcmp(result, "set", true) == 0)
		{
		    id = GetPVarInt(playerid, "HouseKey");
		    if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be the owner of this property to access the safe.");

		    if(IsPlayerInRangeOfPoint(playerid, 200.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]))
		    {
	            if(GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
	            {
	                if(GetCloseHouseSafeEx(playerid, id))
	                {
	                    if(strcmp(HouseInfo[id][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
	                    {
	                        if(pa1 == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /safe [set] [combination 1000-9999]");
	                        if(pa1 < 1000 || pa1 > 9999) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1000 or above 9999.");
	                        new cost = 2500;
	                        if(HouseInfo[id][hCode] <= 999) cost=0;
	                        if(GetPlayerMoneyEx(playerid) >= cost)
	                        {
							    if(cost == 0)
							    {
	                            	format(string, 256, "Safe's combination set to %i", pa1);
							    }
							    else
							    {
							    	format(string, 256, "Safe's combination set to %i for %s", pa1, FormatMoney(cost));
								}

							    scm(playerid, COLOR_WHITE, string);
							    GivePlayerMoneyEx(playerid, -cost);
							    HouseInfo[id][hCode]=pa1;
							    SaveHouseID(id, 0);
							    SetPVarInt(playerid, "Delay", GetCount()+2000);
	                        } 
	                        else 
	                        {
	                        	SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"); 
	                    	}
	                    }
	                } 
	                else 
	                {
	                    scm(playerid, COLOR_ERROR, "You are not near a safe object!"); 
	                }
	            }
			}

			id = GetPVarInt(playerid, "BizKey");
			if(strcmp(BizInfo[id][Owner], PlayerInfo[playerid][pUsername], true) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be the owner of this property to access the safe.");
			
		    if(IsPlayerInRangeOfPoint(playerid, 200.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]))
		    {
	            if(GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
	            {
	                if(GetCloseBizSafeEx(playerid, id))
	                {
	                    if(strcmp(BizInfo[id][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	                    {
	                        if(pa1 == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /safe {FFFFFF}[set] [combination 1000-9999]");
	                        if(pa1 < 1000 || pa1 > 9999) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1000 or above 9999.");
	                        new cost = 2500;
	                        if(BizInfo[id][Code] <= 999) cost=0;
	                        if(GetPlayerMoneyEx(playerid) >= cost)
	                        {
							    if(cost == 0)
							    {
	                            	format(string, 256, "Code set to '%d' for free.", pa1);
							    }
							    else
							    {
							    	format(string, 256, "Code changed to '%d' for %s.", pa1, FormatMoney(cost));
								}

							    scm(playerid, COLOR_WHITE, string);
							    GivePlayerMoneyEx(playerid, -cost);
							    BizInfo[id][Code]=pa1;
							    SaveBizID(id, 0);
							    SetPVarInt(playerid, "Delay", GetCount()+2000);
	                        }
	                        else
	                        {
	                       		SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	                    	}
	                    }
	                }
	                else
	                {
	                    scm(playerid, COLOR_ERROR, "You are not near a safe object!");
	                }
	            }
			}
	    }
	}
    return 1;
}
//============================================//

ALTCOMMAND:doorlock->lockdoor;
COMMAND:lockdoor(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    new foundid, found = 0, key = -1, found_total = 0;
	
    if(GetPVarInt(playerid, "HouseEnter") != 0)
	{
		key = GetPVarInt(playerid, "HouseEnter");

		for(new h = 0; h < MAX_HOUSE_OBJ; h++)
		{
			if(HouseInfo[key][hObject][h] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
				{
					if(IsDoorObject(HouseInfo[key][hoID][h]))
					{
						if(found == 0)
						{
							foundid = h;
							found++;
							found_total++;
						}
					}
				}
			}
		}
		if(found != 0)
		{
			if(FurnRight(playerid, 1) == -1) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient permissions.");
			switch(HouseInfo[key][Locked][foundid])
			{
				case 0: //Unlocked, lock it.
				{
					HouseInfo[key][Locked][foundid] = 1;
					SendClientMessage(playerid, COLOR_ORANGE, "Door locked.");
				}
				case 1: //Locked, unlock it.
				{
					HouseInfo[key][Locked][foundid] = 0;
					SendClientMessage(playerid, COLOR_ORANGE, "Door unlocked.");
				}
			}

			found = 0;
			foundid = 0;
		}
	}
	else
	{
		foreach(new i : HouseIterator)
		{
			if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]))
			{
				key = i;

				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(HouseInfo[key][hObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
						{
							if(IsDoorObject(HouseInfo[key][hoID][h]))
							{
								if(found == 0)
								{
									foundid=h;
									found++;
									found_total++;
								}
							}
						}
					}
				}
				if(found != 0)
				{
					if(FurnRight(playerid, 1) == -1) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient permissions.");
					switch(HouseInfo[key][Locked][foundid])
					{
						case 0: //Unlocked, lock it.
						{
							HouseInfo[key][Locked][foundid] = 1;
							SendClientMessage(playerid, COLOR_ORANGE, "Door locked.");
						}
						case 1: //Locked, unlock it.
						{
							HouseInfo[key][Locked][foundid] = 0;
							SendClientMessage(playerid, COLOR_ORANGE, "Door unlocked.");
						}
					}

					found = 0;
					foundid = 0;
				}
			}
		}
	}
	
	if(GetPVarInt(playerid, "BizEnter") != 0)
	{
		key = GetPVarInt(playerid, "BizEnter");

		for(new h = 0; h < MAX_HOUSE_OBJ; h++)
		{
			if(BizInfo[key][bObject][h] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
				{
					if(IsDoorObject(BizInfo[key][boID][h]))
					{
						if(found == 0)
						{
							foundid=h;
							found++;
							found_total++;
						}
					}
				}
			}
		}
		if(found != 0)
		{
			if(FurnRight(playerid, 2) == -1) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient permissions.");
			switch(BizInfo[key][bLocked][foundid])
			{
				case 0: //Unlocked, lock it.
				{
					BizInfo[key][bLocked][foundid] = 1;
					SendClientMessage(playerid, COLOR_ORANGE, "Door locked.");
				}
				case 1: //Locked, unlock it.
				{
					BizInfo[key][bLocked][foundid] = 0;
					SendClientMessage(playerid, COLOR_ORANGE, "Door unlocked.");
				}
			}
			
			found = 0;
			foundid = 0;
		}
	}
	else
	{
		foreach(new i : BizIterator)
		{
			if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]))
			{
				key = i;

				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(BizInfo[key][bObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
						{
							if(IsDoorObject(BizInfo[key][boID][h]))
							{
								if(found == 0)
								{
									foundid=h;
									found++;
									found_total++;
								}
							}
						}
					}
				}
				if(found != 0)
				{
					if(FurnRight(playerid, 2) == -1) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient permissions.");
					switch(BizInfo[key][bLocked][foundid])
					{
						case 0: //Unlocked, lock it.
						{
							BizInfo[key][bLocked][foundid] = 1;
							SendClientMessage(playerid, COLOR_ORANGE, "Door locked.");
						}
						case 1: //Locked, unlock it.
						{
							BizInfo[key][bLocked][foundid] = 0;
							SendClientMessage(playerid, COLOR_ORANGE, "Door unlocked.");
						}
					}
					
					found = 0;
					foundid = 0;
				}
			}
		}
	}

	if(found_total == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");
	}
    return 1;
}
//============================================//
COMMAND:tow(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You need to be the driver of this vehicle to continue.");
    
    // Farmer

    if(GetPVarInt(playerid, "Job") == JOB_FARMER)
    {
    	if(PlayerInfo[playerid][pJobStatus] == 2 || PlayerInfo[playerid][pJobStatus] == 3)
    	{
    		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 531) return SendClientMessage(playerid, COLOR_ERROR, "You must be in your Tractor to tow a vehicle.");
    		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "There is already a trailer attached to your vehicle.");

			if(CartoCloseCar(playerid, 1, 7.0))
			{
				if(GetVehicleModel(CartoCloseCar(playerid, 2, 7.0)) != 610 || PlayerInfo[playerid][pJobExtraVehicleID] != CartoCloseCar(playerid, 2, 7.0)) return SendClientMessage(playerid, COLOR_ERROR, "You are not in range of your job trailer.");
				
				new vehicleid = CartoCloseCar(playerid, 2, 7.0);
				AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));

				if(PlayerInfo[playerid][pJobProgress] == 0)
				{
					SendClientMessage(playerid, COLOR_JOB, "The trailer is attached, meaning you can start your route now.");
					PlayerInfo[playerid][pJobStatus] = 3;
					PlayerInfo[playerid][pJobProgress] = 0;
        			PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, 
						FarmerRoute[PlayerInfo[playerid][pJobProgress]][0],
						FarmerRoute[PlayerInfo[playerid][pJobProgress]][1],
						FarmerRoute[PlayerInfo[playerid][pJobProgress]][2],
						0.0,0.0,0.0, 3, -1, -1, playerid, 1000);
					PlayerInfo[playerid][pJobProgress] = 1;
				}
				return 1;
			}
    	}

    	if(PlayerInfo[playerid][pJobStatus] >= 3)
    	{
    		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "There is already a trailer attached to your vehicle.");
    		SendClientMessage(playerid, COLOR_ERROR, "You can not use this command at the moment.");
    		return 1;
    	}
    }
    else if(GetPVarInt(playerid, "Job") == JOB_TRUCKER)
    {
    	if(PlayerInfo[playerid][pJobStatus] == 2 || PlayerInfo[playerid][pJobStatus] == 3)
    	{
	    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "There is already a trailer attached to your vehicle.");
	    
	    	if(CartoCloseCar(playerid, 1, 12.0))
			{
				if(PlayerInfo[playerid][pJobExtraVehicleID] != CartoCloseCar(playerid, 2, 12.0)) return SendClientMessage(playerid, COLOR_ERROR, "You are not in range of your job trailer.");
				
				new vehicleid = CartoCloseCar(playerid, 2, 12.0);
				AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));

				if(PlayerInfo[playerid][pJobProgress] == 0 && PlayerInfo[playerid][pJobStatus] == 2)
				{
					SendClientMessage(playerid, COLOR_JOB, "The trailer is attached, meaning you can start your route now.");
					PlayerInfo[playerid][pJobStatus] = 3;
					PlayerInfo[playerid][pJobProgress] = 0;

					new TruckingCP = random(11);

					PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, 
						TruckerRoute[TruckingCP][0],
						TruckerRoute[TruckingCP][1],
						TruckerRoute[TruckingCP][2],
						0.0,0.0,0.0, 3, -1, -1, playerid, -1);

					new string[128];
					format(string, sizeof(string), "Deliver the goods to {FFFFFF}%s{B56AFF}.", GetZone(TruckerRoute[TruckingCP][0],
						TruckerRoute[TruckingCP][1],
						TruckerRoute[TruckingCP][2]));
					SendClientMessage(playerid, COLOR_JOB, string);

					SetPVarInt(playerid, "RouteTime", GetCount()+60000);
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ERROR, "There is no trailer in range of your truck.");
				return 1;
			}
		}
    }


    // ------

    if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return SendClientMessage(playerid, COLOR_ERROR, "You must be inside a towtruck to use this.");
    if(GetPVarInt(playerid, "Job") == JOB_MECHANIC || GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
    {
    	if(GetPVarInt(playerid, "Job") == JOB_MECHANIC &&
    		GetPVarInt(playerid, "Member") != FACTION_LSPD &&
    		GetPVarInt(playerid, "Member") != FACTION_LSFD)
    	{
    		if(PlayerInfo[playerid][pJobStatus] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must start your route first.");
    	}
        if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
            DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		    return 1;
		}
        if(CartoCloseCar(playerid,1,7.0)) {
	        new carid = CartoCloseCar(playerid,2,7.0);
            if(IsNotAEngineCar(carid)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle dosen't have an engine.");
	        AttachTrailerToVehicle(carid,GetPlayerVehicleID(playerid));
	    }
	    else SendClientMessage(playerid, COLOR_ERROR, "WARNING: You are not close to any vehicle.");
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You must be a mechanic to use this!");
	return 1;
}
//============================================//
COMMAND:repair(playerid, params[])
{
	// RepairType
	// 1 = engine
	// 2 = battery
	// 3 = body

	if(GetPVarInt(playerid, "Job") != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_ERROR, "You must be a Mechanic in order to use this.");
	if(PlayerInfo[playerid][pJobStatus] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must start your route first.");

	new targetid, option[16], amount;
	if(sscanf(params, "iS(-1)[16]i", targetid, option, amount)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /repair [playerid] [engine/body/battery] [amount]");
	
	if(targetid == playerid) return SendClientMessage(playerid, COLOR_ERROR, "You can not perform this command on yourself.");

	if(!strcmp("engine", option, true))
	{
		new Float:distance = 4.0;
		new vehicleid = -1;

		foreach(new i : VehicleIterator)
    	{
    		if(i == PlayerInfo[playerid][pJobVehicleID] || i == PlayerInfo[playerid][pJobExtraVehicleID]) continue;

    		new Float:pos[3];
    		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

    		if(GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]) < 4.0)
    		{
    			if(distance > GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]))
	    		{
	    			distance = GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]);
	    			vehicleid = i;
	    		}
    		}
    	}

    	if(vehicleid == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any vehicle.");
		//if(VehicleInfo[vehicleid][vType] != VEHICLE_PERSONAL) return SendClientMessage(playerid, COLOR_ERROR, "You can only repair personal vehicles.");

		//new ownerid = PlayerNameToID(VehicleInfo[vehicleid][vOwner]);
		//if(ownerid == INVALID_PLAYER_ID || IsPlayerConnected(ownerid) == false) return SendClientMessage(playerid, COLOR_ERROR, "The owner of the vehicle has to be online in order to do this.");

		new Float:x, Float:y, Float:z;
		GetVehiclePos(vehicleid, x, y, z);
		if(!IsPlayerInRangeOfPoint(targetid, 10.0, x, y, z)) return SendClientMessage(playerid, COLOR_ERROR, "The vehicle's owner has to be closer to the vehicle in order for you to repair it.");

		new Float:health;
		GetVehicleHealth(vehicleid, health);

		if(health >= 1000 && VehicleInfo[vehicleid][vEngineStats][1] >= GetPerkMax(vehicleid, 1)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle's engine is already in a perfect condition.");

		if(amount < 200 || amount > 10000) return SendClientMessage(playerid, COLOR_ERROR, "The repair cost can be less than $200 or be over $10,000.");

		new string[128];
		format(string, sizeof(string), "%s has offered to repair the %s's engine for %s. (/accept repair)", PlayerInfo[playerid][pName], VehicleName[GetVehicleModel(vehicleid)-400], FormatMoney(amount));
		SendClientMessage(targetid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "You offered %s a vehicle repair for %s.", PlayerInfo[targetid][pName], FormatMoney(amount));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "*** %s has offered %s a repair.", PlayerInfo[playerid][pName], PlayerInfo[targetid][pName]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);

		SetPVarInt(targetid, "RepairOffer", playerid);
		SetPVarInt(targetid, "RepairPrice", amount);
		SetPVarInt(targetid, "RepairType", 1);
		SetPVarInt(targetid, "RepairVehicleID", vehicleid);
	}
	else if(!strcmp("body", option, true))
	{
		new Float:distance = 4.0;
		new vehicleid = -1;

		foreach(new i : VehicleIterator)
    	{
    		if(i == PlayerInfo[playerid][pJobVehicleID] || i == PlayerInfo[playerid][pJobExtraVehicleID]) continue;

    		new Float:pos[3];
    		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

    		if(GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]) < 4.0)
    		{
    			if(distance > GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]))
	    		{
	    			distance = GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]);
	    			vehicleid = i;
	    		}
    		}
    	}

    	if(vehicleid == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any vehicle.");
		//if(VehicleInfo[vehicleid][vType] != VEHICLE_PERSONAL) return SendClientMessage(playerid, COLOR_ERROR, "You can only repair personal vehicles.");

		//new ownerid = PlayerNameToID(VehicleInfo[vehicleid][vOwner]);
		//if(ownerid == INVALID_PLAYER_ID || IsPlayerConnected(ownerid) == false) return SendClientMessage(playerid, COLOR_ERROR, "The owner of the vehicle has to be online in order to do this.");

		new Float:x, Float:y, Float:z;
		GetVehiclePos(vehicleid, x, y, z);
		if(!IsPlayerInRangeOfPoint(targetid, 10.0, x, y, z)) return SendClientMessage(playerid, COLOR_ERROR, "The vehicle's owner has to be closer to the vehicle in order for you to repair it.");

		new Float:health;
		GetVehicleHealth(vehicleid, health);

		if(health >= 1000) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle is already in a perfect condition.");

		if(amount < 200 || amount > 10000) return SendClientMessage(playerid, COLOR_ERROR, "The repair cost can be less than $200 or be over $10,000.");

		new string[128];
		format(string, sizeof(string), "%s has offered to repair %s's body for %s. (/accept repair)", PlayerInfo[playerid][pName], VehicleName[GetVehicleModel(vehicleid)-400], FormatMoney(amount));
		SendClientMessage(targetid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "You offered %s a vehicle repair for %s.", PlayerInfo[targetid][pName], FormatMoney(amount));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "*** %s has offered %s a repair.", PlayerInfo[playerid][pName], PlayerInfo[targetid][pName]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);

		SetPVarInt(targetid, "RepairOffer", playerid);
		SetPVarInt(targetid, "RepairPrice", amount);
		SetPVarInt(targetid, "RepairType", 3);
		SetPVarInt(targetid, "RepairVehicleID", vehicleid);
	}
	else if(!strcmp("battery", option, true))
	{
		new Float:distance = 4.0;
		new vehicleid = -1;

		foreach(new i : VehicleIterator)
    	{
    		if(i == PlayerInfo[playerid][pJobVehicleID] || i == PlayerInfo[playerid][pJobExtraVehicleID]) continue;

    		new Float:pos[3];
    		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

    		if(GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]) < 4.0)
    		{
    			if(distance > GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]))
	    		{
	    			distance = GetVehicleDistanceFromPoint(i, pos[0], pos[1], pos[2]);
	    			vehicleid = i;
	    		}
    		}
    	}

    	if(vehicleid == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any vehicle.");
		//if(VehicleInfo[vehicleid][vType] != VEHICLE_PERSONAL) return SendClientMessage(playerid, COLOR_ERROR, "You can only repair personal vehicles.");

		//new ownerid = PlayerNameToID(VehicleInfo[vehicleid][vOwner]);
		//if(ownerid == INVALID_PLAYER_ID || IsPlayerConnected(ownerid) == false) return SendClientMessage(playerid, COLOR_ERROR, "The owner of the vehicle has to be online in order to do this.");

    	if(VehicleInfo[vehicleid][vBattery][1] >= GetPerkMax(vehicleid, 2)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle's battery is already in a perfect condition.");

		new Float:x, Float:y, Float:z;
		GetVehiclePos(vehicleid, x, y, z);
		if(!IsPlayerInRangeOfPoint(targetid, 10.0, x, y, z)) return SendClientMessage(playerid, COLOR_ERROR, "The vehicle's owner has to be closer to the vehicle in order for you to repair it.");

		if(amount < 200 || amount > 10000) return SendClientMessage(playerid, COLOR_ERROR, "The repair cost can be less than $200 or be over $10,000.");

		new string[128];
		format(string, sizeof(string), "%s has offered to repair your %s's battery for %s. (/accept repair)", PlayerInfo[playerid][pName], VehicleName[GetVehicleModel(vehicleid)-400], FormatMoney(amount));
		SendClientMessage(targetid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "You offered %s a vehicle repair for %s.", PlayerInfo[targetid][pName], FormatMoney(amount));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

		format(string, sizeof(string), "*** %s has offered %s a repair.", PlayerInfo[playerid][pName], PlayerInfo[targetid][pName]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);

		SetPVarInt(targetid, "RepairOffer", playerid);
		SetPVarInt(targetid, "RepairPrice", amount);
		SetPVarInt(targetid, "RepairType", 2);
		SetPVarInt(targetid, "RepairVehicleID", vehicleid);
	}
	return 1;
}

//============================================//
COMMAND:refill(playerid, params[])
{
	new amount,targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid, amount)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /refill [playerid] [price]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pay to yourself.");
	    if(amount < 5 || amount > 1000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 5 or above 1000.");
	    if(GetPVarInt(playerid, "Job") != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_ERROR, "You must be a Mechanic to use this.");
	    if(PlayerInfo[playerid][pJobStatus] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must start your route first.");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,8.0))
   			{
				SetPVarInt(targetid, "RefillOffer", playerid);
				SetPVarInt(targetid, "RefillPrice", amount);
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
        	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        	    format(string, sizeof(string), "You offered %s a refill contract for %s.", giveplayer, FormatMoney(amount));
           		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            	format(string, sizeof(string), "%s gave you a refill contract for %s (/accept refill).", sendername, FormatMoney(amount));
            	SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
            	format(string, sizeof(string), "*** %s has offered %s a refill.", sendername, giveplayer);
    	        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
// LSPD COMMANDS //
/*COMMAND:kevlar(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD) SetPlayerAttachedObject(playerid,0,19142,1,0.1,0.05,0.0,0.0,0.0,0.0);
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}*/
//============================================//
COMMAND:gov(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gov [Message]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_LSG)
		{
			if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") < 9)
			{
				return 1;
			}

			if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") < 9)
			{
				return 1;
			}

			if(GetPVarInt(playerid, "Member") == FACTION_LSG && GetPVarInt(playerid, "Rank") < 10)
			{
				return 1;
			}

			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
  		    GiveNameSpace(sendername);
	        SendClientMessageToAll(COLOR_WHITE, "|___________ Government News Announcement ___________|");
	        switch(GetPVarInt(playerid, "Member"))
	        {
	            case 1: format(string, sizeof(string), "LSPD %s: %s", sendername, text);
	            case 2: format(string, sizeof(string), "LSFD %s: %s", sendername, text);
	            case 5: format(string, sizeof(string), "LSG %s: %s", sendername, text);
	        }
            SendClientMessageToAll(COLOR_BLUE, string);
        }
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}
//============================================//
COMMAND:detain(playerid, params[])
{
	new targetid,seatid;
	if(sscanf(params, "ui", targetid,seatid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /detain [playerid] [seatID]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this!");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot detain yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		//if(GetPVarInt(targetid, "Member") == FACTION_LSPD) return SendClientMessage(playerid,COLOR_ERROR,"Cannot detain LSPD.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
		{
		    if(PlayerToPlayer(playerid,targetid,7.0))
		    {
			    PutPlayerInVehicleEx(targetid, GetPlayerVehicleID(playerid), seatid);
			    SetPVarInt(targetid, "Drag", INVALID_MAXPL);
			}
    	    else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:m(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /m [Message]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
		{
   		    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      		GiveNameSpace(sendername);
	    	switch(GetPVarInt(playerid, "Member"))
	    	{
	    	    case 1: format(string, sizeof(string), "[LSPD %s:o< %s]", sendername, text);
	    	    case 2: format(string, sizeof(string), "[LSFD %s:o< %s]", sendername, text);
	    	}
			ProxDetector(60.0, playerid, string,COLOR_YELLOW);
			foreach(new h : HouseIterator)
			{
	    		if(IsPlayerInRangeOfPoint(playerid,10.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	    		{
            		foreach(new p : Player)
					{
                		if(IsPlayerInRangeOfPoint(p,30.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
                		{
							if(GetPlayerVirtualWorld(p) == HouseInfo[h][hVwIn])
							{
							    format(string, sizeof(string), "[OUTSIDE DOOR]: %s", string);
				        		SendClientMessage(p, COLOR_YELLOW, string);
				    		}
						}
		    		}
	    		}
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
ALTCOMMAND:ta->taze;
ALTCOMMAND:taser->taze;
COMMAND:taze(playerid, params[])
{
	if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{
	    if(GetPVarInt(playerid, "Suspend") == 1) return scm(playerid, COLOR_ERROR, "You are currently suspended from the LSPD.");
		switch(GetPVarInt(playerid, "LSPD_Ta"))
		{
		    case 0:
		    {
		        if(PlayerInfo[playerid][pPlayerWeapon] > 0) SetPVarInt(playerid,"LSPD_Wep", PlayerInfo[playerid][pPlayerWeapon]), SetPVarInt(playerid,"LSPD_Ammo", PlayerInfo[playerid][pPlayerAmmo]);
		        SetPVarInt(playerid,"LSPD_Ta",1);
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeaponEx(playerid,23,9999);
		        SendClientMessage(playerid,COLOR_WHITE,"taser equipped.");
		        CallRemoteFunction("LoadHolsters","i",playerid);
		    }
		    case 1:
		    {
		        ResetPlayerWeapons(playerid);
		        if(GetPVarInt(playerid, "LSPD_Wep") > 0) GivePlayerWeaponEx(playerid,GetPVarInt(playerid, "LSPD_Wep"),GetPVarInt(playerid, "LSPD_Ammo"));
		        else PlayerInfo[playerid][pPlayerWeapon]=0, PlayerInfo[playerid][pPlayerAmmo]=0, RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
		        DeletePVar(playerid,"LSPD_Ta"), DeletePVar(playerid,"LSPD_Wep"), DeletePVar(playerid,"LSPD_Ammo"), DeletePVar(playerid,"LSPD_Delay");
		        SendClientMessage(playerid,COLOR_WHITE,"taser holstered.");
		        CallRemoteFunction("LoadHolsters","i",playerid);
		    }
		}
	}
	return 1;
}
//============================================//
COMMAND:tackle(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
	if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    foreach(new i : Player)
	    {
			if(i != playerid && PlayerToPlayer(playerid,i,4.0) && !IsPlayerInAnyVehicle(i))
			{
				if(GetPVarInt(i, "Member") == FACTION_LSPD) return SendClientMessage(playerid,COLOR_ERROR,"Cannot Tackle LSPD.");
				if(GetPVarInt(i, "Dead") > 0) return SendClientMessage(playerid,COLOR_ERROR,"Cannot Tackle dead-people.");
				if(GetPlayerWeapon(i) >= 22 && GetPlayerWeapon(i) <= 38) return SendClientMessage(playerid,COLOR_ERROR,"Cannot Tackle someone with a weapon in hand.");
				if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
   		    	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	        	format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(i));
      	    	GiveNameSpace(sendername);
            	GiveNameSpace(giveplayer);
				GetPlayerPos(i, X, Y, Z);
            	new rand = random(4);
            	switch(rand)
            	{
            		case 0:
            		{
            			format(string, sizeof(string), "*** %s performs a little jump rushing towards %s making him fall down.", sendername, giveplayer);
    	    			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	    	    		SetPVarInt(i, "Cuffed", 1);
   						SetPVarInt(i, "CuffedTime", 60);
   						SetPVarInt(playerid, "CuffedTime", 10);
   						TogglePlayerControllableEx(playerid, false);
						TogglePlayerControllableEx(i,false);
						SetPlayerPosEx(playerid, X, Y+0.5, Z);
						ApplyAnimationEx(i, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
						ApplyAnimationEx(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
    	    		}
    	    		case 1:
    	    		{
         				format(string, sizeof(string), "*** %s performs a little jump rushing towards %s but ends falling %s self on the floor.", sendername, giveplayer, CheckSex(playerid));
    	    			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	    			ApplyAnimationEx(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
    	    			SetPVarInt(playerid, "CuffedTime", 10);
					}
					case 2:
					{
         				format(string, sizeof(string), "*** %s performs a little jump rushing towards %s but ends falling %s self on the floor.", sendername, giveplayer, CheckSex(playerid));
    	    			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	    			ApplyAnimationEx(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
    	    			SetPVarInt(playerid, "CuffedTime", 10);
					}
					case 3:
					{
            			format(string, sizeof(string), "*** %s performs a little jump rushing towards %s making him fall down.", sendername, giveplayer);
    	    			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	    	    		SetPVarInt(i, "Cuffed", 1);
   						SetPVarInt(i, "CuffedTime", 60);
   						SetPVarInt(playerid, "CuffedTime", 10);
						TogglePlayerControllableEx(playerid, false);
						TogglePlayerControllableEx(i,false);
						SetPlayerPosEx(playerid, X, Y+0.5, Z);
						ApplyAnimationEx(i, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
						ApplyAnimationEx(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
					}
				}
    	    	return 1;
    	    }
    	}
	}
	return 1;
}
//============================================//
ALTCOMMAND:roadblock->cblock;
COMMAND:cblock(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPlayerInterior(playerid) != 0) return true;
    if(GetPlayerVirtualWorld(playerid) != 0) return true;
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(GetPVarInt(playerid, "Rank") >= 1)
	    {
	        new oblist[sizeof(RbObjs)];
	        for(new i = 0; i < sizeof(RbObjs); i++)
	        {
                oblist[i] = RbObjs[i];
	        }
            ShowModelSelectionMenuEx(playerid, oblist, sizeof(RbObjs), "Roadblock List", 20, 16.0, 0.0, -55.0);
	    }
    }
    else
	{
	    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:rblock(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    new found = 0;
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(GetPVarInt(playerid, "Rank") >= 1)
	    {
	        for(new o = 0; o < sizeof(BlockInfo); o++)
	        {
				if(BlockInfo[o][bUsed] == 1 && BlockInfo[o][bFact] == GetPVarInt(playerid, "Member"))
				{
				    if(IsPlayerInRangeOfPoint(playerid, 2.5, BlockInfo[o][bX], BlockInfo[o][bY], BlockInfo[o][bZ]))
				    {
	                    if(BlockInfo[o][bID] > 0) DestroyDynamicObject(BlockInfo[o][bID]);
	                    BlockInfo[o][bUsed]=0;
                        BlockInfo[o][bID]=0;
                        found++;
                    }
                }
            }
            if(found == 0) {
                scm(playerid, COLOR_ERROR, "Could not find any roadblock object!");
            }
        }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
COMMAND:rblockall(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    new found = 0;
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(GetPVarInt(playerid, "Rank") >= 1)
	    {
	        for(new o = 0; o < sizeof(BlockInfo); o++)
	        {
				if(BlockInfo[o][bUsed] == 1 && BlockInfo[o][bFact] == GetPVarInt(playerid, "Member"))
				{
	                if(BlockInfo[o][bID] > 0) DestroyDynamicObject(BlockInfo[o][bID]);
	                BlockInfo[o][bUsed]=0;
                    BlockInfo[o][bID]=0;
                    found++;
                }
            }
            if(found == 0) {
                scm(playerid, COLOR_ERROR, "Could not find any roadblock object!");
            }
        }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
COMMAND:rblockedit(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(GetPVarInt(playerid, "Rank") >= 1)
	    {
			new found = 0;
	        for(new o = 0; o < sizeof(BlockInfo); o++)
	        {
				if(BlockInfo[o][bUsed] == 1 && BlockInfo[o][bFact] == GetPVarInt(playerid, "Member"))
				{
				    if(IsPlayerInRangeOfPoint(playerid, 2.0, BlockInfo[o][bX], BlockInfo[o][bY], BlockInfo[o][bZ]))
				    {
				        if(found == 0)
				        {
				            found++;
				            EditDynamicObject(playerid, BlockInfo[o][bID]);
				            SetPVarInt(playerid, "EditorMode", 6);
				            SetPVarInt(playerid, "EditID", o);
				        }
                    }
                }
            }
        }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:showbadge(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /showbadge [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot show to yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_LSG)
		{
		    if(PlayerToPlayer(playerid,targetid,3.0))
		    {
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(giveplayer);
                format(string, sizeof(string), "You have shown your badge to %s.", giveplayer);
                SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
    	        GiveNameSpace(sendername);
				format(string, sizeof(string), "** %s %s **", FactionRankInfo[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")][fRank], sendername);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
    	    }
    	    else
   			{
   			    SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
   			}
		}
	}
	return 1;
}
//============================================//
COMMAND:carsign(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be the driver in a vehicle to use this!");
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSPD && 
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSFD &&
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_GOV) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a LSPD or LSFD vehicle to use this.");
	if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Member") == FACTION_LSG) return SendClientMessage(playerid, COLOR_WHITE, "You do not have access to this command!");

	new txt[50];
	if(sscanf(params, "s[50]", txt)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /carsign [text]");

    SetPVarInt(playerid, "Delay", GetCount()+2000);
    new getcar = GetPlayerVehicleID(playerid);
	if(VehicleInfo[getcar][vUText] == 0)
	{
		VehicleInfo[getcar][vUText]=1;
		VehicleInfo[getcar][vCText] = Create3DTextLabel(txt, -1, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(VehicleInfo[getcar][vCText], getcar, -0.8, -2.8, -0.3);
		scm(playerid, -1, "Car sign added!");
    }
    else
    {
		VehicleInfo[getcar][vUText]=0;
		Delete3DTextLabel(VehicleInfo[getcar][vCText]);
		scm(playerid, -1, "Car sign removed!");
	}
	return 1;
}
//============================================//
COMMAND:el(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");

	if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_LSG)
	{
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") < 4 && !IsPlayerInDivision(playerid, 2))
		{
			return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
		else if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") < 4)
		{
			return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
		else if(GetPVarInt(playerid, "Member") == FACTION_LSG && GetPVarInt(playerid, "Rank") < 1)
		{
			return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	else
	{
		return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}

	if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSPD && 
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSFD &&
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_GOV) return SendClientMessage(playerid, COLOR_ERROR, "You need to be in a LSPD, LSFD or LSG vehicle to use this.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You must be the driver of a vehicle to use this!");
	if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 523 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 510 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 462 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 448 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 522 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 581 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 471 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 461 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 521 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 586 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 468 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) return SendClientMessage(playerid, COLOR_ERROR, "You can't use emergency lights while on a motorcycle.");

	new option[32];
	if(sscanf(params, "s[32]", option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /el [on/off/edit/sync]");
	if(!strcmp(option, "on"))
	{
	    SetPVarInt(playerid, "Delay", GetCount()+2000);

	    for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
		{
			if(VehicleInfo[vehicleid][vSirenObjectID][i] != 0)
			{
				return SendClientMessage(playerid, COLOR_ERROR, "This vehicle's sirens are already on.");
			}
		}

		new count = 0;
		for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
		{
			if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
			{
				count++;
			}
		}

		if(count == 0)
		{
			return SendClientMessage(playerid, COLOR_ERROR, "This vehicle has no sirens set up. (/el edit)");
		}

        for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
		{
			if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
			{
				VehicleInfo[vehicleid][vSirenObjectID][i] = CreateDynamicObject(VehicleInfo[vehicleid][vSirenObject][i], 0, 0, 0, 0.0, 0.0, 0.0);

				AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObjectID][i], vehicleid, 
					VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
					VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);
			}
		}

		new Float:X, Float:Y, Float:Z;
		GetVehicleVelocity(vehicleid, X, Y, Z);
		if(X == 0 && Y == 0 && Z == 0)
		{
			SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
		}
	}
	else if(!strcmp(option, "off"))
	{
		new count = 0;
		for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
		{
			if(VehicleInfo[vehicleid][vSirenObjectID][i] != 0)
			{
				count++;
			}
		}

		if(count == 0)
		{
			return SendClientMessage(playerid, COLOR_ERROR, "This vehicle's sirens are already off.");
		}

		for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
		{
			if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
			{
				DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
				VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
			}
		}

		new Float:X, Float:Y, Float:Z;
		GetVehicleVelocity(vehicleid, X, Y, Z);
		if(X == 0 && Y == 0 && Z == 0)
		{
			SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
		}
	}
	else if(!strcmp(option, "edit"))
	{
		SetPVarInt(playerid, "SirenEditorVehicleID", vehicleid);

		ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");

		new count = 0;
		for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
		{
			if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
			{
				AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObject][i], vehicleid, 
					VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
					VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);
				count++;
			}
		}

		if(count > 0)
		{
			new Float:X, Float:Y, Float:Z;
			GetVehicleVelocity(vehicleid, X, Y, Z);
			if(X == 0 && Y == 0 && Z == 0)
			{
				SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
			}
		}
	}
	else if(!strcmp(option, "sync"))
	{
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vSirenSync] == 0)
		{
			VehicleInfo[GetPlayerVehicleID(playerid)][vSirenSync] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Your sirens will now be synced.");

			if(GetVehicleParamsSirenState(vehicleid) == 1)
			{
				for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
				{
					if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
					{
						DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
						VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
					}
				}

				for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
				{
					if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
					{
						VehicleInfo[vehicleid][vSirenObjectID][i] = CreateDynamicObject(VehicleInfo[vehicleid][vSirenObject][i], 0, 0, 0, 0.0, 0.0, 0.0);

						AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObjectID][i], vehicleid, 
							VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
							VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);
					}
				}

				new Float:X, Float:Y, Float:Z;
				GetVehicleVelocity(vehicleid, X, Y, Z);
				if(X == 0 && Y == 0 && Z == 0)
				{
					SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
				}
			}
			else
			{
				for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
				{
					if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
					{
						DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
						VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
					}
				}
			}
		}
		else
		{
			VehicleInfo[GetPlayerVehicleID(playerid)][vSirenSync] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Your sirens will no longer be synced.");
		}
	}
	return 1;
}

COMMAND:elm(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be the driver of a vehicle to use this!");
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSPD && 
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSFD &&
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_GOV) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a LSPD, LSFD or LSG vehicle to use this.");

	new option[32];
	if(sscanf(params, "s[32]", option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /elm [on/off/sync]");

	if(strcmp(option, "on") == 0)
	{
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vELM] == 1) return SendClientMessage(playerid, COLOR_ERROR, "Your vehicle's ELM is already on.");

		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);

		VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState] = lights;
		VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 1;
		GameTextForPlayer(playerid, "~n~~w~ELM ~g~~h~ON~w~!", 2000, 5);
	}
	else if(strcmp(option, "off") == 0)
	{
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vELM] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Your vehicle's ELM is already off.");

		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState], alarm, doors, bonnet, boot, objective);
		VehicleInfo[GetPlayerVehicleID(playerid)][vLights] = VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState];

		VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 0;
		VehicleInfo[GetPlayerVehicleID(playerid)][vELMFlash] = 0;
		GameTextForPlayer(playerid, "~n~~w~ELM ~r~~h~OFF~w~!", 2000, 5);
	}
	else if(strcmp(option, "sync") == 0)
	{
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vELMSync] == 0)
		{
			if(GetVehicleParamsSirenState(GetPlayerVehicleID(playerid)) == 1)
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState] = lights;

				VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 1;
			}
			else
			{
				VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 0;
			}

			VehicleInfo[GetPlayerVehicleID(playerid)][vELMSync] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Your vehicle's ELM will now be synced with sirens.");
		}
		else
		{
			VehicleInfo[GetPlayerVehicleID(playerid)][vELMSync] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Your vehicle's ELM will no longer be synced with sirens.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /elm [on/off/sync]");
	}
	return 1;
}
//============================================//
COMMAND:handcuff(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],targetid;
	if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /handcuff [playerid/maskid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    new found = 0;
		if(!IsPlayerConnected(targetid))
		{
		    foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
	            {
	                targetid=i;
	                found++;
	            }
	        }
	        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
		}
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot handcuff yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		{
		    if(GetPVarInt(playerid, "Suspend") == 1) return scm(playerid, COLOR_ERROR, "You are currently suspended from the LSPD.");
		    if(PlayerToPlayer(playerid,targetid,3.0))
		    {
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
                format(string, sizeof(string), "You placed handcuffs onto %s.", giveplayer);
    	        SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(string, sizeof(string), "%s placed you in handcuffs.", sendername);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
    	        SetCameraBehindPlayer(targetid);
    	        SetPVarInt(targetid, "Cuffed", 2);
    	        SetPVarInt(targetid, "CuffedTime", 0);
    	        SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
    	        SetPlayerAttachedObject(targetid, HOLDOBJECT_ITEM, 19418, 5, 0.002000,0.037999,-0.004000,-12.600098,126.699996,-119.800048,1.000000,1.000000,1.000000);
    	    }
    	    else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:uncuff(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /uncuff [playerid/maskid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
        new found = 0;
		if(!IsPlayerConnected(targetid))
		{
		    foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
	            {
	                targetid=i;
	                found++;
	            }
	        }
	        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
		}
		if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot uncuff yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Admin") >= 1)
		{
		    if(PlayerToPlayer(playerid,targetid,3.0))
		    {
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
                format(string, sizeof(string), "You took handcuffs off of %s.", giveplayer);
    	        SendClientMessage(playerid, COLOR_WHITE, string);
    	        format(string, sizeof(string), "%s released your handcuffs.", sendername);
    	        SendClientMessage(targetid, COLOR_WHITE, string);
    	        TogglePlayerControllableEx(targetid,true);
    	        SetPVarInt(targetid, "Cuffed", 0);
    	        SetPVarInt(targetid, "CuffedTime", 0);
    	        SetPlayerSpecialAction(targetid,SPECIAL_ACTION_NONE);
    	        RemovePlayerAttachedObject(targetid, HOLDOBJECT_ITEM);
    	    }
    	    else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:dragoffer(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "ui", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dragoffer {FFFFFF}[playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot drag to yourself.");
	    if (GetPVarInt(targetid, "Dead") != 2) return SendClientMessage(playerid, COLOR_WHITE, "This player is not dead yet.");
	    if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,8.0))
   			{
				SetPVarInt(targetid, "DragOffer", playerid);
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "You offered %s a Drag.", giveplayer);
           		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            	format(string, sizeof(string), "%s gave you a drag offer (/accept drag).", sendername);
            	SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:drag(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /drag [playerid/maskid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot drag yourself.");
		new found = 0;
		if(!IsPlayerConnected(targetid))
		{
		    foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
	            {
	                targetid=i;
	                found++;
	            }
	        }
	        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
		}
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    //if(GetPVarInt(targetid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid,COLOR_ERROR,"Cannot Drag LSPD.");
		if(GetPVarInt(targetid, "Dead") > 0) return SendClientMessage(playerid,COLOR_ERROR,"Cant drag dead-people.");
		if(/*GetPVarInt(playerid, "Member") == FACTION_LSPD || */GetPVarInt(playerid, "Admin") >= 1)
		{
		    if(PlayerToPlayer(playerid,targetid,3.0))
		    {
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
                format(string, sizeof(string), "*** %s starts to drag %s.", sendername, giveplayer);
    	        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	        SetCameraBehindPlayer(targetid);
    	        SetPVarInt(targetid, "Drag", playerid);
    	        SetPVarInt(targetid, "Control", 1);
    	    }
    	    else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:stopdrag(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /stopdrag [playerid/maskid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
        new found = 0;
		if(!IsPlayerConnected(targetid))
		{
		    foreach(new i : Player)
	        {
	            if(GetPVarInt(i, "MaskUse") == 1 && GetPVarInt(i, "MaskID") == targetid)
	            {
	                targetid=i;
	                found++;
	            }
	        }
	        if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"There are no-one online with that playerid or maskid.");
		}
		if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot drag yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(targetid, "Drag") == playerid)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		GiveNameSpace(sendername);
        	GiveNameSpace(giveplayer);
            format(string, sizeof(string), "*** %s stops dragging %s.", sendername, giveplayer);
    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	    if(GetPVarInt(targetid, "Dead") != 0) ApplyAnimationEx(targetid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
    	    SetPVarInt(targetid, "Drag", INVALID_MAXPL);
    	    SetPVarInt(targetid, "Control", 0);
    	    SetCameraBehindPlayer(targetid);
		}
		else SendClientMessage(playerid,COLOR_ERROR,"You are not dragging this person.");
	}
	return 1;
}
//============================================//
COMMAND:take(playerid, params[])
{
	new targetid, option[32];
	if(sscanf(params, "us[32]", targetid, option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /take [playerid] [item/weapon/weplicense/drivlicense/medlicense]");
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD && 
		GetPVarInt(playerid, "Admin") < 1 && GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z)) return SendClientMessage(playerid, COLOR_ERROR, "You are not close enough to this player.");

	new string[128];
	if(strcmp(option, "item", true) == 0)
	{
		FixInv(targetid);

		new result[2048];
		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if(PlayerInfo[targetid][pInvItem][i] != 0)
			{
			    switch(PlayerInfo[targetid][pInvItem][i])
			    {
			        case 22 .. 38:
			        {
			            if(PlayerInfo[targetid][pInvQ][i] == 0)
			            {
			            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]));
			            }
						else
						{
							format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]), PlayerInfo[targetid][pInvQ][i], PrintIName(PlayerInfo[targetid][pInvEx][i]));
						}
			        }
			        case 100 .. 199:
			        {
			            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]), PlayerInfo[targetid][pInvQ][i]);
			        }
			        case 414:
			        {
			            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]), PlayerInfo[targetid][pInvQ][i]);
			        }
			        case 500 .. 549:
			        {
			            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]), PlayerInfo[targetid][pInvQ][i]);
			        }
			        case 1000 .. 1001:
			        {
			        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]), PlayerInfo[targetid][pInvQ][i]);
			        }
			        default:
			        {
			            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(PlayerInfo[targetid][pInvItem][i]));
			        }
			    }
		    }
		    else
		    {
			    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
		    }
		}

		format(string, sizeof(string), "Player Inventory: Cash: %s", FormatMoney(GetPVarInt(targetid, "Cash")));
		ShowPlayerDialogEx(playerid, DIALOG_TAKE_INVENTORY, DIALOG_STYLE_LIST, string, result, "Take", "Close");

		SetPVarInt(playerid, "TakePlayer", targetid);
	}
	else if(strcmp(option, "weplicense", true) == 0)
	{
		if(GetPVarInt(playerid, "Member") == FACTION_LSFD) return 1;

		if(GetPVarInt(targetid, "GunLic") == 1)
		{
	    	format(string, sizeof(string), "%s has confiscated your weapon license.", PlayerInfo[playerid][pName]);
	    	SendClientMessage(targetid, COLOR_WHITE, string);

	    	format(string, sizeof(string), "You confiscated %s's weapon license.", PlayerInfo[targetid][pName]);
	    	SendClientMessage(playerid, COLOR_WHITE, string);

	    	SetPVarInt(targetid, "GunLic", 0);
		}
		else SendClientMessage(playerid,COLOR_ERROR,"That player doesn't have a weapon license.");
	}
	else if(strcmp(option, "drivlicense", true) == 0)
	{
		if(GetPVarInt(playerid, "Member") == FACTION_LSFD) return 1;

		if(GetPVarInt(targetid, "DriveLic") == 1)
		{
	    	format(string, sizeof(string), "%s has confiscated your driver license.", PlayerInfo[playerid][pName]);
	    	SendClientMessage(targetid, COLOR_WHITE, string);

	    	format(string, sizeof(string), "You confiscated %s's driver license.", PlayerInfo[targetid][pName]);
	    	SendClientMessage(playerid, COLOR_WHITE, string);

	    	SetPVarInt(targetid, "DriveLic", 0);
		}
		else SendClientMessage(playerid,COLOR_ERROR,"That player doesn't have a driver's license.");
	}
	else if(strcmp(option, "medlicense", true) == 0)
	{
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD) return 1;

		if(GetPVarInt(targetid, "MedLic") == 1)
		{
	    	format(string, sizeof(string), "%s has confiscated your medical license.", PlayerInfo[playerid][pName]);
	    	SendClientMessage(targetid, COLOR_WHITE, string);

	    	format(string, sizeof(string), "You confiscated %s's medical license.", PlayerInfo[targetid][pName]);
	    	SendClientMessage(playerid, COLOR_WHITE, string);

	    	SetPVarInt(targetid, "MedLic", 0);
		}
		else SendClientMessage(playerid,COLOR_ERROR,"That player doesn't have a medical license.");
	}
	else if(strcmp(option, "weapon", true) == 0)
	{
		if(GetPVarInt(playerid, "Member") == FACTION_LSFD) return 1;

		if(GetPlayerWeapon(targetid) < 2) return SendClientMessage(playerid, COLOR_GREY, "You can't take his fists.");

		GiveInvItem(playerid, PlayerInfo[targetid][pPlayerWeapon], PlayerInfo[targetid][pPlayerAmmo], PlayerInfo[targetid][pAmmoType], PlayerInfo[targetid][pPlayerSerial]);
		format(string, sizeof(string), "You confiscated %s from %s.", PrintIName(PlayerInfo[targetid][pPlayerWeapon]), PlayerInfo[targetid][pName]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has confiscated your %s", PlayerInfo[playerid][pName], PrintIName(PlayerInfo[targetid][pPlayerWeapon]));
		SendClientMessage(targetid, COLOR_WHITE, string);
		ResetPlayerWeaponsEx(targetid);
		PlayerInfo[targetid][pPlayerWeapon]=0, PlayerInfo[targetid][pPlayerAmmo]=0, PlayerInfo[targetid][pAmmoType]=0;
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /take [playerid] [item/weapon/weplicense/drivlicense/medlicense]");
	}
	return 1;
}
//============================================//
ALTCOMMAND:su->suspect;
COMMAND:suspect(playerid, params[])
{
	new targetid,crime[128],string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]", targetid, crime)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /suspect [playerid] [crime description]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot suspect yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(targetid, "Member") == FACTION_LSPD) return SendClientMessage(playerid,COLOR_ERROR,"Cannot suspect LSPD.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
	    	format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
        	GiveNameSpace(giveplayer);
        	format(string, sizeof(string), "HQ: All Units APB: Reporter: %s",sendername);
            SendFactionMessage(GetPVarInt(playerid, "Member"), COLOR_BLUE, string);
			format(string, sizeof(string), "HQ: Crime: %s, Suspect: %s",crime,giveplayer);
			SendFactionMessage(GetPVarInt(playerid, "Member"), COLOR_BLUE, string);
			SetPVarInt(targetid, "Crimes", GetPVarInt(targetid, "Crimes")+1);
			SetPVarInt(targetid, "WantedLevel", GetPVarInt(targetid, "WantedLevel")+1);
			SetPlayerWantedLevel(targetid,GetPVarInt(targetid, "WantedLevel"));
			new query[516], year, month, day, hour, minute, second;
			getdate(year, month, day);
			gettime(hour,minute,second);
			new datum[64], time[64];
			format(time, sizeof(time), "%d:%d:%d", hour, minute, second);
		 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO `criminals`(`player`, `officer`, `date`, `time`, `crime`, `served`) VALUES ('%e','%e','%e','%e','%e', 0)",
			PlayerInfo[targetid][pUsername], PlayerInfo[playerid][pUsername], datum, time, crime);
			mysql_pquery(handlesql, query);
		}
	}
	return 1;
}
//============================================//
COMMAND:address(playerid, params[])
{
	new option[32], id, string[128];
	if(sscanf(params, "s[32]i", option, id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /address [house/business] [id]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Admin") > 0)
		{
			if(strcmp(option, "house", true) == 0)
			{
				if(id > Iter_Count(HouseIterator) || id <= 0) return SendClientMessage(playerid, COLOR_ERROR, "Invalid house ID.");
				PlayerInfo[playerid][pAddressCP] = CreateDynamicCP(HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo], 2.5, -1, -1, playerid, 2000);
				format(string, sizeof(string), "The checkpoint has been marked on your map. (%s)", GetZone(HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo]));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else if(strcmp(option, "business", true) == 0)
			{
				if(id > Iter_Count(BizIterator) || id <= 0) return SendClientMessage(playerid, COLOR_ERROR, "Invalid business ID.");
				PlayerInfo[playerid][pAddressCP] = CreateDynamicCP(BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo], 2.5, -1, -1, playerid, 2000);
				format(string, sizeof(string), "The checkpoint has been marked on your map. (%s)", GetZone(BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo]));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_ERROR, "USAGE: /address [house/business] [id]");
				return 1;
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
ALTCOMMAND:gl->givelicense;
COMMAND:givelicense(playerid, params[])
{
	new type[128],targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME], level;
	if(sscanf(params, "s[128]uI(-1)", type, targetid, level)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gl(Give License) [weapon/driver/medical] [playerid] ([level])");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot give stuff to yourself.");
		if(IsPlayerConnected(targetid))
		{
   		    if(strcmp(type, "weapon", true) == 0)
   			{
   				if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR, "You must be a Police Officer in order to use this.");
   			    if(GetPVarInt(playerid, "Rank") < 14) return SendClientMessage(playerid, COLOR_ERROR, "You must be high command to use this.");
   			    if(level <= 0 || level > 2) return SendClientMessage(playerid, COLOR_GREY, "Invalid license type!");
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
				format(string, sizeof(string), "You gave %s a weapon license.", giveplayer);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				format(string, sizeof(string), "%s's gave you a weapon license.", sendername);
				SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
				SetPVarInt(targetid, "GunLic", level);
	        }
  			else if(strcmp(type, "driver", true) == 0)
   			{
   				if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR, "You must be a Police Officer in order to use this.");
   			    if(GetPVarInt(playerid, "Rank") < 11) return SendClientMessage(playerid, COLOR_ERROR, "You must be command and above to use this.");
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
				format(string, sizeof(string), "You gave %s a driver license.", giveplayer);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				format(string, sizeof(string), "%s's gave you a driver license.", sendername);
				SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
				SetPVarInt(targetid, "DriveLic", 1);
   			}
   			else if(strcmp(type, "medical", true) == 0)
   			{
   				if(GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_ERROR, "You must be a Medic in order to use this.");
   			    if(GetPVarInt(playerid, "Rank") < 13) return SendClientMessage(playerid, COLOR_ERROR, "You must be high command to use this.");
   			    if(level <= 0 || level > 4) return SendClientMessage(playerid, COLOR_GREY, "Invalid license type!");
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
				format(string, sizeof(string), "You gave %s a medical license.", giveplayer);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
				format(string, sizeof(string), "%s's gave you a medical license.", sendername);
				SendClientMessage(targetid,COLOR_LIGHTBLUE,string);
				SetPVarInt(targetid, "MedLic", level);
   			}
   			else
   		    {
   			     SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gl [weapon/driver/medical] [playerid]");
   		    }
		}
	}
	return 1;
}
//============================================//
COMMAND:spike(playerid, params[])
{
	new type[30];
	if(sscanf(params, "s[30]", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /spike [create/remove]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
        if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		{
		    if(GetPVarInt(playerid, "Rank") >= 3)
		    {
		        if(strcmp(type, "create", true) == 0)
		        {
					new found = 0;
		        	for(new i = 0; i < sizeof(SpikeInfo); i++)
		        	{
						if(SpikeInfo[i][sID] == 0)
						{
		                	found++;
		            	}
		        	}
		        	if(found == 0) return SendClientMessage(playerid,COLOR_WHITE,"All spike strip slots used.");
		        	for(new i = 0; i < sizeof(SpikeInfo); i++)
		        	{
		        	    if(SpikeInfo[i][sID] == 0)
		        	    {
						    new Float:X,Float:Y,Float:Z,Float:A;
						    GetPlayerPos(playerid,X,Y,Z);
						    GetPlayerFacingAngle(playerid,A);
						    SpikeInfo[i][sX]=X;
						    SpikeInfo[i][sY]=Y;
						    SpikeInfo[i][sZ]=Z;
						    SpikeInfo[i][sID]=1;
			        	    SpikeInfo[i][sObject] = CreateDynamicObject(2899, X, Y, Z-0.8, 0.0, 0.0, A, 0);
			        	    SpikeInfo[i][sPickup] = CreateDynamicPickup(1007, 14, X, Y, Z, 0);
			        	    SendClientMessage(playerid,COLOR_WHITE,"Spikes created.");
			        	    return 1;
			        	}
		        	}
		        }
		        if(strcmp(type, "remove", true) == 0)
		        {
		            for(new i = 0; i < sizeof(SpikeInfo); i++)
		            {
						if(SpikeInfo[i][sID] == 1)
						{
		                	if(IsPlayerInRangeOfPoint(playerid,2.0,SpikeInfo[i][sX],SpikeInfo[i][sY],SpikeInfo[i][sZ]))
		                	{
								if(SpikeInfo[i][sObject] > 0 && IsValidDynamicObject(SpikeInfo[i][sObject])) { DestroyDynamicObject(SpikeInfo[i][sObject]); }
								SpikeInfo[i][sObject]=0;
								DestroyDynamicPickup(SpikeInfo[i][sPickup]);
								SpikeInfo[i][sObject]=0;
								SpikeInfo[i][sPickup]=0;
								SpikeInfo[i][sID]=0;
								SpikeInfo[i][sX]=0.0;
								SpikeInfo[i][sY]=0.0;
								SpikeInfo[i][sZ]=0.0;
		                	    SendClientMessage(playerid,COLOR_WHITE,"Spikes removed.");
		                	    return 1;
		                	}
						}
		            }
		        }
		    }
			else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to use this.");
		}
	}
	return 1;
}
//============================================//
COMMAND:breathe(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],stext[50];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /breathe [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(PlayerToPlayer(playerid,targetid,5.0))
	    {
	        if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	        {
   		        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	        format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      	        GiveNameSpace(sendername);
      	        GiveNameSpace(giveplayer);
    	        switch(GetPlayerDrunkLevel(targetid))
                {
                    case 0 .. 2400: stext="Sober";
                    case 2401 .. 6000: stext="Intoxicated";
                }
                if(GetPVarInt(targetid, "DrugTime") > 0) stext="Sober";
    	        format(string, sizeof(string), "* %s uses %s breathalyzer on %s.", sendername, CheckSex(playerid), giveplayer);
    	        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	        format(string, sizeof(string), "%s is %s.", giveplayer, stext);
    	        SendClientMessage(playerid,COLOR_WHITE,string);
    	    }
      	}
      	else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	}
	return 1;
}
//============================================//
COMMAND:obtainweed(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{
	    for(new weed = 0; weed < sizeof(WeedInfo); weed++)
		{
            if(IsPlayerInRangeOfPoint(playerid,2.0,WeedInfo[weed][wX],WeedInfo[weed][wY],WeedInfo[weed][wZ]))
            {
			    if(WeedInfo[weed][wPlanted] == 1 && WeedInfo[weed][wX] != 0.0 && WeedInfo[weed][wY] != 0.0 && WeedInfo[weed][wZ] != 0.0)
				{
                    ApplyAnimationEx(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		            if(WeedInfo[weed][wObject] > 0 && IsValidDynamicObject(WeedInfo[weed][wObject])) { DestroyDynamicObject(WeedInfo[weed][wObject]); }
		            WeedInfo[weed][wObject]=0;
		            WeedInfo[weed][wX] = 0.0;
		    		WeedInfo[weed][wY] = 0.0;
		    		WeedInfo[weed][wZ] = 0.0;
		    		WeedInfo[weed][wTime] = 0;
		    		WeedInfo[weed][wPlanted] = 0;
 		            SendClientMessage(playerid,COLOR_GREEN,"You have picked up this plant.");
		    	    return 1;
				}
			}
		}
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:removeactor(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    new id, string[128], sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /removeactor [bizid]");
	else
	{
        if(GetPVarInt(playerid, "Admin") >= 4) {
            format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
            GiveNameSpace(sendername);
            if(BizInfo[id][Actor] == 1) {
                format(string, sizeof(string), "AdmCmd: %s removed business %d's actor.", sendername, id);
      		    SendAdminMessage(COLOR_YELLOW,string);
      		    BizInfo[id][Actor]=0;
      		    DestroyActorEx(BizInfo[id][ActorID]);
      		    SaveBizID(id, 0);
            } else {
                scm(playerid, COLOR_ERROR, "This business is not using an actor!");
            }
        }
    	else {
		SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!"); }
	}
	return 1;
}
//============================================//
COMMAND:clearpayphone(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
		new found;
        for(new h = 0; h < sizeof(PayPhone); h++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,1.0,PayPhone[h][0], PayPhone[h][1], PayPhone[h][2]))
	        {
	            found=1;
	            SetPVarInt(playerid, "PhoneID", h);
	        }
	    }
	    if(found == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not around a payphone.");
	    foreach (Player, i)
	    {
            if(GetPVarInt(i, "PhoneID") == GetPVarInt(playerid, "PhoneID"))
            {
                DeletePVar(i, "PhoneID");
            }
	    }
	    scm(playerid, -1, "Payphone cleared.");
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:removeweed(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
	{
	    for(new weed = 0; weed < sizeof(WeedInfo); weed++)
		{
            if(IsPlayerInRangeOfPoint(playerid,2.0,WeedInfo[weed][wX],WeedInfo[weed][wY],WeedInfo[weed][wZ]))
            {
			    if(WeedInfo[weed][wPlanted] == 1 && WeedInfo[weed][wX] != 0.0 && WeedInfo[weed][wY] != 0.0 && WeedInfo[weed][wZ] != 0.0)
				{
                    ApplyAnimationEx(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		            if(WeedInfo[weed][wObject] > 0 && IsValidDynamicObject(WeedInfo[weed][wObject])) { DestroyDynamicObject(WeedInfo[weed][wObject]); }
		            WeedInfo[weed][wObject]=0;
		            WeedInfo[weed][wX] = 0.0;
		    		WeedInfo[weed][wY] = 0.0;
		    		WeedInfo[weed][wZ] = 0.0;
		    		WeedInfo[weed][wTime] = 0;
		    		WeedInfo[weed][wPlanted] = 0;
 		            SendClientMessage(playerid,COLOR_GREEN,"You have picked up this plant.");
 		            format(string, sizeof(string),"Weed owner: %s",WeedInfo[weed][wName]);
 		            SendClientMessage(playerid,COLOR_GREEN,string);
		    	    return 1;
				}
			}
		}
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:impound(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1657.5247, -1706.4214, 15.6094)) return SendClientMessage(playerid, COLOR_ERROR, "You are not around the impound icon!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You need to be the driver of this vehicle to continue.");
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return SendClientMessage(playerid, COLOR_ERROR, "You must be inside a towtruck to use this.");
    new price, reason[128], string[256];
    if(sscanf(params, "is[128]", price, reason)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /impound [price] [reason]");
	else
	{
	    if(price < 100 || price > 5000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 100 or above 5000.");
    	if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") > 1)
    	{
			new found = 0, vehid;
        	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
        	    vehid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
        	    if(VehicleInfo[vehid][vType] == VEHICLE_PERSONAL) {
            	    DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            	    VehicleInfo[vehid][vX]=1668.8127;
            	    VehicleInfo[vehid][vY]=-1702.0597;
            	    VehicleInfo[vehid][vZ]=15.3513;
            	    VehicleInfo[vehid][vAngle]=90.7217;
            	    VehicleInfo[vehid][vImpound]=price;
            	    //==========//
            	    format(string, 256, "Officer %s has impounded a %s for %s, reason: %s.", PlayerInfo[playerid][pUsername], PrintVehName(vehid), FormatMoney(price), reason);
            	    SendFactionMessage(1, COLOR_BLUE, string);
            	    new given=0;
            	    foreach(new i : Player) {
            	        if(strcmp(VehicleInfo[vehid][vOwner], PlayerInfo[i][pUsername], false) == 0) {
							if(given == 0) {
            	            format(string, 128, "Your %s was impouned by the LSPD for %s!", PrintVehName(vehid), FormatMoney(price));
            	            scm(i, COLOR_LIGHTBLUE, string);
            	            format(string, 128, "Officer of impound: %s.", PlayerInfo[playerid][pUsername]);
            	            scm(i, COLOR_LIGHTBLUE, string);
            	            format(string, 128, "Impound reason: %s.", reason);
            	            scm(i, COLOR_LIGHTBLUE, string);
							given++; }
            	        }
            	    }
            	    //==========//
            	    SaveVehicleData(vehid);
                    DespawnVehicle(vehid);
            	    //==========//
            	    found++;
		    	}
			}
			if(found == 0) {
		    	scm(playerid, COLOR_ERROR, "You are not towing a personal vehicle.");
			}
    	}
    }
	return 1;
}
//============================================//
COMMAND:bolo(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") >= 1) {
	ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
	} else {
	SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!"); }
	return 1;
}
//============================================//
COMMAND:arrest(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME], time;
	if(sscanf(params, "ud", targetid, time)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /arrest [playerid] [minutes]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if (playerid == targetid && GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You cannot arrest yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") >= 1)
		{
		    if(GetPVarInt(playerid, "Suspend") == 1) return scm(playerid, COLOR_ERROR, "You are currently suspended from the LSPD.");
			if(PlayerToPlayer(playerid, targetid, 5.0) || GetPVarInt(playerid, "Admin") >= 1)
			{
			    if(GetPVarInt(playerid, "Admin") == 0)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1861.2664, -1714.1307, 1002.5859))
			        {
			        	return SendClientMessage(playerid, COLOR_ERROR, "You are not at the LSP arrest point.");
			        }
			    }
   			    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]), format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		    GiveNameSpace(sendername), GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "ARREST: %s has just arrested %s for %d minute(s).", sendername, giveplayer, time);
		        SendFactionMessage(1,COLOR_BLUE,string);
		        format(string, sizeof(string), "%s has arrested you for %d minute(s).", sendername, time);
		        SendClientMessage(targetid, COLOR_BLUE, string);
				SetPVarInt(targetid, "WantedLevel", 0);
        	    SetPlayerWantedLevel(targetid,0);
				SetPVarInt(targetid, "Jailed", 2);
				SetPVarInt(targetid, "Muted", 0);
				SetPlayerSpecialAction(targetid,SPECIAL_ACTION_NONE);

				TogglePlayerControllableEx(targetid, false);
				SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", targetid, true);

				new ran = random(23) + 1;
				switch(ran)
				{
					case 1: SetPlayerPosEx(targetid, 1827.7781,-1731.1105,1002.5859);
					case 2: SetPlayerPosEx(targetid, 1830.8279,-1731.3368,1002.5859);
					case 3: SetPlayerPosEx(targetid, 1834.0068,-1731.9955,1002.5859);
					case 4: SetPlayerPosEx(targetid, 1837.2377,-1731.4010,1002.5859);
					case 5: SetPlayerPosEx(targetid, 1840.6808,-1732.0594,1002.5859);
					case 6: SetPlayerPosEx(targetid, 1843.5640,-1732.1567,1002.5859);
					case 7: SetPlayerPosEx(targetid, 1843.6758,-1711.5168,1002.5859);
					case 8: SetPlayerPosEx(targetid, 1840.5532,-1712.0255,1002.5859);
					case 9: SetPlayerPosEx(targetid, 1837.4333,-1712.2550,1002.5859);
					case 10: SetPlayerPosEx(targetid, 1834.1997,-1712.3615,1002.5859);
					case 11: SetPlayerPosEx(targetid, 1830.8928,-1712.3453,1002.5859);
					case 12: SetPlayerPosEx(targetid, 1827.8674,-1711.8103,1002.5859);
					case 13: SetPlayerPosEx(targetid, 1830.7412,-1731.9961,1006.1860);
					case 14: SetPlayerPosEx(targetid, 1827.4778,-1731.5767,1006.1860);
					case 15: SetPlayerPosEx(targetid, 1834.1556,-1731.6372,1006.1860);
					case 16: SetPlayerPosEx(targetid, 1837.2511,-1731.3159,1006.1860);
					case 17: SetPlayerPosEx(targetid, 1840.3973,-1731.7581,1006.1860);
					case 18: SetPlayerPosEx(targetid, 1843.6770,-1731.4130,1006.1860);
					case 19: SetPlayerPosEx(targetid, 1843.7390,-1711.2112,1006.1860);
					case 20: SetPlayerPosEx(targetid, 1840.5001,-1711.6290,1006.1860);
					case 21: SetPlayerPosEx(targetid, 1837.4194,-1711.3104,1006.1860);
					case 22: SetPlayerPosEx(targetid, 1834.2599,-1711.4907,1006.1860);
					case 23: SetPlayerPosEx(targetid, 1830.8385,-1711.5261,1006.1860);
					case 24: SetPlayerPosEx(targetid, 1827.8015,-1711.8590,1006.1860);
				}

        	    SetPVarInt(targetid, "JailTime", time * 60);
        	    SetPVarInt(targetid, "Cuffed", 0), SetPVarInt(targetid, "CuffedTime", 0);
				new query[90];
				mysql_format(handlesql, query, sizeof(query), "UPDATE `criminals` SET `served` = 1 WHERE `player` = '%e';", PlayerInfo[targetid][pUsername]);
				mysql_pquery(handlesql, query);

				SetPlayerVirtualWorld(targetid, 1);
				SetPlayerInterior(targetid, 1);

				if(IsPlayerAttachedObjectSlotUsed(targetid, HOLDOBJECT_ITEM))
				{
					RemovePlayerAttachedObject(targetid, HOLDOBJECT_ITEM);
				}

				

				OnPlayerDataSave(targetid);
        	}
        	else SendClientMessage(playerid, COLOR_ERROR, "You are not close to that player.");
		}
	}
	return 1;
}

COMMAND:darrest(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME], time;
	if(sscanf(params, "ud", targetid, time)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /darrest [playerid] [days]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if (playerid == targetid && GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You cannot arrest yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") >= 1)
		{
		    if(GetPVarInt(playerid, "Suspend") == 1) return scm(playerid, COLOR_ERROR, "You are currently suspended from the LSPD.");
			if(PlayerToPlayer(playerid, targetid, 5.0) || GetPVarInt(playerid, "Admin") >= 1)
			{
			    if(GetPVarInt(playerid, "Admin") == 0)
			    {
			        if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1861.2664, -1714.1307, 1002.5859))
			        {
			        	return SendClientMessage(playerid, COLOR_ERROR, "You are not at the LSP arrest point.");
			        }
			    }
   			    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]), format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		    GiveNameSpace(sendername), GiveNameSpace(giveplayer);
        	    format(string, sizeof(string), "ARREST: %s has just arrested %s for %d day(s).", sendername, giveplayer, time);
		        SendFactionMessage(1,COLOR_BLUE,string);
		        format(string, sizeof(string), "%s has arrested you for %i day(s).", sendername, time);
		        SendClientMessage(targetid, COLOR_BLUE, string);
				SetPVarInt(targetid, "WantedLevel", 0);
        	    SetPlayerWantedLevel(targetid,0);
				SetPVarInt(targetid, "Jailed", 3);
				SetPVarInt(targetid, "Muted", 0);
				SetPlayerSpecialAction(targetid,SPECIAL_ACTION_NONE);

				TogglePlayerControllableEx(targetid, false);
				SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", targetid, true);

				new ran = random(23) + 1;
				switch(ran)
				{
					case 1: SetPlayerPosEx(targetid, 1827.7781,-1731.1105,1002.5859);
					case 2: SetPlayerPosEx(targetid, 1830.8279,-1731.3368,1002.5859);
					case 3: SetPlayerPosEx(targetid, 1834.0068,-1731.9955,1002.5859);
					case 4: SetPlayerPosEx(targetid, 1837.2377,-1731.4010,1002.5859);
					case 5: SetPlayerPosEx(targetid, 1840.6808,-1732.0594,1002.5859);
					case 6: SetPlayerPosEx(targetid, 1843.5640,-1732.1567,1002.5859);
					case 7: SetPlayerPosEx(targetid, 1843.6758,-1711.5168,1002.5859);
					case 8: SetPlayerPosEx(targetid, 1840.5532,-1712.0255,1002.5859);
					case 9: SetPlayerPosEx(targetid, 1837.4333,-1712.2550,1002.5859);
					case 10: SetPlayerPosEx(targetid, 1834.1997,-1712.3615,1002.5859);
					case 11: SetPlayerPosEx(targetid, 1830.8928,-1712.3453,1002.5859);
					case 12: SetPlayerPosEx(targetid, 1827.8674,-1711.8103,1002.5859);
					case 13: SetPlayerPosEx(targetid, 1830.7412,-1731.9961,1006.1860);
					case 14: SetPlayerPosEx(targetid, 1827.4778,-1731.5767,1006.1860);
					case 15: SetPlayerPosEx(targetid, 1834.1556,-1731.6372,1006.1860);
					case 16: SetPlayerPosEx(targetid, 1837.2511,-1731.3159,1006.1860);
					case 17: SetPlayerPosEx(targetid, 1840.3973,-1731.7581,1006.1860);
					case 18: SetPlayerPosEx(targetid, 1843.6770,-1731.4130,1006.1860);
					case 19: SetPlayerPosEx(targetid, 1843.7390,-1711.2112,1006.1860);
					case 20: SetPlayerPosEx(targetid, 1840.5001,-1711.6290,1006.1860);
					case 21: SetPlayerPosEx(targetid, 1837.4194,-1711.3104,1006.1860);
					case 22: SetPlayerPosEx(targetid, 1834.2599,-1711.4907,1006.1860);
					case 23: SetPlayerPosEx(targetid, 1830.8385,-1711.5261,1006.1860);
					case 24: SetPlayerPosEx(targetid, 1827.8015,-1711.8590,1006.1860);
				}
        	    //SetPVarInt(targetid, "JailTime", time * 60);

				new hour, minute, second, year, month, day;
				getdate(year, month, day);
				gettime(hour, minute, second);

				if(day + time > MonthDays[month - 1])
		 		{
		 			month++;
		 			if(month > 12)
		 			{
		 				year++;
		 				month = 1;
		 			}

		 			day = (day + time) - MonthDays[month - 1];
		 		}
		 		else
		 		{
		 			day++;
		 		}

		 		new date[32];
		 		format(date, sizeof(date), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);

        	    format(PlayerInfo[targetid][pJailedUntil], 64, date);

        	    SetPVarInt(targetid, "Cuffed", 0), SetPVarInt(targetid, "CuffedTime", 0);
				new query[90];
				mysql_format(handlesql, query, sizeof(query), "UPDATE `criminals` SET `served` = 1 WHERE `player` = '%e';", PlayerInfo[targetid][pUsername]);
				mysql_pquery(handlesql, query);

				SetPlayerVirtualWorld(targetid, 1);
				SetPlayerInterior(playerid, 1);

				if(IsPlayerAttachedObjectSlotUsed(targetid, HOLDOBJECT_ITEM))
				{
					RemovePlayerAttachedObject(targetid, HOLDOBJECT_ITEM);
				}

				OnPlayerDataSave(targetid);
        	}
        	else SendClientMessage(playerid, COLOR_ERROR, "You are not close to that player.");
		}
	}
	return 1;
}
//============================================//
COMMAND:duty(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
   	switch(GetPVarInt(playerid, "Member"))
	{
		case FACTION_LSPD:
		{
		    if(GetPVarInt(playerid, "Suspend") == 1) return scm(playerid, COLOR_ERROR, "You are currently suspended from the LSPD.");
			switch(GetPVarInt(playerid, "Duty"))
			{
		    	case 0:
		    	{
					//if(!IsPlayerInRangeOfPoint(playerid, 5.0, 120.6401,1079.8180,103.9174)) return error(playerid, "You must be at the locker room (bottom floor LSPD)");
		        	SetPVarInt(playerid, "Duty", 1);
		        	SendClientMessage(playerid,COLOR_WHITE,"You are now On-Duty.");
    	        	ShowPlayerDialogEx(playerid,26,DIALOG_STYLE_MSGBOX,"Color Setting","Select the color of your SA-MP nametag","Blue", "White");
		    	}
		    	case 1:
		    	{
		        	SetPVarInt(playerid, "Duty", 0);
		        	SendClientMessage(playerid,COLOR_WHITE,"You are now Off-Duty.");
		        	SetPlayerColor(playerid,COLOR_WHITE);
		            format(string, sizeof(string),"%s", PlayerNameEx(playerid));
		        	if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], 0xFFFFFFFF, string);
		    	}
			}
		}
		case FACTION_LSFD:
		{
		    switch(GetPVarInt(playerid, "Duty"))
		    {
		        case 0:
		        {
					SetPlayerColor(playerid, COLOR_PINK);
					SetPVarInt(playerid, "Duty", 1);
		        	format(string, sizeof(string),"%s", PlayerNameEx(playerid));
		        	SendClientMessage(playerid,COLOR_WHITE,"You are now On-Duty.");
		        	if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], COLOR_PINK, string);
		        }
		        case 1:
		        {
		        	SetPVarInt(playerid, "Duty", 0);
		        	SendClientMessage(playerid,COLOR_WHITE,"You are now Off-Duty.");
		        	SetPlayerColor(playerid,COLOR_WHITE);
		        	SetPlayerSkinEx(playerid, GetPVarInt(playerid, "Model"));
		        	format(string, sizeof(string),"%s", PlayerNameEx(playerid));
		        	if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], 0xFFFFFFFF, string);
		        }
			}
		}
		case FACTION_LSG: // GOVERNENT
		{
		    switch(GetPVarInt(playerid, "Duty"))
		    {
		        case 0:
		        {
					SetPVarInt(playerid, "Duty", 1);
					SendClientMessage(playerid,COLOR_WHITE,"You are now On-Duty.");
		        }
		        case 1:
		        {
		        	SetPVarInt(playerid, "Duty", 0);
		        	SendClientMessage(playerid,COLOR_WHITE,"You are now Off-Duty.");
		        }
			}
		}
		default: SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:policespawn(playerid, params[]) {
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Duty") != 1 && GetPVarInt(playerid, "Member") == FACTION_LSPD) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") >= 1)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1572.4750, -1692.9384, 5.8906))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1) {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a police vehicle spawned, please /despawncopcar.");
			            return 1;
			        }
		        }
	        }
	        ShowPlayerDialogEx(playerid, 28, DIALOG_STYLE_LIST, "Vehicle Options", "LSPD\nSFPD\nLVPD\nS.W.A.T Truck\nRanger\nPolice Bike\nFBI Rancher\nFBI Truck\nMaverick\nWater Tank\nTow Truck\nPremier\nFCR\nSanchez\nCheetah","Spawn", "Cancel");
	    } else {
			SendClientMessage(playerid, COLOR_ERROR, "You are not at the police station's vehicle supply.");
		}
	}
	
	return 1;
}
COMMAND:docspawn(playerid, params[]) {
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Duty") != 1 && GetPVarInt(playerid, "Member") == FACTION_LSPD) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") >= 1)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 267.5989,1375.9387,10.5859))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1) {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a police vehicle spawned, please /despawncopcar.");
			            return 1;
			        }
		        }
	        }
	        ShowPlayerDialogEx(playerid, DIALOG_DOC_SPAWN, DIALOG_STYLE_LIST, "Vehicle Options", "Grey LSPD Cruiser\nGrey SFPD Cruiser\nGrey LVPD Cruiser","Spawn", "Cancel");
	    } else {
			SendClientMessage(playerid, COLOR_ERROR, "You are not at the police station's vehicle supply.");
		}
	}
	
	return 1;
}
COMMAND:boatspawn(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,2725.7688,-2318.5544,3.0000))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1)
			    {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			        {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a gov vehicle spawned, please /despawngovcar.");
			            return 1;
			        }
		        }
	        }
	        CreateLSPDVehicle(playerid, 430, -1, -1);
	    }
	}
	return 1;
}
//============================================//
//============================================//
COMMAND:acuspawn(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Duty") != 1 && GetPVarInt(playerid, "Member") == FACTION_LSPD) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{
		if(GetPVarInt(playerid, "Rank") < 4)
		{
			if(!IsPlayerInDivision(playerid, 2) && !IsPlayerInDivision(playerid, 3))
			{
				SendClientMessage(playerid,COLOR_ERROR,"You do not have access to this command.");
				return 1;
			}
		}

	    if(IsPlayerInRangeOfPoint(playerid,5.0,1564.6024,-1692.9283,5.8906))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1)
			    {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			        {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a police vehicle spawned, please /despawncopcar.");
			            return true;
			        }
		        }
	        }
	        new id, c1, c2;
	        if(sscanf(params, "iii", id, c1, c2)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /acuspawn [vehicleid] [color 1] [color 2]");
	        else
	        {
	            if(DonateCars(id))
	            {
	                if(c1 < 0 || c1 > 300) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 300.");
	                if(c2 < 0 || c2 > 300) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 300.");
	                SendClientMessage(playerid, COLOR_ERROR, "ACU Vehicle Spawned!");

	                CreateLSPDVehicle(playerid,id,c1,c2);
					foreach(new car : VehicleIterator)
					{
		                if(CopInfo[car][Created] == 1)
			            {
		                    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			                {
			                    SetVehiclePosEx(car, 1560.4203,-1694.9939,5.6374);
			                    SetVehicleZAngle(car, 181.1914);
			                    return true;
			                }
		                }
	                }
	            }
	            else SendClientMessage(playerid, COLOR_ERROR, "Invalid Vehicle ID!");
	        }
	    }
	}
	return 1;
}
//============================================//
COMMAND:fdspawn(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Duty") != 1 && GetPVarInt(playerid, "Member") == FACTION_LSFD) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1135.5886,-1293.6591,13.5556))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1)
			    {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			        {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a ems vehicle spawned, please /despawngovcar.");
			            return 1;
			        }
		        }
	        }
	        ShowPlayerDialogEx(playerid,65,DIALOG_STYLE_LIST,"Vehicle Options","Fire Truck\nFire Engine\nAmbulance (WHITE & RED)\nAmbulance (RED & WHITE)\nAmbulance (RED)\nGeneral Squad (RED & WHITE)\nFBI Rancher\nLF02FD (Raindance)\nLF01FD (Maverick)\nUSAR Squad (RED & YELLOW)\nHuntley\nPremier\nChief's Vehicle","Spawn", "Cancel");
	    }
	}
	return 1;
}
//============================================//
COMMAND:govspawn(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Duty") != 1 && GetPVarInt(playerid, "Member") == FACTION_LSG) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(GetPVarInt(playerid, "Member") == FACTION_LSG && GetPVarInt(playerid, "Rank") > 1)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,1468.5840,-1836.1243,13.5469))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1)
			    {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			        {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a gov vehicle spawned, please /despawngovcar.");
			            return 1;
			        }
		        }
	        }
	        ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_LIST,"Vehicle Options","Sultan\nSentinel\nGMC\nLimo","Spawn", "Cancel");
	    }
	}
	return 1;
}
//============================================//
COMMAND:rlsspawn(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_RLS)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,849.9410,-1383.7013,13.5710))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1)
			    {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			        {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a faction vehicle spawned, please /despawnfcar.");
			            return 1;
			        }
		        }
	        }
	        CreateRLSVehicle(playerid);
	    }
	}
	return 1;
}
//============================================//
COMMAND:camera(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1059.7606,51.4485,801.0403))
	    {
	        if(CheckInvItem(playerid, 43)) return SendClientMessage(playerid, COLOR_ERROR, "You already have a camera.");
	        GiveInvItem(playerid, 43, 50, 0);
	        SendClientMessage(playerid, COLOR_WHITE, "Camera stored in your inventory!");
	    }
	}
	return 1;
}
//============================================//
COMMAND:newsspawn(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,1798.5409,-1281.3446,13.6655))
	    {
			foreach(new car : VehicleIterator)
			{
		        if(CopInfo[car][Created] == 1)
			    {
		            if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			        {
			            SendClientMessage(playerid, COLOR_ERROR, "You already have a faction vehicle spawned, please /despawnfcar.");
			            return 1;
			        }
		        }
	        }
	        ShowPlayerDialogEx(playerid, DIALOG_SAN_NEWS_SPAWN, DIALOG_STYLE_LIST, "SAN Network Vehicles", "SAN Network Van\nSAN Network Maverick", "Spawn", "Cancel");
	    }
	}
	return 1;
}
//============================================//
ALTCOMMAND:despawnfcar->despawncopcar;
ALTCOMMAND:despawngovcar->despawncopcar;
COMMAND:despawncopcar(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Member") >= 1 && GetPVarInt(playerid, "Member") <= 10)
	{
		foreach(new car : VehicleIterator)
		{
		    if(CopInfo[car][Created] == 1)
	        {
			    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			    {
			        SendClientMessage(playerid, COLOR_ERROR, "Faction vehicle despawned.");
			        VehicleInfo[car][vType] = 0;
			        CopInfo[car][Created] = 0;

					// Emptying all gunrack slots within the vehicle.
					for(new slot = 0; slot < 3; slot++)
					{
						CopInfo[car][Gun_Rack_Weapon][slot] = 0;
						CopInfo[car][Gun_Rack_Ammo][slot] = 0;
						CopInfo[car][Gun_Rack_E][slot] = 0;
						CopInfo[car][Gun_Rack_Serial][slot] = 0;
					}

			        strmid(CopInfo[car][Owner], "None", 0, strlen("None"), 255);
			        DespawnVehicle(car);
			        return 1;
			    }
		    }
	    }
	}
	return 1;
}
//============================================//
/*COMMAND:dooropen(playerid, params[])
{
	new found = 0, string[128], Float:X, Float:Y, Float:Z;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{

		new Float:distance = 5.0;
		new doorid = -1;

		for(new i = 0; i < 12; i++)
		{
			GetDynamicObjectPos(lspddoor[i], X, Y, Z);
			if(GetPlayerDistanceFromPoint(playerid, X, Y, Z) < distance)
			{
				distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
				doorid = i;
			}
		}

		if(doorid == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");

		GetDynamicObjectPos(lspddoor[doorid], X, Y, Z);

		if(IsDynamicObjectMoving(lspddoor[doorid]))
		{
		    found++;
		    SendClientMessage(playerid, COLOR_BLUE,"Door is currently moving!");
		    return true;
		}
		if(lspddoorS[doorid] == 1)
		{
		    found++;
		    SendClientMessage(playerid, COLOR_BLUE,"Door is currently open!");
		}
		else
		{
		    switch(doorid)
		    {
		        case 0,1,5,10: { X-=2.0; }
		        default: { Y-=2.0; }
		    }

			MoveDynamicObject(lspddoor[doorid], X, Y, Z, 5.0);

			format(string, 128, "Door(%d) is open, please close it!", doorid);
			SendClientMessage(playerid, COLOR_BLUE, string);

			found++;
			lspddoorS[doorid] = 1;
			PlaySoundPlyRadius(playerid, 6400, 10.0);
		}
	}
	else if(GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2043.50, -1338.00, 1270.50))
	    {
	        MoveDynamicObject(fddoor1, 2043.50-1.5, -1338.00, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 1 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2040.90, -1346.66, 1270.50))
	    {
	        MoveDynamicObject(fddoor2, 2040.90, -1346.66-1.5, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 2 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2047.30, -1349.86, 1270.50))
	    {
	        MoveDynamicObject(fddoor3, 2047.30, -1349.86-1.5, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 3 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2043.44, -1344.30, 1270.50))
	    {
	        MoveDynamicObject(fddoor4, 2043.44-1.5, -1344.30, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 4 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2040.80, -1353.06, 1270.50))
	    {
	        MoveDynamicObject(fddoor5, 2040.80, -1353.06-1.5, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 5 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2000.50, -1511.20, 1173.50))
		{
	        MoveDynamicObject(fddoor6, 2000.50-1.5, -1511.20, 1173.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 6 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2028.00, -671.50, 1477.90))
	    {
	        MoveDynamicObject(fddoor7, 2028.00-1.5, -671.50, 1477.90, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 7 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2037.60, -671.50, 1477.90))
	    {
	        MoveDynamicObject(fddoor8, 2037.60-1.5, -671.50, 1477.90, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 8 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2047.20, -671.60, 1477.90))
	    {
	        MoveDynamicObject(fddoor9, 2047.20-1.5, -671.60, 1477.90, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door 9 is open, please close it!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	}
	else if(GetPVarInt(playerid, "Member") == FACTION_LSG)
	{
	    if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") <= 11) return true;
	    for(new i = 0; i < 13; i++)
	    {
	        if(i != 0 && found == 0)
	        {
	            GetDynamicObjectPos(govdoor[i], X, Y, Z);
	            if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z))
	            {
	                if(IsDynamicObjectMoving(govdoor[i]))
					{
					    found++;
					    SendClientMessage(playerid, COLOR_BLUE,"Door is currently moving!");
					    return true;
					}
	                if(govdoorS[i] == 1)
	                {
	                    found++;
	                    SendClientMessage(playerid, COLOR_BLUE,"Door is currently open!");
	                }
	                else
	                {
	                    switch(i)
	                    {
	                        case 1 .. 5, 9 .. 11:
	                        {
	                            MoveDynamicObject(govdoor[i], X-2.0, Y, Z, 5.0);
	                        }
	                        default:
	                        {
	                            MoveDynamicObject(govdoor[i], X, Y-2.0, Z, 5.0);
	                        }
	                    }
	                    format(string, 128, "Door(%d) is open, please close it!", i);
      		            SendClientMessage(playerid, COLOR_BLUE, string);
      		            found++;
      		            govdoorS[i]=1;
      		            PlaySoundPlyRadius(playerid, 6400, 10.0);
      		        }
	            }
	        }
	    }
	}
	return true;
}
//============================================//
COMMAND:doorclose(playerid, params[])
{
    new found = 0, string[128], Float:X, Float:Y, Float:Z;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{
		new Float:distance = 5.0;
		new doorid = -1;

		for(new i = 0; i < 12; i++)
		{
			GetDynamicObjectPos(lspddoor[i], X, Y, Z);
			if(GetPlayerDistanceFromPoint(playerid, X, Y, Z) < distance)
			{
				distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
				doorid = i;
			}
		}

		if(doorid == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");

		GetDynamicObjectPos(lspddoor[doorid], X, Y, Z);
		switch(doorid)
		{
			case 0,1,5,10: { X+=2.0; }
			default: { Y+=2.0; }
		}
	            
		if(IsDynamicObjectMoving(lspddoor[doorid]))
		{
			found++;
			SendClientMessage(playerid, COLOR_BLUE,"Door is currently moving!");
			return true;
		}
		if(lspddoorS[doorid] == 0)
		{
			found++;
			SendClientMessage(playerid, COLOR_BLUE,"Door is currently closed!");
		}
		else
		{
			MoveDynamicObject(lspddoor[doorid], X, Y, Z, 5.0);

			format(string, 128, "Door(%d) is closed, thank you!", doorid);
			SendClientMessage(playerid, COLOR_BLUE, string);

			found++;
			lspddoorS[doorid] = 0;
			PlaySoundPlyRadius(playerid, 6400, 10.0);
		}
	}
	else if(GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2043.50, -1338.00, 1270.50))
	    {
	        MoveDynamicObject(fddoor1, 2043.50, -1338.00, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2040.90, -1346.66, 1270.50))
	    {
	        MoveDynamicObject(fddoor2, 2040.90, -1346.66, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2047.30, -1349.86, 1270.50))
	    {
	        MoveDynamicObject(fddoor3, 2047.30, -1349.86, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2043.44, -1344.30, 1270.50))
	    {
	        MoveDynamicObject(fddoor4, 2043.44, -1344.30, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2040.80, -1353.06, 1270.50))
	    {
	        MoveDynamicObject(fddoor5, 2040.80, -1353.06, 1270.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2000.50, -1511.20, 1173.50))
		{
	        MoveDynamicObject(fddoor6, 2000.50, -1511.20, 1173.50, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2028.00, -671.50, 1477.90))
	    {
	        MoveDynamicObject(fddoor7, 2028.00, -671.50, 1477.90, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2037.60, -671.50, 1477.90))
	    {
	        MoveDynamicObject(fddoor8, 2037.60, -671.50, 1477.90, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	    if(IsPlayerInRangeOfPoint(playerid,2.0,2047.20, -671.60, 1477.90))
	    {
	        MoveDynamicObject(fddoor9, 2047.20, -671.60, 1477.90, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Door is closed, thank you!");
      		PlaySoundPlyRadius(playerid, 6400, 10.0);
	    }
	}
	else if(GetPVarInt(playerid, "Member") == FACTION_LSG)
	{
	    if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Rank") <= 11) return true;
	    for(new i = 0; i < 13; i++)
	    {
	        if(i != 0 && found == 0)
	        {
	            GetDynamicObjectPos(govdoor[i], X, Y, Z);
	            switch(i)
	            {
	                case 1 .. 5, 9 .. 11: { X+=2.0; }
	                default: { Y+=2.0; }
	            }
	            if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z))
	            {
					if(IsDynamicObjectMoving(govdoor[i]))
					{
					    found++;
					    SendClientMessage(playerid, COLOR_BLUE,"Door is currently moving!");
					    return true;
					}
	                if(govdoorS[i] == 0)
	                {
	                    found++;
	                    SendClientMessage(playerid, COLOR_BLUE,"Door is currently closed!");
	                }
	                else
					{
	                    MoveDynamicObject(govdoor[i], X, Y, Z, 5.0);
	                    format(string, 128, "Door(%d) is closed, thank you!", i);
      		            SendClientMessage(playerid, COLOR_BLUE, string);
      		            found++;
      		            govdoorS[i]=0;
      		            PlaySoundPlyRadius(playerid, 6400, 10.0);
      		        }
	            }
	        }
	    }
	}
	return true;
}*/
//============================================//
/*COMMAND:gateopen(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
    {
    	new closest_gate = -1;
		new Float:closest_distance = 15;
		for(new i = 0; i < sizeof(PDgate); i++)
		{
			new Float:gateX, Float:gateY, Float:gateZ;
			GetDynamicObjectPos(PDgate[i], gateX, gateY, gateZ);
			
			if(GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ) < closest_distance)
			{
				closest_distance = GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ);
				closest_gate = PDgate[i];
			}
		}

		if(closest_gate == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not in range of any gate.");

	    if(closest_gate == PDgate[0])
	    {
	        MoveDynamicObject(PDgate[0], 1587.95, -1638.22, 6.93, 5.0);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[0], 1587.95, -1638.22, 14.93, 0.00, 0.00, 179.94, 5.0);
    	    return 1;
	    }
		else if(closest_gate == PDgate[1])
	    {
	        MoveDynamicObject(PDgate[1], 1544.7028808594, -1630.546875, 13.12956237793, 5.0, 0.0, 0.0, 90.0);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[1], 1544.70, -1630.54, 13.12, 358.0, 90.0, 90.0, 5.0);
    	    return 1;
	    }
		else if(closest_gate == PDgate[2])
	    {
	        MoveDynamicObject(PDgate[2], 1643.4, -1712.8, 14.7, 5.0);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[2], 1643.4, -1718.3, 14.7, 0.00, 0.00, 90.1, 5.0);
    	    return 1;
	    }
	    else if(closest_gate == PDgate[3]) // Prison
	    {
	        MoveDynamicObject(PDgate[3], 942.76953125, -2378.83496094, 12.78274250, 5.0, 0.00000000,359.98352051,299.99267578);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[3], 942.84277344, -2378.94042969, 12.85774136, 0.00000000, 270.00000000, 299.99267578, 5.0);
    	    return 1;
	    }
	    else if(closest_gate == PDgate[4]) // Prison
	    {
	        MoveDynamicObject(PDgate[4], 935.62988281, -2366.47949219, 12.78274250, 5.0, 0.00000000,357.98950195,299.98168945);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[4], 935.59082031, -2366.41601562, 12.90774059, 0.00000000, 90.00000000, 299.99267578, 5.0);
    	    return 1;
	    }
	    else if(closest_gate == PDgate[5]) // Prison
	    {
	        MoveDynamicObject(PDgate[5], 936.25976562, -2383.50839844, 8.39277458, 5.0, 0.00000000,0.00000000,209.99816895);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[5], 936.25976562, -2383.50839844 ,13.61776352, 0.00000000, 0.00000000, 209.99816895, 5.0);
    	    return 1;
	    }
	    else if(closest_gate == PDgate[6]) // Prison
	    {
	        MoveDynamicObject(PDgate[6], 869.87500000, -2423.04199219, 13.30904484, 5.0, 0.00000000,0.00000000,301.99768066);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", PDgate[6], 867.22070312, -2418.80957031, 13.30904484, 0.00000000, 0.00000000, 301.99768066, 5.0);
    	    return 1;
	    }
    }
    else if(GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
		new closest_gate = -1;
		new Float:closest_distance = 15;
		for(new i = 0; i < sizeof(FDgate); i++)
		{
			new Float:gateX, Float:gateY, Float:gateZ;
			GetDynamicObjectPos(FDgate[i], gateX, gateY, gateZ);
			
			if(GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ) < closest_distance)
			{
				closest_distance = GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ);
				closest_gate = FDgate[i];
			}
		}

		if(closest_gate == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not in range of any gate.");

		if(closest_gate == FDgate[5])
	    {
	        MoveDynamicObject(FDgate[5], 1149.23816, -1302.95166, 9.9329, 5.0, 0.00000, 0.00000, 0.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", FDgate[5], 1149.23816, -1302.95166, 14.76867, 0.00000, 0.00000, 0.00000, 5.0);
            return true;
	    }
	    else if(closest_gate == FDgate[4])
	    {
	        MoveDynamicObject(FDgate[4], 1140.14221, -1347.17029, 14.76870, 5.0, 0.00000, 0.00000, 0.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", FDgate[4], 1146.03723, -1347.17029, 14.76867, 0.00000, 0.00000, 0.00000, 5.0);
            return true;
	    }
	    else if(closest_gate == FDgate[3])
	    {
	        MoveDynamicObject(FDgate[3], 1131.4796, -1291.9203, 15.9575, 2.5, 0.0000, -90.0000, 90.0000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", FDgate[3], 1131.47961, -1291.09326, 14.22350, 0.00000, 0.00000, 90.00000, 2.5);
            return true;
	    }
	    else if(closest_gate == FDgate[2])
	    {
	        MoveDynamicObject(FDgate[2], 1125.3439, -1291.9203, 15.9575, 2.5, 0.0000, -90.0000, 90.0000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", FDgate[2], 1125.34387, -1291.09326, 14.22350, 0.00000, 0.00000, 90.00000, 2.5);
            return true;
	    }
	    else if(closest_gate == FDgate[1])
	    {
	        MoveDynamicObject(FDgate[1], 1119.2062, -1291.9203, 15.9575, 2.5, 0.0000, -90.0000, 90.0000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", FDgate[1], 1119.20618, -1291.09326, 14.22350, 0.00000, 0.00000, 90.00000, 2.5);
            return true;
	    }
	    else if(closest_gate == FDgate[0])
	    {
	        MoveDynamicObject(FDgate[0], 1113.0831, -1291.9203, 15.9575, 2.5, 0.0000, -90.0000, 90.0000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
            SetTimerEx("CloseGate", 10000, false, "ifffffff", FDgate[0], 1113.08313, -1291.09326, 14.22350, 0.00000, 0.00000, 90.00000, 2.5);
            return true;
	    }
	}
	return 1;
}
//============================================//
COMMAND:gateclose(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
    {
    	new closest_gate = -1;
		new Float:closest_distance = 15;
		for(new i = 0; i < sizeof(PDgate); i++)
		{
			new Float:gateX, Float:gateY, Float:gateZ;
			GetDynamicObjectPos(PDgate[i], gateX, gateY, gateZ);
			
			if(GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ) < closest_distance)
			{
				closest_distance = GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ);
				closest_gate = PDgate[i];
			}
		}

		if(closest_gate == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not in range of any gate.");

	    if(closest_gate == PDgate[0])
	    {
	        MoveDynamicObject(PDgate[0], 1587.95, -1638.22, 14.93, 5.0);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
		else if(closest_gate == PDgate[1])
	    {
	        MoveDynamicObject(PDgate[1], 1544.70, -1630.54, 13.12, 5.0, 0.0, 90.0, 90.0);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
		else if(closest_gate == PDgate[2])
	    {
	        MoveDynamicObject(PDgate[2], 1643.4, -1718.3, 14.7, 5.0);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
	    else if(closest_gate == PDgate[3]) // Prison
	    {
	        MoveDynamicObject(PDgate[3], 942.84277344,-2378.94042969,12.85774136, 5.0, 0.00000000,359.98352051,299.99267578);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
	    else if(closest_gate == PDgate[4]) // Prison
	    {
	        MoveDynamicObject(PDgate[4], 935.59082031,-2366.41601562,12.90774059, 5.0, 0.00000000,357.98950195,299.98168945);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
	    else if(closest_gate == PDgate[5]) // Prison
	    {
	        MoveDynamicObject(PDgate[5], 936.25976562,-2383.50839844,13.61776352, 5.0, 0.00000000,0.00000000,209.99816895);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
	    else if(closest_gate == PDgate[6]) // Prison
	    {
	        MoveDynamicObject(PDgate[6], 867.22070312,-2418.80957031,13.30904484, 5.0, 0.00000000,0.00000000,301.99768066);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
    	    return 1;
	    }
    }
	if(GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
		new closest_gate = -1;
		new Float:closest_distance = 15;
		for(new i = 0; i < sizeof(FDgate); i++)
		{
			new Float:gateX, Float:gateY, Float:gateZ;
			GetDynamicObjectPos(FDgate[i], gateX, gateY, gateZ);
			
			if(GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ) < closest_distance)
			{
				closest_distance = GetPlayerDistanceFromPoint(playerid, gateX, gateY, gateZ);
				closest_gate = FDgate[i];
			}
		}

	    if(closest_gate == FDgate[5])
	    {
	        MoveDynamicObject(FDgate[5], 1149.23816, -1302.95166, 14.76867, 5.0,  0.00000, 0.00000, 0.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
            return true;
	    }
	    else if(closest_gate == FDgate[4])
	    {
	        MoveDynamicObject(FDgate[4], 1146.03723, -1347.17029, 14.76867, 5.0, 0.00000, 0.00000, 0.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
            return true;
	    }
	    else if(closest_gate == FDgate[3])
	    {
	        MoveDynamicObject(FDgate[3], 1131.47961, -1291.09326, 14.22350, 2.5,  0.00000, 0.00000, 90.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
            return true;
	    }
	    else if(closest_gate == FDgate[2])
	    {
	        MoveDynamicObject(FDgate[2], 1125.34387, -1291.09326, 14.22350, 2.5,  0.00000, 0.00000, 90.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
            return true;
	    }
	    else if(closest_gate == FDgate[1])
	    {
	        MoveDynamicObject(FDgate[1], 1119.20618, -1291.09326, 14.22350, 2.5,  0.00000, 0.00000, 90.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
            return true;
	    }
	    else if(closest_gate == FDgate[0])
	    {
	        MoveDynamicObject(FDgate[0], 1113.08313, -1291.09326, 14.22350, 2.5,  0.00000, 0.00000, 90.00000);
            SendClientMessage(playerid, COLOR_WHITE,"The gate is now closed.");
            return true;
	    }

	    if(closest_gate == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any gate.");
	}
	return 1;
}*/
//============================================//
COMMAND:licenses(playerid, params[])
{
	new string[128],dtext[20];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    switch(GetPVarInt(playerid, "DriveLic"))
    {
        case 0: dtext = "Not Passed";
        case 1: dtext = "Passed";
    }
    SendClientMessage(playerid,COLOR_WHITE,"_____________________________________________________");
    SendClientMessage(playerid,COLOR_WHITE,"                               Licenses:");
    format(string, sizeof(string), "Driving License: %s", dtext);
    SendClientMessage(playerid, COLOR_ERROR, string);
    format(string, sizeof(string), "Weapon License: %s", GetWeaponLicStatus(GetPVarInt(playerid, "GunLic")));
    SendClientMessage(playerid, COLOR_ERROR, string);
    format(string, sizeof(string), "Medical License: %s", GetMedLicStatus(GetPVarInt(playerid, "MedLic")));
    SendClientMessage(playerid, COLOR_ERROR, string);
    SendClientMessage(playerid,COLOR_WHITE,"_____________________________________________________");
	return 1;
}
//============================================//
COMMAND:sid(playerid, params[])
{
	new targetid,string[128],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sid {FFFFFF}[playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot show yourself, use /licenses.");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,5.0))
   			{
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[playerid][pUsername]);
        	    GiveNameSpace(giveplayer);
        	    SendClientMessage(targetid,COLOR_WHITE,"_____________________________________________________");
        	    format(string, sizeof(string), "Name: %s - Age: %d", giveplayer, GetPVarInt(playerid, "Age"));
        	    SendClientMessage(targetid, COLOR_ERROR, string);
        	    SendClientMessage(targetid,COLOR_WHITE,"_____________________________________________________");
        	    format(string, sizeof(string), "ID shown to %s", PlayerInfo[targetid][pName]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
   			}
   			else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
ALTCOMMAND:sl->showlicenses;
COMMAND:showlicenses(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME],dtext[20];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /showlicenses {FFFFFF}[playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot show licenses to yourself, use /licenses instead.");
		if(IsPlayerConnected(targetid))
		{
		    if(PlayerToPlayer(playerid,targetid,5.0))
   			{
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
        	    switch(GetPVarInt(playerid, "DriveLic"))
        	    {
            	    case 0: dtext = "Not Passed";
            	    case 1: dtext = "Passed";
        	    }
        	    SendClientMessage(targetid,COLOR_WHITE,"_____________________________________________________");
        	    format(string, sizeof(string), "                               %s's licenses:", sendername);
        	    SendClientMessage(targetid,COLOR_WHITE,string);
        	    format(string, sizeof(string), "Driving License: %s", dtext);
        	    SendClientMessage(targetid, COLOR_ERROR, string);
        	    format(string, sizeof(string), "Weapon License: %s", GetWeaponLicStatus(GetPVarInt(playerid, "GunLic")));
        	    SendClientMessage(targetid, COLOR_ERROR, string);
				format(string, sizeof(string), "Medical License: %s", GetMedLicStatus(GetPVarInt(playerid, "MedLic")));
				SendClientMessage(playerid, COLOR_ERROR, string);
        	    SendClientMessage(targetid,COLOR_WHITE,"_____________________________________________________");
				format(string, sizeof(string), "You have shown your licenses to %s.", giveplayer);
				SendClientMessage(playerid, 0xCCEEFF96, string);
   			}
   			else
   			{
   			    SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
   			}
		}
	}
	return 1;
}
//============================================//
COMMAND:togphone(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "PlayerSpectate") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You can't be spectating and use this command.");
    if(!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a cellphone.");
    if(GetPVarInt(playerid, "CellMenu") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while using phone.");
    switch(GetPVarInt(playerid, "TogPhone"))
    {
        case 0:
        {
            SetPVarInt(playerid, "TogPhone", 1);
            SendClientMessage(playerid, COLOR_ERROR, "Phone turned off.");
        }
        case 1:
        {
            DeletePVar(playerid,"TogPhone");
            SendClientMessage(playerid, COLOR_ERROR, "Phone turned on.");
        }
    }
	return 1;
}
//============================================//
ALTCOMMAND:cell->cellphone;
ALTCOMMAND:phone->cellphone;
COMMAND:cellphone(playerid, params[])
{
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this command.");
    if(GetPVarInt(playerid, "PayPhone") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while using a payphone.");
    if(!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_ERROR, "You don't have a cellphone.");
    if(GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while cuffed.");
    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while in jail.");
    if(GetPVarInt(playerid, "TogPhone") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while your phone is off.");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while muted.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while dead.");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You can not use this command while in water.");

	SetPVarInt(playerid,"CellMenu", 1);
	CellphoneState(playerid, 1);
	ShowPlayerDialogEx(playerid, 38, DIALOG_STYLE_LIST, "Cellphone", "Call Number\nContacts\nText Message\nPickup Call\nToggle Speaker\nHang Up / Pocket Phone", "Select", "");

	//ShowPlayerCellphone(playerid);
	return 1;
}
//============================================//
COMMAND:ticket(playerid, params[])
{
	new targetid,string[128], amount, reason[50];
	if(sscanf(params, "uds[50]", targetid, amount, reason)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ticket [playerid] [amount] [reason]");
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	//if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot ticket yourself.");
    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return nal(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(targetid, 10.0, X, Y, Z)) return error(playerid, "This player is not nearby you.");
	if(amount < 25 || amount > 2000) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 25 or above 2000.");
	new query[516], year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour,minute,second);
	new datum[64], timel[64];
	format(timel, sizeof(timel), "%d:%d:%d", hour, minute, second);
 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
	mysql_format(handlesql, query, sizeof(query), "INSERT INTO `tickets`(`player`, `officer`, `time`, `date`, `amount`, `reason`) VALUES ('%e','%e','%e','%e',%d,'%e')",
    PlayerInfo[targetid][pUsername], PlayerInfo[playerid][pUsername],
	timel,datum, amount,reason);
	mysql_pquery(handlesql, query);
	format(string, sizeof(string), "* %s writes a ticket of %s to %s", PlayerInfo[playerid][pName], FormatMoney(amount), PlayerInfo[targetid][pName]);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	return 1;
}
//============================================//
COMMAND:payticket(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 129.2496,1131.2227,527.4651)) return error(playerid, "You must be at the police station to do this.");
	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM tickets WHERE player='%s' AND paid=0", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "PayTicketsP", "i", playerid);
	return 1;
}
//============================================//
COMMAND:payimpound(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 129.2496,1131.2227,527.4651)) return error(playerid, "You must be at the police station to do this.");
	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM vehicles WHERE Owner='%s'", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "PayImpoundSQL", "i", playerid);
	return 1;
}
//============================================//
COMMAND:tickets(playerid, params[])
{
	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM tickets WHERE player='%s' AND paid=0 ORDER BY ID DESC", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "GetTicketsP", "i", playerid);
	return 1;
}
//============================================//
COMMAND:frisk(playerid, params[])
{
	new Float:X, Float:Y, Float:Z, id, string[128];
	GetPlayerPos(playerid, X, Y, Z);
	if(sscanf(params, "u", id)) return usage(playerid, "USAGE: /frisk [PlayerID/Name]");
	if(!IsPlayerInRangeOfPoint(id, 5.0, X, Y, Z)) return error(playerid, "Player is not nearby.");
	if(playerid == id) return true;
	PrintInvO(id, playerid);
	format(string, sizeof(string), "* %s starts searching %s for items", PlayerNameEx(playerid), PlayerNameEx(id));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
 	scm(playerid, COLOR_ERROR, "Always roleplay your frisking before doing so.");
	return 1;
}
//============================================//
ALTCOMMAND:checkinv->checkinventory;
COMMAND:checkinventory(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id)) return usage(playerid, "USAGE: /checkinv [PlayerID/Name]");
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	PrintInvO(id, playerid);
	return 1;
}
//============================================//
ALTCOMMAND:vehicleinv->vehicleinventory;
ALTCOMMAND:carinv->vehicleinventory;
ALTCOMMAND:vehinv->vehicleinventory;
COMMAND:vehicleinventory(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) return usage(playerid, "USAGE: /vehicleinventory [vehicleid]");
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	PrintVehInvEx(playerid, id);
	return 1;
}
//============================================//
ALTCOMMAND:houseinv->houseinventory;
COMMAND:houseinventory(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) return usage(playerid, "USAGE: /houseinventory [houseid]");
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	PrintHouseInvEx(playerid, id);
	return 1;
}
ALTCOMMAND:bizinv->bizinventory;
COMMAND:bizinventory(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id)) return usage(playerid, "USAGE: /bizinventory [businessid]");
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	PrintBizInvEx(playerid, id);
	return 1;
}
//============================================//
COMMAND:checkseatbelt(playerid, params[])
{
	new Float:X, Float:Y, Float:Z, id, string[128];
	GetPlayerPos(playerid, X, Y, Z);
	if(sscanf(params, "u", id)) return usage(playerid, "USAGE: /checkseatbelt [PlayerID/Name]");

	if(!IsPlayerInRangeOfPoint(id, 5.0, X, Y, Z)) return error(playerid, "You are not near this player.");
	if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, COLOR_ERROR, "This player is not in a vehicle.");

	if(IsPlayerInAnyVehicle(id)) {
 		if(GetPVarInt(id, "Seatbelt") == 1) {
			format(string, sizeof(string), "* %s ((Is wearing a seatbelt)) ", PlayerInfo[id][pName]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE); }
 		else {
			format(string, sizeof(string), "* %s ((Is not wearing a seatbelt)) ", PlayerInfo[id][pName]);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE); }
	}
	return 1;
}
//============================================//
COMMAND:uniform(playerid, params[])
{
    new Skin[sizeof(LSPDskin)], count = 0;
	if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 120.6401, 1079.8180, 523.9174)) return true;
	    for(new i = 0; i < sizeof(LSPDskin); i++)
	    {
			Skin[i] = LSPDskin[i][SkinID];
			count++;
	    }
	    ShowModelSelectionMenuEx(playerid, Skin, count, "Select skin", 4, 0.0, 0.0, 0.0);
	    //ShowPlayerDialogEx(playerid, 205, DIALOG_STYLE_LIST, "Locker room",  diatxt, "Select", "Close");
	}
	if(GetPVarInt(playerid, "Member") == FACTION_LSFD)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2042.0798,-1349.6273,1271.4860) && !IsPlayerInRangeOfPoint(playerid, 2.0, 1128.2969, -1300.9207, 13.5751)) return true;
	    for(new i = 0; i < sizeof(LSFDskin); i++)
	    {
			Skin[i] = LSFDskin[i][SkinID];
			count++;
	    }
	    ShowModelSelectionMenuEx(playerid, Skin, count, "Select skin", 7, 0.0, 0.0, 0.0);
	}
	if(GetPVarInt(playerid, "Member") == FACTION_LSG)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 398.9706,203.9854,1081.6190)) return true;
	    for(new i = 0; i < sizeof(Govskin); i++)
	    {
			Skin[i] = Govskin[i][SkinID];
			count++;
	    }
	    ShowModelSelectionMenuEx(playerid, Skin, count, "Select skin", 6, 0.0, 0.0, 0.0);
	}
	return 1;
}
//============================================//
COMMAND:locker(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 374.7547,200.2276,1081.5173)) return error(playerid, "You are not at the locker room");
	if(GetPVarInt(playerid, "Member") != FACTION_LSG) return true;
	if(GetPVarInt(playerid, "LockerRights") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You do not possess the rights to this locker room.");
	if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	new result[2000];
	for(new i = 0; i < sizeof(GovItems); i++)
	{
	    if(i == 0)
		{
		    format(result, 2000, "%s | Rank: %d", PrintIName(GovItems[i][0]), GovItems[i][1]);
		}
		else
		{
		    format(result, 2000, "%s\n%s | Rank: %d", result, PrintIName(GovItems[i][0]), GovItems[i][1]);
		}
	}
	format(result, 2000, "%s\n{33FF66}Disarm", result);
	ShowPlayerDialogEx(playerid, 79, DIALOG_STYLE_LIST, "GOVERNMENT Armoury", result, "Select", "Close");
	return 1;
}
//============================================//
CMD:gethp(playerid, params[])
{
	new msg[128];
	new id, Float:h;
	if(sscanf(params, "u", id)) return usage(playerid, "USAGE: /gethp [ID/Name]");
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	GetPlayerHealth(id, h);
 	format(msg, sizeof(msg), "INFO: %s - Health (%.2f)", PlayerInfo[id][pName], h);
	SCM(playerid, COLOR_ERROR, msg);
	return 1;
}
//============================================//
CMD:getarmour(playerid, params[])
{
	new msg[128];
	new id, Float:h;
	if(sscanf(params, "u", id)) return usage(playerid, "USAGE: /getarmour [ID/Name]");
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	GetPlayerArmourEx(id, h);
 	format(msg, sizeof(msg), "INFO: %s - Armour (%.2f)", PlayerInfo[id][pName], h);
	SCM(playerid, COLOR_ERROR, msg);
	return 1;
}
//============================================//
COMMAND:buyclothes(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 1.0, 204.3188,-160.1595,1000.5234) && !IsPlayerInRangeOfPoint(playerid, 1.0, 217.0851,-98.3804,1005.2578)) return error(playerid, "You aren't at the clothes shop.");
	ShowPlayerDialogEx(playerid, 409, DIALOG_STYLE_LIST, "Select option", "Buy attachments\nChange skin", "Select", "Cancel");
	return 1;
}
//============================================//
ALTCOMMAND:tp->takeprim;
COMMAND:takeprim(playerid, params[])
{
	if(PlayerInfo[playerid][pArcade] != 0) return 1;
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
    if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    SetPVarInt(playerid, "GunReduce", 2000);
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "ConnectTime") < 8) return scm(playerid, COLOR_ERROR, "You need (8) TLS to use firearms!");
    if(PlayerInfo[playerid][pBeanbaggedTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are currently beanbagged!");

	new foundid = 0, str2[128];
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] >= 1)
		{
            if(PlayerInfo[playerid][pInvItem][i] >= 25 && PlayerInfo[playerid][pInvItem][i] <= 34)
            {
		        if(foundid == 0) foundid = i;
		    }
	    }
	}
	if(foundid == 0) return error(playerid, "You have no primary weapon in your inventory.");
	if(PlayerInfo[playerid][pPlayerWeapon] != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "You already have a weapon equipped!");
	    return true;
	}
	if(GetPVarInt(playerid, "TogUnhol") == 0)
	{
		ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0);
	}
    PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvEx][foundid];
    GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pInvItem][foundid], PlayerInfo[playerid][pInvQ][foundid]);
    PlayerInfo[playerid][pPlayerSerial]=PlayerInfo[playerid][pInvS][foundid];
    //==========//
    format(str2, 128, "%s equipped!", PrintIName(PlayerInfo[playerid][pInvItem][foundid]));
    SendClientMessage(playerid, COLOR_WHITE, str2);

    ServerLog(LOG_WEAPON_EQUIP, PlayerInfo[playerid][pUsername], str2);
    //==========//
	RemoveInvItem(playerid, foundid);
    //==========//
    CallRemoteFunction("LoadHolsters","i",playerid);
	return 1;
}
//============================================//
ALTCOMMAND:ts->takesec;
COMMAND:takesec(playerid, params[])
{
	if(PlayerInfo[playerid][pArcade] != 0) return 1;
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
    if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    SetPVarInt(playerid, "GunReduce", 2000);
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "ConnectTime") < 8) return scm(playerid, COLOR_ERROR, "You need (8) TLS to use firearms!");
    if(PlayerInfo[playerid][pBeanbaggedTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are currently beanbagged!");

	new foundid = 0, str2[128];
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
    	if(PlayerInfo[playerid][pInvItem][i] >= 1)
		{
            if(PlayerInfo[playerid][pInvItem][i] >= 22 && PlayerInfo[playerid][pInvItem][i] <= 24)
            {
		        if(foundid == 0) foundid = i;
		    }
	    }
	}
	if(foundid == 0) return error(playerid, "You have no secondary weapon in your inventory.");
	if(PlayerInfo[playerid][pPlayerWeapon] != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "You already have a weapon equipped!");
	    return true;
	}
	if(GetPVarInt(playerid, "TogUnhol") == 0) {
	ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0); }
    PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvEx][foundid];
    GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pInvItem][foundid], PlayerInfo[playerid][pInvQ][foundid]);
    PlayerInfo[playerid][pPlayerSerial]=PlayerInfo[playerid][pInvS][foundid];
    //==========//
    format(str2, 128, "%s equipped!", PrintIName(PlayerInfo[playerid][pInvItem][foundid]));
    SendClientMessage(playerid, COLOR_WHITE, str2);

    ServerLog(LOG_WEAPON_EQUIP, PlayerInfo[playerid][pUsername], str2);
    //==========//
	RemoveInvItem(playerid, foundid);
    //==========//
    CallRemoteFunction("LoadHolsters","i",playerid);
	return 1;
}
//============================================//
COMMAND:silencer(playerid, params[])
{
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to do this command!");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "LSPD_Ta") != 0) return 1;
	if(PlayerInfo[playerid][pPlayerWeapon] != 22 && PlayerInfo[playerid][pPlayerWeapon] != 23) return scm(playerid, COLOR_ERROR, "You don't have a Colt45 equipped!");
	SetPVarInt(playerid, "Delay", GetCount()+2000);
	if(PlayerInfo[playerid][pPlayerAmmo] <= 0) return scm(playerid, COLOR_ERROR, "You need ammo in your weapon to use this!");

    new sweapon, sammo;
    for (new i = 0; i < 9; i++)
    {
        GetPlayerWeaponData(playerid, i, sweapon, sammo);
	}
	if(PlayerInfo[playerid][pAmmoType] == 0) {
	PlayerInfo[playerid][pPlayerAmmo]=0; }
	if(PlayerInfo[playerid][pPlayerWeapon] == 22) {
	    if(!CheckInvItem(playerid, 412)) return scm(playerid, COLOR_ERROR, "You need a suppressor attachment in your inventory!");
	    ResetPlayerWeapons(playerid);
	    GivePlayerWeaponEx(playerid, 23, PlayerInfo[playerid][pPlayerAmmo]);
	    RemoveInvItem(playerid, GetInvSlotFromID(playerid, 412));
	    scm(playerid, -1, "Silencer attached!");
	    return 1;
	}
	if(PlayerInfo[playerid][pPlayerWeapon] == 23) {
	    ResetPlayerWeapons(playerid);
	    GivePlayerWeaponEx(playerid, 22, PlayerInfo[playerid][pPlayerAmmo]);
	    GiveInvItem(playerid, 412, 1, 0, 0);
	    scm(playerid, -1, "Silencer detached!");
	    return 1;
	}
	return 1;
}
//============================================//
ALTCOMMAND:pg->putgun;
COMMAND:putgun(playerid, params[])
{
	if(PlayerInfo[playerid][pArcade] != 0) return 1;
    if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    SetPVarInt(playerid, "GunReduce", 2000);
    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to do this command!");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "LSPD_Ta") == 1) return 1; // Block taser bug.
    if(PlayerInfo[playerid][pBeanbaggedTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are currently beanbagged!");
	if(PlayerInfo[playerid][pPlayerWeapon] == 0) return error(playerid, "You currently have no weapon equipped.");

    new resch = CheckInv(playerid);
    new str[128];
    if(resch == 1)
    {
        new sweapon, sammo;
        for (new i = 0; i < 9; i++)
        {
            GetPlayerWeaponData(playerid, i, sweapon, sammo);
		}
		if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
		{
		    new amount = PlayerInfo[playerid][pPlayerAmmo], am = 0;
		    switch(PlayerInfo[playerid][pPlayerWeapon])
		    {
		        case 22 .. 24: am=50;
		        case 25 .. 27: am=25;
		        case 28 .. 32: am=150;
		        case 33, 34: am=25;
		    }
		    if(amount > am)
		    {
				new am2;
		        switch(PlayerInfo[playerid][pAmmoType])
		        {
		    	    case 101: am2=100;
		    	    case 107: am2=100;
		    	    case 116: am2=300;
		    	    case 126: am2=300;
		    	    case 127: am2=300;
		        }
		        if(amount > am2) {
				amount = am; }
			}
		    PlayerInfo[playerid][pPlayerAmmo]=amount;
		    if(PlayerInfo[playerid][pAmmoType] == 0) {
			PlayerInfo[playerid][pPlayerAmmo]=0; }
		}
        GiveInvItem(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo], PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pPlayerSerial]);
        format(str, 50, "%s stored into your inventory!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]));
        ResetPlayerWeaponsEx(playerid);

        ServerLog(LOG_WEAPON_STORE, PlayerInfo[playerid][pUsername], str);

		PlayerInfo[playerid][pPlayerWeapon]=0, PlayerInfo[playerid][pPlayerAmmo]=0, PlayerInfo[playerid][pAmmoType]=0;
		RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
		SetPVarInt(playerid, "JustChosen", 0);
		CallRemoteFunction("LoadHolsters","i",playerid);
        SendClientMessage(playerid, COLOR_WHITE, str);
        RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
	return 1;
}
//============================================//
ALTCOMMAND:gs->gunserial;
COMMAND:gunserial(playerid, params[])
{
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 38)
	{
	    new string[128], serial[25], sendername[MAX_PLAYER_NAME], gunname[25];
	    if(PlayerInfo[playerid][pPlayerSerial] == 0) serial="UNKNOWN";
	    else format(serial, 25, "%d", PlayerInfo[playerid][pPlayerSerial]);
	    GetWeaponName(PlayerInfo[playerid][pPlayerWeapon], gunname, sizeof(gunname));
	    format(string, sizeof(string), "%s's Serial-ID: %s.", gunname, serial);
	    scm(playerid, -1, string);
	    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
	    format(string, sizeof(string), "*** %s checks %s %s's serial.", sendername, CheckSex(playerid), gunname);
    	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
	}
	else error(playerid, "You currently have no weapon equipped.");
	return 1;
}
//============================================//
COMMAND:maskid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	new mask, query[256];
	if(sscanf(params, "d", mask)) return usage(playerid, "USAGE: /maskid [Mask ID]");
	format(query, sizeof(query), "SELECT * FROM `accounts` WHERE MaskID = %d", mask);
	mysql_function_query(handlesql, query, false, "RetrieveMask", "dd",mask, playerid);
 	return 1;
}
//============================================//
COMMAND:makeadmin(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 10) return nal(playerid);
	new id, lvl, str[128];
	if(sscanf(params, "ud", id, lvl)) return usage(playerid, "USAGE: /makeadmin [Player] [Level]");
	if(lvl < 0 || lvl > 10) return error(playerid, "Invalid admin level.");
	SetPVarInt(id, "Admin", lvl);
	format(str, sizeof(str), "You have set (%s) to admin level (%d).", PlayerInfo[id][pName], lvl);
	SCM(playerid, COLOR_YELLOW, str);
	return 1;
}
//============================================//
COMMAND:makehelper(playerid, params[])
{
	if(GetPVarInt(playerid, "Helper") < 2 && GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new id, lvl, str[128];
	if(sscanf(params, "ud", id, lvl)) return usage(playerid, "USAGE: /makehelper [playerid] [level (0-3)]");
	if(lvl < 0 || lvl > 3) return error(playerid, "Invalid helper level.");
	SetPVarInt(id, "Helper", lvl);
	format(str, sizeof(str), "You have set %s to helper level %d.", PlayerInfo[id][pName], lvl);
	SCM(playerid, COLOR_YELLOW, str);
	return 1;
}
COMMAND:makedeveloper(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new id, lvl, str[128];
	if(sscanf(params, "ud", id, lvl)) return usage(playerid, "USAGE: /makedeveloper [Player] [Level]");
	if(lvl < 0 || lvl > 1) return error(playerid, "Invalid developer lvl.");
	SetPVarInt(id, "Developer", lvl);
	format(str, sizeof(str), "You have set (%s) to developer level (%d).", PlayerInfo[id][pName], lvl);
	SCM(playerid, COLOR_YELLOW, str);
	return 1;
}
//============================================//
/*COMMAND:makereg(playerid, params[])
{
	if(GetPVarInt(playerid, "Reg") < 2 && GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new id, lvl, str[128];
	if(sscanf(params, "ud", id, lvl)) return usage(playerid, "USAGE: /makereg [Player] [Level]");
	if(lvl < 0 || lvl > 2) return error(playerid, "Invalid reg lvl.");
	SetPVarInt(id, "Reg", lvl);
	format(str, sizeof(str), "You have set (%s) to reg level (%d).", PlayerInfo[id][pName], lvl);
	SCM(playerid, -1, str);
	return 1;
}*/
//============================================//
COMMAND:jailacc(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You are not allowed to use this command.");
	new id[25], time, reason[128], string[256];
	if(sscanf(params, "sis[128]", id, time, reason)) return usage(playerid, "USAGE: /jailacc [Player Name] [Minutes] [Reason]");
	if(GetPlayerID(id) != -1) return SendClientMessage(playerid, COLOR_ERROR, "This player is connected, please use /adminjail instead.");
	if(time < 1) return error(playerid, "You can not jail for negative minutes.");
	format(string, sizeof(string), "AdmCmd: %s was offline jailed by Admin %s. (Reason: %s)", GetNameWithSpace(id), AdminName(playerid), reason);
	SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, string);
	new query[256], date[30], day, year, month;
	getdate(year, month, day);
	format(date, sizeof(date), "%d-%d-%d", year, month, day);
	mysql_format(handlesql, query, sizeof(query), "INSERT INTO `logs_adminjails`(`Name`, `Admin`, `Reason`, `Minutes`, `Date`) VALUES ('%e','%e','%e',%i,'%e')",
	id, AdminName(playerid), reason, time * 60, date);
	mysql_pquery(handlesql, query);
	mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Jailed=1, Jailtime=%d WHERE Name='%e'", time * 60, id);
	mysql_pquery(handlesql, query);
	return 1;
}
//============================================//
COMMAND:cad(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /cad [Advertisement]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(!IsPlayerInRangeOfPoint(playerid,4.0, 1045.5764,51.5593,801.0356)) return SendClientMessage(playerid, COLOR_ERROR, "You are not at the SAN Network studio.");
	    new price = 0;
	    if(GetPVarInt(playerid, "DonateRank") == 0) price = strlen(text) * 20;
	    if(GetPVarInt(playerid, "Ad") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You already requested a advertisement.");
	    if (!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a cellphone.");
	    if(GetPlayerMoneyEx(playerid) >= price)
	    {
	        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	    GiveNameSpace(sendername);
	        format(PlayerInfo[playerid][pAdText], sizeof(string), "AD: %s",  text);
	        format(string, sizeof(string), "AD: %s[%i] is trying to co-advertise something! '%s'.", sendername, playerid, text);
            SendAdminMessage(COLOR_ERROR,string);
            SendHelperMessage(COLOR_ERROR,string);
            format(string, sizeof(string), "AD: Use /approvead %i to approve, or type /denyad %i <reason>.",  playerid, playerid);
            SendAdminMessage(COLOR_ERROR,string);
            SendHelperMessage(COLOR_ERROR,string);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your company advertisement has been submitted and is waiting approvalby a helper or admin.");
            SetPVarInt(playerid, "Ad", 1);
            SetPVarInt(playerid, "AdPrice", price);
        }
        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	}
	return 1;
}
//============================================//
COMMAND:ad(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ad [Advertisement]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(!IsPlayerInRangeOfPoint(playerid,4.0, 1045.5764,51.5593,801.0356)) return SendClientMessage(playerid, COLOR_ERROR, "You are not at the SAN Network studio.");
	    new price = 0;
	    if(GetPVarInt(playerid, "DonateRank") == 0) price = 500;
	    if(GetPVarInt(playerid, "Ad") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You already requested a advertisement.");
	    if (!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a cellphone.");
	    if(GetPlayerMoneyEx(playerid) >= price)
	    {
	        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	    GiveNameSpace(sendername);
	        format(PlayerInfo[playerid][pAdText], sizeof(string), "%s [Contact]: %s [Phone]: %d",  text, sendername, GetPVarInt(playerid, "PhoneNum"));
	        format(string, sizeof(string), "AD: %s[%i] is trying to advertise something! '%s'.", sendername, playerid, PlayerInfo[playerid][pAdText]);
            SendAdminMessage(COLOR_ERROR,string);
            SendHelperMessage(COLOR_ERROR,string);
            format(string, sizeof(string), "AD: Use /approvead %i to approve, or type /denyad %i <reason>.",  playerid, playerid);
            SendAdminMessage(COLOR_ERROR,string);
            SendHelperMessage(COLOR_ERROR,string);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your advertisement has been submitted and is waiting approvalby a helper or admin.");
            SetPVarInt(playerid, "Ad", 1);
            SetPVarInt(playerid, "AdPrice", price);
        }
        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	}
	return 1;
}
//============================================//
COMMAND:checkad(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Helper") >= 1 || GetPVarInt(playerid, "Admin") >= 1)
	{
	    foreach(new i : Player)
	    {
	        if(GetPVarInt(i, "PlayerLogged") == 1)
	        {
	            if(GetPVarInt(i, "Ad") == 1)
	            {
	                format(string, sizeof(string),"AD: %s[%i]: %s", PlayerInfo[i][pName], i, PlayerInfo[i][pAdText]);
	                SendClientMessage(playerid,COLOR_ERROR,string);
	            }
	        }
	    }
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:approvead(playerid, params[])
{
	new targetid,string[128];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /approvead [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "Ad") != 1) return SendClientMessage(playerid, COLOR_ERROR, "This player does not have a pending ad.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
      		format(string, sizeof(string), "AD: The advertisement by %s was approved by %s.", PlayerInfo[targetid][pName], PlayerInfo[playerid][pName]);
			SendAdminMessage(COLOR_LIGHTBLUE,string);
      		SetPVarInt(targetid, "Ad", 0);
      		GivePlayerMoneyEx(targetid,-GetPVarInt(targetid, "AdPrice"));
      		SetPVarInt(targetid, "AdPrice", 0);
      		SendClientMessage(targetid,COLOR_GREEN,"Your advertisement has been placed on the newspaper.");
      		LoadAdText(PlayerInfo[targetid][pAdText]);
	        SendClientMessageToAllEx(COLOR_GREEN, PlayerInfo[targetid][pAdText]);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:denyad(playerid, params[])
{
	new targetid,reason[128],string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "us[128]", targetid, reason)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /denyad [playerid] [reason]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "Ad") != 1) return SendClientMessage(playerid, COLOR_ERROR, "This player does not have a pending ad.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "AD: your advertisement was denied for: %s.",  reason);
			SendClientMessage(targetid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "AD: The advertisement by %s was denied by %s for: %s",giveplayer, sendername, reason);
			SendAdminMessage(COLOR_LIGHTBLUE,string);
      		SetPVarInt(targetid, "Ad", 0);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
ALTCOMMAND:np->newspaper;
COMMAND:newspaper(playerid, params[])
{
    new amount = 0;
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    for(new i = 0; i < 10; i++)
    {
		if(Ad[i] == 1)
		{
		    amount++;
			if(amount == 1) { SendClientMessage(playerid,COLOR_WHITE,"|_____ Newspaper Ads _____|"); }
		    SendClientMessage(playerid,COLOR_ERROR,AdT[i]);
		}
	}
	if(amount == 0) return SendClientMessage(playerid,COLOR_ERROR,"There is no information on the news paper.");
	SendClientMessage(playerid,COLOR_WHITE,"|_________________________|");
	return 1;
}
//============================================//
COMMAND:floor(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(IsPlayerInRangeOfPoint(playerid,2.0,2038.4750,-1365.0499,1271.5000) || IsPlayerInRangeOfPoint(playerid,2.0,2055.4756,-673.1822,1478.8860) || IsPlayerInRangeOfPoint(playerid,2.0,1994.9702,-1534.0613,1174.6000))
    {
        ShowPlayerDialogEx(playerid,54,DIALOG_STYLE_LIST,"Hosptial Floors","Main Floor\nSecond Floor\nThird Floor","Select", "");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1132.5594, -1345.9895, 13.9910))
    {
        ShowPlayerDialogEx(playerid, DIALOG_LSFD_GROUND_ELEVATOR, DIALOG_STYLE_LIST, "Hospital Elevator", "Helipad", "Select", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1129.6824, -1345.8639, 20.3343))
	{
		ShowPlayerDialogEx(playerid, DIALOG_LSFD_HELIPAD_ELEVATOR, DIALOG_STYLE_LIST, "Hospital Elevator", "Ground", "Select", "Cancel");
	}
    else SendClientMessage(playerid, COLOR_ERROR, "You are not around the hospital!");
	return 1;
}
//============================================//

COMMAND:bizcreate(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new houseid, price, Float:X, Float:Y, Float:Z, UID, text[128], biname[50], msg[256], query[500];
	if(sscanf(params,"iis[50]", houseid, price, biname)) return usage(playerid, "USAGE: /bizcreate [type] [value] [name] (check /biztypes for a list of business types)");
	if(houseid < 0 || houseid > sizeof(BizCoordinates)) return error(playerid, "Invalid business type.");
	new found = 0;
	for(new i = 1; i < MAX_BUSINESSES; i++)
	{
		if(BizInfo[i][ID] == 0 && found == 0)
		{
		    found++;
		    UID = i;
			format(text, sizeof(text), "Business ID is %d.", UID);
			SendClientMessage(playerid, -1, text);
		}
	}
	BizInfo[UID][ID] = UID;
	BizInfo[UID][Value] = price;
	format(BizInfo[UID][Name], 40, "%s", biname);
	format(BizInfo[UID][Owner],11, "For Sale");
	format(BizInfo[UID][Slogan], 20, "Default Slogan");
	BizInfo[UID][IntOut] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, X, Y, Z);
	BizInfo[UID][Xo] = X;
	BizInfo[UID][Yo] = Y;
	BizInfo[UID][Zo] = Z;
	BizInfo[UID][Products] = 50;
	BizInfo[UID][Icon] = CreateDynamicPickup(1272, 1, BizInfo[UID][Xo], BizInfo[UID][Yo], BizInfo[UID][Zo]);
	BizInfo[UID][Xi] = BizCoordinates[houseid][bbX];
	BizInfo[UID][Yi] = BizCoordinates[houseid][bbY];
	BizInfo[UID][Zi] = BizCoordinates[houseid][bbZ];
	BizInfo[UID][IntIn] = BizCoordinates[houseid][BizInt];
	BizInfo[UID][VwIn] = MAX_INTS + MAX_HOUSES + UID;
	
	format(msg, sizeof(msg), "%s",BizInfo[UID][Name]);
	BizInfo[UID][Text] = CreateDynamic3DTextLabel(msg, COLOR_WHITE, BizInfo[UID][Xo], BizInfo[UID][Yo], BizInfo[UID][Zo] + 0.5, 20.0);

	format(msg, 128, "INFO: Business (%d) has been created.", UID);
	SCM(playerid, -1, msg);
	mysql_format(handlesql, query, sizeof(query), "INSERT INTO `businesses` (`ID`, `Xo`, `Yo`, `Zo`, `Xi`, `Yi`, `Zi`, `IntIn`, `IntOut`, `Owned`, `Owner`, `Value`, `Locked`, `Slogan`, `Products`, `EnterPrice`, `Name`) VALUES (%d,%f,%f,%f,%f,%f,%f,%d,%d,%d,'%e',%d,%d,'%e',%d,%d,'%e')",
	UID, X, Y, Z, BizInfo[UID][Xi],BizInfo[UID][Yi],BizInfo[UID][Zi],BizInfo[UID][IntIn],BizInfo[UID][IntOut],BizInfo[UID][Owned],BizInfo[UID][Owner],
	BizInfo[UID][Value],BizInfo[UID][Locked],BizInfo[UID][Slogan],BizInfo[UID][Products],BizInfo[UID][EnterPrice],BizInfo[UID][Name]);
	mysql_pquery(handlesql, query);

	Iter_Add(BizIterator, UID);
	return 1;
}

COMMAND:bizremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /bizremove [businessid]");

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM `businesses` WHERE `ID`=%i", BizInfo[id][ID]);
	mysql_pquery(handlesql, query);

	DestroyDynamicPickup(BizInfo[id][Icon]);
	DestroyDynamic3DTextLabel(BizInfo[id][Text]);
	DestroyDynamicCP(BizInfo[id][bCP]);
	DestroyDynamicCP(BizInfo[id][bbdoIcon]);
	DestroyDynamicCP(BizInfo[id][bbdiIcon]);

	BizInfo[id][ID] = 0;

	BizInfo[id][Xo] = 0;
	BizInfo[id][Yo] = 0;
	BizInfo[id][Zo] = 0;
	BizInfo[id][Xi] = 0;
	BizInfo[id][Yi] = 0;
	BizInfo[id][Zi] = 0;

	BizInfo[id][bbdXo] = 0;
	BizInfo[id][bbdYo] = 0;
	BizInfo[id][bbdZo] = 0;
	BizInfo[id][bbdXi] = 0;
	BizInfo[id][bbdYi] = 0;
	BizInfo[id][bbdZi] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "Business removed.");

	Iter_Remove(BizIterator, id);
	return 1;
}

//============================================//
COMMAND:biztypes(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);
	new msg[128];
	SCM(playerid, -1, "_________________________________________________________________");
	for(new i=0; i < sizeof(BizCoordinates); i++)
	{
	    format(msg, sizeof(msg), "ID (%d) - Name (%s)", i, BizCoordinates[i][BizName]);
		SCM(playerid, -1, msg);
	}
	return 1;
}
//============================================//
COMMAND:mic(playerid, params[])
{
	new text[128],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /mic [Message]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a business.");
	    new key = GetPVarInt(playerid, "BizKey");
		if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
		{
   		    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      		GiveNameSpace(sendername);
	    	if(IsPlayerInRangeOfPoint(playerid,30.0,BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi]))
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == BizInfo[key][VwIn])
	    	    {
            		foreach (Player,p)
					{
                		if(IsPlayerInRangeOfPoint(p,30.0,BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi]))
                		{
							if(GetPlayerVirtualWorld(p) == BizInfo[key][VwIn])
							{
						    	format(string, sizeof(string), "[Microphone %s:o< %s]", sendername, text);
				        		SendClientMessage(p, COLOR_YELLOW, string);
				    		}
						}
		    		}
		    	}
	    	}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:biz(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	new string[128], param[64], amount, amount2, sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[64]I(-1)I(-1)", param, amount, amount2))
	{
		scm(playerid, COLOR_ERROR, "USAGE: /biz [usage]");
		scm(playerid, COLOR_ERROR, "Stats | Lock | Sell | Name | Slogan | Fee");
		scm(playerid, COLOR_ERROR, "Bank | Deposit | Withdraw | Radio | Sellto");
		scm(playerid, COLOR_ERROR, "Request | Plant | Edit | Removeall | Upgrade");
		scm(playerid, COLOR_ERROR, "Rights | CP | Type | Bareswitch | Autolow");
		scm(playerid, COLOR_ERROR, "Backdoor | Sprunk | Actor | Select");
	    return 1;
	}
	/*new id = GetPVarInt(playerid, "BizKey");
	if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");*/
  	if(strcmp(param, "lock", true) == 0)
  	{
		new id = GetPlayerNearBusiness(playerid);

		if(GetPVarInt(playerid, "BizKey") != id && DoesPlayerHaveBusinessKey(playerid, id) == 0) return
			SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this business.");

		if(BizInfo[id][Locked] == 1) //Locked
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	 		GameTextForPlayer(playerid, "~w~Business~n~~g~Unlocked", 4000, 3);
	 		BizInfo[id][Locked] = 0;
		}
		else //Unlocked
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	  		GameTextForPlayer(playerid, "~w~Business~n~~r~Locked", 4000, 3);
	  		BizInfo[id][Locked] = 1;
		}
		SaveBizID(id);
		return 1;
	}
	else if(strcmp(param, "sell", true) == 0)
  	{
		if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");
		new id = GetPVarInt(playerid, "BizKey");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo])) return error(playerid, "You are not near your business door.");
		if(strcmp(BizInfo[GetPVarInt(playerid, "BizKey")][Owner], PlayerInfo[playerid][pUsername], true) == 0)
		{
		    format(string, sizeof(string), "Would you like to sell your business?\nValue: %s - Earn: %s", FormatMoney(BizInfo[id][Value]), FormatMoney(BizInfo[id][Value] / 2));
	        ShowPlayerDialogEx(playerid, 428, DIALOG_STYLE_MSGBOX, "Sell Business", string, "Sell", "Cancel");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
		return 1;
	}
	else if(strcmp(param, "name", true) == 0)
	{
	    if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");
	    if(strcmp(BizInfo[GetPVarInt(playerid, "BizKey")][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        ShowPlayerDialogEx(playerid, 303, DIALOG_STYLE_INPUT, "Business", "Insert your business name (20 chars max.)", "Submit","Cancel");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
	}
	else if(strcmp(param, "slogan", true) == 0)
	{
	    if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");
	    if(strcmp(BizInfo[GetPVarInt(playerid, "BizKey")][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        ShowPlayerDialogEx(playerid, 301, DIALOG_STYLE_INPUT, "Business", "Insert your business slogan (80 chars max.)", "Submit","Cancel");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
	}
	else if(strcmp(param, "fee", true) == 0)
	{
	    if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");
	    if(strcmp(BizInfo[GetPVarInt(playerid, "BizKey")][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        ShowPlayerDialogEx(playerid, 302, DIALOG_STYLE_INPUT, "Business", "Insert your business enter-fee (1 - 100)", "Submit","Cancel");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
	}
    else if(strcmp(param, "bank", true) == 0)
  	{
		new id = GetPVarInt(playerid, "BizEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
		{
		    if(GetCloseBizSafe(playerid, id))
			{
		        new msg[128];
		        format(msg, sizeof(msg), "INFO: %s (Bank: %s)", BizInfo[id][Name], FormatMoney(BizInfo[id][Bank]));
		        SCM(playerid, -1, msg);
		        SaveBizID(id);
		    } else {
			    error(playerid, "You are not near a opened business safe."); }
		}
		return 1;
	}
	else if(strcmp(param, "deposit", true) == 0)
  	{
		new id = GetPVarInt(playerid, "BizEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
		{
		    if(GetCloseBizSafe(playerid, id))
			{
		        if(amount == (-1)) return scm(playerid, COLOR_GREEN, "USAGE: /biz deposit {FFFFFF} [amount]");
		        if(amount <= 0) return scm(playerid, COLOR_GREEN, "USAGE: /biz deposit {FFFFFF} [amount]");
		        if(amount >= 99999999) return scm(playerid, COLOR_GREEN, "USAGE: /biz deposit {FFFFFF} [amount]");
		        if(GetPlayerMoneyEx(playerid) >= amount)
		        {
		            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		            GiveNameSpace(sendername);
    	            format(string, sizeof(string), "* %s stored %s in the business safe.", sendername, FormatMoney(amount));
    	            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		            GivePlayerMoneyEx(playerid, -amount);
			        BizInfo[id][Bank]+=amount;
			        
			        SaveBizID(id);

			        format(string, 128, "%s stored %s into business %d's bank!", PlayerInfo[playerid][pUsername], FormatMoney(amount), id);
			        SafeLog(string);
			    }
			    else scm(playerid, COLOR_ERROR, "You don't have this much cash on you!");
			} else {
			    error(playerid, "You are not near a opened business safe."); }
		}
		return 1;
	}
	else if(strcmp(param, "withdraw", true) == 0)
  	{
		new id = GetPVarInt(playerid, "BizEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
		{
		    if(GetCloseBizSafe(playerid, id))
			{
		        if(amount == (-1)) return scm(playerid, COLOR_GREEN, "USAGE: /biz withdraw {FFFFFF} [amount]");
		        if(amount <= 0) return scm(playerid, COLOR_GREEN, "USAGE: /biz withdraw {FFFFFF} [amount]");
		        if(amount >= 99999999) return scm(playerid, COLOR_GREEN, "USAGE: /biz withdraw {FFFFFF} [amount]");
		        if(BizInfo[id][Bank] <= 0) return scm(playerid, COLOR_ERROR, "There is no cash in the business bank.");
		        if(BizInfo[id][Bank] >= amount)
		        {
			        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		            GiveNameSpace(sendername);
    	            format(string, sizeof(string), "* %s took %s from the business safe.", sendername, FormatMoney(amount));
    	            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
			        GivePlayerMoneyEx(playerid, amount);
			        BizInfo[id][Bank]-=amount;
			        
			        SaveBizID(id);

			        format(string, 128, "%s took %s from business %d's bank!", PlayerInfo[playerid][pUsername], FormatMoney(amount), id);
			        SafeLog(string);
			    }
			    else scm(playerid, COLOR_ERROR, "Insufficient amount!");
		    } else {
			    error(playerid, "You are not near a opened business safe."); }
		}
		return 1;
	}
	else if(strcmp(param, "radio", true) == 0)
   	{
		if(!DoesPlayerHaveBusinessKey(playerid, GetPVarInt(playerid, "BizEnter"))) return
			SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this business.");

   	    if (GetPVarInt(playerid, "BizEnter") == GetPVarInt(playerid, "BizKey"))
   	    {
   	        if(BizInfo[GetPVarInt(playerid, "BizKey")][Basic] == 0) return scm(playerid, COLOR_ERROR, "You need basic essentials upgrade before using the radio!");
   	        ShowPlayerDialogEx(playerid,55,DIALOG_STYLE_LIST,"Business Radio","Radio Stations\nDirect URL\nTurn Off","Select", "Exit");
   	    }
   	    else SendClientMessage(playerid,COLOR_ERROR,"You are not inside your business.");
   	}
   	else if(strcmp(param, "sellto", true) == 0)
    {
        if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
        if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a businesss.");
	    new key = GetPVarInt(playerid, "BizKey");
	    if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(BizInfo[key][Value] <= 9999) return SendClientMessage(playerid, COLOR_ERROR, "You can't sell a donate business.");
	        if(amount == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /biz sellto {FFFFFF}[playerid] [amount]");
	        if(amount2 == (-1)) return SendClientMessage(playerid, COLOR_GREEN, "USAGE: /biz sellto {FFFFFF}[playerid] [amount]");
	        if(amount2 < 1 || amount2 > 2500000)
	        {
				SendClientMessage(playerid, COLOR_ERROR, "Cannot go under $1 or above $2,500,000.");
				return true;
			}
	        if (!IsPlayerConnected(amount)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	        if(PlayerToPlayer(playerid,amount,5.0))
	        {
			    if(GetPVarInt(amount, "BizKey") != 0) SendClientMessage(playerid, COLOR_ERROR, "This player currently already owns a business.");
	            format(string, sizeof(string),"You offered %s to purchase your business for %s.", PlayerInfo[amount][pName], FormatMoney(amount2));
				SendClientMessage(playerid,COLOR_ERROR,string);
				format(string, sizeof(string),"%s offered you to purchase his business for %s (/accept bsellto).", PlayerInfo[playerid][pName], FormatMoney(amount2));
				SendClientMessage(amount,COLOR_ERROR,string);
				SetPVarInt(amount, "BizOffer", playerid);
				SetPVarInt(amount, "BizOfferPrice", amount2);
	        }
	        else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "request", true) == 0)
    {
        if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a business.");
	    new key = GetPVarInt(playerid, "BizKey"), bizp = 1000;
	    switch(BizInfo[key][Stor])
	    {
	        case 1: bizp = 2000;
	        case 2: bizp = 3500;
	        case 3: bizp = 5000;
	    }
	    if(BizInfo[key][bProd] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "You still have product(s) in your business!");
	    if(BizInfo[key][bReq] != 0) return SendClientMessage(playerid, COLOR_ERROR, "Your request is still pending!");
	    if(GetPlayerMoneyEx(playerid) >= bizp)
	    {
			GivePlayerMoneyEx(playerid, -bizp);
			PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		    format(string, sizeof(string),"~r~-%s", FormatMoney(bizp));
		    GameTextForPlayer(playerid, string, 5000, 1);
	        BizInfo[key][bReq]=1;
	        SendClientMessage(playerid, COLOR_WHITE, "You have requested products for your business!");
	        SendClientMessage(playerid, COLOR_WHITE, "All truckers online have been informed.");
	        format(string, sizeof(string), "The '%s' is requesting products!", BizInfo[key][Name]);
		    SendJobMessageEx(6,COLOR_LIGHTBLUE,string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
    }
    else if(strcmp(param, "plant", true) == 0)
	{
		if(GetPVarInt(playerid, "Mute") == 1) return 1;

	    new allow = FurnRight(playerid, 2);
	    if(allow > 0)
	    {
	        if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && amount == -1)
	        {
	        	if(outdoor_furn == 0)
	        	{
	        		SendClientMessage(playerid, COLOR_ERROR, "This feature has been temporarily disabled.");
	        		return 1;
	        	}

		    	if(GetBizOutdoorObjects(allow) >= BUSINESS_OUTDOOR_OBJECTS)
		    	{
		    		scm(playerid, COLOR_ERROR, "You can only plant up to 20 objects outdoors.");
		    		return 1;
		    	}

		    	ShowModelSelectionMenuEx(playerid, OutdoorFurnObjs, sizeof(OutdoorFurnObjs), "Furniture List", 8, 16.0, 0.0, -55.0);
		    	return 1;
		    }
	        if(amount == (-1))
		    {
                ShowModelSelectionMenuEx(playerid, FurnObjs, sizeof(FurnObjs), "Furniture List", 8, 16.0, 0.0, -55.0);
            }
            else
            {
                if(IsInvalidObjectID(amount)) return scm(playerid, COLOR_ERROR, "Invalid Object ID!");
                new found = 0, foundid;
                for(new i = 0; i < MAX_OBJECT_ARRAY; i++)
                {
					if(found == 0)
					{
                        if(ObjectList[i][oID] == amount)
                        {
                            found++;
                            foundid=i;
                        }
                    }
                }
                if(found == 0) return scm(playerid, COLOR_ERROR, "Invalid Object ID!");
                new Float:X, Float:Y, Float:Z, obj = 0;
		        GetPlayerPos(playerid, X, Y, Z);
		        obj = CreatePlayerObject(playerid, amount, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		        SetPVarInt(playerid, "FurnObject", obj);
		        SetPVarInt(playerid, "EditorMode", 3);
		        PlayerInfo[playerid][pFurnID]=amount;
		        EditPlayerObject(playerid, obj);
		        format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", ObjectList[foundid][oName]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        AddPlayerTag(playerid, "(planting furniture)");
            }
	    }
	}
	else if(strcmp(param, "edit", true) == 0)
	{
	    new allow = FurnRight(playerid, 2);
	    if(allow > 0) {
		GetCloseBizObject(playerid, FurnRight(playerid, 2)); }
	}
	else if(strcmp(param, "select", true) == 0)
	{
	    new allow = FurnRight(playerid, 2);
	    if(allow > 0)
	    {
			SelectObject(playerid);

			Streamer_ToggleItem(playerid, 2, BizInfo[allow][bbdoIcon], false);
			Streamer_ToggleItem(playerid, 2, BizInfo[allow][bbdiIcon], false);
			Streamer_ToggleItem(playerid, 2, BizInfo[allow][bCP], false);
			Streamer_Update(playerid, 2);
		}
	}
	else if(strcmp(param, "removeall", true) == 0)
	{
		if(GetPVarInt(playerid, "BizEnter") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not inside of a business.");

	    if(FurnRight(playerid, 2) != -1)
		{
			ShowPlayerDialogEx(playerid, DIALOG_BIZ_REMOVEALL, DIALOG_STYLE_MSGBOX, "Remove all furniture objects", "Are you sure you want to remove all of your current business furniture objects?", "Yes", "No");
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERROR, "You do not have the permission to do this in this business.");
		}
	}
	else if(strcmp(param, "stats", true) == 0)
	{
	    if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a business.");
	    new key = GetPVarInt(playerid, "BizKey");
        if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        SendClientMessage(playerid, -1, "_____________________________________________________");
            format(string, sizeof(string), "                               {3366FF}%s", BizInfo[key][Name]);
            SendClientMessage(playerid, -1, string);
            format(string, sizeof(string), "Locked: %d | Value: %s | Entrance-Fee: %d/50", BizInfo[key][Locked], FormatMoney(BizInfo[key][Value]), BizInfo[key][EnterPrice]);
            SendClientMessage(playerid, -1, string);
            new value = 150;
            switch(BizInfo[key][Stor])
            {
                case 1: value = 250;
                case 2: value = 500;
                case 3: value = 1000;
            }
            format(string, sizeof(string), "Products: %d/%d | Basic Upgrade: %d/1 | Bank: %s", BizInfo[key][bProd], value, BizInfo[key][Basic], FormatMoney(BizInfo[key][Bank]));
            SendClientMessage(playerid, -1, string);
            new fcount;
            for(new h = 0; h < MAX_HOUSE_OBJ; h++) {
                if(BizInfo[key][boID][h] > 0) {
                    fcount++;
                }
            }
            format(string, sizeof(string), "Sprunk Upgrade: %d | Furniture: %d/%d", BizInfo[key][Sprunk], fcount, MAX_HOUSE_OBJ);
            SendClientMessage(playerid, -1, string);
		    SendClientMessage(playerid, -1, "_____________________________________________________");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
	}
	else if(strcmp(param, "upgrade", true) == 0)
    {
        if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
	    new key = GetPVarInt(playerid, "BizKey");
	    if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        ShowPlayerDialogEx(playerid, 441, DIALOG_STYLE_LIST, "Business Upgrades", "Basic Essentials\nStorage", "Select", "Close");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "exit", true) == 0)
	{
	    if(GetPlayerInterior(playerid) == 0) return 1;
	    new allow = FurnRight(playerid, 2);
	    if(allow > 0)
		{
		    if(BizInfo[FurnRight(playerid, 2)][UD] >= 4) {
                scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse."); return 1; }
		    ShowPlayerDialogEx(playerid, 446, DIALOG_STYLE_MSGBOX, "Business Exit", "Would you like to move the business exit? {FFFFFF}Cost: $1,500\n{CC0000}Abusing this command will result in a permanent ban!", "Continue", "Cancel");
		}
	}
	else if(strcmp(param, "cp", true) == 0)
	{
	    new allow = FurnRight(playerid, 2);
	    if(allow > 0)
		{
		    if(BizInfo[FurnRight(playerid, 2)][UD] >= 4) {
                scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse."); return 1; }
		    ShowPlayerDialogEx(playerid, 447, DIALOG_STYLE_MSGBOX, "Business Checkpoint", "Would you like to move the business checkpoint? {FFFFFF}Cost: $1,500\n{CC0000}Abusing this command will result in a permanent ban!", "Continue", "Cancel");
		}
	}
	else if(strcmp(param, "bareswitch", true) == 0)
	{
	    new key = GetPVarInt(playerid, "BizKey");
	    if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");
	    if(BizInfo[key][UD] >= 4)
        {
            scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse.");
            return 1;
        }
	    if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
			if(GetPlayerMoneyEx(playerid) >= 2500)
			{
		    	scm(playerid, -1, "Business Interior has been bare switched.");
		    	scm(playerid, COLOR_ERROR, "Note: When building a interior use /biz exit to set the door exit.");
		    	scm(playerid, COLOR_ERROR, "Use /biz cp to set the checkpoint to purchase items.");
		    	BizInfo[key][Xi] = 1412.639892;
				BizInfo[key][Yi] = -1.787510;
				BizInfo[key][Zi] = 1000.924377;
				BizInfo[key][IntIn] = 1;
				BizInfo[key][UD]++;
				GivePlayerMoneyEx(playerid, -2500);
				GameTextForPlayer(playerid, "~r~-$2,500", 5000, 1);
				SaveBizID(key, 0);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
	}
	else if(strcmp(param, "type", true) == 0)
    {
        if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a businesss.");
	    new key = GetPVarInt(playerid, "BizKey");
	    if(BizInfo[key][UD] >= 4)
        {
            scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse.");
            return 1;
        }
	    if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(amount == (-1)) {
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /biz type {FFFFFF}[0-4]");
                SendClientMessage(playerid, COLOR_ERROR, "0: None | 1: Bar");
                SendClientMessage(playerid, COLOR_ERROR, "2: 24/7 | 3: Warehouse");
                SendClientMessage(playerid, COLOR_ERROR, "4: Gym");
                return 1;
			}
			if(amount < 0 || amount > 5) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 5.");
			format(string, 128, "Business Type set to %d.", amount);
			scm(playerid, -1, string);
			BizInfo[key][cT]=amount;
			scm(playerid, COLOR_ERROR, "This will only work when a custom CP position has been set!");
			BizInfo[key][UD]++;
			SaveBizID(key, 0);
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "rights", true) == 0)
    {
        if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a businesss.");
	    new key = GetPVarInt(playerid, "BizKey");
	    if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
	    {
	        if(amount == (-1)) {
			    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /biz rights {FFFFFF}[playerid]");
			    SendClientMessage(playerid, COLOR_ERROR, "If you select playerid as 501 the furn rights will disable.");
			    return 1;
			}
			if(amount == 501) {
			    strmid(BizInfo[key][FurnR], "None", 0, strlen("None"), 255);
			    scm(playerid, -1, "Business furnishing rights are disabled!");
			    SaveBizID(key, 0);
			    return true;
			}
	        if (!IsPlayerConnected(amount)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	        if(amount == playerid) return scm(playerid, COLOR_ERROR, "You can't give yourself furnishing rights!");
	        if(PlayerToPlayer(playerid,amount,5.0))
	        {
	            format(string, 128, "You have given %s permission to furnish your business!", PlayerInfo[amount][pUsername]);
	            scm(playerid, -1, string);
	            format(string, 128, "%s has given you permission to furnish their business!", PlayerInfo[playerid][pUsername]);
	            scm(amount, -1, string);
	            strmid(BizInfo[key][FurnR], PlayerInfo[amount][pUsername], 0, strlen(PlayerInfo[amount][pUsername]), 255);
	            SaveBizID(key, 0);
	        }
	        else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
	    }
	    else scm(playerid, COLOR_ERROR, "Insufficient permission!");
    }
    else if(strcmp(param, "autolow", true) == 0)
  	{
  	    if(GetPVarInt(playerid, "BizKey") == 0) return error(playerid, "You do not own a property.");
		if(BizInfo[GetPVarInt(playerid, "BizKey")][Low] == 1)
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	 		BizInfo[GetPVarInt(playerid, "BizKey")][Low] = 0;
	 		scm(playerid, -1, "Auto low disabled.");
		}
		else
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	  		BizInfo[GetPVarInt(playerid, "BizKey")][Low] = 1;
	  		scm(playerid, -1, "Auto low enabled.");
		}
		
		SaveBizID(GetPVarInt(playerid, "BizKey"));
		return 1;
	}
	else if(strcmp(param, "backdoor", true) == 0)
  	{
  		if(GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a business.");
  		new id = GetPVarInt(playerid, "BizKey");

  		if(BizInfo[id][bbdXo] == 0 && BizInfo[id][bbdYo] == 0 && BizInfo[id][bbdZo] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This business does not have a back door.");

  		if(GetPVarInt(playerid, "BizEnter") == id)
  		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

			BizInfo[id][bbdXi] = pos[0];
			BizInfo[id][bbdYi] = pos[1];
			BizInfo[id][bbdZi] = pos[2];

			DestroyDynamicCP(BizInfo[id][bbdiIcon]);
			BizInfo[id][bbdiIcon] = CreateDynamicCP(BizInfo[id][bbdXi], BizInfo[id][bbdYi], BizInfo[id][bbdZi], 1.5, BizInfo[id][VwIn], -1, -1, 5.0);

			SendClientMessage(playerid, COLOR_WHITE, "Backdoor set!");
			SaveBizID(id, 0);
  		}
  		else
  		{
  			SendClientMessage(playerid, COLOR_ERROR, "You are not inside of your business.");
  		}
  	}
	else if(strcmp(param, "safe", true) == 0)
  	{
		scm(playerid, COLOR_ERROR, "USAGE: Use the command (/safe)!");
		return 1;
	}
	else if(strcmp(param, "sprunk", true) == 0)
	{
		if(GetPlayerInterior(playerid) == 0) {
		    scm(playerid, COLOR_ERROR, "You must be indoors to use this command!");
			return 1;
		}
	    new allow = FurnRight(playerid, 2);
	    if(allow > 0)
		{
		    if(BizInfo[allow][UD] >= 4) {
                scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse.");
				return 1; }
			if(BizInfo[allow][Sprunk] == 0) {
		    ShowPlayerDialogEx(playerid, 518, DIALOG_STYLE_MSGBOX, "Business Sprunk", "Would you like to purchase a sprunk machine? {FFFFFF}Cost: $1,500\n{CC0000}Abusing this command will result in a permanent ban!", "Continue", "Cancel");
		    } else {
		        new Float:Pos[4];
		        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		        GetPlayerFacingAngle(playerid, Pos[3]);
		        BizInfo[allow][spX]=Pos[0];
		        BizInfo[allow][spY]=Pos[1];
		        BizInfo[allow][spZ]=Pos[2];
		        BizInfo[allow][spA]=Pos[3];
		        scm(playerid, -1, "Sprunk location changed.");
		    }
		}
	}
	else if(strcmp(param, "actor", true) == 0)
	{
	    if(GetPlayerInterior(playerid) == 0) {
		    scm(playerid, COLOR_ERROR, "You must be indoors to use this command!");
			return 1;
		}
		new allow = FurnRight(playerid, 2);
	    if(allow > 0)
		{
		    if(BizInfo[allow][UD] >= 4) {
                scm(playerid, COLOR_ERROR, "You cannot access this command for a few minutes to avoid abuse.");
				return 1; }
		    ShowPlayerDialogEx(playerid, 519, DIALOG_STYLE_INPUT, "Business Actor", "Would you like to purchase a NPC Actor? {FFFFFF}Cost: $1,500\n{CC0000}Abusing this command will result in a permanent ban!\n\nSELECT THE SKINID !", "Continue", "Cancel");
		}
	}
	else cmd_biz(playerid, "");
	return 1;
}
//============================================//
COMMAND:holdo(playerid, params[])
{
    if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_ITEM2))
    {
		SendClientMessage(playerid,COLOR_WHITE,"Object removed.");
	    return RemovePlayerAttachedObject(playerid,HOLDOBJECT_ITEM2);
	}
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if (GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if (GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if (GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Jailed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_ERROR, "You must be on foot to use this.");
    if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) return SendClientMessage(playerid, COLOR_ERROR, "You can't be on a cellphone while using this.");
	ShowPlayerDialogEx(playerid,64,DIALOG_STYLE_LIST,"Hold Object","{33FF66}Basketball\n{33FF66}Suitcase\n{33FF66}Money\n{33FF66}Pizza\n{33FF66}Burger\n{33FF66}Fishing Rod\n{33FF66}Pool Stick\n{33FF66}Fire Extinguisher\n{33FF66}Floppy Disk\n{33FF66}Radio\n{33FF66}Parrot\n{33FF66}Flashlight\n{33FF66}Screwdriver\n{33FF66}Hammer\n{33FF66}Rope\n{33FF66}Katana\n{33FF66}Chainsaw\n{33FF66}Wheelchair\n{33FF66}Crowbar\n{33FF66}Wrench","Select", "Exit");
	return 1;
}
//============================================//
COMMAND:objectoff(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    SendClientMessage(playerid,COLOR_WHITE,"Clothing objects removed.");
    RemovePlayerAttachedObject(playerid,HOLDOBJECT_CLOTH1);
    RemovePlayerAttachedObject(playerid,HOLDOBJECT_CLOTH2);
    RemovePlayerAttachedObject(playerid,HOLDOBJECT_CLOTH3);
    RemovePlayerAttachedObject(playerid,HOLDOBJECT_CLOTH4);
    RemovePlayerAttachedObject(playerid,HOLDOBJECT_ITEM);
    SetPVarInt(playerid, "ObjectSwitch", 0);
	return 1;
}
//============================================//
COMMAND:changephone(playerid, params[])
{
    new req;
    if(sscanf(params, "i", req)) return usage(playerid, "USAGE: /changephone [number]");
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "DonateRank") == 0) return SendClientMessage(playerid, COLOR_WHITE, "NO PERMISSION, DONATORS ONLY!");
    if(req <= 0) return true;
    new query[256];
    format(query, sizeof(query), "SELECT * FROM accounts WHERE PhoneNum=%d", req);
    mysql_function_query(handlesql, query, false, "CheckPhone", "ii", playerid, req);
	return 1;
}
//============================================//
COMMAND:acp(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /acp [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(GetPVarInt(targetid, "ReqNum") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player's request time has dropped or he never requested!");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		format(string, sizeof(string), "AdmCmd: %s has accepted %s's phonenumber change request.", sendername, giveplayer);
      		SendAdminMessage(COLOR_YELLOW,string);
      		format(string, sizeof(string), "You accepted %s's phone request.", giveplayer);
      		SendClientMessage(playerid,COLOR_SUCCESS,string);
      		format(string, sizeof(string), "Admin %s has accepted your phone request.", sendername);
      		SendClientMessage(targetid,COLOR_SUCCESS,string);
      		SetPVarInt(targetid, "PhoneNum", GetPVarInt(targetid, "ReqNum"));
      		SetPVarInt(targetid, "ReqAdmin", 0);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}
//============================================//
COMMAND:plantradio(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
    if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You can not place a radio in an interior.");

    if(GetPVarInt(playerid, "DonateRank") >= 4 || GetPVarInt(playerid, "Member") == FACTION_RLS)
    {
		new found = 0, string[128], Float:X, Float:Y, Float:Z, Float:A, id = 0;
        
        for(new i = 0; i < sizeof(RadioInfo); i++)
		{
			if(GetPlayerDistanceFromPoint(playerid, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ]) <= MAX_BOOM_BOX_RANGE)
		    {
		        found++;
		        break;
		    }
		}
		if(found != 0) return SendClientMessage(playerid, COLOR_ERROR,"There is already a radio nearby.");

		for(new i = 0; i < sizeof(RadioInfo); i++)
		{
		    if(RadioInfo[i][rX] == 0.0 && RadioInfo[i][rY] == 0.0 && RadioInfo[i][rZ] == 0.0)
		    {
		        id = i;
		    }
		}
		if(id == 0) return SendClientMessage(playerid, COLOR_ERROR, "All radio slots have been used up.");

		for(new i = 0; i<sizeof(RadioInfo); i++)
		{
            if(strcmp(RadioInfo[i][rOwner], PlayerInfo[playerid][pUsername], true) == 0)
		    {
		        SendClientMessage(playerid, COLOR_ERROR, "You already have a radio planted!");
		        return true;
		    }
		}

		GetPlayerPos(playerid,X,Y,Z);
		GetPlayerFacingAngle(playerid, A);

		if(GetPVarInt(playerid, "Member") == FACTION_RLS)
		{
			RadioInfo[id][rObject] = CreateDynamicObject(2103, X, Y, Z-1, 0.0, 0.0, A - 180, GetPlayerVirtualWorld(playerid));
			format(string, sizeof(string), " ");
			RadioInfo[id][rText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z - 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 10.0);
		}
		else
		{
			RadioInfo[id][rObject] = CreateDynamicObject(2103, X,Y,Z-1, 0.0, 0.0, A - 180, GetPlayerVirtualWorld(playerid));
			format(string, sizeof(string),"%s's Boom Box", PlayerInfo[playerid][pName]);
			RadioInfo[id][rText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z - 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 10.0);
		}

		RadioInfo[id][rX] = X;
		RadioInfo[id][rY] = Y;
		RadioInfo[id][rZ] = Z;
		RadioInfo[id][rStatus] = 0;
		strmid(RadioInfo[id][rOwner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
		strmid(RadioInfo[id][rURL], "NUll", 0, strlen("NULL"), 255);
		SetPVarInt(playerid, "RadioPlant", 0);
		SendClientMessage(playerid, COLOR_WHITE, "Radio planted. (/editradio)");
    }
    else SendClientMessage(playerid, COLOR_ERROR, "This is a donator-only command.");
	return 1;
}
//============================================//
COMMAND:editradio(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
	if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
    for(new i=0;i<sizeof(RadioInfo);i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ]))
		{
			if(strcmp(RadioInfo[i][rOwner], PlayerInfo[playerid][pUsername], true) == 0)
			{
			    ShowPlayerDialogEx(playerid, 58, DIALOG_STYLE_LIST, "Radio Options", "Radio Stations\nDirect URL\nYouTube URL\nToggle ON/OFF\nRemove", "Select", "Exit");
			    SetPVarInt(playerid, "RadioInfoID", i);
			    return true;
			}
	    }
	}
	return 1;
}
//============================================//
COMMAND:removeradio(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
	if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
    {
        for(new i=0;i<sizeof(RadioInfo);i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ]))
		    {
				SendClientMessage(playerid, COLOR_ERROR, "Radio removed!");
				if(RadioInfo[i][rStatus] != 0)
				{
				    foreach(new ia : Player)
				    {
				        if(IsPlayerInRangeOfPoint(ia, MAX_BOOM_BOX_RANGE, RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ]))
						{
					        StopAudioStreamForPlayerEx(ia);
				        }
				    }
				}
				RadioInfo[i][rX] = 0.0;
				RadioInfo[i][rY] = 0.0;
				RadioInfo[i][rZ] = 0.0;
				RadioInfo[i][rStatus] = 0;
				strmid(RadioInfo[i][rOwner], "None", 0, strlen("None"), 255);
				strmid(RadioInfo[i][rURL], "None", 0, strlen("None"), 255);
				if(IsValidDynamicObject(RadioInfo[i][rObject])) { DestroyDynamicObject(RadioInfo[i][rObject]); }
				RadioInfo[i][rObject]=0;
				DestroyDynamic3DTextLabel(RadioInfo[i][rText]);
				return 1;
		    }
		}
    }
	return 1;
}
//============================================//
COMMAND:removetag(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
	if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Member") == FACTION_LSPD)
    {
        for(new i = 0;i < sizeof(TagInfo); i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid,5.0, TagInfo[i][tX], TagInfo[i][tY], TagInfo[i][tZ]))
		    {
				if(TagInfo[i][tUsed] > 0)
				{
					format(string, 128, "Tag removed, owner: %s.", TagInfo[i][tOwner]);
                    SendClientMessage(playerid, COLOR_ERROR, string);
		            TagInfo[i][tUsed] = 0;
		            strmid(TagInfo[i][tOwner], "None", 0, strlen("None"), 255);
		            DestroyDynamicObject(TagInfo[i][tID]);
		            TagInfo[i][tID]=0;
				    return true;
				}
		    }
		}
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:unwrap(playerid, params[])
{
	new string[128], found = 0;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
	if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
    for(new i=0;i<sizeof(PresInfo);i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0, PresInfo[i][pcX], PresInfo[i][pcY], PresInfo[i][pcZ]))
		{
		    if(PresInfo[i][pUsed] > 0)
			{
			    switch(PresInfo[i][pType])
			    {
			        case 1:
			        {
			            string="Merry Christmas! You were given a free name change ticket!";
			            SetPVarInt(playerid, "Changes", GetPVarInt(playerid, "Changes")+1);
			        }
			        case 2:
			        {
			            string="Merry Christmas! You were given a free car ticket!";
			            SetPVarInt(playerid, "CarTicket", GetPVarInt(playerid, "CarTicket")+1);
			        }
			        case 3:
			        {
			            string="Merry Christmas! You were given +10 TLS!";
			            SetPVarInt(playerid, "ConnectTime", GetPVarInt(playerid, "ConnectTime")+10);
			            SetPlayerScore(playerid, GetPVarInt(playerid, "ConnectTime"));
			        }
			        default:
			        {
			            string="Merry Christmas! You were given $5,000!";
			            GivePlayerMoneyEx(playerid, 5000);
			        }
			    }
                SendClientMessage(playerid, COLOR_ERROR, string);
		        PresInfo[i][pUsed] = 0;
		        DestroyDynamicObject(PresInfo[i][pID]);
		        DestroyDynamic3DTextLabel(PresInfo[i][pText]);
		        PresInfo[i][pID]=0;
		        found++;
		        format(string, sizeof(string), "AdmWarn: %s has found a present.", PlayerInfo[playerid][pName]);
				SendAdminMessage(COLOR_YELLOW,string);
		    }
	    }
	}
	if(found == 0) scm(playerid, COLOR_ERROR, "You are not around any presents!");
	return 1;
}
//============================================//
COMMAND:removepresent(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
	if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
    {
        for(new i=0;i<sizeof(PresInfo);i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid,5.0, PresInfo[i][pcX], PresInfo[i][pcY], PresInfo[i][pcZ]))
		    {
				if(PresInfo[i][pUsed] > 0)
				{
                    SendClientMessage(playerid, COLOR_ERROR, "Present removed!");
		            PresInfo[i][pUsed] = 0;
		            DestroyDynamicObject(PresInfo[i][pID]);
		            DestroyDynamic3DTextLabel(PresInfo[i][pText]);
		            PresInfo[i][pID]=0;
				    return true;
				}
		    }
		}
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:removepresentall(playerid, params[])
{
	new found = 0;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in to use this.");
	if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be outside to use this.");
    if(GetPVarInt(playerid, "Admin") >= 1)
    {
        for(new i=0;i<sizeof(PresInfo);i++)
		{
		    if(PresInfo[i][pUsed] > 0)
			{
		        PresInfo[i][pUsed] = 0;
		        DestroyDynamicObject(PresInfo[i][pID]);
		        DestroyDynamic3DTextLabel(PresInfo[i][pText]);
		        PresInfo[i][pID]=0;
		        found++;
		    }
		}
    }
    if(found > 0) SendClientMessage(playerid, COLOR_ERROR, "All presents removed!");
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	return 1;
}
//============================================//
COMMAND:ban(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new user,
	    reason[MAX_DOUBLE_MSG_LENGTH];

	if(sscanf(params, "us[128]", user, reason)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ban [PlayerID/Name] [Reason]");
	if(!IsPlayerConnected(user)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
 	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	format(reason, sizeof(reason), "AdmCmd: %s was banned by Admin %s. (Reason: %s)", PlayerInfo[user][pName], AdminName(playerid), reason);
	SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, reason);
	BanPlayer(user, reason, AdminName(playerid));

	new playersip[32];
	GetPlayerIp(user,playersip,sizeof(playersip));

	format(reason, sizeof(reason), "Player: %s - ID: %d - TLS: %d - IP: %s", PlayerInfo[user][pName], user, GetPVarInt(user, "ConnectTime"), playersip);
	SendClientMessage(playerid, COLOR_ERROR, reason);
	return 1;
}

COMMAND:tempban(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new user,
		days,
	    reason[MAX_DOUBLE_MSG_LENGTH];

	if(sscanf(params, "uis[128]", user, days, reason)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /tempban [playerid] [days] [reason]");
	if(!IsPlayerConnected(user)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
 	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
 	if(days < 1 || days > 7) return SendClientMessage(playerid, COLOR_ERROR, "You can only ban a player for 1-7 days.");
	format(reason, sizeof(reason), "AdmCmd: %s was temporarily banned by Admin %s. (Reason: %s)", PlayerInfo[user][pName], AdminName(playerid), reason);
	SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, reason);
	BanPlayer(user, reason, AdminName(playerid), days);
	return 1;
}

COMMAND:unban(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unban [Firstname_Lastname]");
	
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM bans WHERE bUsername='%e'", name);
	mysql_pquery(handlesql, query, "CheckUnban", "i", playerid);
	return 1;
}

ALTCOMMAND:ajail->adminjail;
COMMAND:adminjail(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new user,
		time,
		reason[128];

	if(sscanf(params, "uis[128]", user, time, reason)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ajail [Player ID/Name] [Minutes] [Reason]");
	if(!IsPlayerConnected(user)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
 	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	if(time < 1) return SendClientMessage(playerid, COLOR_ERROR, "You cannot jail a player for less than one minute.");
	new date[3],
	    query[315];

	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM logs_adminjails WHERE Name='%e'", PlayerInfo[user][pUsername]);
	mysql_pquery(handlesql, query, "CheckAdminJails", "i", playerid);

	// Set IG Data
	SetPlayerPosEx(user, -1406.7714, 1245.1904, 1029.8984);
	SetPlayerFacingAngle(user, 177.0008);
	SetPlayerInterior(user, 16);
	SetPlayerVirtualWorld(user, user + 1);
	SetPVarInt(user, "Jailed", 1);
	SetPVarInt(user, "JailTime", time * 60);
	SetPVarInt(user, "Mute", 1);

	// Log Administrative Jail in Database
	getdate(date[0], date[1], date[2]);
	format(query, sizeof(query), "%d-%d-%d", date[0], date[1], date[2]);
	mysql_format(handlesql, query, sizeof(query), "INSERT INTO `logs_adminjails`(`Name`, `Admin`, `Reason`, `Minutes`, `Date`) VALUES ('%e','%e','%e',%i,'%e');", PlayerInfo[user][pUsername], AdminName(playerid), reason, time, query);
	mysql_pquery(handlesql, query);

	// Message Players
	format(query, sizeof(query), "AdmCmd: %s was jailed by Admin %s. (Reason: %s)", PlayerInfo[user][pName], AdminName(playerid), reason);
	SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, query);
	format(query, sizeof(query),"[JAILED] You have been jailed for %d minutes.", time);
	SendClientMessage(user, COLOR_ERROR, query);

	// Show IP
	new playersip[32];
	GetPlayerIp(user,playersip,sizeof(playersip));

	format(query, sizeof(query), "Player: %s - ID: %d - TLS: %d - IP: %s", PlayerInfo[user][pName], user, GetPVarInt(user, "ConnectTime"), playersip);
	SendClientMessage(playerid, COLOR_ERROR, query);
	return 1;
}

COMMAND:unjail(playerid, params[]) {
    if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new user,
		reason[MAX_DOUBLE_MSG_LENGTH];

    if(sscanf(params, "us[128]", user, reason)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /unjail [playerid] [reason]");
	if(!IsPlayerConnected(user)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
 	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	format(reason, sizeof(reason), "AdmCmd: %s was unjailed by Admin %s. (Reason: %s)", PlayerInfo[user][pName], AdminName(playerid), reason);
	SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, reason);
	SetPVarInt(user, "Jailed", 2);
	SetPVarInt(user, "JailTime", 1);
    SetPVarInt(user, "Jails", GetPVarInt(user, "Jails") - 1);
    format(PlayerInfo[playerid][pJailedUntil], 64, "None");
	return 1;
}

//============================================//
COMMAND:engine(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return true;
	    new idcar = GetPlayerVehicleID(playerid), Float:ghealth, key = idcar, price, string[128];
	    switch(VehicleInfo[idcar][vEngine])
	    {
	        case 0:
	        {
	            GetVehicleHealth(idcar, ghealth);
	            if(ghealth <= 301.0)
		        {
		            //RemovePlayerFromVehicleEx(playerid);
				    SendClientMessage(playerid,COLOR_ERROR,"The vehicle is currently damaged!");
				    return true;
		        }
		        if(VehicleInfo[idcar][vFuel] <= 0)
		        {
		            //RemovePlayerFromVehicleEx(playerid);
				    SendClientMessage(playerid,COLOR_ERROR,"The vehicle has no fuel!");
				    return true;
		        }
		        if(VehicleInfo[idcar][vType] == VEHICLE_PERSONAL)
		        {
					new vehicleID = -1;

					foreach(new i : VehicleIterator)
					{
						if(DoesPlayerHaveVehicleKey(playerid, VehicleInfo[idcar][vID]))
						{
							vehicleID = i;
						}
					}

					for(new i = 0; i < PlayerSpawnedVehicles(playerid); i++)
					{
						new veh = GetSpawnedVehicle(playerid, i);
						if(GetPlayerVehicleID(playerid) == veh)
						{
							vehicleID = veh;
						}
					}

                    if(vehicleID == -1)
                    {
                    	SendClientMessage(playerid, COLOR_ERROR, "You don't have the key for this vehicle.");
						return true;
					}
				}
				if(GetPVarInt(playerid, "RefillAM") > 0)
		        {
		            //RemovePlayerFromVehicleEx(playerid);
				    SendClientMessage(playerid,COLOR_ERROR,"You can't turn the vehicles engine on while refueling!");
				    return true;
		        }
				if(GetPVarInt(playerid, "EngAmpt") != 0) return true;
				if(ghealth <= 300.0)
                {
   	                price = 500;
					if(VehicleInfo[key][vInsurance] > 0 && VehicleInfo[key][vInsuranceC] < 250) price = 0;
					if(GetPlayerMoneyEx(playerid) >= price)
					{
					    GivePlayerMoneyEx(playerid,-price);
					    format(string, sizeof(string),"-%s was taken to repair your vehicle's engine!", FormatMoney(price));
					    SendClientMessage(playerid,COLOR_WHITE,string);
					    VehicleInfo[key][vHealth] = 1000.0;
					    SetVehicleHealth(key, VehicleInfo[key][vHealth]);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					}
					else
					{
					    format(string, sizeof(string),"You cannot spawn your vehicle as it's damaged, cost: %s!", FormatMoney(price));
						SendClientMessage(playerid, COLOR_ERROR, string);
					}
				    return true;
   	            }
   	            //==========//
   	            if(VehicleInfo[key][vType] == VEHICLE_PERSONAL)
   	            {
   	                if(VehicleInfo[key][vEngineStats][1] <= 0)
		            {
				        SendClientMessage(playerid,COLOR_ERROR,"The vehicles engine is broken and must be repaired!");
				        SendClientMessage(playerid,COLOR_ERROR,"Note: You can call a mechanic to get it repaired. (/calllist)");
				        return true;
		            }
   	                if(VehicleInfo[key][vBattery][1] <= 0)
		            {
				        SendClientMessage(playerid,COLOR_ERROR,"The vehicles battery is broken and must be repaired!");
				        SendClientMessage(playerid,COLOR_ERROR,"Note: You can call a mechanic to get it repaired. (/calllist)");
				        return true;
		            }
		            if(VehicleInfo[key][vMileage][1] >= 1000000)
		            {
				        SendClientMessage(playerid,COLOR_ERROR,"This vehicle has reached it's Mileage limit!");
				        return true;
		            }
		        }
   	            //==========//
	            SetPVarInt(playerid, "EngAmpt", 1);
	            EngineResult(playerid, GetPlayerVehicleID(playerid));
	            CallRemoteFunction("AddBattery","i", GetPlayerVehicleID(playerid));
	            new Float:Xx, Float:Yy, Float:Zz;
	            GetPlayerPos(playerid, Xx, Yy, Zz);
	        }
	        case 1:
	        {
	            VehicleInfo[idcar][vEngine]=0;
	            CarEngine(idcar, VehicleInfo[idcar][vEngine]);
	            GameTextForPlayer(playerid, "~n~~w~engine ~r~~h~off~w~!", 1000, 5);
	        }
	    }
	}
	return 1;
}
//============================================//
COMMAND:reload(playerid, params[])
{
	new str2[128], found = 0;
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        if(GetPVarInt(playerid, "PlayerLogged") == 1 && GetPVarInt(playerid, "Muted") == 0 && GetPVarInt(playerid, "Dead") == 0)
        {
		    //==========//
		    if(PlayerInfo[playerid][pPlayerWeapon] > 0)
		    {
    		    if(PlayerInfo[playerid][pPlayerAmmo] == 0)
    		    {
    		        if(GetPlayerWeapon(playerid) == 0)
    		        {
    		            new ammo, id;
    		            for(new i = 0; i < MAX_INV_SLOTS; i++)
    		            {
	    		            if(found == 0)
	    		            {
		    		            if(PlayerInfo[playerid][pInvItem][i] > 0)
		    		            {
	    	    		            if(PlayerInfo[playerid][pInvItem][i] >= 100 && PlayerInfo[playerid][pInvItem][i] <= 199)
	    	    		            {
	    	    		                ammo = CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][i]);
	    	    		                if(ammo > 0) { found++, id = i; }
	    	    		            }
    	    		            }
	    		            }
    		            }
    		            if(found == 0) {
    		                scm(playerid, COLOR_ERROR, "You don't have any magazines for this weapon!");
    		                return 1;
						}

						if(GetPVarInt(playerid, "TogUnhol") == 0) {
						ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0); }
						PlayerInfo[playerid][pAmmoType] = PlayerInfo[playerid][pInvItem][id];
						GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo] + PlayerInfo[playerid][pInvQ][id]);
						//==========//
					    format(str2, 128, "%s reloaded with '%s'!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]), PrintIName(PlayerInfo[playerid][pInvItem][id]));
					    SendClientMessage(playerid, COLOR_WHITE, str2);
					    //==========//
					    RemoveInvItem(playerid, id);
					    //==========//
					    SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
				        return true;
    		        }
    		    }
			}
			else return error(playerid, "You have no weapon.");
		}
		else return error(playerid, "You are dead/muted.");
	}
	return 1;
}
//============================================//
COMMAND:calllist(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    SendClientMessage(playerid, COLOR_WHITE, "____________________________________________________________________");
    SendClientMessage(playerid, COLOR_FADE, "                             Numbers:                          ");
    SendClientMessage(playerid, COLOR_FADE, "LSPD/LSFD: 911 | Taxi Drivers: 411 | Mechanics: 311.");
    SendClientMessage(playerid, COLOR_WHITE, "____________________________________________________________________");
	return 1;
}
//============================================//
COMMAND:pcr(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSFD) return nal(playerid);
	/*new idcar = GetPlayerVehicleID(playerid);
	if(VehicleInfo[idcar][vType] != VEHICLE_LSPD) return error(playerid, "You are not in a police cruiser.");*/
	ShowPlayerDialogEx(playerid, 411, DIALOG_STYLE_INPUT, "Patient Care Report", "Enter the name of the patient.", "Continue","Close");
	return 1;
}
//============================================//
COMMAND:stretcher(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /stretcher [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot drag yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(targetid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "The player is not able to use this.");
		if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1)
		{
		    if(PlayerToPlayer(playerid,targetid,3.0))
		    {
   			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    	    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      		    GiveNameSpace(sendername);
        	    GiveNameSpace(giveplayer);
                format(string, sizeof(string), "*** %s places %s on a stretcher.", sendername, giveplayer);
    	        ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	        TogglePlayerControllableEx(targetid,false);
    	        SetCameraBehindPlayer(targetid);
    	        SetPVarInt(targetid, "Drag", playerid);
    	        ApplyAnimationEx(targetid, "INT_HOUSE","BED_Loop_R", 4.0,1,1,1,1,1);
    	        SetPlayerAttachedObject(targetid, HOLDOBJECT_ITEM, 2146, 1, -0.342133, 0.479713, 0.359209, 135.566574, 2.406259, 280.725524, 1.000000, 1.000000, 1.000000);
    	        SendClientMessage(playerid, COLOR_PINK, "Use (/stopstretcher) to take the player off the stretcher.");
    	    }
    	    else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
		}
	}
	return 1;
}
//============================================//
COMMAND:stopstretcher(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /stopstretcher [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot drag yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") > 1)
		{
			if(GetPVarInt(targetid, "Drag") == playerid)
			{
   				format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	    		format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
      			GiveNameSpace(sendername);
        		GiveNameSpace(giveplayer);
            	format(string, sizeof(string), "*** %s places %s out of the stretcher.", sendername, giveplayer);
    	    	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    	    	SetPVarInt(targetid, "Drag", INVALID_MAXPL);
    	    	SetCameraBehindPlayer(targetid);
    	    	TogglePlayerControllableEx(targetid,true);
				ClearAnimationsEx(targetid);
				RemovePlayerAttachedObject(targetid, HOLDOBJECT_ITEM);
				ApplyAnimationEx(targetid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
			}
			else SendClientMessage(playerid,COLOR_ERROR,"You are not dragging this person.");
		}
	}
	return 1;
}
//============================================//
ALTCOMMAND:exit->enter;
COMMAND:enter(playerid, params[])
{
	foreach(new i : IntIterator)
	{
        if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");

        if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]) &&
        	GetPlayerInterior(playerid) == IntInfo[i][iiInterioro] && GetPlayerVirtualWorld(playerid) == IntInfo[i][iiVirtualWorldo])
        {
            if(IntInfo[i][iiFreeze] == 1)
            {
            	TogglePlayerControllableEx(playerid, false);
            	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
            }

            SetPlayerPosEx(playerid, IntInfo[i][iiXi], IntInfo[i][iiYi], IntInfo[i][iiZi]);
            SetPlayerInterior(playerid, IntInfo[i][iiInteriori]);
            SetPlayerVirtualWorld(playerid, IntInfo[i][iiVirtualWorldi]);

            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
            SetPVarInt(playerid, "IntEnter", i), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 2, i));

			if(IntInfo[i][iiVirtualWorldi] == IntInfo[i][iiVirtualWorldo] && IntInfo[i][iiInteriori] == IntInfo[i][iiInterioro])
			{
				SetPVarInt(playerid, "IntEnter", 0);
			}

            if(GetPVarInt(playerid, "DrugTime") == 0)
			{
            	//SetPlayerTime(playerid, 12, 0);
            	//SetPlayerWeather(playerid, 0);
        	}

        	Streamer_Update(playerid);
            return 1;
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[i][iiXi], IntInfo[i][iiYi], IntInfo[i][iiZi]) &&
        	GetPlayerInterior(playerid) == IntInfo[i][iiInteriori] && GetPlayerVirtualWorld(playerid) == IntInfo[i][iiVirtualWorldi])
        {
		    if(IntInfo[i][iiFreeze] == 1)
            {
            	TogglePlayerControllableEx(playerid, false);
            	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
            }

            SetPlayerPosEx(playerid, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]);
            SetPlayerInterior(playerid, IntInfo[i][iiInterioro]);
            SetPlayerVirtualWorld(playerid, IntInfo[i][iiVirtualWorldo]);

            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 2, i));

            if(GetPVarInt(playerid, "DrugTime") == 0)
			{
            	//SetPlayerTime(playerid, 12, 0);
            	//SetPlayerWeather(playerid, 0);
        	}

        	Streamer_Update(playerid);
        	return 1;
        }
    }
    foreach(new h : HouseIterator)
	{
		if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
	    if(HouseInfo[h][hID] != 0)
	    {
	    	if(!IsPlayerInAnyVehicle(playerid))
			{
		        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
		        {
		            if(HouseInfo[h][hOwned] != 0)
		            {
		                if(HouseInfo[h][hLocked] == 0)
		                {
		                	TogglePlayerControllableEx(playerid, false);
				        	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

			                SetPlayerPosEx(playerid, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]);
			                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwIn]);
			                SetPlayerInterior(playerid, HouseInfo[h][hIntIn]);
			                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h);
			                PlayerTextDrawSetString(playerid, PlayerText:LocationDraw[playerid], PrintArea(playerid, 1, h));

			                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
	                        else
	                        {
	                            PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
	                        }
	                        HouseLights(h);
	                        if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
	                        if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
	                        if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
						   	{
		                        HouseAlarm(h, 0);
		                    }

		                    if(GetPVarInt(playerid, "DrugTime") == 0)
							{
			                	//SetPlayerTime(playerid, 12, 0);
			                	//SetPlayerWeather(playerid, 0);
			            	}

			            	Streamer_Update(playerid);
			            	return 1;
						}
						else
						{
							error(playerid, "This house is locked.");
						}
		            }
		            else
		           	{
						error(playerid, "This house is not owned by anyone.");
		            }
				}
		        else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
		        {
		            if(HouseInfo[h][hLocked] == 1) {
		            HouseInfo[h][hLocked]=0; }
		            TogglePlayerControllableEx(playerid, false);
	                SetPlayerPosEx(playerid, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]);
	                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwOut]);
	                SetPlayerInterior(playerid, HouseInfo[h][hIntOut]);
	                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
	                PlayerTextDrawSetString(playerid, PlayerText:LocationDraw[playerid], PrintArea(playerid, 0, 0));
	                
	                StopAudioStreamForPlayer(playerid);
	                TextDrawHideForPlayer(playerid, BlindDraw2);
	                if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
					{
		                HouseAlarm(h, 0);
		            }
		            SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

		            if(GetPVarInt(playerid, "DrugTime") == 0)
					{
				        SetPlayerTime(playerid, GMHour, GMMin);
				        SetPlayerWeather(playerid, GMWeather);
				    }

				    Streamer_Update(playerid);
				    return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
		        {
		        	return 1;
		        	/*
		            if(HouseInfo[h][hLocked] == 1)
		            {
		                error(playerid, "This garage is locked.");
		                return true;
		            }
	       
	                if(IsPlayerVehicle(playerid, GetPlayerVehicleID(playerid)))
	                {
	                	TogglePlayerControllableEx(playerid, false);
				        SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

	                	SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwIn]);
	            		SetPlayerInterior(playerid, HouseInfo[h][gInterior]);
	                	SetPlayerPosEx(playerid, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]);
	            		SetPlayerFacingAngle(playerid, HouseInfo[h][hgAi]);
			            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h), SetPVarInt(playerid, "GarageEnter", h);

			            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 1, h));

		                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
	                    else
	                    {
	                        PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
	                    }
	                    HouseLights(h);
	                    if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
	                    if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
	                    if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
			   		    {
	                        HouseAlarm(h, 0);
	                    }

	                    if(GetPVarInt(playerid, "DrugTime") == 0)
						{
		                	//SetPlayerTime(playerid, 12, 0);
		                	//SetPlayerWeather(playerid, 0);
		            	}

		            	Streamer_Update(playerid);
		            	return 1;
	                }
	                */
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
		        {
		        	return 1;
		        	/*
		        	if(HouseInfo[h][hLocked] == 1)
		        	{
		            	HouseInfo[h][hLocked] = 0;
		        	}

		        	TogglePlayerControllableEx(playerid, false);
				    SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

		        	SetPlayerVirtualWorld(playerid, 0);
	            	SetPlayerInterior(playerid, 0);
	                SetPlayerPosEx(playerid, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]);
	                SetPlayerFacingAngle(playerid, HouseInfo[h][hgAo]);
		            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0), SetPVarInt(playerid, "GarageEnter", 0);

		            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
		                
	                StopAudioStreamForPlayer(playerid);
	                LoadRadios(playerid);

	                if(GetPVarInt(playerid, "DrugTime") == 0)
					{
				        SetPlayerTime(playerid, GMHour, GMMin);
				        SetPlayerWeather(playerid, GMWeather);
				    }

				    Streamer_Update(playerid);
				    return 1;
				    */
		        }
		        else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hbdXo], HouseInfo[h][hbdYo], HouseInfo[h][hbdZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
		        {
		        	if(HouseInfo[h][hOwned] != 0)
		            {
		                if(HouseInfo[h][hLocked] == 0)
		                {
		                	if(HouseInfo[h][hbdXi] == 0 && HouseInfo[h][hbdYi] == 0 && HouseInfo[h][hbdXi] == 0) return 1;

		                	TogglePlayerControllableEx(playerid, false);
				        	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

			                SetPlayerPosEx(playerid, HouseInfo[h][hbdXi], HouseInfo[h][hbdYi], HouseInfo[h][hbdZi]);
			                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwIn]);
			                SetPlayerInterior(playerid, HouseInfo[h][hIntIn]);
			                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h);
			                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 1, h));

			                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
                            else
                            {
                                PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
                            }
                            HouseLights(h);
                            if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
                            if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
                            if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
				   		    {
                                HouseAlarm(h, 0);
                            }

                            if(GetPVarInt(playerid, "DrugTime") == 0)
							{
			                	//SetPlayerTime(playerid, 12, 0);
			                	//SetPlayerWeather(playerid, 0);
			            	}

			            	Streamer_Update(playerid);
			            	return 1;
						}
						else { error(playerid, "This house is locked."); }
		            }
		            else
		           	{
		           		new string[128];
		           	    format(string, sizeof(string), "Would you like to purchase this property?\nValue: %s | Bank Account: %s", FormatMoney(HouseInfo[h][hValue]), FormatMoney(GetPVarInt(playerid, "Bank")));
    					ShowPlayerDialogEx(playerid, 207, DIALOG_STYLE_MSGBOX, "Property For Sale!", string, "Purchase", "Cancel");
		            }
		        }
		        else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hbdXi], HouseInfo[h][hbdYi], HouseInfo[h][hbdZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
		        {
		        	if(HouseInfo[h][hbdXo] == 0 && HouseInfo[h][hbdYo] == 0 && HouseInfo[h][hbdXo] == 0) return 1;

		        	if(HouseInfo[h][hLocked] == 1)
		        	{
		            	HouseInfo[h][hLocked] = 0;
		        	}

					TogglePlayerControllableEx(playerid, false);
	                SetPlayerPosEx(playerid, HouseInfo[h][hbdXo], HouseInfo[h][hbdYo], HouseInfo[h][hbdZo]);
	                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwOut]);
	                SetPlayerInterior(playerid, HouseInfo[h][hIntOut]);
	                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
	                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
	                
	                StopAudioStreamForPlayer(playerid);
	                LoadRadios(playerid);
	                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
	                if(GetPVarInt(playerid, "DrugTime") == 0)
					{
				        SetPlayerTime(playerid, GMHour, GMMin);
				        SetPlayerWeather(playerid, GMWeather);
				    }

				    Streamer_Update(playerid);
				    return 1;
		        }
	    	}
		}
    }
	foreach(new h : BizIterator)
	{
		if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
	    if(BizInfo[h][ID] != 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
	        {
	        	if(BizInfo[h][Closed] == 1) return SendClientMessage(playerid, COLOR_ERROR, "This business has been shut down by the Los Santos Government.");
                if(BizInfo[h][Locked] == 0)
                {
                    if(GetPVarInt(playerid, "MonthDon") == 0)
                    {
					    if(GetPVarInt(playerid, "Cash") < BizInfo[h][EnterPrice]) return error(playerid,"Insufficient funds.");
 						GivePlayerMoneyEx(playerid, -BizInfo[h][EnterPrice]);
 						BizInfo[h][Bank] = BizInfo[h][Bank] + BizInfo[h][EnterPrice];
					}
				    TogglePlayerControllableEx(playerid, false);
					SetPlayerPosEx(playerid, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]);
	                SetPlayerVirtualWorld(playerid, BizInfo[h][VwIn]);
	                SetPlayerInterior(playerid, BizInfo[h][IntIn]);
	                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", h);
	                new msg[128];
	                format(msg, sizeof(msg), "{FFFFFF}Biz Slogan: %s", BizInfo[h][Slogan]);
	                scm(playerid, -1, msg);
	                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
	                PlayerTextDrawSetString(playerid, PlayerText:LocationDraw[playerid], PrintArea(playerid, 3, h));
	                if(strcmp(BizInfo[h][bRadio], "None", true) == 0){}
                    else
                    {
                        PlayAudioStreamForPlayerEx(playerid, BizInfo[h][bRadio]);
                    }

                    if(GetPVarInt(playerid, "DrugTime") == 0)
					{
	                	//SetPlayerTime(playerid, 12, 0);
	                	//SetPlayerWeather(playerid, 0);
	            	}

	            	Streamer_Update(playerid);
	            	return 1;
				}
				else
				{
					GameTextForPlayer(playerid, "~r~closed", 5000, 1);
				}
			}
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[h][VwIn])
	        {
	            TogglePlayerControllableEx(playerid, false);
                SetPlayerPosEx(playerid, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, BizInfo[h][IntOut]);
                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0);
                StopAudioStreamForPlayerEx(playerid);
                PlayerTextDrawSetString(playerid, PlayerText:LocationDraw[playerid], PrintArea(playerid, 0, 0));
                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

                if(GetPVarInt(playerid, "DrugTime") == 0)
				{
			        SetPlayerTime(playerid, GMHour, GMMin);
			        SetPlayerWeather(playerid, GMWeather);
			    }

			    Streamer_Update(playerid);
			    return 1;
			}

			if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][bbdXo], BizInfo[h][bbdYo], BizInfo[h][bbdZo]))
			{
				if(BizInfo[h][Closed] == 1) return SendClientMessage(playerid, COLOR_ERROR, "This business has been shut down by the Los Santos Government.");
				if(BizInfo[h][Owned] != 0)
		        {
	                if(BizInfo[h][Locked] == 0)
	                {
	                	if(BizInfo[h][bbdXi] == 0 && BizInfo[h][bbdYi] == 0 && BizInfo[h][bbdXi] == 0) return 1;
						if(GetPVarInt(playerid, "MonthDon") == 0)
						{
						    if(GetPVarInt(playerid, "Cash") < BizInfo[h][EnterPrice]) return error(playerid,"Insufficient funds.");
							GivePlayerMoneyEx(playerid, -BizInfo[h][EnterPrice]);
							BizInfo[h][Bank] = BizInfo[h][Bank] + BizInfo[h][EnterPrice];
						}
							
						TogglePlayerControllableEx(playerid, false);
						SetPlayerPosEx(playerid, BizInfo[h][bbdXi], BizInfo[h][bbdYi], BizInfo[h][bbdZi]);
		                SetPlayerVirtualWorld(playerid, BizInfo[h][VwIn]);
		                SetPlayerInterior(playerid, BizInfo[h][IntIn]);
		                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", h), SetPVarInt(playerid, "HouseEnter", 0);
		                new msg[128];
		                format(msg, sizeof(msg), "{FFFFFF}Biz Slogan: %s", BizInfo[h][Slogan]);
		                scm(playerid, -1, msg);
		                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
		                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 3, h));
		                if(strcmp(BizInfo[h][bRadio], "None", true) == 0){}
                        else
                        {
                            PlayAudioStreamForPlayerEx(playerid, BizInfo[h][bRadio]);
                        }

                        if(GetPVarInt(playerid, "DrugTime") == 0)
						{
		                	//SetPlayerTime(playerid, 12, 0);
		                	//SetPlayerWeather(playerid, 0);
		            	}

		            	Streamer_Update(playerid);
		            	return 1;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~closed", 5000, 1);
					}
	            }
	            else
	           	{
	           		new string[128];
           	   		format(string, sizeof(string), "Would you like to buy this business?\nBuy: %s \n\nBank Account: %s", FormatMoney(BizInfo[h][Value]), FormatMoney(GetPVarInt(playerid, "Bank")));
					ShowPlayerDialogEx(playerid, 300, DIALOG_STYLE_MSGBOX, "Buy business", string, "Debit", "Cancel");
	            }
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][bbdXi], BizInfo[h][bbdYi], BizInfo[h][bbdZi]) && GetPlayerVirtualWorld(playerid) == BizInfo[h][VwIn])
			{
				if(BizInfo[h][bbdXo] == 0 && BizInfo[h][bbdYo] == 0 && BizInfo[h][bbdXo] == 0) return 1;
				TogglePlayerControllableEx(playerid, false);
                SetPlayerPosEx(playerid, BizInfo[h][bbdXo], BizInfo[h][bbdYo], BizInfo[h][bbdZo]);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, BizInfo[h][IntOut]);
                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
                StopAudioStreamForPlayerEx(playerid);
                LoadRadios(playerid);
                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
                if(GetPVarInt(playerid, "DrugTime") == 0)
				{
			        SetPlayerTime(playerid, GMHour, GMMin);
			        SetPlayerWeather(playerid, GMWeather);
			    }

			    Streamer_Update(playerid);
			    return 1;
			}
		}
    }
	return 1;
}
//============================================//
COMMAND:stopaudio(playerid, params[])
{
    StopAudioStreamForPlayerEx(playerid);
	return 1;
}
//============================================//
COMMAND:hpm(playerid, params[])
{
	if(GetPVarInt(playerid, "Helper") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new text[128], targetid;
	if(sscanf(params, "us[128]", targetid, text)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hpm {FFFFFF}[playerid] [Message]");
	if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pm yourself.");
	if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(targetid, "TogPM") == 1) return SendClientMessage(playerid,COLOR_ERROR,"Players private messages are currently blocked.");
	if(GetPVarInt(playerid, "Admin") == 0 && PlayerInfo[targetid][pBlockPM][playerid] == 1) return SendClientMessage(playerid,COLOR_ERROR,"This player has disabled Private Chats from you.");
	if(GetPVarInt(playerid, "Admin") == 0 && PlayerInfo[playerid][pBlockPM][targetid] == 1) return SendClientMessage(playerid,COLOR_ERROR,"You have disabled Private Chats with this player.");
	if(GetPVarInt(playerid, "TogPM") == 1 && GetPVarInt(playerid, "Admin") == 0) return error(playerid, "Your private messages are blocked.");
 	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if(IsPlayerConnected(targetid))
	{
		new string[MAX_MSG_LENGTH];
    	if(strcmp(PlayerInfo[targetid][pPMMsg], "None", true) == 0)
    	{
    	    if(strlen(text) > MAX_MSG_LENGTH - 50)
    	    {
        	    new buffer[MAX_MSG_LENGTH];
			    strmid(buffer, text, MAX_MSG_LENGTH - 50, strlen(text), MAX_MSG_LENGTH);
			    strdel(text, MAX_MSG_LENGTH - 50, strlen(text));
			    strins(text, "...", MAX_MSG_LENGTH - 50);
			    strins(buffer, "...", 0, MAX_MSG_LENGTH);

				format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, AdminName(playerid), text);
		    	SendClientMessage(targetid,  0xF9F900FF, string);

			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(targetid,  0xF9F900FF, string);

				if(GetPVarInt(targetid, "AdminDuty") >= 1 || GetPVarInt(targetid, "HelperDuty") >= 1)
				{
					format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, AdminName(targetid), text);
					SendClientMessage(playerid,  0xE5C43EAA, string);
				}
				else
				{
				    format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, PlayerInfo[targetid][pName], text);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				}
			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(playerid,  0xE5C43EAA, string);

			    format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
		        format(string, sizeof(string), "%s ))", buffer);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
			else
			{

				format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, AdminName(playerid), text);
		    	SendClientMessage(targetid,  0xF9F900FF, string);

			    if(GetPVarInt(targetid, "AdminDuty") >= 1 || GetPVarInt(targetid, "HelperDuty") >= 1)
				{
					format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, AdminName(targetid), text);
					SendClientMessage(playerid,  0xE5C43EAA, string);
				}
				else
				{
				    format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], text);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				}

			    format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
		}
		else
		{
		    if(strlen(text) > MAX_MSG_LENGTH - 50)
		    {
        	    new buffer[MAX_MSG_LENGTH];
			    strmid(buffer, text, MAX_MSG_LENGTH - 50, strlen(text), MAX_MSG_LENGTH);
			    strdel(text, MAX_MSG_LENGTH - 50, strlen(text));
			    strins(text, "-..", MAX_MSG_LENGTH - 50);
			    strins(buffer, "..-", 0, MAX_MSG_LENGTH);
			    format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, PlayerInfo[playerid][pName], text);
			    SendClientMessage(targetid,  0xF9F900FF, string);
			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(targetid,  0xF9F900FF, string);
			    format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", playerid, PlayerInfo[playerid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(targetid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, PlayerInfo[targetid][pName], text);
			    SendClientMessage(playerid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(playerid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(playerid,  0xF9F900FF, string);
	        	format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
		        format(string, sizeof(string), "%s ))", buffer);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
			else
			{
			    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, PlayerInfo[playerid][pName], text);
			    SendClientMessage(targetid,  0xF9F900FF, string);
			    format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", playerid, PlayerInfo[playerid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(targetid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], text);
			    SendClientMessage(playerid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(playerid,  0xF9F900FF, string);
	        	format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
		}
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	return 1;
}

COMMAND:apm(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new text[128], targetid;
	if(sscanf(params, "us[128]", targetid, text)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /apm {FFFFFF}[playerid] [Message]");
	if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pm yourself.");
	if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(targetid, "TogPM") == 1) return SendClientMessage(playerid,COLOR_ERROR,"Players private messages are currently blocked.");
	if(GetPVarInt(playerid, "Admin") == 0 && PlayerInfo[targetid][pBlockPM][playerid] == 1) return SendClientMessage(playerid,COLOR_ERROR,"This player has disabled Private Chats from you.");
	if(GetPVarInt(playerid, "Admin") == 0 && PlayerInfo[playerid][pBlockPM][targetid] == 1) return SendClientMessage(playerid,COLOR_ERROR,"You have disabled Private Chats with this player.");
	if(GetPVarInt(playerid, "TogPM") == 1 && GetPVarInt(playerid, "Admin") == 0) return error(playerid, "Your private messages are blocked.");
 	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	if(IsPlayerConnected(targetid))
	{
		new string[MAX_MSG_LENGTH];
    	if(strcmp(PlayerInfo[targetid][pPMMsg], "None", true) == 0)
    	{
    	    if(strlen(text) > MAX_MSG_LENGTH - 50)
    	    {
        	    new buffer[MAX_MSG_LENGTH];
			    strmid(buffer, text, MAX_MSG_LENGTH - 50, strlen(text), MAX_MSG_LENGTH);
			    strdel(text, MAX_MSG_LENGTH - 50, strlen(text));
			    strins(text, "...", MAX_MSG_LENGTH - 50);
			    strins(buffer, "...", 0, MAX_MSG_LENGTH);

				format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, AdminName(playerid), text);
		    	SendClientMessage(targetid,  0xF9F900FF, string);

			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(targetid,  0xF9F900FF, string);

				if(GetPVarInt(targetid, "AdminDuty") >= 1 || GetPVarInt(targetid, "HelperDuty") >= 1)
				{
					format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, AdminName(targetid), text);
					SendClientMessage(playerid,  0xE5C43EAA, string);
				}
				else
				{
				    format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, PlayerInfo[targetid][pName], text);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				}
			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(playerid,  0xE5C43EAA, string);

			    format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
		        format(string, sizeof(string), "%s ))", buffer);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
			else
			{

				format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, AdminName(playerid), text);
		    	SendClientMessage(targetid,  0xF9F900FF, string);

			    if(GetPVarInt(targetid, "AdminDuty") >= 1 || GetPVarInt(targetid, "HelperDuty") >= 1)
				{
					format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, AdminName(targetid), text);
					SendClientMessage(playerid,  0xE5C43EAA, string);
				}
				else
				{
				    format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], text);
				    SendClientMessage(playerid,  0xE5C43EAA, string);
				}

			    format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
		}
		else
		{
		    if(strlen(text) > MAX_MSG_LENGTH - 50)
		    {
        	    new buffer[MAX_MSG_LENGTH];
			    strmid(buffer, text, MAX_MSG_LENGTH - 50, strlen(text), MAX_MSG_LENGTH);
			    strdel(text, MAX_MSG_LENGTH - 50, strlen(text));
			    strins(text, "-..", MAX_MSG_LENGTH - 50);
			    strins(buffer, "..-", 0, MAX_MSG_LENGTH);
			    format(string, sizeof(string), "(( PM from [%d] %s: %s", playerid, PlayerInfo[playerid][pName], text);
			    SendClientMessage(targetid,  0xF9F900FF, string);
			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(targetid,  0xF9F900FF, string);
			    format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", playerid, PlayerInfo[playerid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(targetid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM sent to [%d] %s: %s", targetid, PlayerInfo[targetid][pName], text);
			    SendClientMessage(playerid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "%s ))", buffer);
			    SendClientMessage(playerid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(playerid,  0xF9F900FF, string);
	        	format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
		        format(string, sizeof(string), "%s ))", buffer);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
			else
			{
			    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, PlayerInfo[playerid][pName], text);
			    SendClientMessage(targetid,  0xF9F900FF, string);
			    format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", playerid, PlayerInfo[playerid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(targetid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM sent to [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], text);
			    SendClientMessage(playerid,  0xE5C43EAA, string);
			    format(string, sizeof(string), "(( PM from [%d] %s: %s ))", targetid, PlayerInfo[targetid][pName], PlayerInfo[targetid][pPMMsg]);
	        	SendClientMessage(playerid,  0xF9F900FF, string);
	        	format(string, sizeof(string), "(( %s[%d] sent %s[%d]: %s ))", PlayerInfo[playerid][pName], playerid, PlayerInfo[targetid][pName], targetid, text);
		        ShowPMs(string);
		        SeePM(playerid, string);
		        SeePM(targetid, string);
			}
		}
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	return 1;
}
//============================================//
COMMAND:banacc(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2) return nal(playerid);
	new name[24], reason[128];
	if(sscanf(params, "s[24]s[128]", name, reason)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /banacc [Name] [Reason]");
	else
	{
		new query[256];
		mysql_format(handlesql, query, sizeof(query),"SELECT `IP` FROM `accounts` WHERE `Name`='%s'", name);
		mysql_pquery(handlesql, query, "CheckOfflineBan", "iss", playerid, name, reason);
	}
	return 1;
}
//============================================//
COMMAND:items(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_ERROR, "You must be on-foot.");

	ShowPlayerDialogEx(playerid, 296, DIALOG_STYLE_LIST, "Items menu", "Edit item\nTake item off\nPut item on\nDelete item", "Select","Cancel");
	return 1;
}
//============================================//
ALTCOMMAND:op->options;
COMMAND:options(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	ShowPlayerDialogEx(playerid,80,DIALOG_STYLE_LIST,"Player Options","Select Chatstyle\nSelect Walkstyle\nToggle Private Messages\nToggle HUD\nToggle Basic Audios\nToggle Auto Reload\nMoney Bar Color\nCellphone Color\nToggle SAN Network\nToggle RLS Radio\nToggle L-OOC Chat\nToggle Unholster Anim","Select", "Exit");
	return 1;
}
//============================================//
COMMAND:ram(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD && 
		GetPVarInt(playerid, "Member") != FACTION_LSFD &&
		GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");
	if(GetPVarInt(playerid, "Duty") != 1) return error(playerid, "You are not on duty.");

	new key = 0, foundid = 0, found = 0, found_total = 0;

	if(GetPVarInt(playerid, "HouseEnter") != 0)
	{
		key = GetPVarInt(playerid, "HouseEnter");

		for(new h = 0; h < MAX_HOUSE_OBJ; h++)
		{
			if(HouseInfo[key][hObject][h] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
				{
					if(IsDoorObject(HouseInfo[key][hoID][h]))
					{
						if(found == 0)
						{
							foundid = h;
							found++;
							found_total++;
						}
					}
				}
			}
		}
		if(found != 0)
		{
			if(HouseInfo[key][Locked][foundid] == 1)
			{
				new Float:x, Float:y, Float:z, Float:adjust = 91.0;
				GetDynamicObjectRot(HouseInfo[key][hObject][foundid], x, y, z);
				
				if(z == HouseInfo[key][horZ][foundid] + adjust)
				{
					SetDynamicObjectRot(HouseInfo[key][hObject][foundid], x, y, HouseInfo[key][horZ][foundid]);
				}
				else
				{
					SetDynamicObjectRot(HouseInfo[key][hObject][foundid], x, y, z + adjust);
				}

				HouseInfo[key][Locked][foundid] = 0;

				SendClientMessage(playerid, COLOR_WHITE, "Door has been rammed open.");
				return 1;
			}
			else
			{
				return SendClientMessage(playerid, COLOR_ERROR, "The door is already open.");
			}
		}
	}
	else
	{
		foreach(new i : HouseIterator)
		{
			if(HouseInfo[i][hID] != 0)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]) || IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hgXo], HouseInfo[i][hgYo], HouseInfo[i][hgZo]) || IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hbdXo], HouseInfo[i][hbdYo], HouseInfo[i][hbdZo]))
		        {
		        	if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hVwOut])
		        	{
			            if(HouseInfo[i][hOwned] != 0)
			            {
			                if(HouseInfo[i][hLocked] == 1)
			                {
			                	if(GetPVarInt(playerid, "RammingHouse") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are already ramming a door.");

								SetPVarInt(playerid, "RammingHouse", i);
								SetPVarInt(playerid, "RammingTime", 5);
								SendClientMessage(playerid, COLOR_WHITE, "Ramming door...");
			                    return 1;
			                }
			                else
			                {
			                	return SendClientMessage(playerid, COLOR_ERROR, "This door is not locked.");
			                }
						}
					}
				}
			}

			if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]))
			{
				key = i;

				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(HouseInfo[key][hObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
						{
							if(IsDoorObject(HouseInfo[key][hoID][h]))
							{
								if(found == 0)
								{
									foundid=h;
									found++;
									found_total++;
								}
							}
						}
					}
				}
				if(found != 0)
				{
					if(HouseInfo[key][Locked][foundid] == 1)
					{
						new Float:x, Float:y, Float:z, Float:adjust = 91.0;
						GetDynamicObjectRot(HouseInfo[key][hObject][foundid], x, y, z);
						
						if(z == HouseInfo[key][horZ][foundid] + adjust)
						{
							SetDynamicObjectRot(HouseInfo[key][hObject][foundid], x, y, HouseInfo[key][horZ][foundid]);
						}
						else
						{
							SetDynamicObjectRot(HouseInfo[key][hObject][foundid], x, y, z + adjust);
						}

						HouseInfo[key][Locked][foundid] = 0;

						SendClientMessage(playerid, COLOR_WHITE, "Door has been rammed open.");
						return 1;
					}
					else
					{
						return SendClientMessage(playerid, COLOR_ERROR, "The door is already open.");
					}
				}
			}
		}
	}
	
	if(GetPVarInt(playerid, "BizEnter") != 0)
	{
		key = GetPVarInt(playerid, "BizEnter");

		for(new h = 0; h < MAX_HOUSE_OBJ; h++)
		{
			if(BizInfo[key][bObject][h] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
				{
					if(IsDoorObject(BizInfo[key][boID][h]))
					{
						if(found == 0)
						{
							foundid=h;
							found++;
							found_total++;
						}
					}
				}
			}
		}
		if(found != 0)
		{
			if(BizInfo[key][bLocked][foundid] == 1)
			{
				new Float:x, Float:y, Float:z, Float:adjust = 91.0;
				GetDynamicObjectRot(BizInfo[key][bObject][foundid], x, y, z);
				
				if(z == BizInfo[key][borZ][foundid] + adjust)
				{
					SetDynamicObjectRot(BizInfo[key][bObject][foundid], x, y, BizInfo[key][borZ][foundid]);
				}
				else
				{
					SetDynamicObjectRot(BizInfo[key][bObject][foundid], x, y, z + adjust);
				}

				BizInfo[key][bLocked][foundid] = 0;

				SendClientMessage(playerid, COLOR_WHITE, "Door has been rammed open.");
				return 1;
			}
			else
			{
				return SendClientMessage(playerid, COLOR_ERROR, "The door is already open.");
			}
		}
	}
	else
	{
		foreach(new i : BizIterator)
		{
			if(BizInfo[i][ID] != 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]) || IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][bbdXo], BizInfo[i][bbdYo], BizInfo[i][bbdZo]))
				{
				    if(BizInfo[i][Owned] != 0)
				    {
				        if(BizInfo[i][Locked] == 1)
				        {
				        	if(GetPVarInt(playerid, "RammingBiz") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are already ramming a door.");

				            SetPVarInt(playerid, "RammingBiz", i);
							SetPVarInt(playerid, "RammingTime", 5);
				            SendClientMessage(playerid, COLOR_WHITE, "Ramming door...");
				            return 1;
					    }
					    else
					    {
					    	return SendClientMessage(playerid, COLOR_ERROR, "This door is not locked.");
					    }
				    }
			    }
		    }

			if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]))
			{
				key = i;

				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(BizInfo[key][bObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
						{
							if(IsDoorObject(BizInfo[key][boID][h]))
							{
								if(found == 0)
								{
									foundid=h;
									found++;
									found_total++;
								}
							}
						}
					}
				}
				if(found != 0)
				{
					if(BizInfo[key][bLocked][foundid] == 1)
					{
						new Float:x, Float:y, Float:z, Float:adjust = 91.0;
						GetDynamicObjectRot(BizInfo[key][bObject][foundid], x, y, z);
						
						if(z == BizInfo[key][borZ][foundid] + adjust)
						{
							SetDynamicObjectRot(BizInfo[key][bObject][foundid], x, y, BizInfo[key][borZ][foundid]);
						}
						else
						{
							SetDynamicObjectRot(BizInfo[key][bObject][foundid], x, y, z + adjust);
						}

						BizInfo[key][bLocked][foundid] = 0;

						SendClientMessage(playerid, COLOR_WHITE, "Door has been rammed open.");
						return 1;
					}
					else
					{
						return SendClientMessage(playerid, COLOR_ERROR, "The door is already open.");
					}
				}
			}
		}
	}

    if(found_total == 0)
    {
    	SendClientMessage(playerid, COLOR_ERROR, "You are not close to any locked door.");
    }
	return 1;
}
//============================================//
COMMAND:warrant(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return nal(playerid);
	if(GetPVarInt(playerid, "Duty") != 1) return error(playerid, "You are not on duty.");
	ShowPlayerDialogEx(playerid, 405, DIALOG_STYLE_LIST, "Warrant - {CCCCCC}(Select Option)", "View list\nAdd Warrant\nRemove Warrant","Select","Cancel");
	return 1;
}
//============================================//
COMMAND:announce(playerid, params[])
{
	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /announce [text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
	    new string[256],
			sendername[MAX_PLAYER_NAME];
			
   		format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      	GiveNameSpace(sendername);
      	switch(GetPVarInt(playerid, "Member"))
      	{
      		case 3: // RLS
			{
			    format(string, sizeof(string), "* [RLS]: %s: %s *", sendername, text);
			    SendRadioMessage(0x458E1DAA, string);
			}
      	    case 4: // SAN Network
			{
			    format(string, sizeof(string), "* [SAN Network] %s: %s *", sendername, text);
			    SendNewsMessage(0x458E1DAA, string);
			}
      	}
	}
	return 1;
}
//============================================//
COMMAND:live(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /live [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot pay to yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_RLS || GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE)
		{
			if(PlayerToPlayer(playerid,targetid,3.0))
   			{
   			    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      			format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      			GiveNameSpace(sendername);
      			GiveNameSpace(giveplayer);
      			SetPVarInt(targetid, "LiveOffer", playerid);
				switch(GetPVarInt(playerid, "Member"))
				{
					case 3:
				    {
				        if(PlayerInfo[playerid][pLiveOffer][1] == 1
						&& PlayerInfo[targetid][pLiveOffer][1] == 1)
				        {
				            PlayerInfo[playerid][pLiveOffer][1] = 0; PlayerInfo[targetid][pLiveOffer][1] = 0;
				            SendClientMessage(playerid,COLOR_WHITE,"Broadcast has ended.");
				            SendClientMessage(targetid,COLOR_WHITE,"Broadcast has ended.");
				            return true;
						}
						if(PlayerInfo[playerid][pLiveOffer][1] == 1)
				        {
				            PlayerInfo[playerid][pLiveOffer][1] = 0;
				            SendClientMessage(playerid,COLOR_WHITE,"Broadcast has ended.");
							return true;
						}
						if(PlayerInfo[targetid][pLiveOffer][1] == 1)
				        {
				            PlayerInfo[targetid][pLiveOffer][1] = 0;
				            SendClientMessage(targetid,COLOR_WHITE,"Broadcast has ended.");
				            return true;
						}
						format(string, sizeof(string),"You gave %s a live offer on radio los santos.", giveplayer);
				        SendClientMessage(playerid,COLOR_ERROR,string);
				        format(string, sizeof(string),"%s offered a live offer on radio los santos (/accept live).", sendername);
				        SendClientMessage(targetid,COLOR_ERROR,string);
				    }
				    case 4:
				    {
				        if(PlayerInfo[playerid][pLiveOffer][0] == 1
					    && PlayerInfo[targetid][pLiveOffer][0] == 1)
                        {
				            PlayerInfo[playerid][pLiveOffer][0] = 0; PlayerInfo[targetid][pLiveOffer][0] = 0;
				            SendClientMessage(playerid,COLOR_WHITE,"News Broadcast has ended.");
				            SendClientMessage(targetid,COLOR_WHITE,"News Broadcast has ended.");
				            return true;
				        }
				        if(PlayerInfo[playerid][pLiveOffer][0] == 1)
                        {
				            PlayerInfo[playerid][pLiveOffer][0] = 0;
				            SendClientMessage(playerid,COLOR_WHITE,"News Broadcast has ended.");
				            return true;
				        }
				        if(PlayerInfo[targetid][pLiveOffer][0] == 1)
                        {
				            PlayerInfo[targetid][pLiveOffer][0] = 0;
				            SendClientMessage(targetid,COLOR_WHITE,"News Broadcast has ended.");
				            return true;
				        }
				        format(string, sizeof(string),"You gave %s a live offer on SAN Network.", giveplayer);
				        SendClientMessage(playerid,COLOR_ERROR,string);
				        format(string, sizeof(string),"%s offered a live offer on SAN Network (/accept live).", sendername);
				        SendClientMessage(targetid,COLOR_ERROR,string);
				    }
				}
      		}
      		else SendClientMessage(playerid, COLOR_ERROR, "You are not close to this player.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:setfare(playerid, params[])
{
	new type, string[128];
	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setfare [0-25]");
	    SendClientMessage(playerid, COLOR_ERROR, "Note: The player will be charged every ten seconds of the amount chosen.");
	}
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(type < 0 || type > 25) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 0 or above 25.");
		if(GetPVarInt(playerid, "Job") == 5 && GetPVarInt(playerid, "OnRoute") != 0)
		{
			if(IsJobVehicle(playerid))
			{
      			SetPVarInt(playerid, "TaxiFare", type);
      			format(string, sizeof(string),"You set the taxi fare to %s.", FormatMoney(type));
      			SendClientMessage(playerid,COLOR_ERROR,string);
      			foreach(new i : Player)
	            {
	               if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	               {
	                  if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
	                  {
                          InitiateFare(i);
	                  }
	              }
	           }
      		}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}

COMMAND:putciggy(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You can't be in a vehicle while you use this!");
    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a ciggy.");
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to do this command!");
    GiveInvItem(playerid, 300, 1, 0);
    SendClientMessage(playerid,COLOR_ERROR,"{999999}{FFFFFF}Ciggy {999999}placed into your inventory.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    SetPVarInt(playerid, "Delay", GetCount()+3000);
    DeletePVar(playerid,"MouthCig");
	return 1;
}

COMMAND:takeciggy(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (!CheckInvItem(playerid, 300)) return SendClientMessage(playerid, COLOR_ERROR, "You don't have this item in your inventory.");
    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You can't be in a vehicle while you use this!");
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    RemoveInvItem(playerid, GetInvSlotFromID(playerid, 300));
    SendClientMessage(playerid,COLOR_ERROR,"{999999}{FFFFFF}Ciggy {999999}taken from your inventory.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
    SendClientMessage(playerid,COLOR_WHITE,"Type (/ciggy) to place your ciggy on your mouth or hand.");
    SetPVarInt(playerid, "Delay", GetCount()+3000);
	return 1;
}

COMMAND:ciggy(playerid, params[])
{
	new type[30], string[128], sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[30]", type)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ciggy [mouth / hand]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
        if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
	    if(strcmp(type, "mouth", true) == 0)
	    {
	        if(GetPVarInt(playerid,"MouthCig") == 1) return SendClientMessage(playerid,COLOR_ERROR,"You already have a ciggy in your mouth.");
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid,COLOR_ERROR,"You don't have a ciggy in your hand.");
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	        SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 3044, 2, -0.057326, 0.026202, 0.000000, 172.549285, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	        SendClientMessage(playerid,COLOR_WHITE,"Type (/ciggy hand) to remove the cigar from your mouth.");
	        SetPVarInt(playerid,"MouthCig",1);
	        format(string, sizeof(string), "* %s places %s ciggy into %s mouth.", sendername, CheckSex(playerid), CheckSex(playerid));
    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	    }
	    else if(strcmp(type, "hand", true) == 0)
	    {
            if(GetPlayerSpecialAction(playerid)== SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid,COLOR_ERROR,"You already have a ciggy in your hand.");
            if(GetPVarInt(playerid,"MouthCig") == 0) return SendClientMessage(playerid,COLOR_ERROR,"You don't have a ciggy in your mouth.");
            DeletePVar(playerid,"MouthCig");
            RemovePlayerAttachedObject(playerid, HOLDOBJECT_ITEM2);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
            format(string, sizeof(string), "* %s places %s ciggy into %s hand.", sendername, CheckSex(playerid), CheckSex(playerid));
    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	    }
	}
	return 1;
}

COMMAND:mask(playerid, params[])
{
	new string[128];
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "ConnectTime") < 30) return SendClientMessage(playerid, COLOR_ERROR, "You need at least 30 TLS to wear a mask.");
    if (!CheckInvItem(playerid, 401)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a mask.");
	switch(GetPVarInt(playerid, "MaskUse"))
    {
        case 0:
        {
            SetPVarInt(playerid, "MaskUse", 1);
            GameTextForPlayer(playerid, "~w~Mask ~g~On", 5000, 6);
            format(string, sizeof(string),"%s", PlayerNameEx(playerid));
            PlayerTag[playerid] = Create3DTextLabel("NULL",0xFFFFFFFF,0.0,0.0,0.0,15.0,0,1);
            Attach3DTextLabelToPlayer(PlayerTag[playerid], playerid, 0.0, 0.0, 0.1);
	        Update3DTextLabelText(PlayerTag[playerid], 0xFFFFFFFF,string);
	        foreach(new i : Player)
		    {
		        if(GetPVarInt(i, "Admin") == 0)
		        {
		            ShowPlayerNameTagForPlayer(i,playerid,0);
		        }
		    }
	        return true;
        }
        case 1:
        {
            SetPVarInt(playerid, "MaskUse", 0);
            GameTextForPlayer(playerid, "~w~Mask ~r~Off", 5000, 6);
            Delete3DTextLabel(PlayerTag[playerid]);
            foreach(new i : Player)
		    {
		        if(GetPVarInt(i, "Admin") == 0)
		        {
		            ShowPlayerNameTagForPlayer(i,playerid,1);
		        }
		    }
	        return true;
        }
    }
    return 1;
}

COMMAND:tapwater(playerid, params[])
{
    new string[128], sendername[MAX_PLAYER_NAME], Float:health, found = 0;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    GetPlayerHealth(playerid,health);
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,20.0,HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
	    {
	        if(GetPVarInt(playerid, "HouseEnter") == h && HouseInfo[h][hBasic] == 1)
	        {
				if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
				{
				    found++;
					if(GetPlayerMoneyEx(playerid) >= 10)
					{
					    if(health >= 99) return SendClientMessage(playerid,COLOR_ERROR,"Health is too full.");
					    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
					    GiveNameSpace(sendername);
    				    format(string, sizeof(string), "*** %s drinks from the tap water.", sendername);
    				    ProxDetector(30.0, playerid, string, COLOR_PURPLE);
					    GivePlayerMoneyEx(playerid,-10);
					    SetPlayerHealthEx(playerid,health+40.0);
					    GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
					    ApplyAnimation(playerid, "GANGS", "drnkbr_prtl", 3.0, 0, 0, 0, 0, 0);
					    SetPVarInt(playerid, "Delay", GetCount()+2000);
					}
					else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	            }
	        }
	    }
	}
	if(found == 0) {
		scm(playerid, COLOR_ERROR, "You are not near a house door."); }
	return 1;
}

COMMAND:lights(playerid, params[])
{
    new string[128], sendername[MAX_PLAYER_NAME], found = 0;
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,5.0,HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]))
	    {
	        if(GetPVarInt(playerid, "HouseEnter") == h && HouseInfo[h][hBasic] == 1)
	        {
				if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn] && found == 0)
				{
				    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
					GiveNameSpace(sendername);
					if(HouseInfo[h][hLights] == 0) { HouseInfo[h][hLights]=1, format(string, sizeof(string), "*** %s turns the lights off.", sendername); }
					else { HouseInfo[h][hLights]=0, format(string, sizeof(string), "*** %s turns the lights on.", sendername); }
    				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    				HouseLights(h);
    				SetPVarInt(playerid, "Delay", GetCount()+2000);
    				found++;
	            }
	        }
	    }
	}
	if(found == 0) {
		scm(playerid, COLOR_ERROR, "You are not near a house door."); }
	return 1;
}

COMMAND:flashlight(playerid, params[])
{
    if(GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");
    if(GetPVarInt(playerid, "HouseEnter") == 0 &&
    	GetPVarInt(playerid, "BizEnter") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must be inside of a building to use this command.");

    TextDrawHideForPlayer(playerid, BlindDraw2);

    new string[128];
    format(string, sizeof(string), "*** %s turns on the flashlight.", PlayerInfo[playerid][pName]);
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

    SendClientMessage(playerid, COLOR_WHITE, "You have turned on your flashlight.");
	return 1;
}

COMMAND:togpm(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    switch(GetPVarInt(playerid, "TogPM"))
    {
        case 0:
        {
            SetPVarInt(playerid, "TogPM", 1);
            SendClientMessage(playerid, COLOR_ERROR, "Private Messages disabled!");
        }
        case 1:
        {
            SetPVarInt(playerid, "TogPM", 0);
            SendClientMessage(playerid, COLOR_ERROR, "Private Messages enabled!");
        }
    }
    return 1;
}

COMMAND:toghud(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    switch(GetPVarInt(playerid, "TogHud"))
    {
        case 0:
        {
            SetPVarInt(playerid, "TogHud", 1);
            SendClientMessage(playerid, COLOR_ERROR, "HUD disabled!");
            //PlayerTextDrawHide(playerid,MoneyDraw[playerid]);
            //TextDrawHideForPlayer(playerid,MoneyDraw2);
            PlayerTextDrawHide(playerid,LocationDraw[playerid]);
            if(GetPVarInt(playerid, "VD") == 1)
	        {
	            for(new i = 0; i < 5; i++)
			    {
	                TextDrawHideForPlayer(playerid,VehicleDraw[0]);
	                TextDrawHideForPlayer(playerid,VehicleDraw[1]);
                    TextDrawHideForPlayer(playerid,VehicleDraw[2]);
	                TextDrawHideForPlayer(playerid,VehicleDraw[3]);
                    TextDrawHideForPlayer(playerid,VehicleDraw[4]);
                }
                for(new i = 0; i < 2; i++)
			    {
			        PlayerTextDrawHide(playerid,VehicleIDraw[i][playerid]);
			    }
		    }
        }
        case 1:
        {
            SetPVarInt(playerid, "TogHud", 0);
            SendClientMessage(playerid, COLOR_ERROR, "HUD enabled!");
            //PlayerTextDrawShow(playerid,MoneyDraw[playerid]);
            //TextDrawShowForPlayer(playerid,MoneyDraw2);
            PlayerTextDrawShow(playerid,LocationDraw[playerid]);
            if(GetPVarInt(playerid, "VD") == 1)
	        {
	            LoadVehicleMeter(playerid);

	        	for(new i = 0; i < 2; i++)
				{
				    PlayerTextDrawHide(playerid,VehicleIDraw[i][playerid]);
			    }
		    }
        }
    }
    return 1;
}

COMMAND:togb(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "TogB") == 0)
	{
 	    SetPVarInt(playerid, "TogB", 1);
 	    SCM(playerid, -1, "Local-OOC Chat toggled OFF.");
	}
	else
	{
	    SetPVarInt(playerid, "TogB", 0);
		SCM(playerid, -1, "Local-OOC Chat toggled ON.");
	}
    return 1;
}

COMMAND:payphone(playerid, params[])
{
	new number,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", number)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /payphone {FFFFFF}[number]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (number == GetPVarInt(playerid, "PhoneNum")) return SendClientMessage(playerid, COLOR_ERROR, "You cannot call yourself.");
	    if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_ERROR, "You are already on a call.");
	    if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this while handcuffed/tazed.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      	GiveNameSpace(sendername);
      	new found = 0;
      	for(new h = 1; h < sizeof(PayPhone); h++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, PayPhone[h][0], PayPhone[h][1], PayPhone[h][2]))
	        {
	            found=1;
	            SetPVarInt(playerid, "PhoneID", h);
	        }
	    }
	    if(found == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not around a payphone.");
	    foreach (Player, i)
	    {
            if(i != playerid && GetPVarInt(i, "PhoneID") == GetPVarInt(playerid, "PhoneID"))
            {
                return SendClientMessage(playerid, COLOR_ERROR, "Someone is already using this payphone.");
            }
	    }
	    found = 0;
		if(number == 911)
		{
            if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
		    CellphoneState(playerid,1);
		    SendClientMessage(playerid, COLOR_WHITE, "You now use T to talk on the payphone, type /hangup to hang up");
		    SetPVarInt(playerid, "Mobile", 911);
		    SendClientMessage(playerid,COLOR_BLUE,"DISPATCH: Which service do you require Police or Paramedic?");
		    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	        TogglePlayerControllable(playerid,false);
			SetPlayerPos(playerid,PayPhone[GetPVarInt(playerid, "PhoneID")][0], PayPhone[GetPVarInt(playerid, "PhoneID")][1], PayPhone[GetPVarInt(playerid, "PhoneID")][2]);
			PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "PayPhone", 1);
		    return 1;
		}
		if(number == 411)
		{
		    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
		    SendClientMessage(playerid,COLOR_WHITE,"You informed any Taxi Drivers online with your location.");
		    TaxiCall = playerid;
		    format(string, sizeof(string), "%s is requesting a taxi (/accept taxi).", sendername,CheckSex(playerid));
		    SendJobMessage(5,COLOR_WHITE,string);
		    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
		    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
		    SetPVarInt(playerid, "PayPhone", 1);
		    return 1;
		}
		if(number == 311)
		{
	    	if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
		    SendClientMessage(playerid,COLOR_WHITE,"You informed any Mechanics online with your location.");

		    format(string, sizeof(string), "MECHANIC: %s (Ph: Payphone) is requesting a mechanic! Location:[%s]", sendername, GetPlayerArea(playerid));
		    SendJobMessage(JOB_MECHANIC, COLOR_JOB, string);
		    format(string, sizeof(string), "MECHANIC: Use /accept mech %i to respond.", playerid);
		    SendJobMessage(JOB_MECHANIC, COLOR_JOB, string);

		    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
		    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
		    SetPVarInt(playerid, "PayPhone", 1);
		    PlayerInfo[playerid][pMechCall] = 1;
		    return 1;
		}
		foreach (Player, i)
		{
		    if(GetPVarInt(i, "PlayerLogged") == 1)
		    {
				if(GetPVarInt(i, "PhoneNum") == number)
				{
				    if (!CheckInvItem(i , 405)) return SendClientMessage(playerid, COLOR_ERROR, "Player dosent have a cellphone.");
		        	if (GetPVarInt(i, "Mobile") != INVALID_MAXPL) return SendPhoneMessage(playerid);
		        	if (GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid);
		        	if (GetPVarInt(i, "Cuffed") > 0) return SendPhoneMessage(playerid);
		        	if (GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid);
		        	if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid);
	                if(GetPVarInt(i, "PlayerSpectate") != 0) return SendPhoneMessage(playerid);
		        	if(GetPlayerMoneyEx(playerid) >= 50)
                    {
						GivePlayerMoneyEx(playerid,-50);
		        	    found = 1;
		        	    CellphoneState(playerid,1);
		        	    SendClientMessage(playerid, COLOR_WHITE, "You can now use T to talk on the payphone, type /hangup to hang up");
		        	    SetPVarInt(playerid, "Mobile", i);
		        	    SetPVarInt(i, "RingTone", 1);
					    SendClientMessage(i, COLOR_YELLOW, "Your mobile is ringing type (/cellphone) CallerID: PayPhone.");
					    TogglePlayerControllable(playerid,false);
					    SetPlayerPos(playerid,PayPhone[GetPVarInt(playerid, "PhoneID")][0], PayPhone[GetPVarInt(playerid, "PhoneID")][1], PayPhone[GetPVarInt(playerid, "PhoneID")][2]);
					    SetPVarInt(playerid, "PayPhone", 1);
					    SetPVarInt(playerid, "RingPhone", 1);
					    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_ERROR, "You need 50$ to use this.");
					}
		        }
		    }
		}
		if(found == 0) return SendClientMessage(playerid, COLOR_ERROR, "Could not find anyone with that number.");
	}
	return 1;
}

COMMAND:call(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "PayPhone") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently using a payphone.");
    if (!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a cellphone.");
    if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this while handcuffed/tazed.");
    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
    if(GetPVarInt(playerid, "TogPhone") == 1) return SendClientMessage(playerid, COLOR_WHITE, "Your phone is turned off.");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");

	new number[64];
	if(sscanf(params, "s[64]", number)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /call [number/contact name]");
	
	new found = 0;
	new found_number[64];
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(strcmp(number, PlayerContacts[playerid][i][pContactName], true) == 0)
		{
			found = 1;
			format(found_number, sizeof(found_number), PlayerContacts[playerid][i][pContactNumber]);
			break;
		}
	}

	if(found == 1)
	{
		CallNumberCMD(playerid, found_number);
	}
	else
	{
		CallNumberCMD(playerid, number);
	}
	return 1;
}

ALTCOMMAND:sms->text;
COMMAND:text(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "PayPhone") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently using a payphone.");
    if (!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a cellphone.");
    if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this while handcuffed/tazed.");
    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
    if(GetPVarInt(playerid, "TogPhone") == 1) return SendClientMessage(playerid, COLOR_WHITE, "Your phone is turned off.");
    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");

    new number[64], message[128];
	if(sscanf(params, "s[64]s[128]", number, message)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /text [number/contact name] [message]");
	
	new found = 0;
	new found_number[64];
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(strcmp(number, PlayerContacts[playerid][i][pContactName], true) == 0 && strlen(PlayerContacts[playerid][i][pContactName]) != 0)
		{
			found = 1;
			format(found_number, sizeof(found_number), PlayerContacts[playerid][i][pContactNumber]);
			break;
		}
	}

	if(found == 1)
	{
		SmsNumberCMD(playerid, found_number, message);
	}
	else
	{
		SmsNumberCMD(playerid, number, message);
	}
	return 1;
}

ALTCOMMAND:h->hangup;
COMMAND:hangup(playerid, params[])
{
	DeletePVar(playerid, "ContactNum");
    DeletePVar(playerid, "CellMenu");
    if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL)
    {
        if(GetPVarInt(playerid, "Mobile") < INVALID_MAXPL)
        {
            SendClientMessage(playerid, COLOR_ERROR, "You hung up.");
            SendClientMessage(GetPVarInt(playerid, "Mobile"), COLOR_ERROR, "The person on the other line has ended the call.");
            if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "CellMenu") == 0) CellphoneState(GetPVarInt(playerid, "Mobile"), 2);
            SetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile", INVALID_MAXPL);
            SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingTone", 0);
            SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingPhone", 0);
            CellphoneState(playerid,2);
            if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "PayPhone") == 0)
            {
                TogglePlayerControllableEx(GetPVarInt(playerid, "Mobile"),true);
                DeletePVar(GetPVarInt(playerid, "Mobile"),"PayPhone");
                DeletePVar(GetPVarInt(playerid, "Mobile"),"PhoneID");
            }
            CallRemoteFunction("LoadRadios","i", playerid);
            CallRemoteFunction("LoadRadios","i", GetPVarInt(playerid, "Mobile"));

            SetPVarInt(playerid, "RingPhone", 0);

            if(GetPVarInt(playerid, "PayPhone") != 0)
		    {
				SetPVarInt(playerid, "PayPhone", 0);
				TogglePlayerControllableEx(playerid, true);
		    }

		    if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "PayPhone") != 0)
		    {
		    	SetPVarInt(GetPVarInt(playerid, "Mobile"), "PayPhone", 0);
				TogglePlayerControllableEx(GetPVarInt(playerid, "Mobile"), true);
		    }

		    SetPVarInt(playerid, "Mobile", INVALID_MAXPL); // Disable the phone call.
            return 1;
        }
    }
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Mobile") == playerid)
        {
            SetPVarInt(i, "RingTone", 0);
            SetPVarInt(i, "RingPhone", 0);
            SetPVarInt(i, "Mobile", INVALID_MAXPL); // Disable the phone call.
            SendClientMessage(i, COLOR_ERROR, "They hung up.");
            if(GetPVarInt(i, "CellMenu") == 0)
            {
			    CellphoneState(i,2);
			}
			CallRemoteFunction("LoadRadios","i", i);
        }
    }

    if(GetPVarInt(playerid, "PayPhone") != 0)
    {
    	SetPVarInt(playerid, "PayPhone", 0);
    	TogglePlayerControllableEx(playerid, true);
    }

    SetPVarInt(playerid, "RingTone", 0);
    SetPVarInt(playerid, "RingPhone", 0);
    SetPVarInt(playerid, "Mobile", INVALID_MAXPL); // Disable the phone call.
    CellphoneState(playerid,2);
    CallRemoteFunction("LoadRadios","i", playerid);
	return 1;
}

ALTCOMMAND:achievement->achievements;
COMMAND:achievements(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not logged in.");
    new str[2048], found=0;
    for(new i = 0; i < MAX_ACHIEVEMENTS; i++)
	{
		if(PlayerInfo[playerid][pAch][i] == 0) {
		    if(i == 0) {
			format(str, sizeof(str), "{FFFFFF}%s (%s): {FF3333}incomplete.", AchievementTXT[i][aname], AchievementTXT[i][areason]);
			} else {
			format(str, sizeof(str), "%s\n{FFFFFF}%s (%s): {FF3333}incomplete.", str, AchievementTXT[i][aname], AchievementTXT[i][areason]); }
		} else {
		    found++;
		    if(i == 0) {
			format(str, sizeof(str), "{FFFFFF}%s (%s): {199643}completed.", AchievementTXT[i][aname], AchievementTXT[i][areason]);
			} else {
			format(str, sizeof(str), "%s\n{FFFFFF}%s (%s): {199643}completed.", str, AchievementTXT[i][aname], AchievementTXT[i][areason]); }
		}
	}
	format(str, sizeof(str), "%s\n\n{FFFFFF}%d/%d achievements completed.", str, found, MAX_ACHIEVEMENTS);
    ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Achievements", str, "Close", "");
	return 1;
}

COMMAND:wireplayer(playerid, params[])
{
	new targetid, option[32], string[128], giveplayer[MAX_PLAYER_NAME];
	if(GetPVarInt(playerid, "Duty") != 1 && GetPVarInt(playerid, "Member") == FACTION_LSPD) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
	if(sscanf(params, "us[32]", targetid, option)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /wireplayer [playerid] [on/off]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    //if (playerid == targetid) return SendClientMessage(playerid, COLOR_ERROR, "You cannot wire yourself.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		{
			if(IsPlayerInDivision(playerid, 2))
			{
		        if(PlayerToPlayer(playerid,targetid, 3.0))
		        {
		            format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
		            GiveNameSpace(giveplayer);
        	        if(strcmp(option, "on", true) == 0)
        	        {
        	            format(string, sizeof(string), "Wire placed onto %s.", giveplayer);
        	            SendClientMessage(playerid, COLOR_WHITE, string);
    	                SetPVarInt(targetid, "TrackBug", 1);
    	                SetPVarInt(targetid, "TrackBugPL", playerid);
        	        }
        	        else if(strcmp(option, "off", true) == 0)
        	        {
        	            format(string, sizeof(string), "Wire removed off of %s.", giveplayer);
        	            SendClientMessage(playerid, COLOR_WHITE, string);
    	                DeletePVar(targetid,"TrackBug");
    	                DeletePVar(targetid,"TrackBugPL");
        	        }
    	        }
    	        else SendClientMessage(playerid,COLOR_ERROR,"You are not close enough to that player!");
    	    }
    	    else SendClientMessage(playerid,COLOR_ERROR,"You aren't high enough rank to perform this command!");
		}
	}
	return 1;
}

COMMAND:wireoff(playerid, params[])
{
	new string[128],sendername[MAX_PLAYER_NAME];
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if (GetPVarInt(playerid, "TrackBug") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You do not have a wire on.");
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    format(string, sizeof(string), "*** %s takes the wire off.", sendername);
    ProxDetector(30.0, playerid, string, COLOR_PURPLE);
    if(IsPlayerConnected(GetPVarInt(playerid, "TrackBugPL"))) SendClientMessage(GetPVarInt(playerid, "TrackBugPL"), COLOR_ERROR,"** (MOLE) You hear static noise as the wire signal stops **");
    DeletePVar(playerid,"TrackBug");
    DeletePVar(playerid,"TrackBugPL");
	return 1;
}

COMMAND:tracephone(playerid, params[])
{
	new number, Float:X, Float:Y, Float:Z;
	if(sscanf(params, "i", number)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /tracephone {FFFFFF}[number]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if (number == GetPVarInt(playerid, "PhoneNum")) return SendClientMessage(playerid, COLOR_ERROR, "You cannot trace yourself.");
        if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
        if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid,COLOR_ERROR,"You do not have access to this command.");
        if(GetPVarInt(playerid, "PhoneDelay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
      	new found = 0, allow;
      	if(GetPVarInt(playerid, "Rank") >= 1) {
		allow++; }
		if(IsPlayerInDivision(playerid, 1) == 1 || IsPlayerInDivision(playerid, 2)) {
		allow++; }
      	if(allow == 0) {
			SendClientMessage(playerid,COLOR_ERROR,"You do not have access to this command.");
      	    return 1;
      	}
		foreach (Player, i)
		{
		    if(GetPVarInt(i, "PlayerLogged") == 1)
		    {
				if(GetPVarInt(i, "PhoneNum") == number)
				{
                    if (GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid);
                    if (GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid);
                    if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid);
	                if(GetPlayerInterior(i) != 0) return SendPhoneMessage(playerid);
	                if(GetPlayerVirtualWorld(i) != 0) return SendPhoneMessage(playerid);

					found = 0; // Set found to 0 and check player's inventory if he has a 
					for(new j = 0; j < MAX_INV_SLOTS; j++)
					{
						if(PlayerInfo[i][pInvItem][j] == 405)
						{
							if(found == 0) found = 1;
						}
					}
					if(found == 0) return SendPhoneMessage(playerid);

      	            SendClientMessage(playerid, COLOR_WHITE, "Phone traced on your GPS.");
      	            GetPlayerPos(i,X,Y,Z);
      	            SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
      	            SetPVarInt(playerid, "PhoneDelay", GetCount()+10000);
		        }
		    }
		}
		if(found == 0) return SendClientMessage(playerid, COLOR_ERROR, "Couldn't find anyone with that number online.");
	}
	return 1;
}

COMMAND:marriage(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /marriage [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
	    if(!IsPlayerInRangeOfPoint(playerid,2.0,2867.2097,1069.5339,-63.3413)) return SendClientMessage(playerid, COLOR_ERROR, "You are not around the marriage checkpoint.");
	    if(strcmp(PlayerInfo[playerid][pMarriedTo], "None", true) == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are already married to some-one.");
	    if(PlayerToPlayer(playerid,targetid,5.0))
	    {
	        if(strcmp(PlayerInfo[targetid][pMarriedTo], "None", true) == 0)
	        {
				if(GetPlayerMoneyEx(playerid) >= 20000)
				{
				    SetPVarInt(playerid, "MarriagePlayer", targetid);
				    SetPVarInt(targetid, "MarriagePlayer", playerid);
   			    	format(sendername, sizeof(sendername), "%s", PlayerInfo[targetid][pUsername]);
      		    	GiveNameSpace(sendername);
      		    	format(string, sizeof(string),"You sent a propose to %s.",sendername);
      		    	SendClientMessage(playerid,COLOR_WHITE,string);
      		    	format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		    	GiveNameSpace(sendername);
      		    	format(string, sizeof(string),"Would you like to marry %s?",sendername);
      		    	ShowPlayerDialogEx(targetid,505,DIALOG_STYLE_MSGBOX,"Marriage Propose",string,"Yes", "No");
      		    }
      		    else
      		    {
      		        SendClientMessage(playerid, COLOR_ERROR, "You need $20,000 to continue.");
      		    }
      		}
      		else
      		{
      		    SendClientMessage(playerid, COLOR_ERROR, "This player is already married to some-one.");
      		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You are not around that player.");
		}
	}
	return 1;
}

COMMAND:divorce(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	
	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT `ID`, `MarriedTo` FROM `accounts` WHERE `MarriedTo`='%s'", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "CheckMarriage", "i", playerid);
	return 1;
}



COMMAND:mdc(playerid, params[]) {
	if(GetPVarInt(playerid, "mdc_shown") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You already have the Mobile Data Computer opened (Reminder: Use /cursor to get your cursor back active).");
    if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSFD && GetPVarInt(playerid, "Member") != FACTION_LSG) return SendClientMessage(playerid, COLOR_ERROR, "You have to be a part of LSPD, LSG or LSFD to access the Mobile Data Computer.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Rank") <= 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to the MDC.");
	new vehicleID = GetPlayerVehicleID(playerid),
		bool:access = false;

	if(VehicleInfo[vehicleID][vType] == VEHICLE_LSPD || VehicleInfo[vehicleID][vType] == VEHICLE_GOV || VehicleInfo[vehicleID][vType] == VEHICLE_LSFD) {
		access = true;
	}

	if(access != true) {
        for(new i = 0; i < sizeof(mdc_coordinates); i++) {
			if(IsPlayerInRangeOfPoint(playerid, MDC_DEFAULT_ACCESS_RANGE, mdc_coordinates[i][0], mdc_coordinates[i][1], mdc_coordinates[i][2])) {
			    access = true;
			}
		}
	}

	if(access == true) {
		mdc_ShowPlayerStartScreen(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Press ESC to disable the cursor and use /cursor to enable it.");
		SetPVarInt(playerid, "mdc_shown", 1);
	} else {
        SendClientMessage(playerid, COLOR_ERROR, "You are not close to a computer of the LSPD and you are not in a governmental vehicle equipped with an MDC.");
	}

	return 1;
}

COMMAND:cursor(playerid, params) {
	SelectTextDraw(playerid, -1);
	return 1;
}

COMMAND:weapon(playerid, params[])
{
	new result[64], bone;
    if(sscanf(params, "s[64]I(-1)", result, bone)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /weapon [adjust/bone/hide/reset]");
    else {
	    new weaponid = PlayerInfo[playerid][pPlayerWeapon];
	    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
        if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to do this command!");
        if(weaponid == 0) return error(playerid, "You currently have no weapon equipped.");
        if(strcmp(result, "adjust", true) == 0)
        {
	        SetPVarInt(playerid, "Delay", GetCount()+2000);

	        if(weaponid >= 22 && weaponid <= 24)
		    {
		    	if(HolsterInfo[playerid][weaponid][hBone] > 0)
		        {
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
		            HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
		        }
		        else
		        {
		        	HolsterInfo[playerid][weaponid][hBone] = 1;
			    	HolsterInfo[playerid][weaponid][hoX] = 0.139415;
			    	HolsterInfo[playerid][weaponid][hoY] = -0.167970;
			    	HolsterInfo[playerid][weaponid][hoZ] = 0.120848;
			    	HolsterInfo[playerid][weaponid][hrX] = 0.000000;
			    	HolsterInfo[playerid][weaponid][hrY] = 152.342666;
			    	HolsterInfo[playerid][weaponid][hrZ] = 0.000000;

		            SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], 1, 0.139415, -0.167970, 0.120848, 0.000000, 152.342666, 0.000000);
		        }
	        }
			else if(weaponid >= 25 && weaponid <= 34)
		    {
		    	if(HolsterInfo[playerid][weaponid][hBone] > 0)
		        {
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
		            HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
		        }
		        else
		        {
		        	HolsterInfo[playerid][weaponid][hBone] = 8;
			    	HolsterInfo[playerid][weaponid][hoX] = -0.044177;
			    	HolsterInfo[playerid][weaponid][hoY] = 0.000000;
			    	HolsterInfo[playerid][weaponid][hoZ] = 0.092454;
			    	HolsterInfo[playerid][weaponid][hrX] = 246.994583;
			    	HolsterInfo[playerid][weaponid][hrY] = 0.000000;
			    	HolsterInfo[playerid][weaponid][hrZ] = 0.000000;

		            SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN1, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
		            HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
		        }
	        }
	        else
	        {
	        	return 1;
	        }
	        
	        SaveHolster(playerid);

	        EditAttachedObject(playerid, HOLDOBJECT_GUN2);
	        SetPVarInt(playerid, "EditorMode", 15);
	    }
	    else if(strcmp(result, "bone", true) == 0)
	    {
	        if(bone == (-1))
	        {
				SendClientMessage(playerid, COLOR_ERROR, "USAGE: /weapon bone [id]");
				SendClientMessage(playerid, COLOR_ERROR, "1: Spine | 2: Left Thigh | 3: Right Thigh | 4: Right Calf | 5: Left Calf");
				return 1;
			}

			if(bone < 1 || bone > 5) return SendClientMessage(playerid, COLOR_ERROR, "Cannot go under 1 or above 5.");
			new boneid = 1;

			switch(bone)
			{
			    case 1: boneid = 1;
			    case 2: boneid = 7;
			    case 3: boneid = 8;
			    case 4: boneid = 11;
			    case 5: boneid = 12;
			}

			HolsterInfo[playerid][weaponid][hBone] = boneid;
			
			SaveHolster(playerid);
			
			scm(playerid, -1, "Holster bone adjustment set.");
	    }
	    else if(strcmp(result, "hide", true) == 0)
	    {
			new string[128];
	    	if(weaponid >= 22 && weaponid <= 24)
		    {
		        if(HolsterInfo[playerid][weaponid][hBone] == 0) {
		            HolsterInfo[playerid][weaponid][hBone] = 8;
		    	    HolsterInfo[playerid][weaponid][hoX] = -0.044177;
		    	    HolsterInfo[playerid][weaponid][hoY] = 0.000000;
		    	    HolsterInfo[playerid][weaponid][hoZ] = 0.092454;
		    	    HolsterInfo[playerid][weaponid][hrX] = 246.994583;
		    	    HolsterInfo[playerid][weaponid][hrY] = 0.000000;
		    	    HolsterInfo[playerid][weaponid][hrZ] = 0.000000;
	            }
		        switch(HolsterInfo[playerid][weaponid][hHide])
		        {
		            case 0: {
		                HolsterInfo[playerid][weaponid][hHide] = 1;
		                format(string, 128, "%s is now hidden.", DeathNames[weaponid]);
					}
					case 1: {
					    HolsterInfo[playerid][weaponid][hHide] = 0;
					    format(string, 128, "%s is now visible.", DeathNames[weaponid]);
					}
		        }
		    	scm(playerid, -1, string);
		    	CallRemoteFunction("LoadHolsters","i",playerid);
		    	SaveHolster(playerid);
	        }
	        else
	        {
	        	SendClientMessage(playerid, COLOR_ERROR, "This weapon can't be hidden.");
	        }
	    }
	    else if(strcmp(result, "reset", true) == 0)
	    {
	    	if(weaponid >= 22 && weaponid <= 24)
		    {
		        HolsterInfo[playerid][weaponid][hBone] = 8;
		    	HolsterInfo[playerid][weaponid][hoX] = -0.044177;
		    	HolsterInfo[playerid][weaponid][hoY] = 0.000000;
		    	HolsterInfo[playerid][weaponid][hoZ] = 0.092454;
		    	HolsterInfo[playerid][weaponid][hrX] = 246.994583;
		    	HolsterInfo[playerid][weaponid][hrY] = 0.000000;
		    	HolsterInfo[playerid][weaponid][hrZ] = 0.000000;

		    	SendClientMessage(playerid, COLOR_WHITE, "Weapon reset.");
		    	SaveHolster(playerid);
	        }
			else if(weaponid >= 25 && weaponid <= 34)
		    {
		        HolsterInfo[playerid][weaponid][hBone] = 1;
		    	HolsterInfo[playerid][weaponid][hoX] = 0.139415;
		    	HolsterInfo[playerid][weaponid][hoY] = -0.167970;
		    	HolsterInfo[playerid][weaponid][hoZ] = 0.120848;
		    	HolsterInfo[playerid][weaponid][hrX] = 0.000000;
		    	HolsterInfo[playerid][weaponid][hrY] = 152.342666;
		    	HolsterInfo[playerid][weaponid][hrZ] = 0.000000;

		    	SendClientMessage(playerid, COLOR_WHITE, "Weapon reset.");
		    	SaveHolster(playerid);
	        }
	        else
	        {
	        	SendClientMessage(playerid, COLOR_ERROR, "This weapon can't be reset.");
	        }
	    }
	    else
	    {
	    	SendClientMessage(playerid, COLOR_ERROR, "USAGE: /weapon [adjust/bone/hide/reset]");
	    }
	}
	return 1;
}

COMMAND:itemname(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);
	
	new itemid, string[128];
	if(sscanf(params, "i", itemid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /itemname [Item ID]");

	new count = 0;
	for(new i = 0; i < sizeof(ItemIDs); i++)
	{
		if(ItemIDs[i][ItemID] == itemid)
		{
			count++;
			format(string, sizeof(string), "%i (%i): %s", ItemIDs[i][ItemID], ItemIDs[i][Q], ItemIDs[i][Name]);
			SendClientMessage(playerid, COLOR_ERROR, string);
			break;
		}
	}

	if(count == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "No items found.");
	}
	return 1;
}

COMMAND:itemid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new item_name[64], string[128];
	if(sscanf(params, "s[64]", item_name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /itemid [Item Name]");

	new count = 0;
	for(new i = 0; i < sizeof(ItemIDs); i++)
	{
		if(strfind(ItemIDs[i][Name], item_name, true) != -1)
		{
			count++;
			format(string, sizeof(string), "%i (%i): %s", ItemIDs[i][ItemID], ItemIDs[i][Q], ItemIDs[i][Name]);
			SendClientMessage(playerid, COLOR_ERROR, string);
		}
	}

	if(count == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "No items found.");
	}
	return 1;
}

COMMAND:gunrack(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a police vehicle to use this.");
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_LSPD) return SendClientMessage(playerid, COLOR_WHITE, "You need to be in a police vehicle to use this.");
    if(GetPVarInt(playerid, "Delay") > GetCount()) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
	if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid, COLOR_ERROR, "This command can only be used in the front two seats of the vehicle.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 523 || 
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 510 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 462 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 448 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 522 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 581 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 471 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 461 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 521 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 586 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 468 ||
		GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) return SendClientMessage(playerid, COLOR_ERROR, "Motorcycles don't have a gun rack.");

	new option[64], slot;
	if(sscanf(params, "s[64]I(-1)", option, slot)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gunrack [take/put/check]");

	if(!strcmp(option, "take"))
	{
		if(slot == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gunrack [take] [1-3]");

		if(slot == 1)
		{
			slot = 0;
		}
		else if(slot == 2)
		{
			slot = 1;
		}
		else if(slot == 3)
		{
			slot = 2;
		}
		else
		{
			return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gunrack [take] [1-3]");
		}

		new string[128];
		if(PlayerInfo[playerid][pPlayerWeapon] != 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "You already have a weapon equipped.");
		    return true;
		}

		if(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot] == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "There is no gun in the gun rack.");
		    return true;
		}

		ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0);

	    PlayerInfo[playerid][pAmmoType] = CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_E][slot];
	    GivePlayerWeaponEx(playerid, CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot], CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Ammo][slot]);
	    PlayerInfo[playerid][pPlayerSerial] = CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Serial][slot];

	    format(string, sizeof(string), "%s equipped from the gun rack!", PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot]));
	    SendClientMessage(playerid, COLOR_WHITE, string);

	    CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot] = 0;
		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Ammo][slot] = 0;
		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_E][slot] = 0;
		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Serial][slot] = 0;
	    
	    CallRemoteFunction("LoadHolsters", "i", playerid);
    	SetTimerEx("FixInv", 500, false, "i", playerid);
    	SetPVarInt(playerid, "Delay", GetCount()+3000);
    	return 1;
	}
	else if(!strcmp(option, "put"))
	{
		if(slot == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gunrack [put] [1-3]");

		if(slot == 1)
		{
			slot = 0;
		}
		else if(slot == 2)
		{
			slot = 1;
		}
		else if(slot == 3)
		{
			slot = 2;
		}
		else
		{
			return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gunrack [put] [1-2]");
		}

		new string[128];
		if(PlayerInfo[playerid][pPlayerWeapon] == 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon equipped.");
		    return true;
		}

		if(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot] != 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "There is already a weapon in the gunrack.");
		    return true;
		}

		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot] = PlayerInfo[playerid][pPlayerWeapon];
		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Ammo][slot] = PlayerInfo[playerid][pPlayerAmmo];
		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_E][slot] = PlayerInfo[playerid][pAmmoType];
		CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Serial][slot] = PlayerInfo[playerid][pPlayerSerial];

	    format(string, sizeof(string), "%s stored in the gun rack!", PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][slot]));
	    SendClientMessage(playerid, COLOR_WHITE, string);

	    ResetPlayerWeaponsEx(playerid);
		PlayerInfo[playerid][pPlayerWeapon] = 0;
		PlayerInfo[playerid][pPlayerAmmo] = 0;
		PlayerInfo[playerid][pAmmoType] = 0;

		RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
		SetPVarInt(playerid, "JustChosen", 0);
		CallRemoteFunction("LoadHolsters","i",playerid);
        RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
        SetPVarInt(playerid, "Delay", GetCount()+3000);
        return 1;
	}
	if(!strcmp(option, "check"))
	{
		new string[128];
		if(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][0] != 0)
		{
			format(string, sizeof(string), "1: %s (%i):[%s]", 
				PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][0]), 
				CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Ammo][0], 
				PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_E][0]));
		}
		else
		{
			format(string, sizeof(string), "1: EMPTY SLOT");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][1] != 0)
		{
			format(string, sizeof(string), "2: %s (%i):[%s]", 
				PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][1]), 
				CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Ammo][1], 
				PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_E][1]));
		}
		else
		{
			format(string, sizeof(string), "2: EMPTY SLOT");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][2] != 0)
		{
			format(string, sizeof(string), "3: %s (%i):[%s]", 
				PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Weapon][2]), 
				CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_Ammo][2], 
				PrintIName(CopInfo[GetPlayerVehicleID(playerid)][Gun_Rack_E][2]));
		}
		else
		{
			format(string, sizeof(string), "3: EMPTY SLOT");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gunrack [take/put/check]");
	}
	return 1;
}

COMMAND:checkwounds(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	
	new target;
	if(sscanf(params, "u", target)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /checkwounds [playerid]");

	if(GetPVarInt(target, "Wound_T") == 0 && GetPVarInt(target, "Wound_A") == 0 && GetPVarInt(target, "Wound_L") == 0) return SendClientMessage(playerid, COLOR_ERROR, "This player has no wounds.");

	SendClientMessage(playerid, COLOR_WHITE, "_____________________________");
	if(GetPVarInt(target, "Wound_T") != 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "Torso Wound");
	}
	else if(GetPVarInt(target, "Wound_A") != 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "Arm Wound");
	}
	else if(GetPVarInt(target, "Wound_L") != 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "Leg Wound");
	}
	SendClientMessage(playerid, COLOR_WHITE, "_____________________________");
	return 1;
}

COMMAND:candidate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new target[32];
	if(sscanf(params, "s[32]", target)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /candidate [Firstname_Lastname]");

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `candidates` WHERE name='%s'", target);
	mysql_pquery(handlesql, query, "CheckCandidate", "is", playerid, target);
	return 1;
}

COMMAND:voting(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new string[128];
	if(voting_enabled == false)
	{
		voting_enabled = true;
		format(string, sizeof(string),"AdmCmd: %s enabled voting.", PlayerInfo[playerid][pUsername]);
		SendAdminMessage(COLOR_YELLOW, string);
	}
	else
	{
		voting_enabled = false;
		format(string, sizeof(string),"AdmCmd: %s disabled voting.", PlayerInfo[playerid][pUsername]);
		SendAdminMessage(COLOR_YELLOW, string);
	}
	return 1;
}

COMMAND:vote(playerid, params[])
{
	if(voting_enabled == false) return SendClientMessage(playerid, COLOR_ERROR, "Voting has not started yet.");
	if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 TLS to use this command.");

	new target[32];
	if(sscanf(params, "s[32]", target)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /vote [Firstname_Lastname]");

	for(new i = 0; i < MAX_VOTING_BOOTHS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, votingbooth[i][vbX], votingbooth[i][vbY], votingbooth[i][vbZ]) && votingbooth[i][vbCreated] == true)
		{
			if(!strcmp(target, PlayerInfo[playerid][pUsername])) return SendClientMessage(playerid, COLOR_ERROR, "You can't vote for yourself.");

			new query[256];
			mysql_format(handlesql, query, sizeof(query), "SELECT `name` FROM `votes` WHERE name='%s'", PlayerInfo[playerid][pUsername]);
			mysql_pquery(handlesql, query, "CheckVote", "is", playerid, target);
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_ERROR, "There are no voting booths close by.");
}

COMMAND:checkvotes(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new string[128];
	format(string, sizeof(string),"AdmCmd: %s checked the votes.", PlayerInfo[playerid][pUsername]);
	SendAdminMessage(COLOR_YELLOW, string);

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `candidates`", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "CheckVotes", "i", playerid);
	return 1;
}

COMMAND:votingbooth(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new option[32];
	if(sscanf(params, "s[32]", option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /votingbooth [add/remove]");

	if(!strcmp(option, "add"))
	{
		for(new i = 0; i < MAX_VOTING_BOOTHS; i++)
		{
			if(votingbooth[i][vbCreated] == false)
			{
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);

				votingbooth[i][vbX] = x;
				votingbooth[i][vbY] = y;
				votingbooth[i][vbZ] = z;

				votingbooth[i][vbTextLabel] = Create3DTextLabel("Voting Booth", 0x008080FF, x, y, z, 10.0, 0, 1);
				votingbooth[i][vbCreated] = true;

				new string[128];
				format(string, sizeof(string),"AdmCmd: %s has created a voting booth.", PlayerInfo[playerid][pUsername]);
				SendAdminMessage(COLOR_YELLOW, string);
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_ERROR, "You can't create any more voting booths.");
	}
	else if(!strcmp(option, "remove"))
	{
		for(new i = 0; i < MAX_VOTING_BOOTHS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, votingbooth[i][vbX], votingbooth[i][vbY], votingbooth[i][vbZ]) && votingbooth[i][vbCreated] == true)
    		{
    			votingbooth[i][vbX] = 0;
				votingbooth[i][vbY] = 0;
				votingbooth[i][vbZ] = 0;

    			Delete3DTextLabel(votingbooth[i][vbTextLabel]);
    			votingbooth[i][vbCreated] = false;

    			new string[128];
				format(string, sizeof(string),"AdmCmd: %s has deleted a voting booth.", PlayerInfo[playerid][pUsername]);
				SendAdminMessage(COLOR_YELLOW, string);
    			return 1;
    		}
		}
		SendClientMessage(playerid, COLOR_ERROR, "There are no voting booths close by.");
	}
	else
	{
		return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /votingbooth [add/remove]");
	}

	return 1;
}

COMMAND:ga(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return nal(playerid);

	new targetid, achievmentid;
	if(sscanf(params, "ui", targetid, achievmentid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /ga [playerid] [achievmentid]");

	if(achievmentid > MAX_ACHIEVEMENTS || achievmentid < 0) return SendClientMessage(playerid, COLOR_ERROR, "Invalid achievement ID.");

	GiveAchievement(targetid, achievmentid);

	new string[128], sendername[MAX_PLAYER_NAME];

	sendername = PlayerInfo[playerid][pUsername];
	GiveNameSpace(sendername);

	format(string, sizeof(string),"You have recieved the %s achievement!", AchievementTXT[achievmentid]);
	SendClientMessage(targetid, COLOR_ERROR, string);
	return 1;
}

COMMAND:winners(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return nal(playerid);

	new winners;
	if(sscanf(params, "i", winners)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /winners [ammount of winners]");

	new participants[MAX_PLAYERS];

	foreach(new i : Player)
    {
		participants[i] = -1;
	}

	new participant_count = 0;
	foreach(new i : Player)
	{
		new count = 0;
		/*
		if(PlayerInfo[i][pAch][17] != 0)
		{
			count++;
		}
		*/

		if(count >= 1)
		{
			participants[participant_count] = i;
			participant_count++;
		}
	}

	if(participant_count == 0)
	{
		return SendClientMessage(playerid, COLOR_ERROR, "There are no participatns, so you are unable to select winners now.");
	}

	new string[128], string2[128];
	format(string, sizeof(string), "Total participants: %i", participant_count);
	SendClientMessageToAll(COLOR_WHITE, string);

	string = "";
	new winner_count = 0;
	for(new i = 0; i < winners; i++)
	{
		new winner = random(participant_count);
		participant_count--;
		winner_count++;

		format(string2, sizeof(string2), "%i: %s", winner_count, PlayerInfo[participants[winner]][pUsername]);
		SendClientMessage(playerid, COLOR_WHITE, string2);

		participants[winner] = -1;

		for(new i2 = 0; i2 < participant_count; i2++)
		{
			if(participants[i2] == -1)
			{
				participants[i2] = participants[i2 + 1];
				participants[i2 + 1] = -1;
			}
		}
	}
	return 1;
}

COMMAND:garage(playerid, params[])
{
	if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");

	new option[32];
	if(sscanf(params, "s[32]", option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /garage [exit/bareswitch]");

	/*if(strcmp(params, "entrance", true) == 0)
  	{
  		new id = GetPVarInt(playerid, "HouseKey");

  		if(HouseInfo[id][hClass] <= 1) return SendClientMessage(playerid, COLOR_ERROR, "Only houses of medium class and up can have a garage.");
  		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You have to be on foot in order to do this.");
  		if(!IsPlayerInRangeOfPoint(playerid, HOUSE_GARAGE_DISTANCE, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo])) return SendClientMessage(playerid, COLOR_ERROR, "You are too far away from your house's entrance.");
		
		new string[128];
		format(string, sizeof(string), "Are you sure you want to set up your garage here?\n\nPrice: $%i", GARAGE_ENTRANCE_COST);
        ShowPlayerDialogEx(playerid, 513, DIALOG_STYLE_MSGBOX, "Garage Entrance", string, "Yes", "No");
  	}*/
  	else if(strcmp(params, "exit", true) == 0)
  	{
  		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You have to be on foot in order to do this.");
  		if(GetPVarInt(playerid, "GarageEnter") != GetPVarInt(playerid, "HouseKey")) return SendClientMessage(playerid, COLOR_ERROR, "You have to be inside of your garage in order to do this.");

  		new string[128];
  		format(string, sizeof(string), "Are you sure you want to set up your garage's exit here?\n\nPrice: %s", FormatMoney(GARAGE_EXIT_COST));
        ShowPlayerDialogEx(playerid, 514, DIALOG_STYLE_MSGBOX, "Garage Exit", string, "Yes", "No");
  	}
  	else if(strcmp(params, "bareswitch", true) == 0)
  	{
  		new string[128];
  		format(string, sizeof(string), "Are you sure you want to bareswitch your garage?\n\nPrice: %s", FormatMoney(GARAGE_BARESWITCH_COST));
        ShowPlayerDialogEx(playerid, 515, DIALOG_STYLE_MSGBOX, "Garage Bareswitch", string, "Yes", "No");
  	}
  	/*else if(strcmp(params, "remove", true) == 0)
  	{
  		new string[128];
  		format(string, sizeof(string), "Are you sure you want to remove your garage?");
        ShowPlayerDialogEx(playerid, 516, DIALOG_STYLE_MSGBOX, "Remove Garage", string, "Yes", "No");
  	}*/
  	else
  	{
  		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /garage [exit/bareswitch]");
  	}
  	return 1;
}

COMMAND:removefurnid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 8) return nal(playerid);

	new objectid;
	if(sscanf(params, "i", objectid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /removefurnid [id]");

	foreach(new i : HouseIterator)
	{
		for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
		{
			if(HouseInfo[i][hoDBID][i2] == objectid)
			{
				new string[128];
				format(string, sizeof(string), "Object deleted. (Object ID: %i)", HouseInfo[i][hObject][i2]);
				SendClientMessage(playerid, COLOR_ERROR, string);

				RemoveHouseObject(i, i2);
				return 1;
			}
		}
	}

	foreach(new i : BizIterator)
	{
		for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
		{
			if(BizInfo[i][boDBID][i2] == objectid)
			{
				new string[128];
				format(string, sizeof(string), "Object deleted. (Object ID: %i)", BizInfo[i][bObject][i2]);
				SendClientMessage(playerid, COLOR_ERROR, string);

				RemoveBizObject(i, i2);
				return 1;
			}
		}
	}
	return 1;
}

COMMAND:removefurnclosest(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 8) return nal(playerid);

	foreach(new i : HouseIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]) || GetPVarInt(playerid, "HouseEnter") == i || GetPVarInt(playerid, "GarageEnter") == i)
		{
			for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hoX][i2], HouseInfo[i][hoY][i2], HouseInfo[i][hoZ][i2]))
				{
					new string[128];
					format(string, sizeof(string), "Object deleted. (Object ID: %i)", HouseInfo[i][hObject][i2]);
					SendClientMessage(playerid, COLOR_ERROR, string);

					RemoveHouseObject(i, i2);
				}
			}
		}
	}

	foreach(new i : BizIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]) || GetPVarInt(playerid, "BizEnter") == i)
		{
			for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, BizInfo[i][boX][i2], BizInfo[i][boY][i2], BizInfo[i][boZ][i2]))
				{
					new string[128];
					format(string, sizeof(string), "Object deleted. (Object ID: %i)", BizInfo[i][bObject][i2]);
					SendClientMessage(playerid, COLOR_ERROR, string);

					RemoveBizObject(i, i2);
				}
			}
		}
	}
  	return 1;
}

COMMAND:vehiclesetspawn(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /vehiclesetspawn [databaseid]");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `X`=%f, `Y`=%f, `Z`=%f, `VirtualWorld`=%i, `Interior`=%i WHERE `ID`=%i", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), id);
	mysql_pquery(handlesql, query);

	SendClientMessage(playerid, COLOR_WHITE, "Vehicle's spawn point has been set to your current position, virtual world and interior.");
	return 1;
}

COMMAND:vehicledespawn(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /vehicledespawn [databaseid]");

	foreach(new i : VehicleIterator)
	{
		if(VehicleInfo[i][vID] == id)
		{
			SaveVehicleData(i);
			DespawnVehicle(i);
			SendClientMessage(playerid, COLOR_WHITE, "Vehicle despawned!");
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "Vehicle with this ID does not exist in the database or is not spawned.");
	return 1;
}

COMMAND:vehiclespawn(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return nal(playerid);
	
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /vehiclespawn [databaseid]");

	new query[100];
	mysql_format(handlesql, query, sizeof(query), "SELECT `ID` FROM `vehicles` WHERE `ID`=%i", id);
	mysql_pquery(handlesql, query, "vs_OnAdminVehicleSpawnSelected", "i", playerid);
	return 1;
}

COMMAND:arcadecreate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return nal(playerid);

	new type;
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /arcadecreate [type]");
		SendClientMessage(playerid, COLOR_ERROR, "1: NRG LV-Airport Race | 2: Painball");
		return 1;
	}

	if(type < 1 || type > 2) return SendClientMessage(playerid, COLOR_ERROR, "Invalid arcade type specified.");

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		if(Arcade[i][aX] == 0.0)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

			Arcade[i][aX] = x;
			Arcade[i][aY] = y;
			Arcade[i][aZ] = z;

			Arcade[i][aVirtualWorld] = GetPlayerVirtualWorld(playerid);
			Arcade[i][aInterior] = GetPlayerInterior(playerid);

			Arcade[i][aType] = type;
			Arcade[i][aOpen] = 0;

			if(Arcade[i][aType] == 1)
			{
				Arcade[i][aText] = CreateDynamic3DTextLabel("NRG Race", COLOR_ERROR, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Arcade[i][aVirtualWorld], Arcade[i][aInterior]);
			}
			else if(Arcade[i][aType] == 2)
			{
				Arcade[i][aText] = CreateDynamic3DTextLabel("Paintball", COLOR_ERROR, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Arcade[i][aVirtualWorld], Arcade[i][aInterior]);
			}

			SendClientMessage(playerid, COLOR_WHITE, "Arcade created!");
			return 1;
		}
	}

	return 1;
}

COMMAND:arcaderemove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return nal(playerid);

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Arcade[i][aX], Arcade[i][aY], Arcade[i][aZ]) && GetPlayerVirtualWorld(playerid) == Arcade[i][aVirtualWorld] && GetPlayerInterior(playerid) == Arcade[i][aInterior])
		{
			Arcade[i][aX] = 0;
			Arcade[i][aY] = 0;
			Arcade[i][aZ] = 0;

			Arcade[i][aVirtualWorld] = 0;
			Arcade[i][aInterior] = 0;

			Arcade[i][aOpen] = 0;

			DestroyDynamic3DTextLabel(Arcade[i][aText]);

			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "You are not near an arcade machine.");
	return 1;
}

COMMAND:arcade(playerid, params[])
{
	if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "You need 8 Time-In-LS to use this command.");

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Arcade[i][aX], Arcade[i][aY], Arcade[i][aZ]) && GetPlayerVirtualWorld(playerid) == Arcade[i][aVirtualWorld] && GetPlayerInterior(playerid) == Arcade[i][aInterior])
		{
			if(Arcade[i][aOpen] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This arcade is closed right now.");
			if(Arcade[i][aStarted] == 1) return SendClientMessage(playerid, COLOR_ERROR, "This arcade has already started.");

			OnPlayerDataSave(playerid);

			switch(Arcade[i][aType])
			{
				case 1:
				{
					PlayerInfo[playerid][pArcade] = Arcade[i][aType];

					new color1 = random(10);
					new color2 = random(10);

					new position = random(sizeof(RaceSpawn));
					new vehicleid = CreateVehicle(522, RaceSpawn[position][rsX], RaceSpawn[position][rsY], RaceSpawn[position][rsZ], RaceSpawn[position][rsA], color1, color2, -1);

					TogglePlayerControllable(playerid, false);

					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, MAX_PLAYERS + 1);

					LinkVehicleToInterior(vehicleid, 0);
					SetVehicleVirtualWorld(vehicleid, MAX_PLAYERS + 1);

					PutPlayerInVehicle(playerid, vehicleid, 0);

					VehicleInfo[vehicleid][vFuel] = 100;
					VehicleInfo[vehicleid][vEngineStats][1] = 1;
					VehicleInfo[vehicleid][vEngineStats][2] = 1;
					VehicleInfo[vehicleid][vBattery][1] = 1;
					VehicleInfo[vehicleid][vBattery][2] = 1;

					Iter_Add(VehicleIterator, vehicleid);
				}
				case 2:
				{
					TogglePlayerControllable(playerid, false);

					SetPlayerInterior(playerid, 10);
					SetPlayerVirtualWorld(playerid, 0);

					new position = random(sizeof(PaintballSpawn));
					SetPlayerPos(playerid, PaintballSpawn[position][pbX], PaintballSpawn[position][pbY], PaintballSpawn[position][pbZ]);
					PlayerInfo[playerid][pArcade] = Arcade[i][aType];

					SetPlayerArmour(playerid, 0);
					SetPlayerHealth(playerid, 100.0);
				}
			}
			
			SendClientMessage(playerid, COLOR_WHITE, "You have entered an arcade! (/arcadeleave to leave the arcade)");
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "You are not near an arcade machine.");
	return 1;
}

COMMAND:arcadeopen(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return nal(playerid);

	new type;
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /arcadeopen [type]");
		SendClientMessage(playerid, COLOR_ERROR, "1: NRG LV-Airport Race | 2: Painball");
		return 1;
	}

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		if(Arcade[i][aX] != 0.0 && Arcade[i][aType] == type)
		{
			Arcade[i][aOpen] = 1;
			Arcade[i][aStarted] = 0;
		}
	}

	SendClientMessage(playerid, COLOR_WHITE, "Arcade opened!");
	return 1;
}

COMMAND:arcadeclose(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return nal(playerid);

	new type;
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /arcadeclose [type]");
		SendClientMessage(playerid, COLOR_ERROR, "1: NRG LV-Airport Race | 2: Painball");
		return 1;
	}

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		if(Arcade[i][aX] != 0.0 && Arcade[i][aType] == type)
		{
			Arcade[i][aOpen] = 0;
			Arcade[i][aStarted] = 0;
		}
	}

	SendClientMessage(playerid, COLOR_WHITE, "Arcade closed!");
	return 1;
}

COMMAND:arcadestart(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return nal(playerid);

	new count = 0;
	foreach(new i : Player)
	{
		switch(PlayerInfo[i][pArcade])
		{
			case 1:
			{
				count++;
				TogglePlayerControllable(i, true);
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);

        		CarEngine(GetPlayerVehicleID(i), 1);

        		PlayerInfo[i][pArcadeRaceCP] = CreateDynamicRaceCP(0, RaceCP[0][rcX], RaceCP[0][rcY], RaceCP[0][rcZ],
					RaceCP[1][rcX], RaceCP[1][rcY], RaceCP[1][rcZ], 10.0, -1, -1, i, 4000);

        		PlayerInfo[i][pArcadeRaceCount] = 1;

        		for(new i2 = 0; i2 < MAX_ARCADES; i2++)
				{
					if(Arcade[i2][aType] == PlayerInfo[i][pArcade] && Arcade[i2][aX] != 0.0)
					{
						Arcade[i2][aFinished] = 0;
						if(Arcade[i2][aLaps] == 0)
						{
							Arcade[i2][aLaps] = 1;
						}
						PlayerInfo[i][pArcadeLaps] = Arcade[i2][aLaps];
					}
				}
			}
			case 2:
			{
				count++;
				TogglePlayerControllable(i, true);
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);

				ApplyAnimationEx(i, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0);
			    PlayerInfo[i][pAmmoType] = 115;
			    GivePlayerWeaponEx(i, 29, 30);
			    PlayerInfo[i][pPlayerAmmo] = 120;
			    SetPlayerAmmo(i, 29, 120);
			    PlayerInfo[i][pPlayerSerial] = 0;
			}
		}
	}

	new string[128];
	format(string, sizeof(string), "The arcade has started with %i participants!", count);

	SendClientMessageToAll(COLOR_LIGHTBLUE, string);

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		Arcade[i][aStarted] = 1;
	}
	return 1;
}

COMMAND:arcadelaps(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return nal(playerid);

	new type, laps;
	if(sscanf(params, "ii", type, laps))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /arcadelaps [type] [laps]");
		SendClientMessage(playerid, COLOR_ERROR, "1: NRG LV-Airport Race | 2: Painball");
		return 1;
	}

	for(new i = 0; i < MAX_ARCADES; i++)
	{
		if(Arcade[i][aType] == type && Arcade[i][aX] != 0.0)
		{
			Arcade[i][aLaps] = laps;
		}
	}

	new string[128];
	format(string, sizeof(string), "Arcade laps set to %i!", laps);

	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:arcadeleave(playerid, params[])
{
	if(PlayerInfo[playerid][pArcade] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not in an arcade.");

	switch(PlayerInfo[playerid][pArcade])
	{
		case 1:
		{
			new string[128];
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pArcade] != 0)
				{
					format(string, sizeof(string), "%s has left the arcade!", GiveNameSpaceEx(PlayerInfo[playerid][pUsername]));
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
				}
			}

			DespawnVehicle(GetPlayerVehicleID(playerid));

			PlayerInfo[playerid][pArcade] = 0;
			PlayerInfo[playerid][pArcadeLaps] = 0;
			PlayerInfo[playerid][pArcadeRaceCP] = 0;
			PlayerInfo[playerid][pArcadeRaceCount] = 0;

			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "Interior"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "World"));

			OnPlayerDataSave(playerid);

			TogglePlayerControllable(playerid, true);

			SetPVarInt(playerid, "Dead", 0);
			PlayerWound(playerid, 0, 0);
		}
		case 2:
		{
			new string[128];
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pArcade] != 0)
				{
					format(string, sizeof(string), "%s has left the arcade!", GiveNameSpaceEx(PlayerInfo[playerid][pUsername]));
					SendClientMessage(i, COLOR_LIGHTBLUE, string);
				}
			}

			ResetPlayerWeaponsEx(playerid);

			PlayerInfo[playerid][pAmmoType] = 0;
			PlayerInfo[playerid][pPlayerWeapon] = 0;
			PlayerInfo[playerid][pPlayerAmmo] = 0;
			PlayerInfo[playerid][pPlayerSerial] = 0;

			PlayerInfo[playerid][pArcade] = 0;
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "Interior"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "World"));
			SetPlayerArmourEx(playerid, GetPVarInt(playerid, "Armour"));

			OnPlayerDataSave(playerid);

			new count = 0, winner = -1;
			foreach(new i : Player)
			{
				if(PlayerInfo[i][pArcade] != 0)
				{
					count++;
					winner = i;
				}
			}

			if(count == 1)
			{
				format(string, sizeof(string), "~w~Arcade Winner: ~y~%s", GiveNameSpaceEx(PlayerInfo[winner][pUsername]));
				GameTextForAll(string, 10000, 4);

				ResetPlayerWeaponsEx(winner);
			
				PlayerInfo[winner][pAmmoType] = 0;
				PlayerInfo[winner][pPlayerWeapon] = 0;
				PlayerInfo[winner][pPlayerAmmo] = 0;
				PlayerInfo[winner][pPlayerSerial] = 0;

				PlayerInfo[winner][pArcade] = 0;
				SetPlayerPosEx(winner, GetPVarFloat(winner, "PosX"), GetPVarFloat(winner, "PosY"), GetPVarFloat(winner, "PosZ"));
				SetPlayerInterior(winner, GetPVarInt(winner, "Interior"));
				SetPlayerVirtualWorld(winner, GetPVarInt(winner, "World"));

				OnPlayerDataSave(winner);

				TogglePlayerControllable(winner, true);

				for(new i = 0; i < MAX_ARCADES; i++)
				{
					Arcade[i][aStarted] = 0;
				}
			}

			TogglePlayerControllable(playerid, true);

			SetPVarInt(playerid, "Dead", 0);
			PlayerWound(playerid, 0, 0);
		}
	}
	return 1;
}

COMMAND:putkevlar(playerid, params[])
{
	if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");

	new Float:armour;
	GetPlayerArmourEx(playerid, armour);
	if(armour == 0.0) return SendClientMessage(playerid, COLOR_ERROR, "You don't have any armour.");

	SetPlayerArmourEx(playerid, 0.0);
	GiveInvItem(playerid, 1000, floatround(armour, floatround_round), 0);
	SendClientMessage(playerid, COLOR_WHITE, "Kevlar stored in your inventory!");
	return 1;
}

COMMAND:lockerrights(playerid, params[])
{
	new targetid, string[128];
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lockerrights [playerid]");

    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if (GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a faction to use this.");
    if (GetPVarInt(playerid, "Member") != FACTION_LSG) return SendClientMessage(playerid, COLOR_WHITE, "You must be in LSG to use this.");
	
	if(IsPlayerConnected(targetid))
	{
		if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member")))
		{
			if(GetPVarInt(playerid, "LockerRights") == 0)
			{
				SetPVarInt(targetid, "LockerRights", 1);

				format(string, sizeof(string), "You have given %s locker room rights!", PlayerInfo[targetid][pUsername]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
				SetPVarInt(targetid, "LockerRights", 0);

				format(string, sizeof(string), "You have revoked %s's locker room rights!", PlayerInfo[targetid][pUsername]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			return 1;
		}
	}
	return 1;
}

COMMAND:closebusiness(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSG) return nal(playerid);
	if(GetPVarInt(playerid, "Rank") < 5) return nal(playerid);

	foreach(new i : BizIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]))
		{
			new string[128];

			format(string, sizeof(string), "%s has closed down %s!", GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), BizInfo[i][Name]);
			SendFactionMessage(5, COLOR_ERROR, string);

			BizInfo[i][Closed] = 1;
			SaveBizID(i);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "You are not close to any business entrance.");
	return 1;
}

COMMAND:openbusiness(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSG) return nal(playerid);
	if(GetPVarInt(playerid, "Rank") < 5) return nal(playerid);

	foreach(new i : BizIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]))
		{
			new string[128];

			format(string, sizeof(string), "%s has opened %s!", GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), BizInfo[i][Name]);
			SendFactionMessage(5, COLOR_ERROR, string);

			BizInfo[i][Closed] = 0;
			SaveBizID(i);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "You are not close to any business entrance.");
	return 1;
}

COMMAND:wipers(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use this !");
	if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle dosent have an engine !");
	if(IsHelmetCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle dosent even have wipers.");
	if(GMWeather != 8) return SendClientMessage(playerid, COLOR_ERROR, "It's currently not raining.");
	switch(VehicleInfo[GetPlayerVehicleID(playerid)][vWipers])
	{
		case 0:
		{
	    	VehicleInfo[GetPlayerVehicleID(playerid)][vWipers]=1;
	    	foreach (Player,i)
    	    {
			    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
				{
				    SetPlayerWeather(i,9);
				    SendClientMessage(i,COLOR_LIGHTBLUE,"Windshield wipers turned on.");
			    }
    	    }
		}
		case 1:
		{
		    VehicleInfo[GetPlayerVehicleID(playerid)][vWipers]=0;
		    foreach (Player,i)
    	    {
			    if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
				{
				    SetPlayerWeather(i,8);
				    SendClientMessage(i,COLOR_LIGHTBLUE,"Windshield wipers turned off.");
			    }
    	    }
		}
	}
	return 1;
}

/*COMMAND:resync(playerid, params[])
{
	new targetid,string[128],sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /resync [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "Can't do this to a NPC.");
		if(GetPVarInt(playerid, "Admin") >= 1 || GetPVarInt(playerid, "Helper") >= 1)
		{
   			format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
      		format(giveplayer, sizeof(giveplayer), "%s", PlayerInfo[targetid][pUsername]);
      		GiveNameSpace(sendername);
      		GiveNameSpace(giveplayer);
      		if(GetPVarInt(playerid, "Admin") >= 11) sendername = "Hidden";
      		format(string, sizeof(string), "AdmCmd: %s was resynced by %s.", giveplayer, sendername);
      		SendAdminMessage(COLOR_ERROR,string);
      		format(string, sizeof(string), "You have resynced %s.", giveplayer);
      		scm(playerid, -1, string);
      		format(string, sizeof(string), "%s has resynced you.", sendername);
      		scm(targetid, -1, string);
      		//==========//
      		new playersip[128];
      		GetPlayerIp(targetid,playersip, sizeof(playersip));
      		format(string, sizeof(string),"banip %s", playersip);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
			//==========//
			PlayerInfo[playerid][pResync]=1;
			strmid(PlayerInfo[playerid][pIP], playersip, 0, strlen(playersip), 255);
      		//==========//
		}
		else
		{
		    SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
		}
	}
	return 1;
}*/

COMMAND:clearspawn(playerid, params[])
{
	new id[64], query[128];
	if(sscanf(params, "s[64]", id)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /clearspawn [name]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    format(query,sizeof(query),"UPDATE accounts SET World=0, Tut=0, PosX=0.0, PosY=0.0, PosZ=0.0 WHERE Name='%e'", id);
            mysql_pquery(handlesql, query);
			SCM(playerid, -1, "Spawn cleared.");
		}
		else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	}
	return 1;
}


/*COMMAND:entercontest(playerid, params[])
{
	for(new i = 0; i < sizeof(nrg_contest_players); i++)
	{
		if(strlen(nrg_contest_players[i]) != 0 && strcmp(nrg_contest_players[i], PlayerInfo[playerid][pUsername]) == 0)
		{
			SendClientMessage(playerid, COLOR_ERROR, "You are already taking part in the NRG raffle.");
			return 1;
		}
	}

	if(GetPVarInt(playerid, "PlayTime") <= 3600) return SendClientMessage(playerid, COLOR_ERROR, "You must play for at least an hour before you can participate in this contest.");

	for(new i = 0; i < sizeof(nrg_contest_players); i++)
	{
		if(strlen(nrg_contest_players[i]) == 0)
		{
			format(nrg_contest_players[i], MAX_PLAYER_NAME + 1, "%s", PlayerInfo[playerid][pUsername]);
			SendClientMessage(playerid, COLOR_WHITE, "You have entered the NRG raffle! (your name will still be in the raffle participant list even if you log off)");
			return 1;
		}
	}
	return 1;
}

COMMAND:participants(playerid, params[])
{
	if(strlen(nrg_contest_players[0]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "There are no participants in this raffle.");
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new string[128];
	for(new i = 0; i < sizeof(nrg_contest_players); i++)
	{
		if(strlen(nrg_contest_players[i]) != 0)
		{
			format(string, sizeof(string), "%d: %s", i + 1, nrg_contest_players[i]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}*/

COMMAND:firecreate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2 && GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	if(GetPVarInt(playerid, "Admin") < 2 && GetPVarInt(playerid, "Rank") < 13) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new Float:range;
	if(sscanf(params, "f", range)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /firecreate [range]");
	
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	CreateFire(x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), range);
	SendClientMessage(playerid, COLOR_WHITE, "Fire created.");
	return 1;
}

COMMAND:firecreatehouse(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 2) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	
	BuildingFireTimer();
	SendClientMessage(playerid, COLOR_WHITE, "A random property has been set on fire.");
	return 1;
}

COMMAND:fireremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new Float:range;
	if(sscanf(params, "f", range)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /fireremove [range]");

	if(!IsAroundFire(playerid, 1, range)) return SendClientMessage(playerid, COLOR_ERROR, "You are not around any fires.");

	new count = 0;
	for(new i = 0; i < sizeof(FireInfo); i++)
	{
		if(IsAroundFire(playerid, 1, range))
		{
			new id = IsAroundFire(playerid, 2, range);

			if(IsValidDynamicObject(FireInfo[id][fiObject]))
			{
				DestroyDynamicObject(FireInfo[id][fiObject]);
			}

			FireInfo[id][fiObject] = 0;
			FireInfo[id][fiX] = 0.0;
			FireInfo[id][fiY] = 0.0;
			FireInfo[id][fiZ] = 0.0;
			FireInfo[id][fiWorld] = 0;
			FireInfo[id][fiInt] = 0;
			FireInfo[id][fiTime] = 0;
			FireInfo[id][fiHealth] = 0;

			count++;
		}
	}

	new string[128];

	if(count > 1 || count == 0)
	{
		format(string, sizeof(string), "%i fires extinguished.", count);
	}
	else
	{
		format(string, sizeof(string), "%i fire extinguished.", count);
	}

	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:fireremoveall(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new count = 0;
	for(new i = 0; i < sizeof(FireInfo); i++)
	{
		if(IsValidDynamicObject(FireInfo[i][fiObject]))
		{
			DestroyDynamicObject(FireInfo[i][fiObject]);
			count++;
		}

		FireInfo[i][fiObject] = 0;
		FireInfo[i][fiX] = 0.0;
		FireInfo[i][fiY] = 0.0;
		FireInfo[i][fiZ] = 0.0;
		FireInfo[i][fiWorld] = 0;
		FireInfo[i][fiInt] = 0;
		FireInfo[i][fiTime] = 0;
		FireInfo[i][fiHealth] = 0;
	}

	new string[128];

	if(count > 1 || count == 0)
	{
		format(string, sizeof(string), "%i fires extinguished.", count);
	}
	else
	{
		format(string, sizeof(string), "%i fire extinguished.", count);
	}

	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

/*COMMAND:eventclothes(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1396.4072,-30.5178,1001.1188)) return true;
    ShowPlayerDialogEx(playerid, DIALOG_EVENT_CLOTHING, DIALOG_STYLE_LIST, "Select option", "Add attachments\nChange skin", "Select", "Cancel");
	return 1;
}*/

COMMAND:houseeditfurniture(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 7) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new houseid, option[32];
	if(sscanf(params, "is[32]", houseid, option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /houseeditfurniture [houseid] [reload/removeinside/removeoutside]");

	if(strcmp(option, "reload") == 0)
	{
		RemoveHouseObjects(houseid);

    	new query[248];
		format(query, sizeof(query), "SELECT * FROM housefurn WHERE HID=%d", houseid);
		mysql_pquery(handlesql, query, "LoadFurn", "i", houseid);

		SendClientMessage(playerid, COLOR_WHITE, "All house furniture reloaded.");
	}
	else if(strcmp(option, "removeinside") == 0)
	{
		for(new i = 0; i < MAX_HOUSE_OBJ; i++)
    	{
    		if(HouseInfo[houseid][hoID][i] != 0 && !IsHouseOutdoorObject(houseid, i))
    		{
	    		RemoveHouseObject(houseid, i);
			}
    	}

    	SendClientMessage(playerid, COLOR_WHITE, "All inside house furniture removed.");
	}
	else if(strcmp(option, "removeoutside") == 0)
	{
		for(new i = 0; i < MAX_HOUSE_OBJ; i++)
    	{
    		if(HouseInfo[houseid][hoID][i] != 0 && IsHouseOutdoorObject(houseid, i))
    		{
	    		RemoveHouseObject(houseid, i);
			}
    	}

    	SendClientMessage(playerid, COLOR_WHITE, "All outside house furniture removed.");
	}
	return 1;
}

COMMAND:housefurnitureinfo(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 7) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new houseid;
	if(sscanf(params, "i", houseid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /housefurnitureinfo [houseid]");

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(HouseInfo[houseid][hObject][i] != 0 ||
			HouseInfo[houseid][hoID][i] != 0 ||
			HouseInfo[houseid][hoX][i] != 0.0)
		{
			new string[128];
			format(string, sizeof(string), "hObject: %i | hoID: %i | hoDBID: %i", HouseInfo[houseid][hObject][i], HouseInfo[houseid][hoID][i], HouseInfo[houseid][hoDBID][i]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}

COMMAND:streamertickrate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new tick_rate;
	if(sscanf(params, "i", tick_rate)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /streamertickrate [tick rate]");

	new old_tick_rate = Streamer_GetTickRate();
	Streamer_SetTickRate(tick_rate);

	new string[128];
	format(string, sizeof(string), "Streamer tick rate has been set from %i to %i.", old_tick_rate, tick_rate);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:streamermaxitems(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new type, max_items;
	if(sscanf(params, "ii", type, max_items))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /streamermaxitems [type] [max items]");
		SendClientMessage(playerid, COLOR_ERROR, "TYPES: 0: Object | 1: Pickup | 2: CP | 3: Race CP");
		SendClientMessage(playerid, COLOR_ERROR, "TYPES: 4: Map Icon | 5: 3D Text Label | 6: Area");
		return 1;
	}

	new old_max_items = Streamer_GetMaxItems(type);
	Streamer_SetMaxItems(type, max_items);

	new string[128];
	format(string, sizeof(string), "Streamer maximum items have been set from %i to %i.", old_max_items, max_items);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:streamervisibleitems(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new type, visible_items;
	if(sscanf(params, "ii", type, visible_items))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /streamervisibleitems [type] [max visibl items]");
		SendClientMessage(playerid, COLOR_ERROR, "TYPES: 0: Object | 1: Pickup | 2: CP | 3: Race CP");
		SendClientMessage(playerid, COLOR_ERROR, "TYPES: 4: Map Icon | 5: 3D Text Label | 6: Area");
		return 1;
	}

	new old_visible_items = Streamer_GetVisibleItems(type);
	Streamer_SetVisibleItems(type, visible_items);

	new string[128];
	format(string, sizeof(string), "Streamer maximum visible items have been set from %i to %i.", old_visible_items, visible_items);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:streamerradius(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new type, radius;
	if(sscanf(params, "if", type, radius))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /streamerradius [type] [radius]");
		SendClientMessage(playerid, COLOR_ERROR, "TYPES: 0: Object | 1: Pickup | 2: CP | 3: Race CP");
		SendClientMessage(playerid, COLOR_ERROR, "TYPES: 4: Map Icon | 5: 3D Text Label | 6: Area");
		return 1;
	}

	new Float:old_radius;
	Streamer_GetRadiusMultiplier(type, old_radius);

	Streamer_SetRadiusMultiplier(type, radius);

	new string[128];
	format(string, sizeof(string), "Streamer radius has been set from %f to %f.", old_radius, radius);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:streamercameraupdate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	if(Streamer_IsToggleCameraUpdate(playerid) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Streamer camera updating has been turned on.");
		Streamer_ToggleCameraUpdate(playerid, 1);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Streamer camera updating has been turned off.");
		Streamer_ToggleCameraUpdate(playerid, 0);
	}
	return 1;
}

COMMAND:streameridleupdate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	if(Streamer_IsToggleIdleUpdate(playerid) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Streamer idle updating has been turned on.");
		Streamer_ToggleIdleUpdate(playerid, 1);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Streamer idle updating has been turned off.");
		Streamer_ToggleIdleUpdate(playerid, 0);
	}
	return 1;
}

COMMAND:toggleoutdoorfurn(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	if(outdoor_furn == 0)
	{
		foreach(new i : HouseIterator)
		{
			for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
			{
				if(HouseInfo[i][hoID][i2] != 0)
				{
					if(IsHouseOutdoorObject(i, i2))
					{
						HouseInfo[i][hObject][i2] = CreateDynamicObject(HouseInfo[i][hoID][i2], 
							HouseInfo[i][hoX][i2], HouseInfo[i][hoY][i2], HouseInfo[i][hoZ][i2], 
							HouseInfo[i][horX][i2], HouseInfo[i][horY][i2], HouseInfo[i][horZ][i2], 
							HouseInfo[i][hVwOut], -1, -1, 100);

						for(new i3 = 0; i3 < HOUSE_OBJECT_MATERIALS; i3++)
						{
							if(HouseMaterialInfo[i][i2][i3] != 0)
							{
								ChangeDynamicObjectMaterial(HouseInfo[i][hObject][i2], i3, HouseMaterialInfo[i][i2][i3]);
							}
						}
					}
				}
			}
		}

		foreach(new i : BizIterator)
		{
			for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
			{
				if(BizInfo[i][boID][i2] != 0)
				{
					if(IsBizOutdoorObject(i, i2))
					{
						BizInfo[i][bObject][i2] = CreateDynamicObject(BizInfo[i][boID][i2], 
							BizInfo[i][boX][i2], BizInfo[i][boY][i2], BizInfo[i][boZ][i2], 
							BizInfo[i][borX][i2], BizInfo[i][borY][i2], BizInfo[i][borZ][i2], 
							BizInfo[i][VwOut], -1, -1, 100);

						for(new i3 = 0; i3 < BUSINESS_OBJECT_MATERIALS; i3++)
						{
							if(BizMaterialInfo[i][i2][i3] != 0)
							{
								ChangeDynamicObjectMaterial(BizInfo[i][bObject][i2], i3, BizMaterialInfo[i][i2][i3]);
							}
						}
					}
				}
			}
		}

		outdoor_furn = 1;
		SendClientMessage(playerid, COLOR_WHITE, "All outdoor objects spawned.");
	}
	else
	{
		foreach(new i : HouseIterator)
		{
			for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
			{
				if(IsHouseOutdoorObject(i, i2))
				{
					DestroyDynamicObject(HouseInfo[i][hObject][i2]);
				}
			}
		}

		foreach(new i : BizIterator)
		{
			for(new i2 = 0; i2 < MAX_HOUSE_OBJ; i2++)
			{
				if(IsBizOutdoorObject(i, i2))
				{
					DestroyDynamicObject(BizInfo[i][bObject][i2]);
				}
			}
		}

		outdoor_furn = 0;
		SendClientMessage(playerid, COLOR_WHITE, "All outdoor objects removed.");
	}
	return 1;
}

COMMAND:review(playerid, params[])
{
	if(GetPVarInt(playerid, "Helper") == 0 &&
		GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /review [id]");
	if(GetPVarInt(targetid, "Submitted") != 1) return SendClientMessage(playerid, COLOR_ERROR, "This player has not submitted a registration ticket.");

	foreach(new i : Player)
	{
		if(GetPVarInt(i, "Reviewing") == targetid)
		{
			new string[128];
			format(string, sizeof(string), "This player is already being reviewed by %s.", GiveNameSpaceEx(PlayerInfo[i][pUsername]));
			SendClientMessage(playerid, COLOR_ERROR, string);
			return 1;
		}
	}

	new string[4094];
	new string2[128];

	format(string2, sizeof(string2), "Registration Ticket - %s (%s)", GiveNameSpaceEx(PlayerInfo[targetid][pUsername]), GetLowercase(PlayerInfo[targetid][pUsername]));

	format(string, sizeof(string), "Question 1: %s\nAnswer: %s\n\nQuestion 2: %s\nAnswer: %s\n\nQuestion 3: %s\nAnswer: %s\n\nQuestion 4: %s\nAnswer: %s\n\nQuestion 5: %s\nAnswer: %s\n\n \
		Question 6: %s\nAnswer: %s\n\nQuestion 7: %s\nAnswer: %s\n\nQuestion 8: %s\nAnswer: %s\n\nQuestion 9: %s\nAnswer: %s\n\nQuestion 10: %s\nAnswer: %s\n\nQuestion 11: %s\nAnswer: %s\n\nQuestion 12: %s\nAnswer: %s",
		RegistrationQuestions[0], PlayerRegistrationAnswers[targetid][0],
		RegistrationQuestions[1], PlayerRegistrationAnswers[targetid][1],
		RegistrationQuestions[2], PlayerRegistrationAnswers[targetid][2],
		RegistrationQuestions[3], PlayerRegistrationAnswers[targetid][3],
		RegistrationQuestions[4], PlayerRegistrationAnswers[targetid][4],
		RegistrationQuestions[5], PlayerRegistrationAnswers[targetid][5],
		RegistrationQuestions[6], PlayerRegistrationAnswers[targetid][6],
		RegistrationQuestions[7], PlayerRegistrationAnswers[targetid][7],
		RegistrationQuestions[8], PlayerRegistrationAnswers[targetid][8],
		RegistrationQuestions[9], PlayerRegistrationAnswers[targetid][9],
		RegistrationQuestions[10], PlayerRegistrationAnswers[targetid][10],
		RegistrationQuestions[11], PlayerRegistrationAnswers[targetid][11]);
	ShowPlayerDialogEx(playerid, DIALOG_REGISTER_REVIEW, DIALOG_STYLE_MSGBOX,"Registration Ticket", string, "Accept", "Deny");

	SendClientMessage(targetid, COLOR_WHITE, "Your registration ticket is now being reviewed by an online Helper.");

	SetPVarInt(playerid, "Reviewing", targetid);
	SetPVarInt(playerid, "sa_reviews", GetPVarInt(playerid, "sa_reviews") + 1);

	format(string, sizeof(string), "REGISTRATON: %s is now reviewing %s's registration ticked.",
		GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), GiveNameSpaceEx(PlayerInfo[targetid][pUsername]));

	if(GetHelperCount() > 0)
	{
		SendHelperMessage(COLOR_LIGHTBLUE, string);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTBLUE, string);
	}
	return 1;
}

COMMAND:forumname(playerid, params[])
{
	if(GetPVarInt(playerid, "PendingForumName") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You have already submitted a request for a forum name change.");
	new forum_name[64];
	if(sscanf(params, "s[64]", forum_name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /forumname [name]");

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE ForumName='%e'", forum_name);
	mysql_pquery(handlesql, query, "OnCheckIfForumNameExists", "is", playerid, forum_name);
	return 1;
}

COMMAND:changename(playerid, params[])
{
	if(GetPVarInt(playerid, "PendingChangeName") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You have already submitted a request for a name change.");
	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /changename [Firstname_Lastname]");
	if(GetPlayerMoneyEx(playerid) < 35000 && GetPVarInt(playerid, "Changes") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are required to have $35,000 on-hand  or a name change ticket in order to change your name.");
	if(!NameIsRP(name) || NumOccurences(name, '_') >= 2) return SendClientMessage(playerid, COLOR_ERROR, "This name is not acceptable, please use the format: Firstname_Lastname!");

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name='%e'", name);
	mysql_pquery(handlesql, query, "OnCheckIfNameExists", "is", playerid, name);
	return 1;
}

ALTCOMMAND:accent->prefix;
COMMAND:prefix(playerid, params[])
{
	if(strcmp(PlayerInfo[playerid][pAccent], "None", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_ERROR, "Prefix disabled.");
		format(PlayerInfo[playerid][pAccent], 64, "None");
		return true;
	}

	if(GetPVarInt(playerid, "PendingPrefix") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You have already submitted a request for a prefix.");
	
	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[32]", name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /prefix [text]");
	if(strlen(name) < 5 || strlen(name) > 20) return SendClientMessage(playerid, COLOR_ERROR, "Prefix is too short (5) or too long (20).");

	new string[128];
	format(string, sizeof(string), "REQUEST: %s (ID: %i) wishes to change his prefix to %s. (/accept prefix or /deny prefix)", 
		GiveNameSpaceEx(PlayerInfo[playerid][pUsername]),
		playerid, 
		name);


	if(GetHelperCount() > 0)
	{
		SendHelperMessage(COLOR_LIGHTBLUE, string);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTBLUE, string);
	}

	SetPVarInt(playerid, "PendingPrefix", 1);
	SetPVarString(playerid, "PendingPrefixString", name);

	SendClientMessage(playerid, COLOR_WHITE, "You have submitted your request for a prefix change.");
	return 1;
}

COMMAND:doorcreate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	for(new i = 0; i < MAX_DOORS; i++)
	{
		if(DoorInfo[i][dModel] == 0)
		{
			ShowModelSelectionMenuEx(playerid, DoorModels, sizeof(DoorModels), "Select Model", 12, 0.0, 0.0, 0.0);
			return 1;
		}
	}
	return 1;
}

COMMAND:dooredit(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new doorid, option[32], optional[32];
	if(sscanf(params, "is[32]S(-1)[32]", doorid, option, optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dooredit [doorid] [move/open/speed/faction/range/timer]");
	if(DoorInfo[doorid][dModel] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Invalid ID.");
	
	if(strcmp(option, "move", true) == 0)
	{
		SetPVarInt(playerid, "EditorMode", 12);
		SetPVarInt(playerid, "DoorID", doorid);
		EditDynamicObject(playerid, DoorInfo[doorid][dID]);
	}
	else if(strcmp(option, "open", true) == 0)
	{
		SetPVarInt(playerid, "EditorMode", 11);
		SetPVarInt(playerid, "DoorID", doorid);
		EditDynamicObject(playerid, DoorInfo[doorid][dID]);
	}
	else if(strcmp(option, "speed", true) == 0)
	{
		if(strval(optional) == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dooredit [doorid] speed [speed]");
		DoorInfo[doorid][dSpeed] = strval(optional);

		SendClientMessage(playerid, COLOR_WHITE, "Door's speed updated.");

		DoorSave(doorid);
	}
	else if(strcmp(option, "faction", true) == 0)
	{
		if(strval(optional) == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dooredit [doorid] faction [factionid]");
		DoorInfo[doorid][dFaction] = strval(optional);

		SendClientMessage(playerid, COLOR_WHITE, "Door's faction permissions updated.");

		DoorSave(doorid);
	}
	else if(strcmp(option, "range", true) == 0)
	{
		if(strval(optional) == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dooredit [doorid] range [range]");
		if(strval(optional) > 100 || strval(optional) <= 0) return SendClientMessage(playerid, COLOR_ERROR, "The range can not be under 0 or over 100.");
		DoorInfo[doorid][dOperateRange] = strval(optional);

		SendClientMessage(playerid, COLOR_WHITE, "Door's range updated.");

		DoorSave(doorid);
	}
	else if(strcmp(option, "timer", true) == 0)
	{
		if(DoorInfo[doorid][dTimer] == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Door's timer enabled.");
			DoorInfo[doorid][dTimer] = 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Door's timer disabled.");
			DoorInfo[doorid][dTimer] = 0;
		}

		DoorSave(doorid);
	}
	return 1;
}

COMMAND:doorremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new doorid;
	if(sscanf(params, "i", doorid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /doorremove [doorid]");

	DoorInfo[doorid][dModel] = 0;
	DestroyDynamicObject(DoorInfo[doorid][dID]);

	SendClientMessage(playerid, COLOR_WHITE, "Door removed.");

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM doors WHERE ID=%i",
		DoorInfo[doorid][dDBID]);
	mysql_pquery(handlesql, query);
	return 1;
}

COMMAND:dooropen(playerid, params[])
{
	new Float:distance = 100.0, id = -1;
	for(new i = 0; i < MAX_DOORS; i++)
	{
		if(DoorInfo[i][dModel] != 0)
		{
			if(GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]) < distance && 
				GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]) <= DoorInfo[i][dOperateRange] &&
				GetPlayerVirtualWorld(playerid) == DoorInfo[i][dVirtualWorld] && GetPlayerInterior(playerid) == DoorInfo[i][dInterior])
			{
				distance = GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]);
				id = i;
			}
		}
	}

	if(id == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");
	if(DoorInfo[id][dFaction] != 0 && GetPVarInt(playerid, "Member") != DoorInfo[id][dFaction]) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this door.");
	if(DoorInfo[id][doX] == 0 || DoorInfo[id][doY] == 0 || DoorInfo[id][doZ] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This door does not have an open state set.");
	
	MoveDynamicObject(DoorInfo[id][dID], DoorInfo[id][doX], DoorInfo[id][doY], DoorInfo[id][doZ], DoorInfo[id][dSpeed], DoorInfo[id][doXr], DoorInfo[id][doYr], DoorInfo[id][doZr]);
	
	if(DoorInfo[id][dTimer] == 1)
	{
		SetTimerEx("CloseDoor", 10000, false, "ifffffff", DoorInfo[id][dID], 
			DoorInfo[id][dX], DoorInfo[id][dY], DoorInfo[id][dZ], 
			DoorInfo[id][dXr], DoorInfo[id][dYr], DoorInfo[id][dZr], 
			DoorInfo[id][dSpeed]);

		SendClientMessage(playerid, COLOR_WHITE,"The door is now open, use /doorclose to close it or wait 10 seconds for it to close automatically.");
	}
	return 1;
}

COMMAND:doorclose(playerid, params[])
{
	new Float:distance = 100.0, id = -1;
	for(new i = 0; i < MAX_DOORS; i++)
	{
		if(DoorInfo[i][dModel] != 0)
		{
			if(GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]) < distance && 
				GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]) <= DoorInfo[i][dOperateRange] &&
				GetPlayerVirtualWorld(playerid) == DoorInfo[i][dVirtualWorld] && GetPlayerInterior(playerid) == DoorInfo[i][dInterior])
			{
				distance = GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]);
				id = i;
			}
		}
	}

	if(id == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");
	if(DoorInfo[id][dFaction] != 0 && GetPVarInt(playerid, "Member") != DoorInfo[id][dFaction]) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this door.");

	MoveDynamicObject(DoorInfo[id][dID], DoorInfo[id][dX], DoorInfo[id][dY], DoorInfo[id][dZ], DoorInfo[id][dSpeed], DoorInfo[id][dXr], DoorInfo[id][dYr], DoorInfo[id][dZr]);
	return 1;
}

COMMAND:doorid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new Float:distance = 25.0, id = -1;
	for(new i = 0; i < MAX_DOORS; i++)
	{
		if(DoorInfo[i][dModel] != 0)
		{
			if(GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]) < distance && 
				GetPlayerVirtualWorld(playerid) == DoorInfo[i][dVirtualWorld] && GetPlayerInterior(playerid) == DoorInfo[i][dInterior])
			{
				distance = GetPlayerDistanceFromPoint(playerid, DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ]);
				id = i;
			}
		}
	}

	if(id == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any door.");

	new string[128];
	format(string, sizeof(string), "WARNING: Door ID: %i, door database ID: %i.", id, DoorInfo[id][dDBID]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

COMMAND:gatecreate(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	for(new i = 0; i < MAX_GATES; i++)
	{
		if(GateInfo[i][gModel] == 0)
		{
			ShowModelSelectionMenuEx(playerid, GateModels, sizeof(GateModels), "Select Model", 13, 0.0, 0.0, 0.0);
			return 1;
		}
	}
	return 1;
}

COMMAND:gateedit(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new gateid, option[32], optional[32];
	if(sscanf(params, "is[32]S(-1)[32]", gateid, option, optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gateedit [gateid] [move/open/speed/faction/range/timer]");
	if(GateInfo[gateid][gModel] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Invalid ID.");
	
	if(strcmp(option, "move", true) == 0)
	{
		SetPVarInt(playerid, "EditorMode", 14);
		SetPVarInt(playerid, "GateID", gateid);
		EditDynamicObject(playerid, GateInfo[gateid][gID]);
	}
	else if(strcmp(option, "open", true) == 0)
	{
		SetPVarInt(playerid, "EditorMode", 13);
		SetPVarInt(playerid, "GateID", gateid);
		EditDynamicObject(playerid, GateInfo[gateid][gID]);
	}
	else if(strcmp(option, "speed", true) == 0)
	{
		if(strval(optional) == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gateedit [gateid] speed [speed]");
		GateInfo[gateid][gSpeed] = strval(optional);

		SendClientMessage(playerid, COLOR_WHITE, "Gate's speed updated.");

		GateSave(gateid);
	}
	else if(strcmp(option, "faction", true) == 0)
	{
		if(strval(optional) == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gateedit [gateid] faction [factionid]");
		GateInfo[gateid][gFaction] = strval(optional);

		SendClientMessage(playerid, COLOR_WHITE, "Gate's faction permissions updated.");

		GateSave(gateid);
	}
	else if(strcmp(option, "range", true) == 0)
	{
		if(strval(optional) == -1) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gateedit [gateid] range [range]");
		if(strval(optional) > 100 || strval(optional) <= 0) return SendClientMessage(playerid, COLOR_ERROR, "The range can not be under 0 or over 100.");
		GateInfo[gateid][gOperateRange] = strval(optional);

		SendClientMessage(playerid, COLOR_WHITE, "Gate's range updated.");

		GateSave(gateid);
	}
	else if(strcmp(option, "timer", true) == 0)
	{
		if(GateInfo[gateid][gTimer] == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Gate's timer enabled.");
			GateInfo[gateid][gTimer] = 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Gate's timer disabled.");
			GateInfo[gateid][gTimer] = 0;
		}

		GateSave(gateid);
	}
	return 1;
}

COMMAND:gateremove(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new gateid;
	if(sscanf(params, "i", gateid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /gateremove [gateid]");

	GateInfo[gateid][gModel] = 0;
	DestroyDynamicObject(GateInfo[gateid][gID]);

	SendClientMessage(playerid, COLOR_WHITE, "Gate removed.");

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM gates WHERE ID=%i",
		GateInfo[gateid][gDBID]);
	mysql_pquery(handlesql, query);
	return 1;
}

COMMAND:gateopen(playerid, params[])
{
	new Float:distance = 100.0, id = -1;
	for(new i = 0; i < MAX_GATES; i++)
	{
		if(GateInfo[i][gModel] != 0)
		{
			if(GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]) < distance && 
				GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]) <= GateInfo[i][gOperateRange] &&
				GetPlayerVirtualWorld(playerid) == GateInfo[i][gVirtualWorld] && GetPlayerInterior(playerid) == GateInfo[i][gInterior])
			{
				distance = GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]);
				id = i;
			}
		}
	}

	if(id == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any gate.");
	if(GateInfo[id][gFaction] != 0 && GetPVarInt(playerid, "Member") != GateInfo[id][gFaction]) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this gate.");
	if(GateInfo[id][goX] == 0 || GateInfo[id][goY] == 0 || GateInfo[id][goZ] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This gate does not have an open state set.");
	
	MoveDynamicObject(GateInfo[id][gID], GateInfo[id][goX], GateInfo[id][goY], GateInfo[id][goZ], GateInfo[id][gSpeed], GateInfo[id][goXr], GateInfo[id][goYr], GateInfo[id][goZr]);
	
	if(GateInfo[id][gTimer] == 1)
	{
		SetTimerEx("CloseGate", 10000, false, "ifffffff", GateInfo[id][gID], 
			GateInfo[id][gX], GateInfo[id][gY], GateInfo[id][gZ], 
			GateInfo[id][gXr], GateInfo[id][gYr], GateInfo[id][gZr], 
			GateInfo[id][gSpeed]);

		SendClientMessage(playerid, COLOR_WHITE,"The gate is now open, use /gateclose to close it or wait 10 seconds for it to close automatically.");
	}
	return 1;
}

COMMAND:gateclose(playerid, params[])
{
	new Float:distance = 100.0, id = -1;
	for(new i = 0; i < MAX_GATES; i++)
	{
		if(GateInfo[i][gModel] != 0)
		{
			if(GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]) < distance && 
				GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]) <= GateInfo[i][gOperateRange] &&
				GetPlayerVirtualWorld(playerid) == GateInfo[i][gVirtualWorld] && GetPlayerInterior(playerid) == GateInfo[i][gInterior])
			{
				distance = GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]);
				id = i;
			}
		}
	}

	if(id == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any gate.");
	if(GateInfo[id][gFaction] != 0 && GetPVarInt(playerid, "Member") != GateInfo[id][gFaction]) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this Gate/gate.");

	MoveDynamicObject(GateInfo[id][gID], GateInfo[id][gX], GateInfo[id][gY], GateInfo[id][gZ], GateInfo[id][gSpeed], GateInfo[id][gXr], GateInfo[id][gYr], GateInfo[id][gZr]);
	return 1;
}

COMMAND:gateid(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new Float:distance = 25.0, id = -1;
	for(new i = 0; i < MAX_GATES; i++)
	{
		if(GateInfo[i][gModel] != 0)
		{
			if(GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]) < distance && 
				GetPlayerVirtualWorld(playerid) == GateInfo[i][gVirtualWorld] && GetPlayerInterior(playerid) == GateInfo[i][gInterior])
			{
				distance = GetPlayerDistanceFromPoint(playerid, GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ]);
				id = i;
			}
		}
	}

	if(id == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any gate.");

	new string[128];
	format(string, sizeof(string), "WARNING: Gate ID: %i, gate database ID: %i.", id, GateInfo[id][gDBID]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

COMMAND:removetickets(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");
	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /removetickets [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "This player is not connected.");

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM tickets WHERE player='%s'",
		PlayerInfo[targetid][pUsername]);
	mysql_pquery(handlesql, query);

	new string[128];
	format(string, sizeof(string), "Officer %s has removed %s's tickets.", 
		GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), GiveNameSpaceEx(PlayerInfo[targetid][pUsername]));
	SendFactionMessage(1, COLOR_BLUE, string);
	return 1;
}

/*COMMAND:hgoto(playerid, params[])
{
	if(GetPVarInt(playerid, "Helper") < 1 && 
		GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hgoto [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "This player is not connected.");
	if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this to an NPC.");

	GetPlayerPos(playerid, PlayerInfo[playerid][pgoto][0], PlayerInfo[playerid][pgoto][1], PlayerInfo[playerid][pgoto][2]);

	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(playerid, x, y, z);

	new string[256];
	format(string, sizeof(string), "AdmWarn: Helper %s teleported to %s (ID: %i).", AdminName(playerid), PlayerInfo[targetid][pName], targetid);
	SendAdminMessage(COLOR_YELLOW, string);

	SendClientMessage(playerid, COLOR_WHITE, "You have been teleported. (use /hgoback to return to your previous position)");
	return 1;
}

COMMAND:hgoback(playerid, params[])
{
	if(GetPVarInt(playerid, "Helper") < 1 && 
		GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	if(PlayerInfo[playerid][pgoto][0] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You haven't teleported to any player yet.");

	SetPlayerPos(playerid, PlayerInfo[playerid][pgoto][0], PlayerInfo[playerid][pgoto][1], PlayerInfo[playerid][pgoto][2]);

	PlayerInfo[playerid][pgoto][0] = 0;
	PlayerInfo[playerid][pgoto][1] = 0;
	PlayerInfo[playerid][pgoto][2] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "You have been teleported.");
	return 1;
}

COMMAND:hkick(playerid, params[])
{
	if(GetPVarInt(playerid, "Helper") < 1 && 
		GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new targetid, reason[128];
	if(sscanf(params, "is[128]", targetid, reason)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /hkick [playerid] [reason]");

	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "This player is not connected.");
	if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this to an NPC.");
	if(GetPVarInt(targetid, "Admin") >= 1 || GetPVarInt(targetid, "Helper") >= 1) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this to admins or helpers.");

	new string[256];
	format(string, sizeof(string), "AdmWarn: %s was kicked by Helper %s. (Reason: %s)", PlayerInfo[targetid][pName], AdminName(playerid), reason);
	SendAdminMessage(COLOR_YELLOW, string);

	SetPVarInt(targetid, "Kicks", GetPVarInt(targetid, "Kicks") + 1);

	format(string, sizeof(string), "You were silent-kicked by Helper %s. (Reason: %s)", AdminName(playerid), reason);
	KickPlayer(targetid, string);
	return 1;
}*/

COMMAND:learn(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 3) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /learn [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "This player is not connected.");
	if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this to an NPC.");
	if(GetPVarInt(targetid, "Admin") >= 1) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this to other admins.");

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM accounts WHERE ID=%i", PlayerInfo[targetid][pID]);
	mysql_pquery(handlesql, query);

	new string[128];
	format(string, sizeof(string), "You have been kicked and your account has been deleted from the server's database by %s.", AdminName(playerid));
	KickPlayer(targetid, string);
	return 1;
}

COMMAND:despawnvehs(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command.");

	foreach(new i : VehicleIterator)
	{
		if(VehicleInfo[i][vType] == VEHICLE_ADMIN)
		{
			DespawnVehicle(i);
		}
	}

	SendClientMessage(playerid, COLOR_WHITE, "All admin vehicles despawned.");
	return 1;
}

COMMAND:cw(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in a vehicle in order to use this.");
	if(IsNotAEngineCarEx(GetVehicleModel(GetPlayerVehicleID(playerid)))) return SendClientMessage(playerid, COLOR_ERROR, "You can't use this command in this vehicle.");
	new text[128];
	if(sscanf(params, "s[128]", text)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /cw [text]");

	new string[128];
	format(string, sizeof(string), "*** %s whispers something.", PlayerNameEx(playerid));
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

	foreach(new i : Player)
	{
		if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
		{
	        format(string, sizeof(string), "%s whispers: %s", PlayerNameEx(playerid), text);
			SendClientMessage(i,  COLOR_YELLOW, string);
		}
	}
	return 1;
}

COMMAND:sendto(playerid, params[])
{
	new targetid1, targetid2;
	if(sscanf(params, "ii", targetid1, targetid2)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /sendto [playerid 1] [playerid 2]");
    if(!IsPlayerConnected(targetid1) || !IsPlayerConnected(targetid2)) return SendClientMessage(playerid, COLOR_ERROR, "One of the players is not connected.");
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid2, x, y, z);

	if(IsPlayerInAnyVehicle(targetid1))
	{
		SetVehiclePosEx(GetPlayerVehicleID(targetid1), x, y + 4, z);
		SetPlayerVirtualWorld(targetid1, GetPlayerVirtualWorld(targetid2));
		SetPlayerInterior(targetid1, GetPlayerInterior(targetid2));
		LinkVehicleToInteriorEx(GetPlayerVehicleID(targetid1), GetPlayerInterior(targetid2));
		SetVehicleVirtualWorld(GetPlayerVehicleID(targetid1), GetPlayerVirtualWorld(targetid2));
	}
	else
	{
		SetPlayerPosEx(targetid1, x, y + 2, z);
		SetPlayerVirtualWorld(targetid1,GetPlayerVirtualWorld(targetid2));
		SetPlayerInterior(targetid1,GetPlayerInterior(targetid2));
	}

	SendClientMessage(targetid1, COLOR_WHITE, "You have been teleported.");
	SendClientMessage(playerid, COLOR_WHITE, "Player teleported.");

	SetPVarInt(targetid1, "IntEnter", GetPVarInt(targetid2, "IntEnter"));
	SetPVarInt(targetid1, "BizEnter", GetPVarInt(targetid2, "BizEnter"));
	SetPVarInt(targetid1, "HouseEnter", GetPVarInt(targetid2, "HouseEnter"));
	SetPVarInt(targetid1, "GarageEnter", GetPVarInt(targetid2, "GarageEnter"));

	LoadRadios(targetid1);
	return 1;
}

COMMAND:treataddict(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1 &&
		GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /treataddict [playerid]");

	SetPVarInt(targetid, "Addiction", 0);
	SendClientMessage(targetid, COLOR_WHITE, "You have been treated from your addiction!");

	SendClientMessage(playerid, COLOR_WHITE, "You have treated the player from his addiction.");
	return 1;
}

COMMAND:aafk(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new count = 0;
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "AFKTime") > 10 && GetPVarInt(i, "Bot") == 0)
		{
			new string[128];
			format(string, sizeof(string), "%s (ID: %i) - AFK for %i seconds.", PlayerInfo[i][pName], i, GetPVarInt(i, "AFKTime"));
			SendClientMessage(playerid, COLOR_WHITE, string);
			count++;
		}
	}

	new string[128];
	format(string, sizeof(string), "There are %i players AFK right now.", count);
	SendClientMessage(playerid, COLOR_WHITE, string);

	if(count == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "There are no player AFK right now.");
	}
	return 1;
}

COMMAND:setname(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new targetid, name[MAX_PLAYER_NAME];
	if(sscanf(params, "is[24]", targetid, name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setname [playerid] [Firstname_Lastname]");

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name='%e'", name);
	mysql_pquery(handlesql, query, "OnCheckIfNameExistsAdmin", "iis", playerid, targetid, name);
	return 1;
}

COMMAND:setforumname(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new targetid, forum_name[MAX_PLAYER_NAME];
	if(sscanf(params, "is[24]", targetid, forum_name)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setforumname [playerid] [Forum Name]");

	SetPVarString(targetid, "ForumName", forum_name);
	OnPlayerDataSave(targetid);

	new string[128];
	format(string, sizeof(string), "AdmCmd: %s has changed %s's forum name to %s.", 
		AdminName(playerid),
		PlayerInfo[targetid][pName],
		forum_name);
	SendAdminMessage(COLOR_YELLOW, string);
	return 1;
}

COMMAND:factions(playerid, params[])
{
	for(new i = 1; i < MAX_FACTIONS; i++)
	{
		if(!isnull(FactionInfo[i][fName]))
		{
			new count = 0;
			foreach(new i2 : Player)
			{
				if(GetPVarInt(i2, "Member") == FactionInfo[i][fDBID])
				{
					count++;
				}
			}

			new string[128];
			format(string, sizeof(string), "FACTION %i: %s (%i members online) %i", FactionInfo[i][fDBID], FactionInfo[i][fName], count);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}

COMMAND:halloween(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");
	if(halloween == 0)
	{
		halloween = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Halloween event has been toggled on!");
	}
	else
	{
		halloween = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Halloween event has been toggled off!");
	}
	return 1;
}

COMMAND:trickortreat(playerid, params[])
{
	if(halloween == 0) return SendClientMessage(playerid, COLOR_ERROR, "The halloween event hasn't started.");
	if(PlayerInfo[playerid][pTrickOrTreat] == 3) return SendClientMessage(playerid, COLOR_ERROR, "You can not trick-or-treat any more houses.");

	new count = 0;
	foreach(new i : HouseIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]))
		{
			if(PlayerInfo[playerid][pTrickOrTreatHouses][i] == 1) return SendClientMessage(playerid, COLOR_ERROR, "You have already trick-or-treated this house.");

			count++;
			PlayerInfo[playerid][pTrickOrTreat]++;
			PlayerInfo[playerid][pTrickOrTreatHouses][i] = 1;

			new rand = random(6);
			switch(rand)
			{
				case 0: GiveInvItem(playerid, 506, 3);
				case 1: GiveInvItem(playerid, 1000, 20);
				case 2: GiveInvItem(playerid, 1, 1);
				case 3: GiveInvItem(playerid, 4, 1);
				case 4: GiveInvItem(playerid, 15, 1);
				default: GiveInvItem(playerid, 501, 3);
			}

			SendClientMessage(playerid, COLOR_WHITE, "You successfully trick-or-treated the house!");
			return 1;
		}
	}

	if(count == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "You are not close to any house door.");
	}
	return 1;
}

COMMAND:changepassword(playerid, params[])
{
	new password[32];
	if(sscanf(params, "s[32]", password)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /changepassword [password]");

	if(strlen(password) < 6 || strlen(password) > 32)
	{
		SendClientMessage(playerid, COLOR_ERROR, "The password must contain atleast 6 characters, but it can't be longer than 32 characters.");
		return 1;
	}

	new hash[129], input[129];
	format(hash, sizeof(hash), "%s3ca827d65b48291545b", password);
	mysql_escape_string(hash, input);
	WP_Hash(hash, sizeof(hash), input);

	new query[248];
	mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Pass='%s' WHERE ID=%i", 
		hash, PlayerInfo[playerid][pID]);
	mysql_pquery(handlesql, query);

	SendClientMessage(playerid, COLOR_WHITE, "You have successfully changed your password!");
	return 1;
}

COMMAND:resetbasketball(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new option[32];
	if(sscanf(params, "s[32]", option)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /resetbasketball [all/id]");

	if(strcmp(option, "all", true) == 0)
	{
		for(new i = 0; i < sizeof(Basketballs); i++)
		{
			if(Basketball[i][bBaller] != INVALID_MAXPL)
			{
				Basketball[i][bBounce] = 0;
				Basketball[i][bState] = 0;
				PlayerInfo[Basketball[i][bBaller]][pHasBasketball] = 0;
				PlayerInfo[Basketball[i][bBaller]][pBasketballID] = 0;

				ClearAnimationsEx(Basketball[i][bBaller]);

				Basketball[i][bBaller] = INVALID_MAXPL;
			}

			DestroyObject(Basketball[i][bID]);
			
			for(new i2 = 0; i2 < sizeof(Basketball[]); i2++)
			{
				Basketball[i][basketball:i2] = 0;
				Basketball[i][bBaller] = INVALID_MAXPL;
			}
		}

		LoadBasketball();

		SendClientMessage(playerid, COLOR_WHITE, "All basketballs have been reset.");
	}
	else if(IsNumeric(option))
	{
		DestroyObject(Basketball[strval(option)][bID]);

		if(Basketball[strval(option)][bBaller] != INVALID_MAXPL)
		{
			Basketball[strval(option)][bBounce] = 0;
			Basketball[strval(option)][bState] = 0;
			PlayerInfo[Basketball[strval(option)][bBaller]][pHasBasketball] = 0;
			PlayerInfo[Basketball[strval(option)][bBaller]][pBasketballID] = 0;

			ClearAnimationsEx(Basketball[strval(option)][bBaller]);

			Basketball[strval(option)][bBaller] = INVALID_MAXPL;
		}

		for(new i2 = 0; i2 < sizeof(Basketball[]); i2++)
		{
			Basketball[strval(option)][basketball:i2] = 0;
			Basketball[strval(option)][bBaller] = INVALID_MAXPL;
		}

		Basketball[strval(option)][bID] = CreateObject(2114, Basketballs[strval(option)][bsX], Basketballs[strval(option)][bsY], Basketballs[strval(option)][bsZ] - 0.8, 0, 0, 0);
		Basketball[strval(option)][bX] = Basketballs[strval(option)][bsX];
		Basketball[strval(option)][bY] = Basketballs[strval(option)][bsY];
		Basketball[strval(option)][bZ] = Basketballs[strval(option)][bsZ];

		new string[128];
		format(string, sizeof(string), "Basketball ID %i has been reset.", strval(option));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE: /resetbasketball [all/id]");
	}
	return 1;
}

COMMAND:darkscreen(playerid, params[])
{
	if(GetPVarInt(playerid, "Blinded") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You can't use this command at this time.");

	if(PlayerInfo[playerid][pDarkScreen] == 0)
	{
		TextDrawShowForPlayer(playerid, BlindDraw);
		PlayerInfo[playerid][pDarkScreen] = 1;
	}
	else
	{
		TextDrawHideForPlayer(playerid, BlindDraw);
		PlayerInfo[playerid][pDarkScreen] = 0;
	}
	return 1;
}


COMMAND:dsc(playerid, params[])
{
	return cmd_darkscreen(playerid, params);
}

COMMAND:lotterydraw(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new lottery = random(50)+1, query[128];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM lottery WHERE Number=%d AND Active=1", lottery);
	mysql_pquery(handlesql, query, "LotteryCheck", "iii", -1, 2, lottery);
	return 1;
}

COMMAND:lotterywinner(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /lotterywinner [playerid]");

	for(new i = 1; i <= 50; i++)
	{
		new query[128];
		mysql_format(handlesql, query, sizeof(query), "INSERT INTO lottery (`Name`, `Number`, `Active`) VALUES ('%e',%d, 1)", PlayerInfo[playerid][pUsername], i);
		mysql_pquery(handlesql, query);
	}

	SendClientMessage(playerid, COLOR_WHITE, "Lottery winner has been set.");
	return 1;
}

COMMAND:jobroute(playerid, params[])
{
	if(GetPVarInt(playerid, "Job") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You need to get a job before starting a route.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 
		WorkInfo[GetPVarInt(playerid, "Job") - 1][workX], 
		WorkInfo[GetPVarInt(playerid, "Job") - 1][workY], 
		WorkInfo[GetPVarInt(playerid, "Job") - 1][workZ])) return SendClientMessage(playerid, COLOR_ERROR, "You are not at your job.");
	if(PlayerInfo[playerid][pJobStatus] > 0) return SendClientMessage(playerid, COLOR_ERROR, "You have already started your job route.");

	switch(GetPVarInt(playerid, "Job"))
	{
		case JOB_FARMER:
		{
			DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

			new vehicleid;
			vehicleid = CreateVehicle(531, -368.1157, -1439.5592, 25.6909, 90.7484, -1, -1, -1);
			PlayerInfo[playerid][pJobVehicleID] = vehicleid;
			PlayerInfo[playerid][pJobStatus] = 1;

			Iter_Add(VehicleIterator, vehicleid);
			VehicleInfo[vehicleid][vFuel] = 100;
			VehicleInfo[vehicleid][vEngine] = 1;
			VehicleInfo[vehicleid][vWindows] = 0;
			VehicleInfo[vehicleid][vID] = 0;
			VehicleInfo[vehicleid][vLights] = 0;
			VehicleInfo[vehicleid][vCreated] = 1;
			VehicleInfo[vehicleid][vType] = VEHICLE_JOB;
			VehicleInfo[vehicleid][vJob] = GetPVarInt(playerid, "Job");
			VehicleInfo[vehicleid][vLights] = 0;
			VehicleInfo[vehicleid][vLock] = 0;
			VehicleInfo[vehicleid][vEngineStats][1] = 1;
			VehicleInfo[vehicleid][vEngineStats][2] = 1;
			VehicleInfo[vehicleid][vBattery][1] = 1;
			VehicleInfo[vehicleid][vBattery][2] = 1;

			SetVehicleNumberPlate(vehicleid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
			SetVehicleToRespawn(vehicleid);

			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);

			SendClientMessage(playerid, COLOR_JOB, "Your Tractor has been spawned and it is ready for the route.");
			SetPVarInt(playerid, "OnRouteTime", 1);
		}
		case JOB_PIZZA:
		{
			PlayerInfo[playerid][pJobStatus] = 1;
			SendClientMessage(playerid, COLOR_JOB, "Head inside the Pizza Stack, there will be a package waiting to be delivered.");

		}
		case JOB_MECHANIC:
		{
			new vehicleid;
			vehicleid = CreateVehicle(525, 2129.1301,-1935.8376,13.4175,270.9483, -1, -1, -1);
			PlayerInfo[playerid][pJobVehicleID] = vehicleid;
			PlayerInfo[playerid][pJobStatus] = 1;

			Iter_Add(VehicleIterator, vehicleid);
			VehicleInfo[vehicleid][vFuel] = 100;
			VehicleInfo[vehicleid][vEngine] = 1;
			VehicleInfo[vehicleid][vWindows] = 0;
			VehicleInfo[vehicleid][vID] = 0;
			VehicleInfo[vehicleid][vLights] = 0;
			VehicleInfo[vehicleid][vCreated] = 1;
			VehicleInfo[vehicleid][vType] = VEHICLE_JOB;
			VehicleInfo[vehicleid][vJob] = GetPVarInt(playerid, "Job");
			VehicleInfo[vehicleid][vLights] = 0;
			VehicleInfo[vehicleid][vLock] = 0;
			VehicleInfo[vehicleid][vEngineStats][1] = 1;
			VehicleInfo[vehicleid][vEngineStats][2] = 1;
			VehicleInfo[vehicleid][vBattery][1] = 1;
			VehicleInfo[vehicleid][vBattery][2] = 1;

			format(VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME, PlayerInfo[playerid][pName]);

			SetVehicleNumberPlate(vehicleid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
			SetVehicleToRespawn(vehicleid);

			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);

			SendClientMessage(playerid, COLOR_JOB, "Your Tow Truck has been spawned behind the Mechanic Shop.");
		}
		case JOB_TRUCKER:
		{
			DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

			new vehicleid;
			new model;

			switch(random(3))
			{
				case 0: model = 403;
				case 1: model = 514;
				case 2: model = 515;
			}

			vehicleid = CreateVehicle(model, 89.8096,-305.4412,2.5997,358.5197, -1, -1, -1);
			PlayerInfo[playerid][pJobVehicleID] = vehicleid;
			PlayerInfo[playerid][pJobStatus] = 1;

			Iter_Add(VehicleIterator, vehicleid);
			VehicleInfo[vehicleid][vFuel] = 100;
			VehicleInfo[vehicleid][vEngine] = 1;
			VehicleInfo[vehicleid][vWindows] = 0;
			VehicleInfo[vehicleid][vID] = 0;
			VehicleInfo[vehicleid][vLights] = 0;
			VehicleInfo[vehicleid][vCreated] = 1;
			VehicleInfo[vehicleid][vType] = VEHICLE_JOB;
			VehicleInfo[vehicleid][vJob] = GetPVarInt(playerid, "Job");
			VehicleInfo[vehicleid][vLights] = 0;
			VehicleInfo[vehicleid][vLock] = 0;
			VehicleInfo[vehicleid][vEngineStats][1] = 1;
			VehicleInfo[vehicleid][vEngineStats][2] = 1;
			VehicleInfo[vehicleid][vBattery][1] = 1;
			VehicleInfo[vehicleid][vBattery][2] = 1;

			SetVehicleNumberPlate(vehicleid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
			SetVehicleToRespawn(vehicleid);

			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);

			SendClientMessage(playerid, COLOR_JOB, "Your truck has been spawned and it is ready for the route.");
			SetPVarInt(playerid, "OnRouteTime", 1);
			SetPVarInt(playerid, "TruckerJobStops", 1);
		}
		default: return 1;
	}
	return 1;
}

COMMAND:jobinfo(playerid, params[])
{
	switch(GetPVarInt(playerid, "Job"))
	{
		case JOB_FARMER:
		{
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "                           Job Info");
			SendClientMessage(playerid, COLOR_JOB, "You are working as a Farmer. Your main job duties include");
			SendClientMessage(playerid, COLOR_JOB, "fertilizing and collecting crops using the provided vehicles.");
			SendClientMessage(playerid, COLOR_JOB, "Try avoiding any colisions, as you will be fined for doing so.");
			SendClientMessage(playerid, COLOR_GREY, "Available commands: /tow, /jobroute, /stoproute, /quitjob");
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
		}
		case JOB_PIZZA:
		{
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "                           Job Info");
			SendClientMessage(playerid, COLOR_JOB, "You are working as a Pizza Boy. Collect your package from");
			SendClientMessage(playerid, COLOR_JOB, "Idlewood Pizza Stack and deliver it to the house on your GPS.");
			SendClientMessage(playerid, COLOR_JOB, "Try avoiding any colisions, as you will be fined for doing so.");
			SendClientMessage(playerid, COLOR_GREY, "Available commands: /jobroute, /stoproute, /quitjob");
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
		}
		case JOB_MECHANIC:
		{
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "                           Job Info");
			SendClientMessage(playerid, COLOR_JOB, "You are working as a Mechanic. Respond to calls, repair personal");
			SendClientMessage(playerid, COLOR_JOB, "vehicle engines and bodywork.");
			SendClientMessage(playerid, COLOR_JOB, "Try avoiding any colisions, as you will be fined for doing so.");
			SendClientMessage(playerid, COLOR_GREY, "Available commands: /tow, /repair, /refill, /jobroute, /stoproute, /quitjob");
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
		}
		case JOB_TRUCKER:
		{
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "                           Job Info");
			SendClientMessage(playerid, COLOR_JOB, "You are working as a Trucker. Tow the provided trailers from");
			SendClientMessage(playerid, COLOR_JOB, "factory to factory and you will be paid for the distance traveled.");
			SendClientMessage(playerid, COLOR_JOB, "Try avoiding any colisions, as you will be fined for doing so.");
			SendClientMessage(playerid, COLOR_GREY, "Available commands: /tow, /jobroute, /stoproute, /quitjob");
			SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
		}
		default: return 1;
	}
	return 1;
}

COMMAND:stoproute(playerid, params[])
{
	if(GetPVarInt(playerid, "Job") != JOB_FARMER && GetPVarInt(playerid, "Job") != JOB_PIZZA && GetPVarInt(playerid, "Job") != JOB_MECHANIC && GetPVarInt(playerid, "Job") != JOB_TRUCKER) return 1;
	if(PlayerInfo[playerid][pJobStatus] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You haven't started your job route yet.");
	
	switch(GetPVarInt(playerid, "Job"))
	{
		case JOB_FARMER:
		{
			DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
			DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
			DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

			PlayerInfo[playerid][pJobStatus] = 0;
			PlayerInfo[playerid][pJobProgress] = 0;
			PlayerInfo[playerid][pJobVehicleID] = 0;
			PlayerInfo[playerid][pJobExtraVehicleID] = 0;
			PlayerInfo[playerid][pJobCP] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "You have stopped your job route.");
		}
		case JOB_PIZZA:
		{
			DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
			DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
			DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

			PlayerInfo[playerid][pJobStatus] = 0;
			PlayerInfo[playerid][pJobProgress] = 0;
			PlayerInfo[playerid][pJobVehicleID] = 0;
			PlayerInfo[playerid][pJobExtraVehicleID] = 0;
			PlayerInfo[playerid][pJobHouseID] = 0;
			PlayerInfo[playerid][pJobCP] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "You have stopped your job route.");
		}
		case JOB_MECHANIC:
		{
			DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
			DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
			DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

			PlayerInfo[playerid][pJobStatus] = 0;
			PlayerInfo[playerid][pJobProgress] = 0;
			PlayerInfo[playerid][pJobVehicleID] = 0;
			PlayerInfo[playerid][pJobExtraVehicleID] = 0;
			PlayerInfo[playerid][pJobHouseID] = 0;
			PlayerInfo[playerid][pJobCP] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "You have stopped your job route.");
		}
		case JOB_TRUCKER:
		{
			if(PlayerInfo[playerid][pJobStatus] == 3 &&
				IsPlayerInRangeOfPoint(playerid, 50.0, 94.4029,-268.6584,1.5781) &&
				PlayerInfo[playerid][pJobProgress] > 0 &&
				IsTrailerAttachedToVehicle(PlayerInfo[playerid][pJobVehicleID]))
			{
				if(GetCount() > GetPVarInt(playerid, "RouteTime"))
				{
					new string[128];
					new payment = floatround(PlayerInfo[playerid][pJobProgress] * JOB_TRUCKER_MULTIPLIER);
					format(string, sizeof(string), "Route finished: %s has been added to your next paycheck.", FormatMoney(payment));
					SendClientMessage(playerid, COLOR_GREEN, string);

					SetPVarInt(playerid, "CheckEarn", payment + GetPVarInt(playerid, "CheckEarn"));

					DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
					DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
					DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

					PlayerInfo[playerid][pJobStatus] = 0;
					PlayerInfo[playerid][pJobProgress] = 0;
					PlayerInfo[playerid][pJobVehicleID] = 0;
					PlayerInfo[playerid][pJobExtraVehicleID] = 0;
					PlayerInfo[playerid][pJobCP] = 0;

					DeletePVar(playerid, "OnRouteTime");
				}
			}
			else
			{
				DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
				DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
				DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

				PlayerInfo[playerid][pJobStatus] = 0;
				PlayerInfo[playerid][pJobProgress] = 0;
				PlayerInfo[playerid][pJobVehicleID] = 0;
				PlayerInfo[playerid][pJobExtraVehicleID] = 0;
				PlayerInfo[playerid][pJobHouseID] = 0;
				PlayerInfo[playerid][pJobCP] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "You have stopped your job route.");
				DeletePVar(playerid, "OnRouteTime");
			}
		}
	}
	return 1;
}

COMMAND:quitjob(playerid, params[])
{
	if(GetPVarInt(playerid, "Job") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are already unemployed.");
	for(new i = 0; i < sizeof(JobInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, JobInfo[i][jX], JobInfo[i][jY], JobInfo[i][jZ]) &&
			GetPVarInt(playerid, "Job") == JobInfo[i][jID])
		{
			if(GetPVarInt(playerid, "Job") == JOB_FARMER || 
				GetPVarInt(playerid, "Job") == JOB_PIZZA ||
				GetPVarInt(playerid, "Job") == JOB_MECHANIC || 
				GetPVarInt(playerid, "Job") == JOB_TRUCKER)
			{
				if(PlayerInfo[playerid][pJobStatus] != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route.");
				SetPVarInt(playerid, "Job", 0);
				SendClientMessage(playerid, COLOR_WHITE, "You are now unemployed.");
				GiveAchievement(playerid, 5);
			}
			else
			{
				if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route.");
				SetPVarInt(playerid, "Job", 0);
				SendClientMessage(playerid, COLOR_WHITE, "You are now unemployed.");
				GiveAchievement(playerid, 5);
			}
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_ERROR, "You must be at your current job's location in order to quit it.");
	return 1;
}

COMMAND:pizza(playerid, params[])
{
	if(GetPVarInt(playerid, "Job") != JOB_PIZZA) return SendClientMessage(playerid, COLOR_ERROR, "You do not work as a pizza boy.");
	if(PlayerInfo[playerid][pJobStatus] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You need to start your Pizza Boy route first.");
	if(PlayerInfo[playerid][pJobStatus] != 1) return SendClientMessage(playerid, COLOR_ERROR, "You can not do this at the moment.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, 369.1131,-115.5914,1001.4922) ||
		GetPlayerInterior(playerid) != 5) return SendClientMessage(playerid, COLOR_ERROR, "You are not at the pizza collection point.");
	
	if(PlayerInfo[playerid][pJobProgress] == 0)
	{
		new vehicleid;
		vehicleid = CreateVehicle(448, 2101.1313,-1803.7959,13.1540, 129.5935, -1, -1, -1);
		PlayerInfo[playerid][pJobVehicleID] = vehicleid;

		Iter_Add(VehicleIterator, vehicleid);
		VehicleInfo[vehicleid][vFuel] = 100;
		VehicleInfo[vehicleid][vEngine] = 1;
		VehicleInfo[vehicleid][vWindows] = 0;
		VehicleInfo[vehicleid][vID] = 0;
		VehicleInfo[vehicleid][vLights] = 0;
		VehicleInfo[vehicleid][vCreated] = 1;
		VehicleInfo[vehicleid][vType] = VEHICLE_JOB;
		VehicleInfo[vehicleid][vJob] = GetPVarInt(playerid, "Job");
		VehicleInfo[vehicleid][vLights] = 0;
		VehicleInfo[vehicleid][vLock] = 0;
		VehicleInfo[vehicleid][vEngineStats][1] = 1;
		VehicleInfo[vehicleid][vEngineStats][2] = 1;
		VehicleInfo[vehicleid][vBattery][1] = 1;
		VehicleInfo[vehicleid][vBattery][2] = 1;

		SetVehicleNumberPlate(vehicleid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
		SetVehicleToRespawn(vehicleid);

		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);

		SendClientMessage(playerid, COLOR_JOB, "Package collected and your Pizza Bike has been spawned for you.");

		PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, 2101.1313,-1803.7959,13.1540, 0.0,0.0,0.0, 2, -1, -1, playerid);
	}
	else
	{
		new Float:x, Float:y, Float:z;
		GetVehiclePos(PlayerInfo[playerid][pJobVehicleID], x, y, z);
		PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, x, y, z, 0.0,0.0,0.0, 2, -1, -1, playerid);

		SendClientMessage(playerid, COLOR_JOB, "Package collected, get on your Pizza Bike and deliver it.");
	}

	PlayerInfo[playerid][pJobStatus] = 2;

	SetPlayerAttachedObject(playerid, 9, 1582, 1, -0.064613, 0.520760, 0.000000, 0.000000, 84.217391, 0.000000, 1.000000, 1.000000, 1.000000);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}

COMMAND:map(playerid, params[])
{
	if(GetPVarInt(playerid, "Developer") != 1 && GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new option[16], optional[16], string[128];
	if(sscanf(params, "s[16]S(-2)[16]", option, optional)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [tag | object | edit | remove | removeall | setint | setvw | setx | sety | setz]");

	if(!strcmp("tag", option))
	{
		if(strval(optional) == -2) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [tag] [tag name]");
		format(PlayerInfo[playerid][pMapTag], 16, "%s", optional);
		format(string, sizeof(string), "MAP: Mapping tag set to '%s'.", PlayerInfo[playerid][pMapTag]);
		SendClientMessage(playerid, COLOR_MAP, string);
		return 1;
	}
	else if(!strcmp("object", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		
		if(strval(optional) == -2)
		{
			ShowModelSelectionMenuEx(playerid, FurnObjs, sizeof(FurnObjs), "Objects", 15, 16.0, 0.0, -55.0);
		}
		else
		{
			if(IsInvalidObjectID(strval(optional))) return SendClientMessage(playerid, COLOR_ERROR, "Invalid object ID.");

			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			GetXYInFrontOfPlayer(playerid, x, y, 3.0);

			new obj = CreateDynamicObject(strval(optional), x, y, z, 0.0, 0.0, 0.0);
			EditDynamicObject(playerid, obj);

			SetPVarInt(playerid, "EditorMode", 17);
			SetPVarInt(playerid, "EditorModel", strval(optional));

			SendClientMessage(playerid, COLOR_WHITE, "Navigate the object and press the save icon when done. (hold 'SPACE' to move the camera)");

			AddPlayerTag(playerid, "(mapping)");
		}
		return 1;
	}
	else if(!strcmp("edit", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		SetPVarInt(playerid, "EditorMode", 18);
		SelectObject(playerid);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Select an object to edit it.");
		return 1;
	}
	else if(!strcmp("remove", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		SetPVarInt(playerid, "EditorMode", 19);
		SelectObject(playerid);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Select an object to remove it.");
		return 1;
	}
	else if(!strcmp("setvw", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		if(strval(optional) == -2) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [setvw] [virtual world] (-1 for global)");

		for(new i = 0; i < MAX_MAP_OBJECTS; i++)
		{
			if(MapInfo[i][mObjectID] != 0)
			{
				if(!strcmp(MapInfo[i][mTag], PlayerInfo[playerid][pMapTag]))
				{
					DestroyDynamicObject(MapInfo[i][mObjectID]);

					MapInfo[i][mVw] = strval(optional);

					MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
						MapInfo[i][mX], 
						MapInfo[i][mY], 
						MapInfo[i][mZ], 
						MapInfo[i][mrX], 
						MapInfo[i][mrY], 
						MapInfo[i][mrZ], 
						MapInfo[i][mVw], 
						MapInfo[i][mInt]);
				}
			}
		}

		SaveMap(PlayerInfo[playerid][pMapTag]);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Updated virtual world of all objects with the current tag.");
		return 1;
	}
	else if(!strcmp("setx", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		if(strval(optional) == -2) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [setx] [x]");

		for(new i = 0; i < MAX_MAP_OBJECTS; i++)
		{
			if(MapInfo[i][mObjectID] != 0)
			{
				if(!strcmp(MapInfo[i][mTag], PlayerInfo[playerid][pMapTag]))
				{
					DestroyDynamicObject(MapInfo[i][mObjectID]);

					MapInfo[i][mX] += floatstr(optional);

					MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
						MapInfo[i][mX], 
						MapInfo[i][mY], 
						MapInfo[i][mZ], 
						MapInfo[i][mrX], 
						MapInfo[i][mrY], 
						MapInfo[i][mrZ], 
						MapInfo[i][mVw], 
						MapInfo[i][mInt]);
				}
			}
		}

		SaveMap(PlayerInfo[playerid][pMapTag]);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Updated virtual world of all objects with the current tag.");
		return 1;
	}
	else if(!strcmp("sety", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		if(strval(optional) == -2) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [sety] [y]");

		for(new i = 0; i < MAX_MAP_OBJECTS; i++)
		{
			if(MapInfo[i][mObjectID] != 0)
			{
				if(!strcmp(MapInfo[i][mTag], PlayerInfo[playerid][pMapTag]))
				{
					DestroyDynamicObject(MapInfo[i][mObjectID]);

					MapInfo[i][mY] += floatstr(optional);

					MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
						MapInfo[i][mX], 
						MapInfo[i][mY], 
						MapInfo[i][mZ], 
						MapInfo[i][mrX], 
						MapInfo[i][mrY], 
						MapInfo[i][mrZ], 
						MapInfo[i][mVw], 
						MapInfo[i][mInt]);
				}
			}
		}

		SaveMap(PlayerInfo[playerid][pMapTag]);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Updated virtual world of all objects with the current tag.");
		return 1;
	}
	else if(!strcmp("setz", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		if(strval(optional) == -2) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [setz] [z]");

		for(new i = 0; i < MAX_MAP_OBJECTS; i++)
		{
			if(MapInfo[i][mObjectID] != 0)
			{
				if(!strcmp(MapInfo[i][mTag], PlayerInfo[playerid][pMapTag]))
				{
					DestroyDynamicObject(MapInfo[i][mObjectID]);

					MapInfo[i][mZ] += floatstr(optional);

					MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
						MapInfo[i][mX], 
						MapInfo[i][mY], 
						MapInfo[i][mZ], 
						MapInfo[i][mrX], 
						MapInfo[i][mrY], 
						MapInfo[i][mrZ], 
						MapInfo[i][mVw], 
						MapInfo[i][mInt]);
				}
			}
		}

		SaveMap(PlayerInfo[playerid][pMapTag]);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Updated virtual world of all objects with the current tag.");
		return 1;
	}
	else if(!strcmp("setint", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");
		if(strval(optional) == -2) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /map [setint] [interior] (-1 for global)");

		for(new i = 0; i < MAX_MAP_OBJECTS; i++)
		{
			if(!strcmp(MapInfo[i][mTag], PlayerInfo[playerid][pMapTag]))
			{
				DestroyDynamicObject(MapInfo[i][mObjectID]);

				MapInfo[i][mInt] = strval(optional);

				MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
					MapInfo[i][mX], 
					MapInfo[i][mY], 
					MapInfo[i][mZ], 
					MapInfo[i][mrX], 
					MapInfo[i][mrY], 
					MapInfo[i][mrZ], 
					MapInfo[i][mVw], 
					MapInfo[i][mInt]);
			}
		}

		SaveMap(PlayerInfo[playerid][pMapTag]);

		SendClientMessage(playerid, COLOR_MAP, "MAP: Updated interior of all objects with the current tag.");
		return 1;
	}
	else if(!strcmp("removeall", option))
	{
		if(strlen(PlayerInfo[playerid][pMapTag]) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a mapping tag set.");

		for(new i = 0; i < MAX_MAP_OBJECTS; i++)
		{
			if(!strcmp(MapInfo[i][mTag], PlayerInfo[playerid][pMapTag]))
			{
				DestroyDynamicObject(MapInfo[i][mObjectID]);

				format(MapInfo[i][mTag], 16, "");

				MapInfo[i][mObjectID] = 0;
				MapInfo[i][mObjectModel] = 0;
				MapInfo[i][mX] = 0;
				MapInfo[i][mY] = 0;
				MapInfo[i][mZ] = 0;
				MapInfo[i][mrX] = 0;
				MapInfo[i][mrY] = 0;
				MapInfo[i][mrZ] = 0;
				MapInfo[i][mInt] = 0;
				MapInfo[i][mVw] = 0;

				new query[128];
				mysql_format(handlesql, query, sizeof(query), "DELETE FROM `maps` WHERE ID=%i", MapInfo[i][mID]);
				mysql_pquery(handlesql, query);

				MapInfo[i][mID] = 0;
			}
		}

		SendClientMessage(playerid, COLOR_MAP, "MAP: Objects deleted.");
		return 1;
	}
	return 1;
}

COMMAND:removecp(playerid, params[])
{
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    TogglePlayerDynamicCP(playerid, GetPlayerVisibleDynamicCP(playerid), 0);
    return 1;
}
COMMAND:fixcp(playerid, params[])
{
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    TogglePlayerAllDynamicCPs(playerid, true);
    DisablePlayerCheckpoint(playerid);
    return 1;
}

COMMAND:removeshells(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have permission for this command.");

	new range;
	if(sscanf(params, "i", range)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /removeshells [range]");

	for(new i = 0; i < sizeof(Shells); i++)
	{
		if(Shells[i][sUsed] == 1)
		{
			if(IsPlayerInRangeOfPoint(playerid, range, Shells[i][sX], Shells[i][sY], Shells[i][sZ]))
			{
				Shells[i][sTime] = 0;
				Shells[i][sUsed] = 0;
				Shells[i][sX] = 0.0;
				Shells[i][sY] = 0.0;
				Shells[i][sZ] = 0.0;
				DestroyDynamic3DTextLabel(Shells[i][sText]);
			}
		}
	}
    return 1;
}

COMMAND:botspawn(playerid, params[])
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	if(IsIPWhitelisted(ip))
	{
		SetPVarInt(playerid, "Bot", 1);
		SetPVarInt(playerid, "BotSpawned", 1);
		SetPVarInt(playerid, "Tut", 0);
		OnLoginInit(playerid, 1);
	}
	return 1;
}

COMMAND:checkserial(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have permission for this command.");
	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /checkserial [playerid]");
	
	if(PlayerInfo[targetid][pPlayerWeapon] != 0) // gun in hand
	{
		new string[128];
		format(string, sizeof(string), "%s's (ID: %i) weapon serial ID: %i", PlayerInfo[targetid][pName], targetid, PlayerInfo[targetid][pPlayerSerial]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}

COMMAND:tognames(playerid, params[])
{
    if(GetPVarInt(playerid, "Nametag") == 0)
    {
        foreach(new i : Player)
        {
        	ShowPlayerNameTagForPlayer(playerid, i, false);
        	SetPVarInt(playerid, "Nametag", 1);
        }
        SendClientMessage(playerid, COLOR_WHITE, "INFO: Name tags are now OFF.");
    }
    else if(GetPVarInt(playerid, "Nametag") == 1)
    {
        foreach(new i : Player)
        {
        	if(GetPVarInt(i, "MaskUse") != 1)
				ShowPlayerNameTagForPlayer(playerid, i, true);
        	SetPVarInt(playerid, "Nametag", 0);
        }
        SendClientMessage(playerid, COLOR_WHITE, "INFO: Name tags are now ON.");
    }
    else
    {
    	SetPVarInt(playerid, "Nametag", 0);
    }
    return 1;
}

COMMAND:fish(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(IsPlayerInBoat(playerid))
	{
		if(CheckInvItem(playerid, 418) && CheckInvItem(playerid, 419) && CheckInvItem(playerid, 420))
		{
			if(HowMuchFish(playerid) >= 50) return SendClientMessage(playerid, COLOR_GREY, "You have reached the limit of fish you can carry. Sell your fish or store it!");
			if(GetPVarInt(playerid, "MonthDon") == 5 && (GetPVarInt(playerid, "MonthDonT") > 0))
				ProgressBar(playerid, "Fishing...", 15, 6);
			else
				ProgressBar(playerid, "Fishing...", 25, 6);
			AddPlayerTag(playerid, "(fishing)");
			TogglePlayerControllable(playerid, false);
			RemoveFishFood(playerid);
		}
		else SendClientMessage(playerid, COLOR_GREY, "You can't start fishing, you are missing the equipment!");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 407.8403,-2087.3447,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 404.9505,-2087.3740,7.8301) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 401.8418,-2087.3035,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 398.7660,-2087.2339,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 395.9321,-2087.1692,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 393.0120,-2087.1023,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 390.1792,-2087.1926,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 386.9814,-2087.2991,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 384.0281,-2087.2310,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 381.0021,-2087.3616,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 378.0068,-2087.3511,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 375.0299,-2087.2029,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 372.1673,-2087.0608,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 369.2910,-2087.2471,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 366.1649,-2087.2390,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 363.2957,-2087.1785,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 360.2754,-2087.2952,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 357.1870,-2087.2939,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 354.4292,-2087.1113,7.8359) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 351.4158,-2087.2507,7.8301))
	{
		new Float:angle;
		GetPlayerFacingAngle(playerid, angle);

		if(angle < 125.0 && angle > 247.0) return SendClientMessage(playerid, COLOR_ERROR, "You must be facing the sea to start fishing.");
		if(CheckInvItem(playerid, 418) && CheckInvItem(playerid, 419) && CheckInvItem(playerid, 420))
		{
			if(HowMuchFish(playerid) >= 25) return SendClientMessage(playerid, COLOR_GREY, "You have reached the limit of fish you can carry. Sell your fish or store it.");

			if(GetPVarInt(playerid, "MonthDon") == 5 && (GetPVarInt(playerid, "MonthDonT") > 0))
			{
				ProgressBar(playerid, "Fishing...", 20, 7);
			}
			else
			{
				ProgressBar(playerid, "Fishing...", 30, 7);
			}

			SetPlayerFacingAngle(playerid, 180.0);

			TogglePlayerControllable(playerid, false);
			AddPlayerTag(playerid, "(fishing)");
			RemoveFishFood(playerid);

			ApplyAnimationEx(playerid, "SAMP", "FishingIdle", 50.0, 0, 1, 1, 1, 1);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
			{
				RemovePlayerAttachedObject(playerid, 9);
			}
			SetPlayerAttachedObject(playerid, 9, 18632, 1, -0.091109, 0.255484, 0.018155, 94.362060, 312.328125, 190.418655, 1.000000, 1.000000, 1.000000);
		}
		else SendClientMessage(playerid, COLOR_GREY, "You can't start fishing, you are missing the equipment.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "You must be in a boat or at the Santa Maria Pier in order to fish.");
	return 1;
}


// ======================= //
// R19 additions by vik.

ALTCOMMAND:tm->takemelee;
COMMAND:takemelee(playerid, params[])
{
	if(PlayerInfo[playerid][pArcade] != 0) return 1;
    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
    if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this command!");
    SetPVarInt(playerid, "GunReduce", 2000);
    if(NetStats_PacketLossPercent(playerid) >= 10) return SendClientMessage(playerid, COLOR_WHITE, "Your packet loss is too high to perform this command");
    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
    if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
    if(GetPVarInt(playerid, "ConnectTime") < 8) return scm(playerid, -1, "You need (8) TLS to use firearms!");
    if(PlayerInfo[playerid][pBeanbaggedTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are currently beanbagged!");

	new foundid = 0, str2[128];
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] >= 1)
		{
            if(PlayerInfo[playerid][pInvItem][i] >= 1 && PlayerInfo[playerid][pInvItem][i] <= 6)
            {
		        if(foundid == 0) foundid = i;
		    }
	    }
	}
	if(foundid == 0) return error(playerid, "You have no melee weapon in your inventory.");
	if(PlayerInfo[playerid][pPlayerWeapon] != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "You already have a weapon equipped!");
	    return true;
	}
	if(GetPVarInt(playerid, "TogUnhol") == 0)
    PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvEx][foundid];
    GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pInvItem][foundid], PlayerInfo[playerid][pInvQ][foundid]);
    PlayerInfo[playerid][pPlayerSerial]=PlayerInfo[playerid][pInvS][foundid];
    //==========//
    format(str2, 128, "%s equipped!", PrintIName(PlayerInfo[playerid][pInvItem][foundid]));
    SendClientMessage(playerid, COLOR_WHITE, str2);
    //==========//
	RemoveInvItem(playerid, foundid);
    //==========//
    CallRemoteFunction("LoadHolsters","i",playerid);
	return 1;
}


// =========

ALTCOMMAND:rlow->radiolow;
COMMAND:radiolow(playerid, params[])
{
	new text[128], string[256],sendername[MAX_PLAYER_NAME], faction = GetPVarInt(playerid, "Member");
	if(sscanf(params, "s[128]", text)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /radiolow [text]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0)   return SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1)           return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted.");
	    if(GetPVarInt(playerid, "Member") == 0)         return SendClientMessage(playerid, COLOR_ERROR, "You must be in a faction to use this.");
	    if(GetPVarInt(playerid, "Jailed") > 0)          return SendClientMessage(playerid, COLOR_ERROR, "You cannot use this whilst in jail.");
	    if(IsPlayerInWater(playerid))                   return SendClientMessage(playerid, COLOR_ERROR, "You cannot use this whilst in water.");
	    if(GetPVarInt(playerid, "Member") != 0)
	    {
	        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	        GiveNameSpace(sendername);
			switch(faction) // Incase we decide to upload more factions with /radios, shortens down memory.
			{
			    case 1: // LSPD
			    {
			        format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
			        SendFactionMessage(1, 0x8080FF96, string);

					if(IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
					{
						if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows] == 0)
						{
							SendInCarMessage(GetPlayerVehicleID(playerid), string);
						}
						else ProxRadio(5.0, playerid, string, COLOR_FADE);
					}

					if(IsInLS(playerid)) {
					format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
					SendScannerMessage(GetPVarInt(playerid, "Member"), string); }
				}
				case 2: // LSFD
				{
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
				    SendFactionMessage(2, 0x8080FF96, string);

					if(IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
					{
						if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows] == 0)
						{
							SendInCarMessage(GetPlayerVehicleID(playerid), string);
						}
						else ProxRadio(5.0, playerid, string, COLOR_FADE);
					}

				    if(IsInLS(playerid)) {
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
					SendScannerMessage(GetPVarInt(playerid, "Member"), string); }
				}
				case 5: // GOV
				{
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
				    SendFactionMessage(5, 0x8080FF96, string);

					if(IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
					{
						if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows] == 0)
						{
							SendInCarMessage(GetPlayerVehicleID(playerid), string);
						}
						else ProxRadio(5.0, playerid, string, COLOR_FADE);
					}

				}
				case 7: // LOS SANTOS CORPORATION OFFICIAL SLOT
				{
				    format(string, sizeof(string), "** %s (radio): %s **", sendername, text);
				    SendFactionMessage(7, 0x8080FF96, string);

					if(IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
					{
						if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows] == 0)
						{
							SendInCarMessage(GetPlayerVehicleID(playerid), string);
						}
						else ProxRadio(5.0, playerid, string, COLOR_FADE);
					}

				}
			}
		}
	}
	return 1;
}

COMMAND:wtlow(playerid, params[])
{
	new text[128], string[128], sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /wtlow [text]");
	else
	{
	    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
	    if(!CheckInvItem(playerid, 402)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a Walkie Talkie.");
	    if(GetPVarInt(playerid, "WalkieFreq") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need a valid walkie talkie frequency (/setfreq).");
	    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	    if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "WalkieFreq") == 911) return SendClientMessage(playerid, COLOR_WHITE, "Walkie talkie frequency is restricted.");
	    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      	GiveNameSpace(sendername);
	    format(string, sizeof(string), "** Ch[%d] %s: %s **",GetPVarInt(playerid, "WalkieFreq"), sendername, text);
		SendFreqMessage(playerid,GetPVarInt(playerid, "WalkieFreq"), 0x00C6C696, string);

		if(IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
		{
			if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows] == 0)
			{
				SendInCarMessage(GetPlayerVehicleID(playerid), string);
			}
			else ProxRadio(5.0, playerid, string, COLOR_FADE);
		}
	}
	return 1;
}


COMMAND:melow(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /melow {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "* %s %s", sendername, text);
    	ProxDetector(5.0, playerid, string, COLOR_PURPLE);
	}
	
	return 1;
}


COMMAND:dolow(playerid, params[])
{
	new text[256],string[256],sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_ERROR, "USAGE: /dolow {FFFFFF}[text]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_ERROR, "You are currently muted!");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
    	format(string, sizeof(string), "* %s (( %s ))", text, sendername);
    	ProxDetector(5.0, playerid, string, COLOR_PURPLE);
	}
	
	return 1;
}

// capella r18g
COMMAND:logs(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have permission for this command.");
	
	new targetid;
	if(sscanf(params, "u", targetid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "TIP: /logs [playerid] can also be used to look up currently online players.");
		ShowPlayerDialogEx(playerid, DIALOG_LOG_NAME, DIALOG_STYLE_INPUT, "Log Checker - Search", "Input the name of the player (Firstname_Lastname):", "Search","Exit");
	}
	else
	{
		new query[128];
		mysql_format(handlesql, query, sizeof(query),"SELECT * FROM `accounts` WHERE Name='%e'",
		PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "OnLogNameSearch", "i", playerid);
	}
	return 1;
}

// vik r18g 2

COMMAND:createscene(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPlayerInterior(playerid) != 0) return true;
    if(GetPlayerVirtualWorld(playerid) != 0) return true;
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
    {
		new text[256], string[256], sendername[MAX_PLAYER_NAME];
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(sscanf(params, "s[256]", text)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /createscene [text]");
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		format(string, sizeof(string), "* %s (( %s ))", text, sendername);
		if(strlen(string) > MAX_MSG_LENGTH/2)
		{
		    strins(string, "...\n...", MAX_MSG_LENGTH/2);
		}
        new found = 0, foundid = 0;
  		for(new j = 0; j < MAX_SCENES; j++)
    	{
	    	if(SceneInfo[j][scUsed] == 0 && found == 0)
	    	{
      			found++;
	        	foundid=j;
          	}
     	}
     	if(found == 0) return SendClientMessage(playerid, -1, "Can't find any roadblock slots available!");
     	SceneInfo[foundid][scUsed]= 1;
        SceneInfo[foundid][scFact]= GetPVarInt(playerid, "Member");
        SceneInfo[foundid][scID]= CreateDynamic3DTextLabel(string, 0xC2A2DAFF, x, y, z, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);
        SceneInfo[foundid][scX]=x;
      	SceneInfo[foundid][scY]=y;
      	SceneInfo[foundid][scZ]=z;
      	SendClientMessage(playerid, -1, "Scene created!");
      	SendClientMessage(playerid, -1, "Available commands: /removescene.");
	}
	else
	    SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
	return 1;
}
COMMAND:removescene(playerid, params[])
{
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
    {
    	if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    new found = 0;
	        for(new j = 0; j < MAX_SCENES; j++)
	    	{
		    	if(SceneInfo[j][scUsed] == 1 && SceneInfo[j][scFact] == GetPVarInt(playerid, "Member"))
		    	{
	 	    		if(IsPlayerInRangeOfPoint(playerid, 2.5, SceneInfo[j][scX], SceneInfo[j][scY], SceneInfo[j][scZ]))
			    	{
			   			DestroyDynamic3DTextLabel(SceneInfo[j][scID]);
	           			SceneInfo[j][scUsed]= 0;
	           			found++;
	       			}
		    	}
	     	}
			if(found == 0)
			{
			    SendClientMessage(playerid, -1, "Couldn't find any scene!");
			}
    	}
    }
    else
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
    }
	return 1;
}
COMMAND:removesceneall(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD)
    {
    	for(new j = 0; j < MAX_SCENES; j++)
	    {
		    if(SceneInfo[j][scUsed] == 1 && SceneInfo[j][scFact] == GetPVarInt(playerid, "Member"))
		    {
			   	DestroyDynamic3DTextLabel(SceneInfo[j][scID]);
	           	SceneInfo[j][scUsed]= 0;
		    }
	   	}
	   	SendClientMessage(playerid, -1, "All faction scenes removed!");
    }
    else
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
    }
	return 1;
}

COMMAND:swat(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently muted!");
	if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid,COLOR_LIGHTRED,"You do not have access to this command.");
	if(!PlayerToCar(playerid,1,6.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "WARNING: You are not close to any vehicle.");
	new carid = PlayerToCar(playerid,2,6.0);
	new licenseid = PlayerInfo[playerid][pPlayerSerial];

	new option[16];
	if(sscanf(params, "s[16]", option))
	{
		scm(playerid, COLOR_ERROR, "USAGE: /swat [m4/mp5/shotgun/gear]");
		return true;
	}

	switch(GetVehicleModel(carid))
	{
		case 427, 528:
		{
			if(strcmp(option, "m4", true) == 0)
			{
				GiveInvItem(playerid, 31, 150, 121, licenseid);
				GiveInvItem(playerid, 121, 150, 0, licenseid);
				SetPlayerArmourEx(playerid, 250);
			}
			else if(strcmp(option, "mp5", true) == 0)
			{
				GiveInvItem(playerid, 29, 150, 115, licenseid);
				GiveInvItem(playerid, 115, 150, 0, licenseid);
				SetPlayerArmourEx(playerid, 250);
			}
			else if(strcmp(option, "shotgun", true) == 0)
			{
				GiveInvItem(playerid, 25, 25, 112, licenseid);
				GiveInvItem(playerid, 112, 25, 0, licenseid);
				SetPlayerArmourEx(playerid, 250);
			}
			else if(strcmp(option, "gear", true) == 0)
			{
				SetPlayerSkinEx(playerid, 285);
				SetPlayerArmourEx(playerid, 250);
			}
			else
			{
				scm(playerid, COLOR_ERROR, "USAGE: /swat [m4/mp5/shotgun/gear]");
				return true;		
			}
		}
		default: SendClientMessage(playerid, COLOR_ERROR, "You can only access this command near a SWAT vehicle!");

	}

	return 1;
}

COMMAND:setpassword(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 10) return SendClientMessage(playerid, COLOR_ERROR, "You don't have access to this command.");

	new name[MAX_PLAYER_NAME], password[32];
	if(sscanf(params, "s[24]s[32]", name, password)) return SendClientMessage(playerid, COLOR_ERROR, "USAGE: /setpassword [Firstname_Lastname] [password]");

	new hash[129];
	format(hash, sizeof(hash), "%s3ca827d65b48291545b", password);
	WP_Hash(hash, sizeof(hash), hash);

	new query[256];
	mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Pass='%e', SecPass='' WHERE Name='%e'", hash, name);
	mysql_pquery(handlesql, query, "OnPasswordReset", "i", playerid);
	return 1;
}

COMMAND:kevlar(playerid, params[])
{
    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
    {
    	if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_ITEM))
		{
			RemovePlayerAttachedObject(playerid, HOLDOBJECT_ITEM);
		}
		else
		{
			SetPlayerAttachedObject(playerid,HOLDOBJECT_ITEM,19142,1,0.1,0.05,0.0,0.0,0.0,0.0);
		}
    }
    else SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
    return 1;
}

COMMAND:hq(playerid, params[])
{
    new text[256];
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
    if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
    if(sscanf(params, "s[256]", text)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /hq [message]");
    new string[256], sendername[MAX_PLAYER_NAME];
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    GiveNameSpace(sendername);
    format(string, sizeof(string), "** HQ: %s: %s **", sendername, text);
    SendFactionMessage(GetPVarInt(playerid, "Member"), COLOR_LIGHTBLUE, string);
    return 1;
}

// for better club giving because setdonate is fucking shitty piece of shit
COMMAND:setsub(playerid, params[])
{
	new targetid, days;
	if(GetPVarInt(playerid, "Admin") < 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(sscanf(params, "ui", targetid, days)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /setsub [playerid] [days]");
	if(IsPlayerConnected(targetid))
	{
		new amount;
		SetPVarInt(targetid, "MonthDon", 5);
		if(GetPVarInt(targetid, "MonthDonT") + days < 0)
			amount = 0;
		else
			amount = GetPVarInt(targetid, "MonthDonT") + days;
		if(amount == 0)
			SetPVarInt(targetid, "MonthDon", 0);
		SetPVarInt(targetid, "MonthDonT", amount);
		SendClientMessage(playerid,COLOR_GREY,"Player's subscription has been given.");
      	SendClientMessage(targetid,COLOR_GREY,"You have received your subscriptions perks.");
	}
	return 1;
}
// ***
COMMAND:sendtonewb(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /sendtonewb [playerid]");
	else
	{
		if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
		if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Can't do this to a NPC.");
		if (GetPVarInt(playerid, "Jailed") != 0) return true;
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
			SetPlayerPosEx(targetid, 1568.3518,-2276.5513,13.5537);
			SetPlayerInterior(targetid,0);
			SetPlayerVirtualWorld(targetid,0);
			SendClientMessage(targetid, 0xFF000000, "You have been sent to the airport!");
			SendClientMessage(playerid, COLOR_GREY, "AdmMsg: Player has been sent to the airport!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
		}
	}
	return 1;
}

COMMAND:startsong(playerid, params[]) { 

    new url[128];
	if(sscanf(params, "s[128]", url)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /startsong [url]");

    GetDownloadFromYouTubeLink(playerid, 0, 0, url);
    return 1;
}

COMMAND:subrank(playerid, params[])
{
	if(GetPVarInt(playerid, "Member") != FACTION_LSFD && GetPVarInt(playerid, "Rank") < 13) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");

	new targetid, sbrank[20];
	if(sscanf(params, "us[20]", targetid, sbrank)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /subrank [playerid] [subrank (MAX20CHAR)]");

	new string[128];
	format(PlayerInfo[playerid][pFDSubRank], 20, "%s", sbrank);

	format(string, 128, "You set subrank of %s to %s.", PlayerInfo[targetid][pName], sbrank);
	SendClientMessage(playerid, COLOR_WHITE, string);

	return 1;
}

COMMAND:bend(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	if(GetPVarInt(playerid, "Control") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are currently frozen!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
	if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
	SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
	ApplyAnimationEx(playerid, "CAMERA", "camcrch_cmon", 4.0, 0, 0, 0, 1, 0);
	return 1;
}

COMMAND:tognicks(playerid, params[])
{
    if(GetPVarInt(playerid, "Nametag") == 0)
    {
        for(new i = 0; i <= GetPlayerPoolSize(); i++)
        {
        	ShowPlayerNameTagForPlayer(playerid, i, false);
        	SetPVarInt(playerid, "Nametag", 1);
        }
        SendClientMessage(playerid, COLOR_WHITE, "INFO: Name tags are now OFF.");
    }
    else if(GetPVarInt(playerid, "Nametag") == 1)
    {
        for(new i = 0; i <= GetPlayerPoolSize(); i++)
        {
        	if(GetPVarInt(i, "MaskUse") != 1)
				ShowPlayerNameTagForPlayer(playerid, i, true);
        	SetPVarInt(playerid, "Nametag", 0);
        }
        SendClientMessage(playerid, COLOR_WHITE, "INFO: Name tags are now ON.");
    }
    return 1;
}

COMMAND:sendtopizza(playerid, params[])
{
    new targetid;
    if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /sendtopizza [playerid]");
    else
    {
        if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
        if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Can't do this to a NPC.");
        if (GetPVarInt(playerid, "Jailed") != 0) return true;
        if(GetPVarInt(playerid, "Admin") >= 1)
        {
            SetPlayerPosEx(targetid, 2098.9319,-1785.2229,13.3997);
            SetPlayerInterior(targetid,0);
            SetPlayerVirtualWorld(targetid,0);
            SendClientMessage(targetid, 0xFF000000, "You have been sent to the Well Stack Pizza Co!");
            SendClientMessage(playerid, COLOR_GREY, "AdmMsg: Player has been sent to the Well Stacked Pizza Co!");
        }
        else
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
        }
    }
    return 1;
}

COMMAND:sendtobank(playerid, params[])
{
    new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /sendtobank [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Can't do this to a NPC.");
	    if (GetPVarInt(playerid, "Jailed") != 0) return true;
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    SetPlayerPosEx(targetid, 1448.1796,-1010.7741,26.8438);
			SetPlayerInterior(targetid,0);
			SetPlayerVirtualWorld(targetid,0);
		    SendClientMessage(targetid, 0xFF000000, "You have been sent to the bank!");
		    SendClientMessage(playerid, COLOR_GREY, "AdmMsg: Player has been sent to the bank!");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
		}
	}
	return 1;
}

COMMAND:sendtohos(playerid, params[])
{
    new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /sendtohos [playerid]");
	else
	{
	    if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "This player is not connected!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_GREY, "Can't do this to a NPC.");
	    if (GetPVarInt(playerid, "Jailed") != 0) return true;
		if(GetPVarInt(playerid, "Admin") >= 1)
		{
		    SetPlayerPosEx(targetid,1182.5016,-1321.9572,13.5788);
			SetPlayerInterior(targetid,0);
			SetPlayerVirtualWorld(targetid,0);
		    SendClientMessage(targetid, 0xFF000000, "You have been sent to the hospital!");
		    SendClientMessage(playerid, COLOR_GREY, "AdmMsg: Player has been sent to the hospital!");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have access to this command!");
		}
	}
	return 1;
}

COMMAND:pickup(playerid, params[])
{
	new found = 0;
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "PlayerLogged") == 1)
		{
		    if(GetPVarInt(i, "Mobile") == playerid)
		    {
		        found++;
		        SetPVarInt(playerid, "Mobile", i);
		        SetPVarInt(playerid, "RingTone", 0);
		        SetPVarInt(playerid, "RingPhone", 0);
		        SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingPhone", 0);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Call picked up.");
				SendClientMessage(i, COLOR_LIGHTBLUE, "They picked up the call.");
		        CellphoneState(playerid, 1);
		        DeletePVar(playerid, "CellMenu");
		        CallRemoteFunction("LoadRadios","i", playerid);
				CallRemoteFunction("LoadRadios","i", i);
	      	}
	   	}
   	}
   	if(found == 0) SendClientMessage(playerid, COLOR_GREY, "You do not have any incoming calls."), cmd_cellphone(playerid, "");
   	return 1;
}

COMMAND:charity(playerid, params[])
{
	new amount, sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "i", amount)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /charity {FFFFFF}[amount]");
	else
	{
		if(GetPVarInt(playerid, "PlayerLogged") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
		if(amount < 1 || amount > 50000) return SendClientMessage(playerid, COLOR_GREY, "Cannot go under 1 or above 50000.");
		if(amount > GetPVarInt(playerid, "Bank")) return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money in your bank.");
		SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-amount);
		OnPlayerDataSave(playerid);

		new Year, Month, Day;
		getdate(Year, Month, Day);
		new Hour, Minute, Second;
		gettime(Hour, Minute, Second);
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		new string[128];
		format(string, sizeof(string), "%s has donated $%d to the city funds.", sendername, amount);
		SendClientMessage(playerid, COLOR_GREY, string);
		format(string, sizeof(string), "TIMESTAMP: %d/%d/%d %d:%d", Day, Month, Year, Hour, Minute);
		SendClientMessage(playerid, COLOR_GREY, string);
		format(string, sizeof(string), "*** [CHARITY] %s has donated %s to city funds.", PlayerInfo[playerid][pUsername], FormatMoney(amount));
		PayLog(string);
	}
	return 1;
}

COMMAND:washhands(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	if(GetPVarInt(playerid, "Cuffed") != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not able to use this!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water!");
	if(GetPVarInt(playerid, "AnimDelay") > GetCount()) return SendClientMessage(playerid, COLOR_WHITE, "You must wait to apply another animation.");
	SetPVarInt(playerid, "AnimDelay" , GetCount()+SCRIPT_ANIMDELAY), SetPVarInt(playerid, "AnimUse" , 1);
	ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

COMMAND:paycheck(playerid, params[])
{
	if (GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	new string[128];
	format(string, sizeof(string), "Accumulated PayCheck: %s", FormatMoney(GetPVarInt(playerid, "CheckEarn")));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:bizconvert(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new businessid, tag[16];
	if(sscanf(params, "is[16]", businessid, tag)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /bizconvert [businessid] [tag]");

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(BizInfo[businessid][bObject][i] != 0)
		{
			for(new i2 = 0; i2 < MAX_MAP_OBJECTS; i2++)
			{
				if(MapInfo[i2][mObjectID] == 0)
				{
					MapInfo[i2][mObjectModel] = BizInfo[businessid][boID][i];
					MapInfo[i2][mX] = BizInfo[businessid][boX][i];
					MapInfo[i2][mY] = BizInfo[businessid][boY][i];
					MapInfo[i2][mZ] = BizInfo[businessid][boZ][i];
					MapInfo[i2][mrX] = BizInfo[businessid][borX][i];
					MapInfo[i2][mrY] = BizInfo[businessid][borY][i];
					MapInfo[i2][mrZ] = BizInfo[businessid][borZ][i];
					MapInfo[i2][mVw] = BizInfo[businessid][VwIn];
					MapInfo[i2][mInt] = BizInfo[businessid][IntIn];

					MapInfo[i2][mObjectID] = CreateDynamicObject(BizInfo[businessid][boID][i],
					MapInfo[i2][mX],
					MapInfo[i2][mY], 
					MapInfo[i2][mZ],
					MapInfo[i2][mrX],
					MapInfo[i2][mrY],
					MapInfo[i2][mrZ], 
					MapInfo[i2][mVw],
					MapInfo[i2][mInt]);

					format(MapInfo[i2][mTag], 16, "%s", tag);

					new query[256];
					mysql_format(handlesql, query, sizeof(query), "INSERT INTO `maps` (`Tag`, `ObjectModel`, `X`, `Y`, `Z`, `rX`, `rY`, `rZ`, `Interior`, `VirtualWorld`) VALUES ('%e', '%i', '%f', '%f', '%f', '%f', '%f', '%f', '%i', '%i');", 
						MapInfo[i2][mTag], 
						MapInfo[i2][mObjectModel], 
						MapInfo[i2][mX], 
						MapInfo[i2][mY], 
						MapInfo[i2][mZ], 
						MapInfo[i2][mrX], 
						MapInfo[i2][mrY], 
						MapInfo[i2][mrZ], 
						MapInfo[i2][mInt], 
						MapInfo[i2][mVw]);
					mysql_pquery(handlesql, query, "OnMappingObjectCreated", "i", i);
					break;
				}
			}
		}
	}
	return 1;
}

COMMAND:houseconvert(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 9) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new houseid, tag[16];
	if(sscanf(params, "is[16]", houseid, tag)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /houseconvert [houseid] [tag]");

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(HouseInfo[houseid][hObject][i] != 0)
		{
			for(new i2 = 0; i2 < MAX_MAP_OBJECTS; i2++)
			{
				if(MapInfo[i2][mObjectID] == 0)
				{
					MapInfo[i2][mObjectModel] = HouseInfo[houseid][hoID][i];
					MapInfo[i2][mX] = HouseInfo[houseid][hoX][i];
					MapInfo[i2][mY] = HouseInfo[houseid][hoY][i];
					MapInfo[i2][mZ] = HouseInfo[houseid][hoZ][i];
					MapInfo[i2][mrX] = HouseInfo[houseid][horX][i];
					MapInfo[i2][mrY] = HouseInfo[houseid][horY][i];
					MapInfo[i2][mrZ] = HouseInfo[houseid][horZ][i];
					MapInfo[i2][mVw] = HouseInfo[houseid][hVwIn];
					MapInfo[i2][mInt] = HouseInfo[houseid][hIntIn];

					MapInfo[i2][mObjectID] = CreateDynamicObject(HouseInfo[houseid][hoID][i], 
					MapInfo[i2][mX],
					MapInfo[i2][mY],
					MapInfo[i2][mZ], 
					MapInfo[i2][mrX],
					MapInfo[i2][mrY],
					MapInfo[i2][mrZ],
					MapInfo[i2][mVw], 
					MapInfo[i2][mInt]);

					format(MapInfo[i2][mTag], 16, "%s", tag);

					new query[256];
					mysql_format(handlesql, query, sizeof(query), "INSERT INTO `maps` (`Tag`, `ObjectModel`, `X`, `Y`, `Z`, `rX`, `rY`, `rZ`, `Interior`, `VirtualWorld`) VALUES ('%e', '%i', '%f', '%f', '%f', '%f', '%f', '%f', '%i', '%i');", 
						MapInfo[i2][mTag], 
						MapInfo[i2][mObjectModel], 
						MapInfo[i2][mX], 
						MapInfo[i2][mY], 
						MapInfo[i2][mZ], 
						MapInfo[i2][mrX], 
						MapInfo[i2][mrY], 
						MapInfo[i2][mrZ], 
						MapInfo[i2][mInt], 
						MapInfo[i2][mVw]);
					mysql_pquery(handlesql, query, "OnMappingObjectCreated", "i", i);
					break;
				}
			}
		}
	}
	return 1;
}

COMMAND:interiorlist(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	new interiorid;
	if(sscanf(params, "i", interiorid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /interiorlist [id-145]");

	SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "                           Default Interiors");
	new string[128];
	for(new i = interiorid; i < sizeof(IntArray); i++)
	{
		format(string, sizeof(string), "Interior %i: %s", i, IntName[i]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
	return 1;
}

COMMAND:interiorgoto(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");
	
	new interiorid;
	if(sscanf(params, "i", interiorid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /interiorgoto [0-145]");
	if(interiorid > sizeof(IntArray) || interiorid < 0) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /interiorgoto [0-145]");

	SetPlayerInterior(playerid, IntArray2[interiorid][0]);
	SetPlayerPos(playerid, IntArray[interiorid][0], IntArray[interiorid][1], IntArray[interiorid][2]);
	SetPlayerFacingAngle(playerid, IntArray[interiorid][3]);

	new string[128];
	format(string, sizeof(string), "Interior %i: %s", interiorid, IntName[interiorid]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

COMMAND:injuries(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /injuries [playerid]");

	if(GetPVarInt(targetid, "Dead") != 2) return SendClientMessage(playerid, COLOR_ERROR, "This player is not dead.");

	new title[60];
	format(title, sizeof(title), "Injuries of %s", PlayerInfo[playerid][pName]);

	new content[1024];
	format(content, sizeof(content), "This player is injured in the following bodyparts:\n\n");

	new injury[128], injuries = 0;
	for(new i = 0; i < 10; i++)
	{
		format(injury, sizeof(injury), "");
		if(PlayerInfo[playerid][pInjuries][i] > 0)
		{
			switch(i)
			{
				case 3:
				{
					format(injury, sizeof(injury), "Chest Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
				case 4:
				{
					format(injury, sizeof(injury), "Groin Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
				case 5:
				{
					format(injury, sizeof(injury), "Left Arm Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
				case 6:
				{
					format(injury, sizeof(injury), "Right Arm Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
				case 7:
				{
					format(injury, sizeof(injury), "Left Leg Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
				case 8:
				{
					format(injury, sizeof(injury), "Right Leg Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
				case 9:
				{
					format(injury, sizeof(injury), "Head Injury x%i\n", PlayerInfo[playerid][pInjuries][i]);
					injuries++;
				}
			}
		}

		if(strlen(injury) > 0)
		{
			format(content, sizeof(content), "%s%s", content, injury);
		}
	}

	if(injuries == 0)
	{
		format(injury, sizeof(injury), "Internal Injury\n");
		format(content, sizeof(content), "%s%s", content, injury);
	}

	ShowPlayerDialogEx(playerid, DIALOG_INJURIES, DIALOG_STYLE_MSGBOX, title, content, "Close", "");
	return 1;
}

COMMAND:kill(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /kill [playerid]");

	SetPlayerHealth(targetid, 0);
	return 1;
}

COMMAND:injure(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new targetid, id, value;
	if(sscanf(params, "uii", targetid, id, value)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /injure [playerid] [injury] [value]");

	PlayerInfo[targetid][pInjuries][id] = value;
	return 1;
}

COMMAND:propertyactivity(playerid, params[])
{
	if(GetPVarInt(playerid, "Admin") < 4) return SendClientMessage(playerid, COLOR_ERROR, "You do not have access to this command!");

	new query[256];
	foreach(new i : HouseIterator)
	{
		if(HouseInfo[i][hOwned] == 1)
		{
			mysql_format(handlesql, query, sizeof(query),"SELECT UNIX_TIMESTAMP(LastOnDate) AS unix_LastOnDate FROM `accounts` WHERE HouseKey=%i",
			i);
			mysql_pquery(handlesql, query, "OnHouseActivityCheck", "i", i);
		}
	}

	foreach(new i : BizIterator)
	{
		if(BizInfo[i][Owned] == 1)
		{
			mysql_format(handlesql, query, sizeof(query),"SELECT UNIX_TIMESTAMP(LastOnDate) AS unix_LastOnDate FROM `accounts` WHERE BizKey=%i",
			i);
			mysql_pquery(handlesql, query, "OnBizActivityCheck", "i", i);
		}
	}
	return 1;
}