//============================================//
//=====[ BUILD USAGE SECTION ]=====//
//============================================//
//============================================//

// testing git waters

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(PlayerInfo[playerid][pDialogOpen] != dialogid)
	{
		new string[128];
		format(string, sizeof(string), "AdmWarn: %s(ID: %i) is possibly dialog hacking.", PlayerInfo[playerid][pName], playerid);
		SendAdminMessage(COLOR_YELLOW, string);
		return 1;
	}

	PlayerInfo[playerid][pDialogOpen] = 0;

	new string[MAX_DOUBLE_MSG_LENGTH], sendername[MAX_PLAYER_NAME], id;
	if(dialogid == 1 || dialogid == 2 || dialogid == 460 || dialogid == 461 ||
		dialogid == DIALOG_REGISTER_AGE || dialogid == DIALOG_REGISTER_GENDER || dialogid == DIALOG_REGISTER_FORUMNAME) {
	} else
	if (GetPVarInt(playerid, "PlayerLogged") != 1) {
    SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this!"); return 1; }
    CallRemoteFunction("RemoveIdle", "i", playerid);
    switch(dialogid)
	{
        case 1: // Login dialog
		{
		    if (GetPVarInt(playerid, "PlayerLogged") != 0) return true;
	        if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid,1,DIALOG_STYLE_PASSWORD,"Server Account","An existing account is using your playername, please login to the account!","Login", "Other");
	        if(strlen(inputtext) >= 40)
	        {
			    SendClientMessage(playerid, COLOR_WHITE, "Password is too long (40 Chars max).");
				ShowPlayerDialogEx(playerid,1,DIALOG_STYLE_PASSWORD,"Server Account","An existing account is using your playername, please login to the account!","Login", "Other");
				return true;
			}
			new query[500], input[129], hashpass[129];
			mysql_escape_string(inputtext, input);

			new inputtext2[129];
			format(inputtext2, sizeof(inputtext2), "%s3ca827d65b48291545b", inputtext);
			mysql_escape_string(inputtext2, input);
			WP_Hash(hashpass, sizeof(hashpass), input);
			
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name = '%e' AND Pass = '%e'", PlayerInfo[playerid][pUsername], hashpass);
     		mysql_pquery(handlesql, query, "LogUserIn", "i", playerid);
		}
		case 2: // Register dialog
		{
		    switch(response)
	        {
	            case 0: ShowPlayerDialogEx(playerid,2,DIALOG_STYLE_PASSWORD,"Server Account","There are no existing account using your playername, please create a new account!","Next", "");
	            case 1: // Registering password
	            {
	                if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid,2,DIALOG_STYLE_PASSWORD,"Server Account","There are no existing account using your playername, please create a new account!","Next", "");
	                if(strlen(inputtext) >= 20)
	                {
					    SendClientMessage(playerid, COLOR_WHITE, "Password is too long (20 Chars max).");
					    ShowPlayerDialogEx(playerid,2,DIALOG_STYLE_PASSWORD,"Server Account","There are no existing account using your playername, please create a new account!","Next", "");
					    return 1;
					}

					// Uncomment to re-enable the registration questions
					SendClientMessage(playerid, COLOR_WHITE, "Welcome to the PR-RP community server!");
					SendClientMessage(playerid, COLOR_WHITE, "You will now be asked a series of question to determine if you are qualified to join the roleplay environment.");
					SendClientMessage(playerid, COLOR_WHITE, " ");

					format(string, sizeof(string), "Question 1: %s", RegistrationQuestions[0]);
					SendClientMessage(playerid, COLOR_WHITE, string);

					SetPVarInt(playerid, "Registering", 1);
					SetPVarInt(playerid, "RegistrationQuestion", 1);

					format(PlayerInfo[playerid][pPass], 128, inputtext);
	            }
	        }
		}
		case DIALOG_REGISTER_AGE:
		{
			switch(response)
			{
				case 0: ShowPlayerDialogEx(playerid, DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation", "Input your character's age below", "Next", "");
				case 1:
				{
					if(strlen(inputtext) == 0)
					{
						ShowPlayerDialogEx(playerid, DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation", "Input your character's age below", "Next", "");
						return 1;
					}
					if(!IsNumeric(inputtext) || strval(inputtext) > 99 || strval(inputtext) < 1)
					{
						SendClientMessage(playerid, COLOR_ERROR, "The caracter's age can't be under 1 or over 99.");
						ShowPlayerDialogEx(playerid, DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation", "Input your character's age below", "Next", "");
						return 1;
					}

					ShowPlayerDialogEx(playerid, DIALOG_REGISTER_GENDER, DIALOG_STYLE_INPUT, "Character Creation", "Is your character Male or Female?", "Next", "");
					SetPVarInt(playerid, "Age", strval(inputtext));	
				}
			}
		}
		case DIALOG_REGISTER_GENDER:
		{
			switch(response)
			{
				case 0: ShowPlayerDialogEx(playerid, DIALOG_REGISTER_GENDER, DIALOG_STYLE_INPUT, "Character Creation", "Is your character Male or Female?", "Next", "");
				case 1:
				{
					if(!strcmp(inputtext, "Male", true))
					{
						SetPVarInt(playerid, "Sex", 1);
					}
					else if(!strcmp(inputtext, "Female", true))
					{
						SetPVarInt(playerid, "Sex", 2);
					}
					else
					{
						ShowPlayerDialogEx(playerid, DIALOG_REGISTER_GENDER, DIALOG_STYLE_INPUT, "Character Creation", "Is your character Male or Female?", "Next", "");
						SendClientMessage(playerid, COLOR_ERROR, "Input your character's gender corrctly. (type 'Male' or 'Female')");
						return 1;
					}

					ShowPlayerDialogEx(playerid, DIALOG_REGISTER_FORUMNAME, DIALOG_STYLE_INPUT, "Forun Name", "Enter your current forum username.", "Next", "");
				}
			}
		}
		case DIALOG_REGISTER_FORUMNAME:
		{
			switch(response)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, DIALOG_REGISTER_FORUMNAME, DIALOG_STYLE_INPUT, "Forun Name", "Enter your current forum username.", "Next", "");
					return 1;
				}
				case 1:
				{
					if(strlen(inputtext) == 0 || strlen(inputtext) >= 64)
					{
						ShowPlayerDialogEx(playerid, DIALOG_REGISTER_FORUMNAME, DIALOG_STYLE_INPUT, "Forun Name", "Enter your current forum username.", "Next", "");
						return 1;
					}

					SetPVarString(playerid, "ForumName", inputtext);
					CallRemoteFunction("OnPlayerRegister","is",playerid, PlayerInfo[playerid][pPass]);
				}
			}
		}
		case DIALOG_REGISTER_REVIEW:
		{
			switch(response)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, DIALOG_REGISTER_REVIEW_DENY, DIALOG_STYLE_INPUT, "Registration Ticket", "Enter the reason of denial", "Deny", "");	
				}
				case 1:
				{
					SendClientMessage(GetPVarInt(playerid, "Reviewing"), COLOR_WHITE, "Your application has been reviewed and has been accepted.");
					ShowPlayerDialogEx(GetPVarInt(playerid, "Reviewing"), DIALOG_REGISTER_AGE, DIALOG_STYLE_INPUT, "Character Creation", "Input your character's age below", "Next", "");

					format(string, sizeof(string), "REGISTRATON: %s has accepted %s's registration ticket.", 
						GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), 
						GiveNameSpaceEx(PlayerInfo[GetPVarInt(playerid, "Reviewing")][pUsername]));

					MiscLog(string); // Log the registration thing.
					
					if(GetHelperCount() > 0)
					{
						SendHelperMessage(COLOR_LIGHTBLUE, string);
					}
					else
					{
						SendAdminMessage(COLOR_LIGHTBLUE, string);
					}

					DeletePVar(GetPVarInt(playerid, "Reviewing"), "Submitted");

					SetPVarInt(playerid, "Reviewing", INVALID_MAXPL);
				}
			}
		}
		case DIALOG_REGISTER_REVIEW_DENY:
		{
			format(string, sizeof(string), "REGISTRATON: %s has denied %s's registration ticket. (Reason: %s)", 
				GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), 
				GiveNameSpaceEx(PlayerInfo[GetPVarInt(playerid, "Reviewing")][pUsername]),
				inputtext);
			
			if(GetHelperCount() > 0)
			{
				SendHelperMessage(COLOR_LIGHTBLUE, string);
			}
			else
			{
				SendAdminMessage(COLOR_LIGHTBLUE, string);
			}

			format(string, sizeof(string), "Your registration ticket was reviewed by %s and was denied. (Reason: %s)", 
				GiveNameSpaceEx(PlayerInfo[playerid][pUsername]),
				inputtext);
			SendClientMessageEx(GetPVarInt(playerid, "Reviewing"), COLOR_WHITE, string);

			KickPlayer(GetPVarInt(playerid, "Reviewing"), "");
			DeletePVar(GetPVarInt(playerid, "Reviewing"), "Submitted");

			SetPVarInt(playerid, "Reviewing", INVALID_MAXPL);
			// deny
		}
		case 3: // Rental Agreement Dialog
		{
		    switch(response)
		    {
		        case 1:
		        {
		            if(GetPVarInt(playerid, "RentKey") != 0) return SendClientMessage(playerid, COLOR_ERROR, "ERROR: You already rent a vehicle, (/unrent)!");

				    if(GetPlayerScore(playerid) >= 8)
				    {
				    	if(GetPlayerMoneyEx(playerid) < 50) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
					    GivePlayerMoneyEx(playerid, -50);
						SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your $50 purchase!");
					}
					
					SendClientMessage(playerid, COLOR_WHITE, "Your rental vehicle has been spawned.");
					SendClientMessage(playerid, COLOR_WHITE, "The vehicle will despawn only if you are logged out longer than 10 minutes.");
					SendClientMessage(playerid, COLOR_WHITE, "To return your vehicle to the rental services, type /unrent.");
					new found = 0, foundid = 0;
					for(new r = 0; r < sizeof(RentalSpot); r++) {
					    if(IsPlayerInRangeOfPoint(playerid, 20.0, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2])) {
						    if(found == 0) {
							    found++;
								foundid=r;
						    }
					    }
					}
					
					new veh;
					new rancol = random(200) + 1;
					new vehiclemodel = random(sizeof(gRentalIDs));
					veh = CreateVehicle(gRentalIDs[vehiclemodel][0], RentalSpot[foundid][3], RentalSpot[foundid][4], RentalSpot[foundid][5], RentalSpot[foundid][6], rancol,rancol, -1);
					Iter_Add(VehicleIterator, veh);
					VehicleInfo[veh][vFuel] = 100, VehicleInfo[veh][vEngine]=0;
	    			VehicleInfo[veh][vWindows] = 0, VehicleInfo[veh][vID]=0;
	    			VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vCreated]=1;
					VehicleInfo[veh][vType] = VEHICLE_RENTAL, VehicleInfo[veh][vJob]=0;
					VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vLock] = 0;
					VehicleInfo[veh][vEngineStats][1] = 1;
					VehicleInfo[veh][vEngineStats][2] = 1;
					VehicleInfo[veh][vBattery][1] = 1;
					VehicleInfo[veh][vBattery][2] = 1;
					SetVehicleNumberPlate(veh, PrintVehiclePlate(GenerateRandomVehiclePlate()));
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(veh, engine, lights, alarm, 0, bonnet, boot, objective);
	    			SetVehicleToRespawn(veh);
					SetPVarInt(playerid, "RentKey", veh);
		        }
		    }
		}
		case 4: // Job Options Dialog
		{
		    if(!response) return true;
		    new found = 0, foundid = 0;
		    for(new jb = 0; jb < MAX_JOBS; jb++)
	        {
	            if(JobInfo[jb][jID] >= 1 && found == 0)
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 2.0, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
					{
					    found++;
					    foundid=jb;
	                }
	            }
	        }
	        if(found == 0) return true;
	        if(GetPVarInt(playerid, "Job") != foundid+1) return true;
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are already on a route!");
	                if(GetPVarInt(playerid, "JobReduce") >= 1 && GetPVarInt(playerid, "MonthDon") == 0)
	                {
	                    format(string, sizeof(string), "You must wait (%d) seconds before starting another route!", GetPVarInt(playerid, "JobReduce"));
					    SCM(playerid, COLOR_ERROR, string);
					    return true;
					}
					new allow = 0;
					new key = IsPlayerVehicleSpawned(playerid), veh;
					if(GetVehicleModel(key) == JobInfo[foundid][jVehicleID]) {
						new Float:Pos[3];
						GetVehiclePos(key, Pos[0], Pos[1], Pos[2]);
						if(IsPlayerInRangeOfPoint(playerid, 25.0, Pos[0], Pos[1], Pos[2])) {
					    	allow++;
					    	veh = key;
					    	SetPVarInt(playerid, "InitJob", foundid); }
					}
					if(allow == 0) {
					veh = CreateVehicle(JobInfo[foundid][jVehicleID], JobInfo[foundid][jVX], JobInfo[foundid][jVY], JobInfo[foundid][jVZ], JobInfo[foundid][jVA], -1, -1, -1);

					Iter_Add(VehicleIterator, veh);
					VehicleInfo[veh][vFuel]=100, VehicleInfo[veh][vEngine]=1;
    				VehicleInfo[veh][vWindows]=0, VehicleInfo[veh][vID]=0;
    				VehicleInfo[veh][vLights]=0, VehicleInfo[veh][vCreated]=1;
					VehicleInfo[veh][vType] = VEHICLE_JOB, VehicleInfo[veh][vJob]=GetPVarInt(playerid, "Job");
					VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vLock] = 0;
					VehicleInfo[veh][vEngineStats][1] = 1;
					VehicleInfo[veh][vEngineStats][2] = 1;
					VehicleInfo[veh][vBattery][1] = 1;
					VehicleInfo[veh][vBattery][2] = 1;
	   				new engine, lights, alarm, doors, bonnet, boot, objective;
	   				ClearAnimationsEx(playerid);
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,0,bonnet,boot,objective);
					SetVehicleNumberPlate(veh, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    				SetVehicleToRespawn(veh); }
					SetPVarInt(playerid, "RouteVeh", veh);
					foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 1); }
					TogglePlayerControllableEx(playerid, false);
					SetTimerEx("ForceInVeh", 1000, false, "ifff", playerid, veh);
					TogglePlayerAllDynamicCPs(playerid, false);
	            }
	            case 1:
	            {
	                if(GetPVarInt(playerid, "OnRoute") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not on a route!");
	                DeletePVar(playerid, "OnRoute");
	                DeletePVar(playerid, "RouteOT");
	                if(GetPVarInt(playerid, "RouteVeh") >= 1) {
	                    if(VehicleInfo[GetPVarInt(playerid, "RouteVeh")][vType] == VEHICLE_JOB) {
					    DespawnVehicle(GetPVarInt(playerid, "RouteVeh")); }
					}
	                DeletePVar(playerid, "RouteVeh");
	                DeletePVar(playerid, "PizzaTime");
	                DeletePVar(playerid, "PizzaTimeEx");
	                SendClientMessage(playerid, COLOR_WHITE, "Route ended!");
	                DisablePlayerCheckpoint(playerid);
	                TogglePlayerAllDynamicCPs(playerid, true);
	            }
	            case 2:
	            {
	                if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
	                SetPVarInt(playerid, "Job", 0);
	                SendClientMessage(playerid, COLOR_WHITE, "You are now unemployed!");
	                GiveAchievement(playerid, 5);
	            }
	        }
		}
		case 5: // Accept Job Dialog
		{
		    if(!response) return true;
		    new found = 0, foundid = 0;
		    for(new jb = 0; jb < MAX_JOBS; jb++)
	        {
	            if(JobInfo[jb][jID] >= 1 && found == 0)
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 2.0, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
					{
					    found++;
					    foundid=jb;
	                }
	            }
	        }
	        if(found == 0) return true;
	        if(GetPVarInt(playerid, "Job") != 0) return true;
	        format(string, sizeof(string), "Congratulations you are now a %s!", JobInfo[foundid][jName]);
	        SetPVarInt(playerid, "Job", foundid+1);
	        SendClientMessage(playerid, COLOR_JOB, string);
	        if(GetPVarInt(playerid, "Job") != JOB_FARMER &&
	        	GetPVarInt(playerid, "Job") != JOB_PIZZA &&
	        	GetPVarInt(playerid, "Job") != JOB_MECHANIC &&
	        	GetPVarInt(playerid, "Job") != JOB_TRUCKER)
	        {
				SendClientMessage(playerid, COLOR_WHITE, "To navigate your job, press ~k~~GROUP_CONTROL_BWD~ at the job icon.");
			}
			GiveAchievement(playerid, 3);
		}
		case 6: // DMV LICENSE TEST
		{
		    if(!response) return true;
		    if(GetPVarInt(playerid, "ConnectTime") >= 8) GivePlayerMoneyEx(playerid, -150);
		    SetPVarInt(playerid, "TakeTest", 1);
		    new veh, rand = random(sizeof(gRentalIDs));
			veh = CreateVehicle(gRentalIDs[rand][0], DMVSpot[0][3], DMVSpot[0][4], DMVSpot[0][5], DMVSpot[0][6], 6, 6, -1);
			Iter_Add(VehicleIterator, veh);
			VehicleInfo[veh][vFuel]=100, VehicleInfo[veh][vEngine]=1;
    		VehicleInfo[veh][vWindows]=0, VehicleInfo[veh][vID]=0;
    		VehicleInfo[veh][vLights]=0, VehicleInfo[veh][vCreated]=1;
			VehicleInfo[veh][vType] = VEHICLE_DMV, VehicleInfo[veh][vJob]=0;
			VehicleInfo[veh][vEngineStats][1] = 1;
			VehicleInfo[veh][vEngineStats][2] = 1;
			VehicleInfo[veh][vBattery][1] = 1;
			VehicleInfo[veh][vBattery][2] = 1;
			SetVehicleNumberPlate(veh, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    		SetVehicleToRespawn(veh);
			SetPVarInt(playerid, "TestVeh", veh);
			foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 1); }
			TogglePlayerControllableEx(playerid, false);
			SetTimerEx("ForceInVeh", 1000, false, "ifff", playerid, veh);
			SetPlayerRaceCheckpoint(playerid, 0, DMVRoute[0][0], DMVRoute[0][1], DMVRoute[0][2], DMVRoute[1][0], DMVRoute[1][1], DMVRoute[1][2], 5.0);
			SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Los Santos Department Of Motor Vehicles");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Once you enter the checkpoint on your GPS the test will start,");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Keep your vehicle under 95 KPH and make sure to not go too quick or too slow.");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Also make sure your vehicle is not damaged and is in good shape,");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Judging by your status you are capable of earning a (Gold, Silver, Bronze) ribbon.");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
		}
		//==========//
		case 7: // STORE DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 1), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(StoreItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 8: // Burger DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 2), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(BurgerItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 9: // Pizza DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 3), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(PizzaItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 10: // Cluck DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 4), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(CluckItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 11:
	    {
	        switch(response)
	        {
	            case 1:
	            {
	                switch(listitem)
	                {
	                    case 0: SendBankDialog(playerid, 1);
	                    case 1: SendBankDialog(playerid, 2);
	                }
	            }
	        }
	    }
        case 12: // Bank Deposit dialog
	    {
			switch(response)
	        {
	            case 0:
	            {
	                format(string, sizeof(string), "Bank Account: %s", FormatMoney(GetPVarInt(playerid, "Bank")));
			        ShowPlayerDialogEx(playerid,11,DIALOG_STYLE_LIST,string,"{33FF66}Deposit\n{33FF66}Withdraw", "Continue", "Exit");
	            }
	            case 1:
	            {
	                if(!strlen(inputtext)) return SendBankDialog(playerid, 1);
	                if(strlen(inputtext) >= 7) return SendBankDialog(playerid, 1);
	                new amount = strval(inputtext);
	                if(amount <= 0) return SendBankDialog(playerid, 1);
	                if(amount >= 99999999) return SendBankDialog(playerid, 1);
	                if(GetPlayerMoneyEx(playerid) >= amount)
	                {
	                    PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
			            GivePlayerMoneyEx(playerid,-amount);
			            new current = GetPVarInt(playerid, "Bank");
			            SetPVarInt(playerid, "Bank", amount+GetPVarInt(playerid, "Bank"));
		                SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
		                format(string, sizeof(string), "Deposit: %s", FormatMoney(amount));
			            SendClientMessage(playerid, COLOR_GREEN, string);
                        format(string, sizeof(string), "Old Balance: %s", FormatMoney(current));
			            SendClientMessage(playerid, COLOR_GREEN, string);
			            format(string, sizeof(string), "New Balance: %s", FormatMoney(GetPVarInt(playerid, "Bank")));
			            SendClientMessage(playerid, COLOR_GREEN, string);
		                SetPVarInt(playerid, "OCC", 0);
	                }
	                else SendBankDialog(playerid, 1);
	            }
	        }
	    }
	    case 13: // BANK Withdraw dialog
	    {
	        switch(response)
	        {
	            case 0:
	            {
	                format(string, sizeof(string), "Bank Account: %s", FormatMoney(GetPVarInt(playerid, "Bank")));
			        ShowPlayerDialogEx(playerid,11,DIALOG_STYLE_LIST,string,"{33FF66}Deposit\n{33FF66}Withdraw", "Continue", "Exit");
	            }
	            case 1:
	            {
	                if(!strlen(inputtext)) return SendBankDialog(playerid, 2);
	                if(strlen(inputtext) >= 7) return SendBankDialog(playerid, 2);
	                new amount = strval(inputtext);
	                if(amount <= 0) return SendBankDialog(playerid, 2);
	                if(amount >= 99999999) return SendBankDialog(playerid, 2);
	                if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	                if(GetPVarInt(playerid, "Bank") >= amount)
	                {
	                    PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
				        GivePlayerMoneyEx(playerid,amount);
				        new current = GetPVarInt(playerid, "Bank");
				        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-amount);
				        SendClientMessage(playerid, COLOR_GREEN," ");
		                SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
				        format(string, sizeof(string), "Withdrawn: %s", FormatMoney(amount));
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "Old Balance: %s", FormatMoney(current));
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "New Balance: %s", FormatMoney(GetPVarInt(playerid, "Bank")));
				        SendClientMessage(playerid, COLOR_GREEN, string);
		                SetPVarInt(playerid, "OCC", 0);
	                }
	                else SendBankDialog(playerid, 2);
	            }
	        }
	    }
	    case 14: // ATM Withdraw dialog
	    {
	        switch(response)
	        {
	            case 1:
	            {
	                if(!strlen(inputtext)) return SendBankDialog(playerid, 3);
	                if(strlen(inputtext) >= 7) return SendBankDialog(playerid, 3);
	                new amount = strval(inputtext);
	                if(amount <= 0) return SendBankDialog(playerid, 3);
	                if(amount >= 99999999) return SendBankDialog(playerid, 3);
	                if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	                if(GetPVarInt(playerid, "Bank") >= amount)
	                {
	                    PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
				        GivePlayerMoneyEx(playerid,amount);
				        new current = GetPVarInt(playerid, "Bank");
				        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-amount);
				        SendClientMessage(playerid, COLOR_GREEN," ");
		                SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
				        format(string, sizeof(string), "Withdrawn: %s", FormatMoney(amount));
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "Old Balance: %s", FormatMoney(current));
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "New Balance: %s", FormatMoney(GetPVarInt(playerid, "Bank")));
				        SendClientMessage(playerid, COLOR_GREEN, string);
		                SetPVarInt(playerid, "OCC", 0);
	                }
	                else SendBankDialog(playerid, 3);
	            }
	        }
	    }
	    case 15: // Gas Liters
	    {
	        if(!response) return true;
	        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	        if(!strlen(inputtext)) return SendClientMessage(playerid, COLOR_ERROR, "Invalid liter amount!");
	        if(strlen(inputtext) >= 7) return SendClientMessage(playerid, COLOR_ERROR, "Invalid liter amount!");
	        new amount = strval(inputtext), amountcheck, price;
	        if(amount <= 0) return SendClientMessage(playerid, COLOR_ERROR, "Invalid liter amount!");
	        if(amount >= 101) return SendClientMessage(playerid, COLOR_ERROR, "Invalid liter amount!");
	        amountcheck = amount + VehicleInfo[GetPlayerVehicleID(playerid)][vFuel];
	        if(amountcheck >= 101) return SendClientMessage(playerid, COLOR_ERROR, "You are not able to pump this amount of liters!");
			price = amount*GasPrice;
		    if(GetPVarInt(playerid, "DonateRank") >= 2) price = 0;
		    if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_LSG) price = 0;
	        if(GetPlayerMoneyEx(playerid) >= price)
	        {
	            PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		        SetPVarInt(playerid, "RefillAM", amount);
		        SetPVarInt(playerid, "RefillPR", price);
		        new amount2 = amount;
		        if(amount2 >= 50) { amount2 = amount/2; }
		        ProgressBar(playerid, "Refueling Vehicle...", amount2+5, 3);
		        TogglePlayerControllable(playerid, false);
	        }
	        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	    }
	    //==========//
	    case 17:
	    {
	        if(!response) return true;
	        new str[5000], tit[128];
	        format(tit, 128, "%s", HelpMenu[listitem][0]);
	        switch(listitem)
	        {
	            case 0:
	            {
	                for(new i = 0; i < sizeof(GenHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", GenHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, GenHelp[i][0]); }
	                }
	            }
	            case 1:
	            {
	                for(new i = 0; i < sizeof(ConHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", ConHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, ConHelp[i][0]); }
	                }
	            }
	            case 2:
	            {
	                for(new i = 0; i < sizeof(AnimHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", AnimHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, AnimHelp[i][0]); }
	                }
	            }
	            case 3:
	            {
	                for(new i = 0; i < sizeof(VehHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", VehHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, VehHelp[i][0]); }
	                }
	            }
	            case 4:
	            {
	                for(new i = 0; i < sizeof(HouseHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", HouseHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, HouseHelp[i][0]); }
	                }
	            }
	            case 5:
	            {
	                for(new i = 0; i < sizeof(BizHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", BizHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, BizHelp[i][0]); }
					}
	            }
	            case 6:
	            {
	                if(GetPVarInt(playerid, "Member") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not in a faction!");
	                for(new i = 0; i < sizeof(FactHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", FactHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, FactHelp[i][0]); }
	                }
	            }
	            case 7:
	            {
	                if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return SendClientMessage(playerid, COLOR_ERROR, "You are not a member of LSPD!");
	                for(new i = 0; i < sizeof(LSPDHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", LSPDHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, LSPDHelp[i][0]); }
	                }
	            }
	            case 8:
	            {
	                if(GetPVarInt(playerid, "Member") != FACTION_LSFD) return SendClientMessage(playerid, COLOR_ERROR, "You are not a member of LSFD!");
	                for(new i = 0; i < sizeof(LSFDHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", LSFDHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, LSFDHelp[i][0]); }
	                }
	            }
	            case 9:
	            {
	                if(GetPVarInt(playerid, "Member") != FACTION_LSG) return SendClientMessage(playerid, COLOR_ERROR, "You are not a member of LSG!");
	                for(new i = 0; i < sizeof(LSGHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", LSGHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, LSGHelp[i][0]); }
	                }
	            }
	            case 10:
	            {
	                if(GetPVarInt(playerid, "Member") != FACTION_FOX_ENTERPRISE) return SendClientMessage(playerid, COLOR_ERROR, "You are not a member of SAN Network!");
	                for(new i = 0; i < sizeof(NewsHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", NewsHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, NewsHelp[i][0]); }
	                }
	            }
	            case 11:
	            {
	                if(GetPVarInt(playerid, "Member") != FACTION_RLS) return SendClientMessage(playerid, COLOR_ERROR, "You are not a member of Radio Los Santos!");
	                for(new i = 0; i < sizeof(RLSHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", RLSHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, RLSHelp[i][0]); }
	                }
	            }
	            case 12:
	            {
	                if(GetPVarInt(playerid, "Helper") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not a helper!");
	                for(new i = 0; i < sizeof(HelperHelp); i++)
	                {
	                    if(i == 0) { format(str, 5000, "%s", HelperHelp[i][0]); }
	                    else { format(str, 5000, "%s\n%s", str, HelperHelp[i][0]); }
	                }
	            }
	            case 13: {
	                if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You are not an administrator!");
	                new count;
	                for(new i = 1; i <= 10; i++) {
	                	count = 0;
	                	if(i == 1) {
	                	    format(str, sizeof(str), "{FFFFFF}Commands for {CD5C5C}Level %i {FFFFFF}Administrators:{a9c4e4}\n", i);
	                	} else {
	                    	format(str, sizeof(str), "%s\n\n{FFFFFF}Commands for {CD5C5C}Level %i {FFFFFF}Administrators:{a9c4e4}\n", str, i);
						}
						
		                for(new j = 0; j < sizeof(AdminCmds); j++) {
							if(AdminCmds[j][acRank] == i) {
							    count++;
							    if(count % 10 == 0) {
							        format(str, sizeof(str), "%s\n/%s", str, AdminCmds[j][acCmd]);
							    } else {
							        if(count % 10 != 0 && count != 1) {
										format(str, sizeof(str), "%s, /%s", str, AdminCmds[j][acCmd]);
									} else {
									    format(str, sizeof(str), "%s/%s", str, AdminCmds[j][acCmd]);
									}
								}
							}
		                }
		                
		                if(count == 0) {
		                    format(str, sizeof(str), "%sNone.", str);
		                }
					}
	            }
			}
			
			ShowPlayerDialogEx(playerid, 18, DIALOG_STYLE_MSGBOX, tit, str, "Go Back", "");
	    }
	    case 18:
	    {
	        if(!response) return true;
	        cmd_help(playerid, "");
	    }
	    case 19: // Fightstyle
	    {
	        switch(response)
	        {
	            case 1: // Selecting
	            {
					switch(listitem)
					{
					    case 0: LearnFightstyle(playerid,50,FIGHT_STYLE_NORMAL,"Normal");
					    case 1: LearnFightstyle(playerid,500,FIGHT_STYLE_BOXING,"Boxing");
					    case 2: LearnFightstyle(playerid,3000,FIGHT_STYLE_KUNGFU,"KungFu");
					    case 3:
						{
							if(GetPVarInt(playerid, "ConnectTime") >= 250)
							{
								LearnFightstyle(playerid,6000,FIGHT_STYLE_KNEEHEAD,"KneeHead");
							}
							else SendClientMessage(playerid, COLOR_ERROR, "You need 250+ TLS to purchase this fight style!");
						}
					    case 4: LearnFightstyle(playerid,8000,FIGHT_STYLE_GRABKICK,"GrabKick");
					    case 5:
						{
							if(GetPVarInt(playerid, "ConnectTime") >= 250)
							{
	 							LearnFightstyle(playerid,10000,FIGHT_STYLE_ELBOW,"Elbow Attack");
							}
							else SendClientMessage(playerid, COLOR_ERROR, "You need 250+ TLS to purchase this fight style!");
						}
					}
	            }
	        }
	    }
	    //==========//
        case 20: // AMMU DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 5), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(AmmuItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 21:
	    {
			id = 18645;
	        switch(listitem)
	        {
	            case 0: id = 18645;
	            case 1: id = 18976;
	            case 2: id = 18977;
	            case 3: id = 18978;
	            case 4: id = 18979;
	        }
	        switch(GetPlayerSkin(playerid))
	        {
	            #define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM, id, 2, (%0), (%1), (%2), (%3), (%4), (%5));
	            case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
	            case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
	            case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
	            case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
	            case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
	            case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
	            case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
    	        case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
	            case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
	            case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
	            case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	        }
	    }
	    case 22: // AMMU DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 6), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(BarItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Purchase", "Cancel");
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 25: // MOD SHOP DIALOG
		{
		    switch(GetPVarInt(playerid, "VEHSEC"))
		    {
		        case 0:
		        {
		            if(!response) // EXIT MOD SHOP
		            {
		                id = GetPVarInt(playerid, "VEHMODID");
						new idcar = GetPlayerVehicleID(playerid);
		                DeletePVar(playerid, "VEHMOD"), DeletePVar(playerid, "VEHMODKEY"),
		                DeletePVar(playerid, "VEHSEC"), DeletePVar(playerid, "BOOGA");
		                SetVehiclePosEx(idcar, ModShop[id][0], ModShop[id][1], ModShop[id][2]);
		                foreach(new i : Player)
		                {
		                    if(GetPlayerVehicleID(i) == idcar)
		                    {
								new seatid = GetPlayerVehicleSeat(i);
		                        TogglePlayerControllableEx(i, true);
		                        SetVehicleVirtualWorld(idcar, 0);
		                        SetPlayerVirtualWorld(i, 0);
		                        PutPlayerInVehicleEx(i, idcar, seatid);
		                        SetCameraBehindPlayer(i);
		                        SetPVarInt(i, "ModShopReduce", 2000);
		                    }
		                }
		                return true;
		            }
		            SetPVarInt(playerid, "VEHSEC", listitem+1);
		            CallRemoteFunction("VehMod", "i", playerid);
		        }
		        case 1: // SELECT COLOR 1
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            if(!strlen(inputtext)) return CallRemoteFunction("VehMod", "i", playerid);
	                if(strlen(inputtext) >= 7) return CallRemoteFunction("VehMod", "i", playerid);
	                new amount = strval(inputtext);
	                if(amount < 0) return CallRemoteFunction("VehMod", "i", playerid);
	                if(amount > 300) return CallRemoteFunction("VehMod", "i", playerid);
	                new cost = 500;
	                if(GetPVarInt(playerid, "DonateRank") >= 2) cost = 0;
	                if(GetPlayerMoneyEx(playerid) >= cost)
	                {
	                    new key = GetPVarInt(playerid, "VEHMODKEY"),
	                        query[65];
	                        
	                    GivePlayerMoneyEx(playerid, -cost);
	                    VehicleInfo[key][vColorOne]=amount;
	                    ChangeVehicleColor(GetPlayerVehicleID(playerid), VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    format(string, 128, "ColorID %d purchased!", amount);
	                    SCM(playerid, COLOR_WHITE, string);
						mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `ColorOne` = %i WHERE `ID` = %i;", VehicleInfo[key][vColorOne], VehicleInfo[key][vID]);
						mysql_pquery(handlesql, query);
	                }
	                else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"), CallRemoteFunction("VehMod", "i", playerid);
				}
		        case 2: // SELECT COLOR 2
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            if(!strlen(inputtext)) return CallRemoteFunction("VehMod", "i", playerid);
	                if(strlen(inputtext) >= 7) return CallRemoteFunction("VehMod", "i", playerid);
	                new amount = strval(inputtext);
	                if(amount < 0) return CallRemoteFunction("VehMod", "i", playerid);
	                if(amount > 300) return CallRemoteFunction("VehMod", "i", playerid);
	                new cost = 500;
	                if(GetPVarInt(playerid, "DonateRank") >= 2) cost = 0;
	                if(GetPlayerMoneyEx(playerid) >= cost)
	                {
	                    new key = GetPVarInt(playerid, "VEHMODKEY"),
							query[65];
							
	                    GivePlayerMoneyEx(playerid, -cost);
	                    VehicleInfo[key][vColorTwo]=amount;
	                    ChangeVehicleColor(GetPlayerVehicleID(playerid), VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    format(string, 128, "ColorID %d purchased!", amount);
	                    SCM(playerid, COLOR_WHITE, string);
	                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `ColorTwo` = %i WHERE `ID` = %i;", VehicleInfo[key][vColorTwo], VehicleInfo[key][vID]);
						mysql_pquery(handlesql, query);
	                }
	                else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"), CallRemoteFunction("VehMod", "i", playerid);
		        }
		        case 3: // SELECT WHEELS
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            new key = GetPVarInt(playerid, "VEHMODKEY");
		            new used = -1, price = 0;
		            for(new i = 0; i < 11; i++)
                    {
						if(VehicleInfo[key][vMod][i] >= 1073 && VehicleInfo[key][vMod][i] <= 1085)
						{
						    used = i;
						}
                    }
		            if(GetPVarInt(playerid, "DonateRank") == 0) price = Components[listitem][cPrice];
	                if(GetPlayerMoneyEx(playerid) >= price)
	                {
	                    new query[300];
	                    key = GetPlayerVehicleID(playerid);
	                    GivePlayerMoneyEx(playerid, -price);
	                    AddVehicleComponent(key, Components[listitem][cID]);
	                    format(string, 128, "%s wheels purchased for %s!", Components[listitem][cName], FormatMoney(price));
	                    SCM(playerid, COLOR_WHITE, string);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    AddVehMod(key, Components[listitem][cID], used);
	                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																						     `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
                                     VehicleInfo[key][vMod][0], VehicleInfo[key][vMod][1], VehicleInfo[key][vMod][2], VehicleInfo[key][vMod][3], VehicleInfo[key][vMod][4], VehicleInfo[key][vMod][5],
                                     VehicleInfo[key][vMod][6], VehicleInfo[key][vMod][7], VehicleInfo[key][vMod][8], VehicleInfo[key][vMod][9], VehicleInfo[key][vMod][10], VehicleInfo[key][vID]);
						mysql_pquery(handlesql, query);
						SaveVehicleData(key, 0);
	                }
	                else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"), CallRemoteFunction("VehMod", "i", playerid);
		        }
		        case 4: // BODY MODS
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            new key = GetPVarInt(playerid, "VEHMODKEY");
		            new price = 0;
		            if(GetPVarInt(playerid, "DonateRank") == 0) price = 1000;
	                if(GetPlayerMoneyEx(playerid) >= price)
	                {
	                    new comp[20], compname[20][128];
		                comp[0]=1087, compname[0]="Hydraulics";
		                switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		                {
		                    case 534: // REMMINGTON
		                    {
		                        comp[1]=1100, compname[1]="Bullbar Chrome Grill";
		                        comp[2]=1101, compname[2]="Sideskirt Left `Chrome Flames`";
		                        comp[3]=1106, compname[3]="Sideskirt Right `Chrome Arches`";
		                        comp[4]=1122, compname[4]="Sideskirt Right `Chrome Flames`";
		                        comp[5]=1123, compname[5]="Bullbars Bullbar Chrome Bars";
		                        comp[6]=1124, compname[6]="Sideskirt Left `Chrome Arches`";
		                        comp[7]=1125, compname[7]="Bullbars Bullbar Chrome Lights";
		                        comp[8]=1126, compname[8]="Exhaust Chrome Exhaust";
		                        comp[9]=1127, compname[9]="Exhaust Slamin Exhaust";
		                        comp[10]=1178, compname[10]="Rear Bumper Slamin";
		                        comp[11]=1179, compname[11]="Front Bumper Chrome";
		                        comp[12]=1180, compname[12]="Rear Bumper Chrome";
		                        comp[13]=1185, compname[13]="Front Bumper Slamin";
		                    }
		                    case 535: // SLAMVAN
		                    {
		                        comp[1]=1109, compname[1]="Rear Bullbars Chrome";
		                        comp[2]=1110, compname[2]="Rear Bullbars Slamin";
		                        comp[3]=1111, compname[3]="Front Sign?Little Sign?";
		                        comp[4]=1112, compname[4]="Front Sign?Little Sign?";
		                        comp[5]=1113, compname[5]="Exhaust Chrome";
		                        comp[6]=1114, compname[6]="Exhaust Slamin";
		                        comp[7]=1115, compname[7]="Front Bullbars Chrome";
		                        comp[8]=1116, compname[8]="Front Bullbars Slamin";
		                        comp[9]=1117, compname[9]="Front Bumper Chrome";
		                        comp[10]=1118, compname[10]="Sideskirt Right `Chrome Trim`";
		                        comp[11]=1119, compname[11]="Sideskirt Right `Wheelcovers`";
		                        comp[12]=1120, compname[12]="Sideskirt Left `Chrome Trim`";
		                        comp[13]=1121, compname[13]="Sideskirt Left `Wheelcovers`";
						    }
		                    case 536: // BLADE
		                    {
		                        comp[1]=1103, compname[1]="Roof Covertible";
		                        comp[2]=1104, compname[2]="Exhaust Chrome";
		                        comp[3]=1105, compname[3]="Exhaust Slamin";
		                        comp[4]=1107, compname[4]="Sideskirt Left `Chrome Strip`";
		                        comp[5]=1108, compname[5]="Sideskirt Right `Chrome Strip`";
		                        comp[6]=1128, compname[6]="RoofVinyl Hardtop";
		                        comp[7]=1181, compname[7]="Front Bumper Slamin";
		                        comp[8]=1182, compname[8]="Front Bumper Chrome";
		                        comp[9]=1183, compname[9]="Rear Bumper Slamin";
		                        comp[10]=1184, compname[10]="Rear Bumper Chrome";
		                    }
		                    case 567: // SAVANNA
		                    {
                                comp[1]=1102, compname[1]="Sideskirt Left `Chrome Strip`";
		                        comp[2]=1129, compname[2]="Exhaust Chrome";
		                        comp[3]=1130, compname[3]="Roof Hardtop";
		                        comp[4]=1131, compname[4]="Roof Softtop";
		                        comp[5]=1132, compname[5]="Exhaust Slamin";
		                        comp[6]=1133, compname[6]="Sideskirt Right `Chrome Strip`";
		                        comp[7]=1186, compname[7]="Rear Bumper Slamin";
		                        comp[8]=1187, compname[8]="Rear Bumper Chrome";
		                        comp[9]=1188, compname[9]="Front Bumper Slamin";
		                        comp[10]=1189, compname[10]="Front Bumper Chrome";
		                    }
		                    case 558: // URANUS
		                    {
		                        comp[1]=1088, compname[1]="Roof Alien";
		                        comp[2]=1089, compname[2]="Exhaust X-Flow";
		                        comp[3]=1090, compname[3]="Sideskirt Right Alien";
		                        comp[4]=1091, compname[4]="Roof X-Flow";
		                        comp[5]=1092, compname[5]="Exhaust Alien";
		                        comp[6]=1093, compname[6]="Sideskirt Left X-Flow";
		                        comp[7]=1094, compname[7]="Sideskirt Left Alien";
		                        comp[8]=1095, compname[8]="Sideskirt Right X-Flow";
		                        comp[9]=1163, compname[9]="Spoiler X-Flow";
		                        comp[10]=1164, compname[10]="Spoiler Alien";
		                        comp[11]=1165, compname[11]="Front Bumper X-Flow";
		                        comp[12]=1166, compname[12]="Front Bumper Alien";
		                        comp[13]=1167, compname[13]="Rear Bumper X-Flow";
		                        comp[14]=1168, compname[14]="Rear Bumper Alien";
		                    }
		                    case 559: // JESTER
		                    {
		                        comp[1]=1065, compname[1]="Exhaust Alien";
		                        comp[2]=1066, compname[2]="Exhaust X-Flow";
		                        comp[3]=1067, compname[3]="Roof Alien";
		                        comp[4]=1068, compname[4]="Roof X-Flow";
		                        comp[5]=1069, compname[5]="Right Alien Sideskirt";
		                        comp[6]=1070, compname[6]="Right X-Flow Sideskirt";
		                        comp[7]=1071, compname[7]="Left Alien Sideskirt";
		                        comp[8]=1072, compname[8]="Left X-Flow Sideskirt";
		                        comp[9]=1158, compname[9]="Spoiler X-Flow";
		                        comp[10]=1159, compname[10]="Rear Bumper Alien";
		                        comp[11]=1160, compname[11]="Front Bumper Alien";
		                        comp[12]=1161, compname[12]="Rear Bumper X-Flow";
		                        comp[13]=1162, compname[13]="Spoiler Alien";
		                        comp[14]=1173, compname[14]="Front Bumper X-Flow";
		                    }
		                    case 560: // SULTAN
		                    {
		                	    comp[1]=1026, compname[1]="Sideskirt Right Alien";
		                        comp[2]=1027, compname[2]="Sideskirt Left Alien";
		                        comp[3]=1028, compname[3]="Exhaust Alien";
		                        comp[4]=1029, compname[4]="Exhaust X-Flow";
		                        comp[5]=1030, compname[5]="Sideskirt Left X-Flow";
		                        comp[6]=1031, compname[6]="Sideskirt Right X-Flow";
		                        comp[7]=1032, compname[7]="RoofAlien Roof Vent";
		                        comp[8]=1033, compname[8]="Roof X-Flow Roof Vent";
		                        comp[9]=1138, compname[9]="Spoiler Alien";
		                        comp[10]=1139, compname[10]="Spoiler X-Flow";
		                        comp[11]=1140, compname[11]="Rear Bumper X-Flow";
		                        comp[12]=1141, compname[12]="Rear Bumper Alien";
		                        comp[13]=1169, compname[13]="Front Bumper Alien";
		                        comp[14]=1170, compname[14]="Front Bumper X-Flow";
		                    }
		                    case 561: // stratum
		                    {
		                        comp[1]=1055, compname[1]="Roof Alien";
		                        comp[2]=1056, compname[2]="Sideskirt Right Alien";
		                        comp[3]=1057, compname[3]="Sideskirt Right X-Flow";
		                        comp[4]=1058, compname[4]="Spoiler Alien";
		                        comp[5]=1059, compname[5]="Exhaust X-Flow";
		                        comp[6]=1060, compname[6]="Spoiler X-Flow";
		                        comp[7]=1061, compname[7]="Roof X-Flow";
		                        comp[8]=1062, compname[8]="Sideskirt Left Alien";
		                        comp[9]=1063, compname[9]="Sideskirt Left X-Flow";
		                        comp[10]=1064, compname[10]="Exhaust Alien";
		                        comp[11]=1154, compname[11]="Rear Bumper Alien";
		                        comp[12]=1155, compname[12]="Front Bumper Alien";
		                        comp[13]=1156, compname[13]="Rear Bumper X-Flow";
		                        comp[14]=1157, compname[14]="Front Bumper X-Flow";
		                    }
		                    case 562: // elegy
		                    {
		                        comp[1]=1034, compname[1]="Exhaust Alien";
		                        comp[2]=1035, compname[2]="RoofX-Flow Roof Vent";
		                        comp[3]=1036, compname[3]="SideSkirt Right Alien";
		                        comp[4]=1037, compname[4]="Exhaust X-Flow";
		                        comp[5]=1038, compname[5]="RoofAlien Roof Vent";
		                        comp[6]=1039, compname[6]="SideSkirt Left X-Flow";
		                        comp[7]=1040, compname[7]="SideSkirt Left Alien";
		                        comp[8]=1041, compname[8]="SideSkirt Right X-Flow";
		                        comp[9]=1146, compname[9]="Spoiler X-Flow";
		                        comp[10]=1147, compname[10]="Spoiler Alien";
		                        comp[11]=1148, compname[11]="Rear Bumper X-Flow";
		                        comp[12]=1149, compname[12]="Rear Bumper Alien";
		                        comp[13]=1171, compname[13]="Front Bumper Alien";
		                        comp[14]=1172, compname[14]="Front Bumper X-Flow";
		                    }
		                    case 565: // flash
		                    {
		                        comp[1]=1045, compname[1]="Exhaust X-Flow";
		                        comp[2]=1046, compname[2]="Exhaust Alien";
		                        comp[3]=1047, compname[3]="SideSkirt Right Alien";
		                        comp[4]=1048, compname[4]="SideSkirt Right X-Flow";
		                        comp[5]=1049, compname[5]="Spoiler Alien";
		                        comp[6]=1050, compname[6]="Spoiler X-Flow";
		                        comp[7]=1051, compname[7]="SideSkirt Left Alien";
		                        comp[8]=1052, compname[8]="SideSkirt Left X-Flow";
		                        comp[9]=1053, compname[9]="Roof X-Flow";
		                        comp[10]=1054, compname[10]="Roof Alien";
		                        comp[11]=1150, compname[11]="Rear Bumper Alien";
		                        comp[12]=1151, compname[12]="Rear Bumper X-Flow";
		                        comp[13]=1152, compname[13]="Front Bumper X-Flow";
		                        comp[14]=1153, compname[14]="Front Bumper Alien";
		                    }
		                    case 575: // broadway
		                    {
		                        comp[1]=1042, compname[1]="SideSkirt Right Chrome";
		                        comp[2]=1043, compname[2]="Exhaust Slamin";
		                        comp[3]=1044, compname[3]="Exhaust Chrome";
		                        comp[4]=1099, compname[4]="Sideskirt Left Chrome";
		                        comp[5]=1174, compname[5]="Front Bumper Chrome";
		                        comp[6]=1175, compname[6]="Rear Bumper Slamin";
		                        comp[7]=1176, compname[7]="Front Bumper Chrome";
		                        comp[8]=1177, compname[8]="Rear Bumper Slamin";
		                    }
		                    case 576: // tornado
		                    {
		                        comp[1]=1134, compname[1]="SideSkirt Right `Chrome Strip`";
		                        comp[2]=1135, compname[2]="Exhaust Slamin";
		                        comp[3]=1136, compname[3]="Exhaust Chrome";
		                        comp[4]=1137, compname[4]="Sideskirt Left `Chrome Strip`";
		                        comp[5]=1190, compname[5]="Front Bumper Slamin";
		                        comp[6]=1191, compname[6]="Front Bumper Chrome";
		                        comp[7]=1192, compname[7]="Rear Bumper Chrome";
		                        comp[8]=1193, compname[8]="Rear Bumper Slamin";
		                    }
		                }
		                
		                new query[300];
	                    key = GetPVarInt(playerid, "VEHMODKEY");
	                    GivePlayerMoneyEx(playerid, -price);
	                    AddVehicleComponent(GetPlayerVehicleID(playerid), comp[listitem]);
	                    format(string, 128, "%s purchased for %s!", compname[listitem], FormatMoney(price));
	                    SCM(playerid, COLOR_WHITE, string);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    AddVehMod(key, comp[listitem]);
	                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																						     `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
                                     VehicleInfo[key][vMod][0], VehicleInfo[key][vMod][1], VehicleInfo[key][vMod][2], VehicleInfo[key][vMod][3], VehicleInfo[key][vMod][4], VehicleInfo[key][vMod][5],
                                     VehicleInfo[key][vMod][6], VehicleInfo[key][vMod][7], VehicleInfo[key][vMod][8], VehicleInfo[key][vMod][9], VehicleInfo[key][vMod][10], VehicleInfo[key][vID]);
						mysql_pquery(handlesql, query);
	                }
	                else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"), CallRemoteFunction("VehMod", "i", playerid);
		        }
                case 5: // REMOVE MODS/PAINTJOB
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            key = GetPVarInt(playerid, "VEHMODKEY");
		            new idcar = GetPlayerVehicleID(playerid);
		            if(IsPaintCar(idcar)) {
                        CallRemoteFunction("VehMod", "i", playerid);
		                if(!strlen(inputtext) || strlen(inputtext) >= 7) {
		                    return 1;
						}
						new amount = strval(inputtext);
						if(amount <= 0 || amount > GetMaxPaintJob(idcar)) {
		                    return 1;
						}
						
						new cost = 0;
		                if(GetPVarInt(playerid, "DonateRank") == 0) cost = 1000;
						
						if(GetPlayerMoneyEx(playerid) >= cost) {
						format(string, 128, "Paint job has been changed to number %d for %s!", amount, FormatMoney(cost));
						scm(playerid, -1, string);
						scm(playerid, COLOR_ERROR, "WARNING: Color '0' black doesn't work with paintjobs.");
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

						VehicleInfo[key][vPaintJob] = amount;
						
						SaveVehicleData(key, 0);
						
						ChangeVehiclePaintjob(idcar, VehicleInfo[key][vPaintJob]-1);
						ChangeVehicleColor(idcar, VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
						} else {
						SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!"); }
		                return 1; }
		                
	                new found,
	                    query[300];
	                    
	                for(new i = 0; i < 11; i++)
                    {
                    	if(VehicleInfo[key][vMod][i] != 0)
                    	{
                            RemoveVehicleComponent(GetPlayerVehicleID(playerid), VehicleInfo[key][vMod][i]);
                            found++;
                            VehicleInfo[key][vMod][i] = 0;
                        }
                    }
                    ChangeVehiclePaintjob(idcar, 3);
                    ChangeVehicleColor(GetPlayerVehicleID(playerid), VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
                    VehicleInfo[key][vPaintJob]=0;
	                format(string, 128, "%d components removed!", found);
	                SCM(playerid, COLOR_WHITE, string);
	                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																						 `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
                 			     VehicleInfo[key][vMod][0], VehicleInfo[key][vMod][1], VehicleInfo[key][vMod][2], VehicleInfo[key][vMod][3], VehicleInfo[key][vMod][4], VehicleInfo[key][vMod][5],
                                 VehicleInfo[key][vMod][6], VehicleInfo[key][vMod][7], VehicleInfo[key][vMod][8], VehicleInfo[key][vMod][9], VehicleInfo[key][vMod][10], VehicleInfo[key][vID]);
					mysql_pquery(handlesql, query);
                    SetPVarInt(playerid, "VEHSEC", 0);
		            CallRemoteFunction("VehMod", "i", playerid);
		        }
		        case 6: // REMOVE MODS
		        {
	                new found,
	                    query[300];

	                key = GetPVarInt(playerid, "VEHMODKEY");
	                for(new i = 0; i < 11; i++)
                    {
                        if(VehicleInfo[key][vMod][i] != 0)
                        {
                            RemoveVehicleComponent(GetPlayerVehicleID(playerid), VehicleInfo[key][vMod][i]);
                            found++;
                            VehicleInfo[key][vMod][i] = 0;
                        }
                    }
                    ChangeVehiclePaintjob(key, 3);
                    ChangeVehicleColor(GetPlayerVehicleID(playerid), VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
                    VehicleInfo[key][vPaintJob]=0;
	                format(string, 128, "%d components removed!", found);
	                SCM(playerid, COLOR_WHITE, string);
	                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																						 `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
                 			     VehicleInfo[key][vMod][0], VehicleInfo[key][vMod][1], VehicleInfo[key][vMod][2], VehicleInfo[key][vMod][3], VehicleInfo[key][vMod][4], VehicleInfo[key][vMod][5],
                                 VehicleInfo[key][vMod][6], VehicleInfo[key][vMod][7], VehicleInfo[key][vMod][8], VehicleInfo[key][vMod][9], VehicleInfo[key][vMod][10], VehicleInfo[key][vID]);
					mysql_pquery(handlesql, query);
                    SetPVarInt(playerid, "VEHSEC", 0);
		            CallRemoteFunction("VehMod", "i", playerid);
		        }
		    }
		}
		//==========//
		case 26:
		{
			format(string, sizeof(string),"%s", PlayerNameEx(playerid));
			switch(response)
	        {
		        case 0:
		        {
				    SetPlayerColor(playerid, COLOR_WHITE);
				    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], COLOR_WHITE, string);
				}
		        case 1:
		        {
				    SetPlayerColor(playerid, 0x8080FFAA);
				    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], 0x8080FFFF, string);
				}
		    }
		}
	    //==========//
	    case 28:
	    {
	        switch(response)
	        {
	            case 1: // Selecting
	            {
	                switch(listitem)
	                {
	                    case 0: // LSPD
	                    {
	                        ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
	                        SetPVarInt(playerid, "CarType", 1);
	                    }
	                    case 1: // SFPD
	                    {
							if(GetPVarInt(playerid, "Rank") >= 5)
							{
							    ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
							    SetPVarInt(playerid, "CarType", 2);
				    		}
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 2: // LVPD
	                    {
							if(GetPVarInt(playerid, "Rank") >= 7)
							{
							    ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
							    SetPVarInt(playerid, "CarType", 3);
				    		}
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 3: // S.W.A.T Truck
	                    {
							if(GetPVarInt(playerid, "Rank") >= 5 || IsPlayerInDivision(playerid, 1)) CreateLSPDVehicle(playerid,427,0,1);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 4: // Ranger
	                    {
							if(GetPVarInt(playerid, "Rank") >= 5 || IsPlayerInDivision(playerid, 3))
							{
							    ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
							    SetPVarInt(playerid, "CarType", 4);
				    		}
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 5: // Police Bike
	                    {
							if(GetPVarInt(playerid, "Rank") >= 2 || IsPlayerInDivision(playerid, 3)) CreateLSPDVehicle(playerid,523,0,1);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 6: // FBI Rancher
	                    {
							if(GetPVarInt(playerid, "Rank") >= 4) CreateLSPDVehicle(playerid,490,0,0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 7: // FBI Truck
	                    {
							if(GetPVarInt(playerid, "Rank") >= 4) CreateLSPDVehicle(playerid, 528, 0, 0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 8: // LSPD Chopper
	                    {
							if(GetPVarInt(playerid, "Rank") >= 3 || IsPlayerInDivision(playerid, 4)) CreateLSPDVehicle(playerid,497,0,0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 9: // WATER TANK
	                    {
							if(GetPVarInt(playerid, "Rank") >= 3) CreateLSPDVehicle(playerid,601,0,0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 10: // Towtruck
	                    {
							if(GetPVarInt(playerid, "Rank") >= 1) CreateLSPDVehicle(playerid,525,0,0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 11: // Premier
	                    {
							if(GetPVarInt(playerid, "Rank") >= 11) CreateLSPDVehicle(playerid,426,13,13);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 12: // FCR-900
	                    {
							if(GetPVarInt(playerid, "Rank") >= 10) CreateLSPDVehicle(playerid,521,0,0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 13: // Sanchez
	                    {
							if(GetPVarInt(playerid, "Rank") >= 10) CreateLSPDVehicle(playerid,468,0,0);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                    case 14: // Cheetah
	                    {
							if(GetPVarInt(playerid, "Rank") >= 10) CreateLSPDVehicle(playerid,415,1,1);
				    		else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
	                    }
	                }
	            }
	        }
	    }
	    //==========//
	    case 29:
	    {
	        switch(listitem)
	        {
	            case 0: // Black
	            {
					switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,0,1);
						case 2: CreateLSPDVehicle(playerid,597,0,1);
						case 3: CreateLSPDVehicle(playerid,598,0,1);
						case 4: CreateLSPDVehicle(playerid,599,0,1);
					}
	            }
	            case 1: // Blue
	            {
	                switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,79,1);
						case 2: CreateLSPDVehicle(playerid,597,79,1);
						case 3: CreateLSPDVehicle(playerid,598,79,1);
						case 4: CreateLSPDVehicle(playerid,599,79,1);
					}
	            }
	            case 2: // Green
	            {
	                switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,16,1);
						case 2: CreateLSPDVehicle(playerid,597,16,1);
						case 3: CreateLSPDVehicle(playerid,598,16,1);
						case 4: CreateLSPDVehicle(playerid,599,16,1);
					}
	            }
	            case 3: // Grey
	            {
	                switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,29,29);
						case 2: CreateLSPDVehicle(playerid,597,29,29);
						case 3: CreateLSPDVehicle(playerid,598,29,29);
						case 4: CreateLSPDVehicle(playerid,599,29,29);
					}
	            }
	        }
	    }
		//==========//
		case 30: // Inventory Menu
		{
			if(!response) return true;
			new chosen = listitem, str[50], resch;
			if(PlayerInfo[playerid][pDelay][0] > 0) return 1; // Block any fix inv breaks.
			if(chosen == MAX_INV_SLOTS) // STORE WEAPON SECTION !
			{
				if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this action again.");
				SetPVarInt(playerid, "GunReduce", 2000);
			    if(GetPVarInt(playerid, "JustChosen") == 1) return error(playerid, "You must wait a second.");
			    if(GetPVarInt(playerid, "LSPD_Ta") == 1) return 1; // Block taser bug.
			    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
			    if(PlayerInfo[playerid][pPlayerWeapon] == 0) return 1; // no weapon.
			    resch = CheckInv(playerid);
			    if(resch == 1)
			    {
			        new sweapon, sammo;
                    for (new i = 0; i < 9; i++)
	                {
		                GetPlayerWeaponData(playerid, i, sweapon, sammo);
					}
					if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
					{
		    			new amount = PlayerInfo[playerid][pPlayerAmmo], am = 0;
		    			switch(PlayerInfo[playerid][pPlayerWeapon])
		    			{
		        			case 22 .. 24: am=50;
		        			case 25 .. 27: am=25;
		        			case 28 .. 32: am=150;
		        			case 33, 34: am=25;
		    			}
		    			if(amount > am)
		    			{
							new am2;
		        			switch(PlayerInfo[playerid][pAmmoType])
		        			{
		    	    			case 101: am2=100;
		    	    			case 107: am2=100;
		    	    			case 116: am2=300;
		    	    			case 126: am2=300;
		    	    			case 127: am2=300;
		        			}
		        			if(amount > am2) {
							amount = am; }
						}
		    			PlayerInfo[playerid][pPlayerAmmo]=amount;
		    			if(PlayerInfo[playerid][pAmmoType] == 0) {
					    PlayerInfo[playerid][pPlayerAmmo]=0; }
					}
					SetPVarInt(playerid, "JustChosen", 1);
			        GiveInvItem(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo], PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pPlayerSerial]);
			        format(str, 50, "%s stored into your inventory!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]));
			        ServerLog(LOG_WEAPON_STORE, PlayerInfo[playerid][pUsername], str);
			        ResetPlayerWeaponsEx(playerid);
					ResetScriptWiseWeapon2(playerid);
			        SendClientMessage(playerid, COLOR_WHITE, str);
			        ServerLog(LOG_WEAPON_STORE, PlayerInfo[playerid][pUsername], str);
			        RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
			        SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
			    }
			    else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
			    return true;
			}
			if(chosen == MAX_INV_SLOTS + 1) // DROP WEAPON SECTION !
			{
				if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this action again.");
				SetPVarInt(playerid, "GunReduce", 2000);
			    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
			    if(GetPVarInt(playerid, "LSPD_Ta") == 1) return 1; // Block taser bug.
			    if(GetPVarInt(playerid, "JustChosen") == 1) return error(playerid, "You must wait a second.");
			    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You cannot give out weapons when your character has died.");
			    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
			    resch = CheckInv(playerid);
			    if(resch == 1)
			    {
			        new sweapon, sammo;
                    for (new i = 0; i < 9; i++)
	                {
		                GetPlayerWeaponData(playerid, i, sweapon, sammo);
					}
					if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
					{
		    			new amount = PlayerInfo[playerid][pPlayerAmmo], am = 0;
		    			switch(PlayerInfo[playerid][pPlayerWeapon])
		    			{
		        			case 22 .. 24: am=50;
		        			case 25 .. 27: am=25;
		        			case 28 .. 32: am=150;
		        			case 33, 34: am=25;
		    			}
		    			if(amount > am)
		    			{
							new am2;
		        			switch(PlayerInfo[playerid][pAmmoType])
		        			{
		    	    			case 101: am2=100;
		    	    			case 107: am2=100;
		    	    			case 116: am2=300;
		    	    			case 126: am2=300;
		    	    			case 127: am2=300;
		        			}
		        			if(amount > am2) {
							amount = am; }
						}
		    			PlayerInfo[playerid][pPlayerAmmo]=amount;
		    			if(PlayerInfo[playerid][pAmmoType] == 0)
		    			{
					    	PlayerInfo[playerid][pPlayerAmmo]=0;
						}
					}
			        new Float:X, Float:Y, Float:Z, pw = PlayerInfo[playerid][pPlayerWeapon];
			        GetPlayerPos(playerid, X, Y, Z);
			        format(str, 50, "%s dropped!", PrintIName(pw));
			        SendClientMessage(playerid, COLOR_WHITE, str);
			        if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSG)
			        {
			            CreateLoot(PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo], PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pPlayerSerial], X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			        	
			            format(str, 50, "%s dropped his %s", PlayerInfo[playerid][pName], PrintIName(pw));
				        WepLog(str);
				        ServerLog(LOG_WEAPON_DROP, PlayerInfo[playerid][pUsername], str);
			        }
			        ResetPlayerWeapons(playerid);
			        PlayerInfo[playerid][pPlayerWeapon]=0;
					PlayerInfo[playerid][pPlayerAmmo]=0;
					PlayerInfo[playerid][pAmmoType]=0;
					ResetPlayerWeaponsEx(playerid);
			        SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
			    }
			    else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
			    return true;
			}
			if(chosen == MAX_INV_SLOTS + 2) // STORE AMMO SECTION !
			{
				if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this action again.");
				SetPVarInt(playerid, "GunReduce", 2000);
			    if(GetPVarInt(playerid, "LSPD_Ta") == 1) return 1; // Block taser bug.
			    if(GetPVarInt(playerid, "JustChosen") == 1) return error(playerid, "You must wait a second.");
			    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
			    resch = CheckInv(playerid);
			    if(resch == 1)
			    {
			        new sweapon, sammo;
                    for (new i = 0; i < 9; i++)
	                {
		                GetPlayerWeaponData(playerid, i, sweapon, sammo);
					}
					if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
					{
		    			new amount = PlayerInfo[playerid][pPlayerAmmo], am = 0;
		    			switch(PlayerInfo[playerid][pPlayerWeapon])
		    			{
		        			case 22 .. 24: am=50;
		        			case 25 .. 27: am=25;
		        			case 28 .. 32: am=150;
		        			case 33, 34: am=25;
		    			}
		    			if(amount > am)
		    			{
							new am2;
		        			switch(PlayerInfo[playerid][pAmmoType])
		        			{
		    	    			case 101: am2=100;
		    	    			case 107: am2=100;
		    	    			case 116: am2=300;
		    	    			case 126: am2=300;
		    	    			case 127: am2=300;
		        			}
		        			if(amount > am2) {
							amount = am; }
						}
		    			PlayerInfo[playerid][pPlayerAmmo]=amount;
		    			if(PlayerInfo[playerid][pAmmoType] == 0) {
					    PlayerInfo[playerid][pPlayerAmmo]=0; }
					}
			        ResetPlayerWeapons(playerid);
			        GiveInvItem(playerid, PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pPlayerAmmo], 0, PlayerInfo[playerid][pPlayerSerial]);
			        format(str, 50, "%s stored into your inventory!", PrintIName(PlayerInfo[playerid][pAmmoType]));
			        ServerLog(LOG_WEAPON_STORE_AMMO, PlayerInfo[playerid][pUsername], str);
			        SendClientMessage(playerid, COLOR_WHITE, str);
			        PlayerInfo[playerid][pPlayerAmmo]=0, PlayerInfo[playerid][pAmmoType]=0;
			        SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
			    }
			    else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
			    return true;
			}

			if(GetPVarInt(playerid, "Combining"))
			{
				if(PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "CombiningChose")] != PlayerInfo[playerid][pInvItem][chosen])
				{
					SendClientMessage(playerid, COLOR_ERROR, "You can only combine items of the same type.");
					SetPVarInt(playerid, "Combining", 0);
					SetPVarInt(playerid, "CombiningChose", 0);
					return 1;
				}

				switch(PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "CombiningChose")])
				{
					case 500, 501, 502, 503, 504, 505, 506, 507:
					{
						if(PlayerInfo[playerid][pInvQ][chosen] + PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "CombiningChose")] > 100)
						{
							SetPVarInt(playerid, "Combining", 0);
							SetPVarInt(playerid, "CombiningChose", 0);
							return SendClientMessage(playerid, COLOR_ERROR, "Your combination can't result in a package being bigger than 100.");
						}

						if(chosen == GetPVarInt(playerid, "CombiningChose"))
						{
							SetPVarInt(playerid, "Combining", 0);
							SetPVarInt(playerid, "CombiningChose", 0);
							return SendClientMessage(playerid, COLOR_ERROR, "You can't combine an item with itself.");
						}

						PlayerInfo[playerid][pInvQ][chosen] += PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "CombiningChose")];
						RemoveInvItem(playerid, GetPVarInt(playerid, "CombiningChose"));
						SendClientMessage(playerid, COLOR_WHITE, "Items combined!");
					}
				}

				SetPVarInt(playerid, "Combining", 0);
				SetPVarInt(playerid, "CombiningChose", 0);
				return 1;
			}

			if(PlayerInfo[playerid][pInvItem][chosen] > 0)
			{
				new option_list[128];

				switch(PlayerInfo[playerid][pInvItem][chosen])
				{
					case 500, 501, 502, 503, 504, 505, 506, 507:
					{
						format(option_list, sizeof(option_list), "Use\nDrop\nCombine\nDivide");
					}

					default:
					{
						format(option_list, sizeof(option_list), "Use\nDrop");
					}
				}

			    format(str, 50, "%s", PrintIName(PlayerInfo[playerid][pInvItem][chosen]));
			    SetPVarInt(playerid, "InvChose", chosen);
			    id = GetPVarInt(playerid, "HouseEnter");
				key = -1;

				if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
				{
				    if(GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
				    {
				        if(GetCloseHouseSafe(playerid, id))
				        {
				        	format(option_list, sizeof(option_list), "%s\nStore in Property", option_list);
					    }
					}
				}

				id = GetPVarInt(playerid, "BizEnter");
				if(IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
				{
				    if(GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
				    {
				        if(GetCloseBizSafe(playerid, id))
				        {
				            format(option_list, sizeof(option_list), "%s\nStore in Business", option_list);
					    }
					}
				}

				new keyex = -1;
				if(PlayerToCar(playerid, 1, 4.0))
				{
		    		keyex = PlayerToCar(playerid, 2, 4.0);
		    		if(IsValidTCar(keyex))
		    		{
	                    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	                    {
	                	    format(option_list, sizeof(option_list), "%s\nStore in %s", option_list, PrintVehName(keyex));
				        	key = keyex;
				        }
         		    }
         		    
         		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	   	        	{
	   	        		if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] == VEHICLE_PERSONAL)
	   	        		{
		   	        		if(!IsNotAEngineCar(GetPlayerVehicleID(playerid)) && !IsBike(GetPlayerVehicleID(playerid)))
		   	        		{
			   	        		format(option_list, sizeof(option_list), "%s\nStore in Glove Compartment", option_list);
					    		key = GetPlayerVehicleID(playerid);
				    		}
			    		}
	   	        	}
				}

				if(key == -1)
				{
				    if(IsPoliceCar(playerid))
				    {
				        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				        {
				        	format(option_list, sizeof(option_list), "%s\nStore in %s", option_list, PrintVehName(GetPoliceCarID(playerid)));
		   	        	}
				    }
				}

				ShowPlayerDialogEx(playerid, 31, DIALOG_STYLE_LIST, str, option_list, "Select", "Back");
			}
			else CallRemoteFunction("PrintInv", "i", playerid);
		}
		case 31: // Inventory Menu
		{
			if(!response)
			{
			    DeletePVar(playerid, "InvChose");
			    CallRemoteFunction("PrintInv", "i", playerid);
			    return true;
			}
			new str2[50], chose = GetPVarInt(playerid, "InvChose"), log[128];
			DeletePVar(playerid, "InvChose");

			format(log, sizeof(log), "%s", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
			ServerLog(LOG_ITEM_USE, PlayerInfo[playerid][pUsername], log);

			switch(listitem)
			{
			    case 0: // USE
			    {
			        switch(PlayerInfo[playerid][pInvItem][chose])
			        {
						case 1 .. 99: // WEAPONS
						{
							if(GetPVarInt(playerid, "GunReduce") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You must wait before performing this action again.");
							SetPVarInt(playerid, "GunReduce", 2000);
							if(PlayerInfo[playerid][pPlayerWeapon] != 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "You already have a weapon equiped!");
							    CallRemoteFunction("PrintInv", "i", playerid);
			    			    return true;
							}
							if(PlayerInfo[playerid][pInvItem][chose] == 4) {
						        if(GetPVarInt(playerid, "ConnectTime") < 75) {
						            SendClientMessage(playerid, COLOR_WHITE, "You need (75) TLS to use a knife!");
						            return 1;
						        }
						    }
						    if(PlayerInfo[playerid][pInvItem][chose] >= 22 && PlayerInfo[playerid][pInvItem][chose] <= 34) {
						        if(GetPVarInt(playerid, "ConnectTime") < 8) {
						            SendClientMessage(playerid, COLOR_WHITE, "You need (8) TLS to use firearms!");
						            return 1;
						        }
						    }
							//==========//
						    PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvEx][chose];
						    //==========//
						    GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pInvItem][chose], PlayerInfo[playerid][pInvQ][chose]);
						    //==========//
						    PlayerInfo[playerid][pPlayerSerial]=PlayerInfo[playerid][pInvS][chose];
						    //==========//
						    format(str2, 128, "%s equipped!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));

						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, chose);
						    //==========//
						    SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
						    
						    FixInv(playerid);
    						OnPlayerDataSave(playerid);
						}
						case 100 .. 199: // AMMUNITION
						{
							/*
						    if(PlayerInfo[playerid][pPlayerWeapon] != 0 && PlayerInfo[playerid][pPlayerAmmo] != 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "Your weapon is currently loaded!");
							    CallRemoteFunction("PrintInv", "i", playerid);
			    			    return true;
							}
							*/
							if(PlayerInfo[playerid][pPlayerWeapon] == 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon equiped!");
							    CallRemoteFunction("PrintInv", "i", playerid);
			    			    return true;
							}
							new rac = CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][chose]);
							if(rac == 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "Ammunition is not compatible with this weapon!");
							    CallRemoteFunction("PrintInv", "i", playerid);
							    return true;
							}
							if(GetPVarInt(playerid, "TogUnhol") == 0) {
							ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0); }
							PlayerInfo[playerid][pAmmoType] = PlayerInfo[playerid][pInvItem][chose];
							GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo] + PlayerInfo[playerid][pInvQ][chose]);
							//==========//
						    format(str2, 128, "%s reloaded with '%s'!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]), PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, chose);
						    //==========//
						    SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
						}
						case 200 .. 299: // FOOD
						{
							new Float:health, rand;
							rand = random(50)+1;
							GetPlayerHealth(playerid, health);
							health+=float(rand)+20.0;
							if(health >= 100.0) health=99.0;
						    SetPlayerHealthEx(playerid, health);
						    //==========//
						    switch(PrintIid(PlayerInfo[playerid][pInvItem][chose]))
						    {
						        case 1: ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
						        case 2: ApplyAnimationEx(playerid, "VENDING", "VEND_Drink2_P", 3.0, 0, 0, 0, 0, 0);
						    }
						    //==========//
						    format(str2, 128, "%s consumed!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    PlaySoundPlyRadius(playerid, 32200, 10.0);
						    //==========//
    	        		    format(string, sizeof(string), "consumed %s", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
    	        		    ForceAME(playerid, string);
    	                    //==========//
						    SetPVarInt(playerid, "Hunger", 0);
						    //==========//
						    RemoveInvItem(playerid, chose);
						}
						case 300 .. 399: // SPECIAL ITEMS
						{
						    SetPlayerSpecialAction(playerid, PrintIid(PlayerInfo[playerid][pInvItem][chose]));
						    //==========//
						    format(str2, 128, "%s used!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, chose);
						}
						case 400 .. 499: // PVARS
						{
							new allow = 0;
							switch(PlayerInfo[playerid][pInvItem][chose])
							{
							    case 400 .. 405: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							    case 408 .. 411: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							    case 414 .. 415: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							    case 417: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							}
							if(allow == 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't use this item!");
							switch(allow)
							{
					            case 400: // DICE
							    {
							        cmd_dice(playerid, "");
							        return true;
							    }
							    case 401: // MASK
							    {
							        cmd_mask(playerid, "");
							        return 1;
							    }
							    case 402: // WALKIE TALKIE
							    {
							        cmd_wt(playerid, "");
							        return true;
							    }
							    case 403: // GAS CAN
							    {
							        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_ERROR, "You must be on foot to use this!");
							        if(!PlayerToCar(playerid,1,5.0)) return SendClientMessage(playerid, COLOR_ERROR, "You are not close to any vehicle.");
							        
							        new carid = PlayerToCar(playerid, 2, 5.0);

								    if(IsNotAEngineCar(carid)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have an engine.");
								    if(VehicleInfo[carid][vFuel] >= 100) return SendClientMessage(playerid, COLOR_ERROR, "Vehicle's fuel tank is already full.");
								    if(VehicleInfo[carid][vEngine] != 0 && VehicleInfo[carid][vFuel] >= 1) return SendClientMessage(playerid, COLOR_ERROR, "Vehicle's engine must be off to use this.");
								    
								    VehicleInfo[carid][vFuel] += 20;
								    
								    if(VehicleInfo[carid][vFuel] > 100)
								    {
								    	VehicleInfo[carid][vFuel] = 100;
								    }

								    format(string, sizeof(string),"Gas Can used on the %s.",VehicleName[GetVehicleModel(carid)-400]);
    							    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    case 404: // WATCH
							    {
							        cmd_time(playerid, "");
							        return true;
							    }
							    case 405: // PHONE
							    {
							        cmd_cellphone(playerid, "");
							        return true;
							    }
							    case 408: // MP3
							    {
							        cmd_mp3(playerid, "");
							        return true;
							    }
							    case 409, 410: // Cannabis Seeds / GROWING CHEMS
							    {
							        if (!CheckInvItem(playerid, 409))
							        {
							            SCM(playerid, COLOR_ERROR, "You need cannabis seeds to continue!");
							            return true;
							        }
							        if (!CheckInvItem(playerid, 410))
							        {
							            SCM(playerid, COLOR_ERROR, "You need growing chemicals to continue!");
							            return true;
							        }

							        new player_plants = 0;

		    				        for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    				        {
								        if(WeedInfo[weed][wPlanted] != 0 && strcmp(PlayerInfo[playerid][pUsername], WeedInfo[weed][wName]) == 0)
										{
											player_plants++;
										}
							        }

							        if(player_plants >= MAX_PLAYER_WEED_PLANTS)
									{
										return SendClientMessage(playerid, COLOR_ERROR, "You have already planted the maximum allowed ammount of cannabis plants per player.");
									}

		    				        for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    				        {
								        if(WeedInfo[weed][wPlanted] == 0 && WeedInfo[weed][wTime] == 0)
								        {
				    				        new Float:X,Float:Y,Float:Z;

				    				        RemoveInvItem(playerid, GetInvSlotFromID(playerid, 409), 1); // Remove cannabis seeds
				    				        RemoveInvItem(playerid, GetInvSlotFromID(playerid, 410), 1); // Remove growing chemical

                    				        ApplyAnimationEx(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		            				        GetPlayerPos(playerid, X, Y, Z);

		            				        WeedInfo[weed][wObject] = CreateDynamicObject(3409, X, Y, Z-2.5, 0, 0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		            				        WeedInfo[weed][wX] = X;
		    						        WeedInfo[weed][wY] = Y;
		    						        WeedInfo[weed][wZ] = Z;
		    						        WeedInfo[weed][wWorld] = GetPlayerVirtualWorld(playerid);
		    						        WeedInfo[weed][wTime] = 60;
		    						        WeedInfo[weed][wPlanted] = 1;

		    						        format(WeedInfo[weed][wName], MAX_PLAYER_NAME + 1, "%s", PlayerInfo[playerid][pUsername]);
		    								SendClientMessage(playerid, COLOR_WHITE, "You have planted your cannabis, it will be fully grown in sixty minutes. (press 'H' to collect)");

		    								format(string, sizeof(string), "AdmWarn: %s(%i) has planted cannabis.", PlayerInfo[playerid][pUsername], playerid);
                	    					SendAdminMessage(COLOR_YELLOW, string);
                	    					return 1;
								        }
							        }
							    }
							    case 411: // Baking Soda
							    {
							        if(!CheckInvItem(playerid, 501))
							        {
							            SendClientMessage(playerid, COLOR_ERROR, "You need Cocaine to continue.");
							            return true;
							        }
							        if(NotAbleToPlant(playerid))
							        {
							            SendClientMessage(playerid, COLOR_ERROR, "You can only do this inside of a house or business.");
							            return true;
							        }

		    				        for(new weed = 0; weed < sizeof(CrackInfo); weed++)
    	    				        {
								        if(CrackInfo[weed][cPlanted] == 0 && CrackInfo[weed][cTime] == 0)
								        {
				    				        if(CheckInvItem(playerid, 501) <= 100) return SendClientMessage(playerid, COLOR_ERROR, "You need 100 grams of Cocaine to continue.");

				    				        RemoveInvItem(playerid, GetInvSlotFromID(playerid, 501), 100);
				    				        RemoveInvItem(playerid, GetInvSlotFromID(playerid, 411));

                    				        ApplyAnimationEx(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);

                    				        new Float:X,Float:Y,Float:Z;
		            				        GetPlayerPos(playerid, X, Y, Z);

		            				        CrackInfo[weed][cObject] = CreateDynamicObject(1554, X, Y, Z-1.0, 0, 0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		            				        CrackInfo[weed][cX] = X;
		    						        CrackInfo[weed][cY] = Y;
		    						        CrackInfo[weed][cZ] = Z;
		    						        CrackInfo[weed][cWorld] = GetPlayerVirtualWorld(playerid);
		    						        CrackInfo[weed][cTime] = 60;
		    						        CrackInfo[weed][cPlanted] = 1;

	                				        strmid(CrackInfo[weed][cName], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
		    						        SendClientMessage(playerid, COLOR_WHITE, "You have started cooking crack, it will be done in 60 minutes. (press 'H' to collect)");
		    						        return 1;
								        }
							        }
							    }
							    case 412: // SUPPRESSOR
							    {
							        scm(playerid, COLOR_LIGHTBLUE, "TIP: Use the command /silencer to attach a silencer to a colt 45.");
							        return true;
							    }
							    case 413: // bomb
							    {
							        cmd_v(playerid, "bomb");
							        return true;
							    }
							    case 414: // Cig Pack
							    {
							        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
							        {
							            scm(playerid, -1, "You already have a cigarette in your hand !");
							            return 1;
							        }

							        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);

							        RemoveInvItem(playerid, GetInvSlotFromID(playerid, 414), 1);
							        return true;
							    }
							    case 415:
							    {
							        if(!IsInLS(playerid)) {
							            scm(playerid, -1, "You need to be in Los Santos for any scanner reception.");
							            return 1;
							        }
							        switch(PlayerInfo[playerid][pScanner])
							        {
							            case 0:
							            {
							                PlayerInfo[playerid][pScanner] = 1;
							                GameTextForPlayer(playerid, "~w~Scanner~n~~g~On", 4000, 3);
							                format(string, 128, "turned %s police scanner on", CheckSex(playerid));
							                ForceAME(playerid, string);
							            }
							            case 1:
							            {
							                PlayerInfo[playerid][pScanner] = 0;
							                GameTextForPlayer(playerid, "~w~Scanner~n~~r~Off", 4000, 3);
							                format(string, 128, "turned %s police scanner off", CheckSex(playerid));
							                ForceAME(playerid, string);
							            }
							        }
							        return 1;
							    }
							    case 417:
							    {
							    	for(new i = 0; i < MAX_CAMPFIRES; i++)
							    	{
							    		if(Campfire[i][cID] == 0)
							    		{
							    			new Float:x, Float:y, Float:z;
							    			GetPlayerPos(playerid, x, y, z);
							    			Campfire[i][cID] = CreateDynamicObject(19632, x, y, z - 1.0, 0, 0, 0);
							    			Campfire[i][cX] = x;
							    			Campfire[i][cY] = y;
							    			Campfire[i][cZ] = z;

							    			Campfire[i][cTimer] = SetTimerEx("DestroyCampfire", 600000, false, "i", i);

							    			SendClientMessage(playerid, COLOR_WHITE, "Campfire created. (use 'H' to extinguish)");

							    			format(string, sizeof(string), "AdmWarn: %s (ID: %i) has planted a campfire.", PlayerInfo[playerid][pName], playerid);
                	    					SendAdminMessage(COLOR_YELLOW, string);
							    			break;
							    		}
							    	}
							    }
							}
						    //==========//
					        RemoveInvItem(playerid, chose);
						}
						case 500 .. 549: // NARCOTICS
						{
                            new gpid = PlayerInfo[playerid][pInvItem][chose];

							if(GetPVarInt(playerid, "DrugTime") > 0)
							{
							    format(string, sizeof(string), "You must wait (%d) seconds before using your narcotics again!", GetPVarInt(playerid, "DrugTime"));
							    SCM(playerid, COLOR_ERROR, string);
							    return true;
							}

							switch(gpid)
							{
								case 501: // cocaine
								{
									SetPVarInt(playerid, "Addiction", GetPVarInt(playerid, "Addiction")+4);
									SetPVarInt(playerid, "DrugTime", DRUG_TIME_COCAINE);
								}
								case 502: // crack
								{
									SetPVarInt(playerid, "Addiction", GetPVarInt(playerid, "Addiction")+4);
									SetPVarInt(playerid, "DrugTime", DRUG_TIME_CRACK);
								}
							    case 506: // weed
							    {
							    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
							    	SetPVarInt(playerid, "DrugTime", DRUG_TIME_CANNABIS);
							    }
							}
							SetPVarInt(playerid, "AddictionID", gpid);
						    SetPVarInt(playerid, "DrugHigh", gpid);
						    //==========//
						    format(str2, 128, "%s consumed!", PrintIName(gpid));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    GiveAchievement(playerid, 10);
						    //==========//
						    RemoveInvItem(playerid, chose, 1);
						    //==========//
						    new Float:health;
					    	GetPlayerHealth(playerid, health);
						    SetPlayerHealthEx(playerid, health);
						}
						case 1000: // kevlar
					    {
					    	new Float:armour;
					    	GetPlayerArmourEx(playerid, armour);

				    		SetPlayerArmourEx(playerid, armour + PlayerInfo[playerid][pInvQ][chose]);

				    		SendClientMessage(playerid, COLOR_WHITE, "Kevlar equiped!");
				            RemoveInvItem(playerid, chose);
					    }
					    case 1001: // health
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "Health equiped!");
					    }
			        }
			    }
			    case 1: // DROP
			    {
			        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(playerid, X, Y, Z);
			        switch(PlayerInfo[playerid][pInvItem][chose])
			        {
			            case 401:
			            {
			                if(GetPVarInt(playerid, "MaskUse") == 1)
			                {
			                    SendClientMessage(playerid, COLOR_ERROR, "You need to take your mask off!");
			                    return true;
			                }
			            }
			            case 415:
			            {
			            	PlayerInfo[playerid][pScanner] = 0;
			            }
			            case 1000:
			            {
			            	if((GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSG) && PlayerInfo[playerid][pInvItem][chose] < 200) return error(playerid, "You can not do this to prevent LSPD and LSG weapon distribution.");
			            }
			        }
			        format(string, sizeof(string), "%s dropped!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
			        SendClientMessage(playerid, COLOR_WHITE, string);
			        ServerLog(LOG_ITEM_DROP, PlayerInfo[playerid][pUsername], string);
			        //==========//
			        new allow = 0;
			        if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSG) { allow++; }
			        if(PlayerInfo[playerid][pInvItem][chose] > 200) allow=0;
					if(allow == 0) {
					CreateLoot(PlayerInfo[playerid][pInvItem][chose], PlayerInfo[playerid][pInvQ][chose], PlayerInfo[playerid][pInvEx][chose], PlayerInfo[playerid][pInvS][chose], X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)); }
			        //==========//
					RemoveInvItem(playerid, chose);
					//==========//
					SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
					//==========//
					Streamer_Update(playerid);
			    }
			    case 2: //Put in house inventory, business inventory OR Put in vehicle
			    {
			    	switch(PlayerInfo[playerid][pInvItem][chose])
			    	{
			    		case 500, 501, 502, 503, 504, 505, 506, 507:
			    		{
			    			new combine_string[128];
			    			format(combine_string, sizeof(combine_string), "Select an item that you would like to combine with %s(%i).", PrintIName(PlayerInfo[playerid][pInvItem][chose]), PlayerInfo[playerid][pInvQ][chose]);
			    			SendClientMessage(playerid, COLOR_WHITE, combine_string);
			    			SetPVarInt(playerid, "Combining", 1);
			    			SetPVarInt(playerid, "CombiningChose", chose);
			    			PrintInv(playerid);
			    		}

			    		default:
			    		{
			    			StorePlayerItemInHouse(playerid, chose, GetPVarInt(playerid, "HouseEnter"));
					        StorePlayerItemInBusiness(playerid, chose, GetPVarInt(playerid, "BizEnter"));

							//Vehicle storing
							key = -1;
							new keyex = -1;
							if(PlayerToCar(playerid, 1, 4.0)) {
				    			keyex = PlayerToCar(playerid, 2, 4.0);
				    			if(IsValidTCar(keyex))
				    			{
			                    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			                    	{
						        		key = keyex;
						        	}
		         		    	}
							}
							if(key == -1)
							{
						    	if(IsPoliceCar(playerid)) {
						        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						        	{
						        	    key = GetPoliceCarID(playerid);
									}
									else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						        	{
						        		key = GetPlayerVehicleID(playerid);
						        	}
						    	}
							}

							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				        	{
				        		key = GetPlayerVehicleID(playerid);
				        	}

		                    if(key == -1) return true;

				   	        StorePlayerItemInVehicle(playerid, chose, key);
			    		}
			    	}
			        
			    }
			    case 3:
			    {
			    	switch(PlayerInfo[playerid][pInvItem][chose])
			    	{
			    		case 500, 501, 502, 503, 504, 505, 506, 507:
			    		{
			    			new divide_string[128];
			    			format(divide_string, sizeof(divide_string), "How much would you like to split off from your %s(%i)?", PrintIName(PlayerInfo[playerid][pInvItem][chose]), PlayerInfo[playerid][pInvQ][chose]);
			    			ShowPlayerDialogEx(playerid, DIALOG_INVENTORY_DIVIDE, DIALOG_STYLE_INPUT, "Divivde", divide_string, "Confirm","Close");

			    			SetPVarInt(playerid, "Dividing", 1);
			    			SetPVarInt(playerid, "DividingChose", chose);
			    		}

			    		default:
			    		{
			    			StorePlayerItemInHouse(playerid, chose, GetPVarInt(playerid, "HouseEnter"));
					        StorePlayerItemInBusiness(playerid, chose, GetPVarInt(playerid, "BizEnter"));

							//Vehicle storing
							key = -1;
							new keyex = -1;
							if(PlayerToCar(playerid, 1, 4.0)) {
				    			keyex = PlayerToCar(playerid, 2, 4.0);
				    			if(IsValidTCar(keyex))
				    			{
			                    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			                    	{
						        		key = keyex;
						        	}
		         		    	}
							}
							if(key == -1)
							{
						    	if(IsPoliceCar(playerid)) {
						        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						        	{
						        	    key = GetPoliceCarID(playerid);
									}
									else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						        	{
						        		key = GetPlayerVehicleID(playerid);
						        	}
						    	}
							}

							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				        	{
				        		key = GetPlayerVehicleID(playerid);
				        	}

		                    if(key == -1) return true;

				   	        StorePlayerItemInVehicle(playerid, chose, key);
			    		}
			    	}
			    }
			    case 4:
			    {
			    	switch(PlayerInfo[playerid][pInvItem][chose])
			    	{
			    		default:
			    		{
			    			StorePlayerItemInHouse(playerid, chose, GetPVarInt(playerid, "HouseEnter"));
					        StorePlayerItemInBusiness(playerid, chose, GetPVarInt(playerid, "BizEnter"));

							//Vehicle storing
							key = -1;
							new keyex = -1;
							if(PlayerToCar(playerid, 1, 4.0)) {
				    			keyex = PlayerToCar(playerid, 2, 4.0);
				    			if(IsValidTCar(keyex))
				    			{
			                    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			                    	{
						        		key = keyex;
						        	}
		         		    	}
							}
							if(key == -1)
							{
						    	if(IsPoliceCar(playerid)) {
						        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						        	{
						        	    key = GetPoliceCarID(playerid);
									}
									else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						        	{
						        		key = GetPlayerVehicleID(playerid);
						        	}
						    	}
							}

							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				        	{
				        		key = GetPlayerVehicleID(playerid);
				        	}

		                    if(key == -1) return true;

				   	        StorePlayerItemInVehicle(playerid, chose, key);
			    		}
			    	}
			    }
			}
		}
		case 35: // LSPD ARMOURY DIALOG
		{
		    if(!response) return true;
		    if(listitem == sizeof(PDItems))
		    {
		        ResetPlayerWeaponsEx(playerid);
		        SetPlayerArmourEx(playerid, 0.0);
				for(new p = 0; p < MAX_INV_SLOTS; p++)
				{
				    if(PlayerInfo[playerid][pInvItem][p] >= 22 && PlayerInfo[playerid][pInvItem][p] <= 41) // Weapons
				    {
					    RemoveInvItem(playerid, p);
					}

					if(PlayerInfo[playerid][pInvItem][p] >= 100 && PlayerInfo[playerid][pInvItem][p] <= 128) // Ammo
				    {
					    RemoveInvItem(playerid, p);
					}
				}
				return 1;
		    }
			else
			{
				if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");

			    switch(PDItems[listitem][0])
			    {
			        case 22 .. 41:
			        {
			            if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS!");
			        }
			        case 1000:
			        {
			        	SetPlayerArmourEx(playerid, 99.0);
			        	return 1;
			        }
			        case 1001:
			        {
			        	SetPlayerHealthEx(playerid, 99.0);
			        	return 1;
			        }
			    }
			    new allow = 0;

			    if(GetPVarInt(playerid, "Rank") >= PDItems[listitem][1])
			    {
			        allow++;
			    }

			    if(IsPlayerInDivision(playerid, 1))
			    {
			        if(PDItems[listitem][0] == 29 || 
			        	PDItems[listitem][0] == 31 ||
						PDItems[listitem][0] == 34 || 
						PDItems[listitem][0] == 115 ||
						PDItems[listitem][0] == 121 || 
						PDItems[listitem][0] == 125 ||
						PDItems[listitem][0] == 128) 
					{
			            allow++;
			        }
			    }

			    if(IsPlayerInDivision(playerid, 4))
			    {
			        if(PDItems[listitem][0] == 34 || 
			        	PDItems[listitem][0] == 125)
			        {
			            allow++;
			        }
			    }

			    if(allow > 0)
			    {
			        if(PDItems[listitem][0] == 3) GiveInvItem(playerid, PDItems[listitem][0], 1, 0);
			        else if(PDItems[listitem][0] == 41) GiveInvItem(playerid, PDItems[listitem][0], 1000, 0);
			        else GiveInvItem(playerid, PDItems[listitem][0], PrintIQ(PDItems[listitem][0]), 0, GetPVarInt(playerid, "WepSerial"));
			        format(string, 128, "%s selected!", PrintIName(PDItems[listitem][0]), PDItems[listitem][1]);
			        SendClientMessage(playerid, COLOR_WHITE, string);
		        }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient rank!");
		    }
		}
		case 36:
		{
		    if(GetPVarInt(playerid, "VEHC") == 0) return true;
		    if(!response)
		    {
		        ShowPlayerDialogEx(playerid,37,DIALOG_STYLE_LIST,"DEALERSHIP","Select Vehicle (FORWARD)\nSelect Vehicle (BACKWARDS)\nPurchase Vehicle","Select", "Exit");
		        return true;
		    }
		    else
		    {
		        new maxe, till = 0;
		        switch(GetPVarInt(playerid, "VEHMDL"))
			    {
			        case 1: maxe = sizeof(VehDealership)-1;
			        case 2: maxe = sizeof(GrotDealership)-1;
			        case 3: maxe = sizeof(BikeDealership)-1;
			        case 4: maxe = sizeof(BoatDealership)-1;
			        case 5: maxe = sizeof(IndustrialDealership)-1;
			    }
		        switch(GetPVarInt(playerid, "VEHFOR"))
		        {
		            case 0:
		            {
		                if(GetPVarInt(playerid, "VEHID") >= maxe) SetPVarInt(playerid, "VEHID", till);
					    else SetPVarInt(playerid, "VEHID", GetPVarInt(playerid, "VEHID")+1);
					}
		            case 1:
		            {
		                if(GetPVarInt(playerid, "VEHID") <= till) SetPVarInt(playerid, "VEHID", maxe);
					    else SetPVarInt(playerid, "VEHID", GetPVarInt(playerid, "VEHID")-1);
					}
		        }
		        CallRemoteFunction("VehCreation", "i", playerid);
		    }
		}
		case 37:
		{
		    id = GetPVarInt(playerid, "VEHDEAL");
		    if(!response)
		    {
	            DeletePVar(playerid, "VEHC"), DeletePVar(playerid, "VEHMDL");
	            DeletePVar(playerid, "VEHID");
	            DeletePVar(playerid, "VEHDEAL");
	            if(GetPVarInt(playerid, "VEHVEH") >= 1) { DespawnVehicle(GetPVarInt(playerid, "VEHVEH")); }
	            DeletePVar(playerid, "VEHVEH");
	            SetPlayerPosEx(playerid, Dealerships[id][0], Dealerships[id][1], Dealerships[id][2]);
                SetPlayerVirtualWorld(playerid, 0);
                SetCameraBehindPlayer(playerid);
			    TogglePlayerControllableEx(playerid, false);
			    SetTimerEx("TogglePlayerControllableEx", 2000, false, "ii", playerid, 1);
			    DeletePVar(playerid, "LOADDEAL");
			    return true;
			}
            //==========//
		    switch(listitem)
		    {
		        case 0:
		        {
		            SetPVarInt(playerid, "VEHFOR", 0);
					CallRemoteFunction("VehCreation", "i", playerid);
		        }
		        case 1:
		        {
		            SetPVarInt(playerid, "VEHFOR", 1);
					CallRemoteFunction("VehCreation", "i", playerid);
		        }
		        case 2:
		        {
		            new id2 = GetPVarInt(playerid, "VEHID"), vehmdl = GetPVarInt(playerid, "VEHMDL"), carmdl, col = 0, id3 = GetPVarInt(playerid, "VEHDEAL"); //tls, col = 0;
		            DeletePVar(playerid, "VEHC"), DeletePVar(playerid, "VEHMDL");
	                DeletePVar(playerid, "VEHID");
	                DeletePVar(playerid, "VEHDEAL");
	                if(GetPVarInt(playerid, "VEHVEH") >= 1) { DespawnVehicle(GetPVarInt(playerid, "VEHVEH")); }
	                DeletePVar(playerid, "VEHVEH");
	                SetPlayerPosEx(playerid, Dealerships[id3][0], Dealerships[id3][1], Dealerships[id3][2]);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetCameraBehindPlayer(playerid);
			        TogglePlayerControllableEx(playerid, true);
			        DeletePVar(playerid, "LOADDEAL");

			        switch(vehmdl)
			        {
			            case 1: // Vehicle NORMAL Dealership
			            {
			                carmdl=VehDealership[id2][0];
			                price=VehDealership[id2][1];
			                //tls=VehDealership[id2][2];
			            }
			            case 2: // Vehicle GROTTI Dealership
			            {
			                carmdl=GrotDealership[id2][0];
			                price=GrotDealership[id2][1];
			                //tls=GrotDealership[id2][2];
			            }
			            case 3: // Vehicle BIKE Dealership
			            {
			                carmdl=BikeDealership[id2][0];
			                price=BikeDealership[id2][1];
		                    //tls=BikeDealership[id2][2];
			            }
			            case 4: // Vehicle BOAT Dealership
			            {
			                carmdl=BoatDealership[id2][0];
			                price=BoatDealership[id2][1];
		                    //tls=BikeDealership[id2][2];
			            }
			            case 5: // Vehicle INDUSTRIAL Dealership
			            {
			                carmdl=IndustrialDealership[id2][0];
			                price=IndustrialDealership[id2][1];
			            }
			        }
			        if(GetPVarInt(playerid, "CarTicket") >= 1)
			        {
			            if(price >= 150000) price -=150000, SetPVarInt(playerid, "CTU", 2);
			            else price = 0, SetPVarInt(playerid, "CTU", 1);
			        }
	                if(GetPlayerMoneyEx(playerid) >= price)
	                {
			           // if(GetPVarInt(playerid, "ConnectTime") >= tls)
				        //{
				            new query[75];
				            mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
				            mysql_pquery(handlesql, query, "OnDealershipVehicleBought", "iiiii", playerid, carmdl, id3, col, price);
				        //}
				        //else SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS!");
                    }
	                else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		        }
		    }
		}
		case 38: // Cellphone Dialog
	    {
            switch(listitem)
	        {
	            case 0: // Call Number
	            {
	                if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_ERROR, "You are already on a call."), cmd_cellphone(playerid, "");
	                if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this while handcuffed/tazed."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid,COLOR_ERROR,"WARNING: You are currently muted."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead."), cmd_cellphone(playerid, "");
                    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water"), cmd_cellphone(playerid, "");
	                ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	            }
	            case 1: // Contacts
	            {
                    if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_ERROR, "You are already on a call."), cmd_cellphone(playerid, "");
	                if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this while handcuffed/tazed."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid,COLOR_ERROR,"WARNING: You are currently muted."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead."), cmd_cellphone(playerid, "");
                    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water"), cmd_cellphone(playerid, "");
                    
                    new dialog_text[1024];

               		for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
					{
						if(strlen(PlayerContacts[playerid][i][pContactName]) != 0 || strlen(PlayerContacts[playerid][i][pContactNumber]) != 0)
						{
							if(strlen(PlayerContacts[playerid][i][pContactName]) == 0)
							{
								format(dialog_text, sizeof(dialog_text), "%s%i: %s\n", dialog_text, i + 1, PlayerContacts[playerid][i][pContactNumber]);
							}
							else if(strlen(PlayerContacts[playerid][i][pContactNumber]) == 0)
							{
								format(dialog_text, sizeof(dialog_text), "%s%i: %s\n", dialog_text, i + 1, PlayerContacts[playerid][i][pContactName]);
							}
							else
							{
								format(dialog_text, sizeof(dialog_text), "%s%i: %s (%s)\n", dialog_text, i + 1, PlayerContacts[playerid][i][pContactName], PlayerContacts[playerid][i][pContactNumber]);
							}
						}
						else
						{
							format(dialog_text, sizeof(dialog_text), "%s{5F5F5F}%i: EMPTY SLOT\n", dialog_text, i + 1);
						}
					}

					ShowPlayerDialogEx(playerid, 42, DIALOG_STYLE_LIST, "Contacts", dialog_text, "Select", "Edit");
	            }
	            case 2: // Text Message
	            {
	                if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_ERROR, "You are already on a call."), cmd_cellphone(playerid, "");
	                if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "You can't do this while handcuffed/tazed."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid,COLOR_ERROR,"WARNING: You are currently muted."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead."), cmd_cellphone(playerid, "");
                    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water"), cmd_cellphone(playerid, "");
	                ShowPlayerDialogEx(playerid, 40, DIALOG_STYLE_INPUT, "Texting", "Enter the number you would like to text.", "Enter", "Go Back");
	            }
	            case 3: // Pickup Call
	            {
					new found = 0;
	                foreach(new i : Player)
	                {
	                    if(GetPVarInt(i, "PlayerLogged") == 1)
		                {
		                    if(GetPVarInt(i, "Mobile") == playerid)
		                    {
		                        found++;
		                        SetPVarInt(playerid, "Mobile", i);
		                        SetPVarInt(playerid, "RingTone", 0);
		                        SetPVarInt(playerid, "RingPhone", 0);
		                        SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingPhone", 0);
				                SendClientMessage(playerid, COLOR_WHITE, "Call picked up.");
				                SendClientMessage(i, COLOR_PHONE, "They picked up the call.");
		                        CellphoneState(playerid, 1);
		                        DeletePVar(playerid, "CellMenu");
		                        CallRemoteFunction("LoadRadios","i", playerid);
		                        CallRemoteFunction("LoadRadios","i", i);
	                        }
	                    }
                	}
                	if(found == 0) SendClientMessage(playerid, COLOR_ERROR, "You are not on any phone call."), cmd_cellphone(playerid, "");
	            }
	            case 4: // SPEAKER
	            {
	                switch(GetPVarInt(playerid, "Speaker"))
                    {
                        case 0:
                        {
                            SetPVarInt(playerid, "Speaker", 1);
    	                    GameTextForPlayer(playerid, "~w~Speaker ~g~On", 5000, 6);
                        }
                        case 1:
                        {
                            SetPVarInt(playerid, "Speaker", 0);
    	                    GameTextForPlayer(playerid, "~w~Speaker ~r~Off", 5000, 6);
                        }
                    }
                    DeletePVar(playerid, "ContactNum");
	                DeletePVar(playerid, "CellMenu");
	                CellphoneState(playerid, 2);
	            }
	            case 5: // Pocket Phone
	            {
	                DeletePVar(playerid, "ContactNum");
	                DeletePVar(playerid, "CellMenu");
                    if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL)
                    {
                        if(GetPVarInt(playerid, "Mobile") < INVALID_MAXPL)
                        {
                            SendClientMessage(playerid, COLOR_ERROR, "You hung up.");
                            SendClientMessage(GetPVarInt(playerid, "Mobile"), COLOR_ERROR, "The person on the other line has ended the call.");
                            if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "CellMenu") == 0) CellphoneState(GetPVarInt(playerid, "Mobile"),2);
                            SetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile", INVALID_MAXPL);
                            SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingTone", 0);
                            SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingPhone", 0);
                            CellphoneState(playerid,2);
      	                    if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "PayPhone") == 0)
      	                    {
			                    TogglePlayerControllableEx(GetPVarInt(playerid, "Mobile"),true);
				                DeletePVar(GetPVarInt(playerid, "Mobile"),"PayPhone");
                                DeletePVar(GetPVarInt(playerid, "Mobile"),"PhoneID");
		                    }
		                    CallRemoteFunction("LoadRadios","i", playerid);
		                    CallRemoteFunction("LoadRadios","i", GetPVarInt(playerid, "Mobile"));
		                    SetPVarInt(playerid, "Mobile", INVALID_MAXPL); // Disable the phone call.
		                    SetPVarInt(playerid, "RingPhone", 0);
		                    return 1;
		                }
                    }
                    foreach(new i : Player)
                    {
                        if(GetPVarInt(i, "Mobile") == playerid)
                        {
                            SetPVarInt(i, "RingTone", 0);
                            SetPVarInt(i, "RingPhone", 0);
                            SetPVarInt(i, "Mobile", INVALID_MAXPL); // Disable the phone call.
                            SendClientMessage(i, COLOR_PHONE, "They hung up.");
	                        if(GetPVarInt(i, "CellMenu") == 0)
	                        {
							    CellphoneState(i,2);
							}
							CallRemoteFunction("LoadRadios","i", i);
                        }
                    }
                    SetPVarInt(playerid, "RingTone", 0);
                    SetPVarInt(playerid, "RingPhone", 0);
                    SetPVarInt(playerid, "Mobile", INVALID_MAXPL); // Disable the phone call.
	                CellphoneState(playerid,2);
	                CallRemoteFunction("LoadRadios","i", playerid);
	            }
	        }
		}
		case 39: // Cellphone Calling
		{
        	if(!response)return cmd_cellphone(playerid, "");
			CallNumber(playerid, inputtext);
		}
		case 40: // Cellphone Texting FIND NUMBER
		{
		    switch(response)
	        {
	            case 0: cmd_cellphone(playerid, "");
	            case 1:
	            {
	                if(!strlen(inputtext))
	                {
	                    ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
						return 1;
	                }
	                if(strlen(inputtext) >= 15)
	                {
					    SendClientMessage(playerid, COLOR_WHITE, "Number is too long (15 Chars max).");
					    ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
					    return 1;
					}
	                foreach(new i : Player)
					{
		    			if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		    			{
							format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
							if(strcmp(string, inputtext, true) == 0)
							{
							    if (i == playerid) ShowPlayerDialogEx(playerid,110,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
							    format(sendername, sizeof(sendername), "%s", PlayerNameEx(i));
      	    				    GiveNameSpace(sendername);
      	    				    format(string, sizeof(string),"Enter the message you would like to send to %s.", sendername);
      	    				    ShowPlayerDialogEx(playerid,41,DIALOG_STYLE_INPUT,"Texting",string,"Enter", "Go Back");
		    				    strmid(PlayerInfo[playerid][pCellname], inputtext, 0, strlen(inputtext), 255);
							    return true;
							}
					    }
					}
					SendClientMessage(playerid, COLOR_ERROR, "Could not find anyone with that number."), ShowPlayerDialogEx(playerid,110,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	            }
			}
		}
		case 41: // Cellphone Texting SEND MESSAGE
		{
		    if(!response) return cmd_cellphone(playerid, "");
			SmsNumber(playerid, PlayerContacts[playerid][GetPVarInt(playerid, "SelectedContact")][pContactNumber], inputtext);
		}
		case 42: //Contact selected
		{
			if(response)
			{
				SetPVarInt(playerid, "SelectedContact", listitem);
    			ShowPlayerDialogEx(playerid, 43, DIALOG_STYLE_MSGBOX, "Contacts", "Select your option.", "Call", "Text");
			}
			else
			{
			    SetPVarInt(playerid, "SelectedContact", listitem);
			    ShowPlayerDialogEx(playerid, 44, DIALOG_STYLE_MSGBOX, "Contacts", "What would you like to edit?", "Name", "Number");
			}
		}
		case 43: //Call or text contact
		{
		    if(!response)
		    {
				new found = 0;

				foreach(new i : Player)
				{
		    	    if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		    		{
					    format(string, 64, "%d", GetPVarInt(i, "PhoneNum"));
						if(strcmp(string, PlayerContacts[playerid][GetPVarInt(playerid, "SelectedContact")][pContactNumber], true) == 0 && 
							strlen(PlayerContacts[playerid][GetPVarInt(playerid, "SelectedContact")][pContactNumber]) != 0 &&
							strlen(string) != 0)
						{
						    found++;
							format(sendername, sizeof(sendername), "%s", PlayerNameEx(i));
      	    				GiveNameSpace(sendername);
      	    				format(string, sizeof(string),"Enter the message you would like to send to %s.", sendername);
      	    				ShowPlayerDialogEx(playerid, 41, DIALOG_STYLE_INPUT, "Texting", string, "Enter", "Go Back");
		    				return true;
					    }
				    }
				}
				if(found == 0)
				{
				    SendClientMessage(playerid, COLOR_ERROR, "Could not find anyone with that number.");
				    ShowPlayerDialogEx(playerid,41,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
				}
		    }
		    else
		    {
				CallNumber(playerid, PlayerContacts[playerid][GetPVarInt(playerid, "SelectedContact")][pContactNumber]);
		    }
		}
		case 44: //Edit contact
		{
		    if(!response) //Number
		    {
		        ShowPlayerDialogEx(playerid, 45, DIALOG_STYLE_INPUT, "Contact", "Insert the number you'd like to assign to this slot.", "Select","Cancel");
		    }
		    if(response) //Name
		    {
		        ShowPlayerDialogEx(playerid, 46, DIALOG_STYLE_INPUT, "Contact", "Insert the name you'd like to assign to this slot.","Select","Cancel");
		    }
		}
		case 45: //Edit number
		{
		    if(!response) return cmd_cellphone(playerid, "");

		    if(strlen(inputtext) <= 0 || isnull(inputtext))
		    {
		    	SendClientMessage(playerid, COLOR_ERROR, "Invalid number.");
		    	ShowPlayerDialogEx(playerid, 45, DIALOG_STYLE_INPUT, "Contact", "Insert the number you'd like to assign to this slot.", "Select","Cancel");
		    	return 1;
		    }

		    if(strlen(inputtext) > 32)
		    {
		    	SendClientMessage(playerid, COLOR_ERROR, "Your contact's number can't be any longer than 32 numbers.");
		    	ShowPlayerDialogEx(playerid, 45, DIALOG_STYLE_INPUT, "Contact", "Insert the number you'd like to assign to this slot.", "Select","Cancel");
		    	return 1;
		    }
		    
		    format(PlayerContacts[playerid][GetPVarInt(playerid, "SelectedContact")][pContactNumber], 64, "%s", inputtext);
		    SendClientMessage(playerid, COLOR_WHITE, "Contact number edited.");
            cmd_cellphone(playerid, "");
		}
		case 46: //Edit name
		{
		    if(!response) return cmd_cellphone(playerid, "");

		    if(strlen(inputtext) <= 0 || isnull(inputtext))
		    {
		    	SendClientMessage(playerid, COLOR_ERROR, "Invalid number.");
		    	ShowPlayerDialogEx(playerid, 46, DIALOG_STYLE_INPUT, "Contact", "Insert the name you'd like to assign to this slot.","Select","Cancel");
		    	return 1;
		    }

		    if(strlen(inputtext) > 32)
		    {
		    	SendClientMessage(playerid, COLOR_ERROR, "Your contact's name can't be any longer than 32 numbers.");
		    	ShowPlayerDialogEx(playerid, 46, DIALOG_STYLE_INPUT, "Contact", "Insert the name you'd like to assign to this slot.","Select","Cancel");
		    	return 1;
		    }

			format(PlayerContacts[playerid][GetPVarInt(playerid, "SelectedContact")][pContactName], 64, "%s", inputtext);
		    SendClientMessage(playerid, COLOR_WHITE, "Contact name edited.");
            cmd_cellphone(playerid, "");
		}
		case 54: // Hospital Floor
	    {
			new Float:X = 0.0, Float:Y = 0.0, Float:Z = 0.0;
	        switch(listitem)
	        {
	            case 0:
	            {
	                X=2038.4750;
	                Y-=1365.0499;
	                Z=1271.5000;
	            }
	            case 1:
	            {
	                X=2055.4756;
	                Y-=673.1822;
	                Z=1478.8860;
	            }
	            case 2:
	            {
	                X=1994.9702;
	                Y-=1534.0613;
	                Z=1174.6000;
	            }
	        }
	        TogglePlayerControllableEx(playerid, false);
	        SetPlayerPosEx(playerid, X, Y, Z);
	        SetTimerEx("TogglePlayerControllableEx", 3000, false, "ii", playerid, true);
	        Streamer_Update(playerid);
	    }
	    case 55: // BZIZ RADIO
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: // Radio Stations
		        {
		            new result[5000];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 5000, "%s", CarRadio[i][cName]); }
			            else { format(result, 5000, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialogEx(playerid,56,DIALOG_STYLE_LIST,"Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Download Link
		        {
		            ShowPlayerDialogEx(playerid, 57, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link in order to start the stream.", "Enter", "Go Back");
		        }
		        case 2: // Turn Off
		        {
		            strmid(BizInfo[GetPVarInt(playerid, "BizKey")][bRadio], "None", 0, strlen("None"), 255);
		            GameTextForPlayer(playerid, "~w~Radio~n~~r~OFF", 4000, 3);
		            foreach(new i : Player)
		            {
		                if(GetPVarInt(i, "BizEnter") == GetPVarInt(playerid, "BizKey"))
		                {
		                    StopAudioStreamForPlayerEx(i);
		                }
		            }
		        }
		    }
		}
		case 56:
		{
		    if(!response) return cmd_biz(playerid, "radio");
		    PlayBizRadio(GetPVarInt(playerid, "BizKey"), CarRadio[listitem][cURL]);
		}
		case 57:
		{
		    if(!response) return cmd_biz(playerid, "radio");
		    if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, 57, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialogEx(playerid, 57, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
		    PlayBizRadio(GetPVarInt(playerid, "BizKey"), inputtext);
		}
		case 58:
		{
		    if(response != 1) return DeletePVar(playerid, "RadioInfoID");
		    id = GetPVarInt(playerid, "RadioInfoID");
		    switch(listitem)
	        {
	        	case 0: // Radio Stations
		        {
		            new result[5000];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 5000, "%s", CarRadio[i][cName]); }
			            else { format(result, 5000, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialogEx(playerid, 60, DIALOG_STYLE_LIST, "Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Link
		        {
		            ShowPlayerDialogEx(playerid, 59, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
		        }
		        case 2: // Direct Link
		        {
		            ShowPlayerDialogEx(playerid, 62, DIALOG_STYLE_INPUT, "YouTube URL", "Enter the YouTube URL you would like to play.", "Enter", "Go Back");
		        }
		        case 3: // Toggle ON/OFF
		        {
		            DeletePVar(playerid, "RadioInfoID");
				    switch(RadioInfo[id][rStatus])
				    {
				        case 0:
				        {
				            if(strcmp(RadioInfo[id][rURL], "NULL", true) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You must enter a URL or select a station before turning the radio on!");
				            SendClientMessage(playerid, COLOR_WHITE, "Radio on!");
				            RadioInfo[id][rStatus]=1;
				        }
				        case 1:
				        {
							SendClientMessage(playerid, COLOR_WHITE, "Radio off!");
							RadioInfo[id][rStatus]=0;
							foreach(new i : Player)
							{
								if(IsPlayerInRangeOfPoint(i, MAX_BOOM_BOX_RANGE, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ]))
								{
								    StopAudioStreamForPlayerEx(i);
								}
							}
				        }
				    }
		        }
		        case 4:
		        {
		        	DeletePVar(playerid, "RadioInfoID");
	                SendClientMessage(playerid, COLOR_ERROR, "Radio removed.");
	                if(RadioInfo[id][rStatus] != 0)
	                {
	                    foreach(new ia : Player)
					    {
				            if(IsPlayerInRangeOfPoint(ia, MAX_BOOM_BOX_RANGE, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ]))
							{
						        StopAudioStreamForPlayerEx(ia);
						    }
						}
	                }

	                RadioInfo[id][rX] = 0.0;
		            RadioInfo[id][rY] = 0.0;
		            RadioInfo[id][rZ] = 0.0;
		            RadioInfo[id][rStatus] = 0;
		            RadioInfo[id][rAreaID] = 0;
		            strmid(RadioInfo[id][rOwner], "None", 0, strlen("None"), 255);
		            strmid(RadioInfo[id][rURL], "None", 0, strlen("None"), 255);
		            if(IsValidDynamicObject(RadioInfo[id][rObject])) DestroyDynamicObject(RadioInfo[id][rObject]);
		            RadioInfo[id][rObject]=0;
                    DestroyDynamic3DTextLabel(RadioInfo[id][rText]);
		        }
	        }
		}
		case 59:
		{
		    if(response != 1) return DeletePVar(playerid, "RadioInfoID");
		    id = GetPVarInt(playerid, "RadioInfoID");
		    format(RadioInfo[id][rURL], 256, "%s", inputtext);
		    if(RadioInfo[id][rStatus] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Radio URL has been set. (the radio can now be turned on)");
            foreach(new i : Player)
			{
			    if(IsPlayerInRangeOfPoint(i, MAX_BOOM_BOX_RANGE, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ]))
				{
				    PlayAudioStreamForPlayerEx(i, RadioInfo[id][rURL], RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], MAX_BOOM_BOX_RANGE, 1);
				}
		    }
		}
		case 60:
		{
		    if(response != 1) return DeletePVar(playerid, "RadioInfoID");
		    id = GetPVarInt(playerid, "RadioInfoID");
		    format(RadioInfo[id][rURL], 256, "%s", CarRadio[listitem][cURL]);
		    if(RadioInfo[id][rStatus] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Radio URL has been set. (the radio can now be turned on)");
            foreach(new i : Player)
			{
			    if(IsPlayerInRangeOfPoint(i, MAX_BOOM_BOX_RANGE, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ]))
				{
				    PlayAudioStreamForPlayerEx(i, RadioInfo[id][rURL], RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], MAX_BOOM_BOX_RANGE, 1);
				}
		    }
		}
		case 61: // yt link for biz
		{
			if(!response) return cmd_biz(playerid, "radio");
		    if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, 61, DIALOG_STYLE_INPUT, "YouTube URL", "Enter the YouTube URL you would like to play.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialogEx(playerid, 61, DIALOG_STYLE_INPUT, "YouTube URL", "Enter the YouTube URL you would like to play.", "Enter", "Go Back");

	        GetDownloadFromYouTubeLink(playerid, STREAM_TYPE_BUSINESS, GetPVarInt(playerid, "BizKey"), inputtext);
		}
		case 62: // yt link for plantradio
		{
	        if(response != 1) return DeletePVar(playerid, "RadioInfoID");

		    GetDownloadFromYouTubeLink(playerid, STREAM_TYPE_PLANT_RADIO, GetPVarInt(playerid, "RadioInfoID"), inputtext);
		}
		case 63: // yt link for house
		{
		    if(!response) return cmd_house(playerid, "radio");
		    if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, 63, DIALOG_STYLE_INPUT, "YouTube URL", "Enter the YouTube URL you would like to play.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialogEx(playerid, 63, DIALOG_STYLE_INPUT, "YouTube URL", "Enter the YouTube URL you would like to play.", "Enter", "Go Back");
		    
		    GetDownloadFromYouTubeLink(playerid, STREAM_TYPE_HOUSE, GetPVarInt(playerid, "HouseKey"), inputtext);
		}
	    case 64: // /holdo dialog
	    {
	        switch(response)
	        {
	            case 1:
	            {
	                SendClientMessage(playerid, COLOR_ERROR, "WARNING: Make sure the object is properly roleplayed or you will be ajailed.");
	                switch(listitem)
		            {
		                case 0: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 2114, 6, 0.075940, 0.160764, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 1: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 1210, 6, 0.291194, 0.091378, 0.058045, 4.921525, 258.763824, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 2: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 1212, 6, 0.105605, 0.043076, 0.019798, 0.000000, 265.589691, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 3: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 2881, 6, -0.028293, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 4: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 2880, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 5: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 18632, 6, 0.087079, 0.048070, 0.031638, 185.621994, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 6: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 338, 6, 0.0, 0.0, 0.0);
		                case 7: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 366, 6, 0.0, 0.0, 0.0);
		                case 8: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 1277, 6, 0.074097, 0.016038, 0.009600, 359.580230, 350.386047, 14.481473, 0.250683, 1.000000, 0.250702);
		                case 9: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 2103, 6, 0.347276, 0.018217, 0.056332, 15.577089, 265.794799, 0.000000, 0.719023, 1.000000, 0.554738);
		                case 10: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 19078, 4, -0.054276, 0.000000, 0.028016, 195.591888, 204.274688, 0.000000, 0.748166, 1.000000, 0.740877);
		                case 11: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 18641, 5, 0.091820, 0.024471, -0.033493, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 12: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 18644, 6, 0.077635, 0.014523, 0.000000, 174.836212, 7.079411, 0.000000, 1.008414, 1.000000, 0.747666);
		                case 13: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 18635, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 14: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 19087, 6, 0.058083, 0.008219, 0.472783, 0.000000, 0.000000, 0.000000, 1.674143, 1.000000, 0.327090);
		                case 15: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 339, 6, 0.0, 0.0, 0.0);
		                case 16: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 341, 6, 0.0, 0.0, 0.0);
		                case 17: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 932, 1, -0.780373, 0.043744, 0.089657, 188.440246, 92.957847, 355.417968, 1.000000, 1.000000, 1.000000);
		                case 18: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 18634, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		                case 19: SetPlayerAttachedObject(playerid, HOLDOBJECT_ITEM2, 18633, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		            }
	            }
			}
		}
		case 65:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 2) CreateEMSVehicle(playerid, 544, 3, 3);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 1:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 2) CreateEMSVehicle(playerid, 407, 3, 3);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 2: CreateEMSVehicle(playerid, 416, 1, 3);
		        case 3: CreateEMSVehicle(playerid, 416, 3, 1);
		        case 4: CreateEMSVehicle(playerid, 416, 3, 3);
		        case 5:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 8) CreateEMSVehicle(playerid, 427, 3, 1);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 6:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 8) CreateEMSVehicle(playerid, 490, 3, 3);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 7:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 4) CreateEMSVehicle(playerid, 563, 3, 1);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 8:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 487, 3, 1);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 9:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 5) CreateEMSVehicle(playerid, 427, 3, 6);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 10:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 5) CreateEMSVehicle(playerid, 579, 3, 3);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 11:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 5) CreateEMSVehicle(playerid, 426, 3, 3);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		        case 12:
		        {
		            if(GetPVarInt(playerid, "Rank") >= MaxRank(GetPVarInt(playerid, "Member"))) CreateEMSVehicle(playerid, 579, 0, 0);
				    else SendClientMessage(playerid,COLOR_ERROR,"You are not high enough rank to do this.");
		        }
		    }
		}
		case 66: // SEXSHOP DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 7), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(SexItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		case 67: // WAREHOUSE DIALOG
		{
		    if(!response) return true;
		    new pawnprice;
		    if(listitem >= sizeof(WarItems)) {
		        if(listitem == sizeof(WarItems)) { // Pawn a Watch
		            if (!CheckInvItem(playerid, 404)) return scm(playerid, -1, "You don't have a watch to pawn.");
		            pawnprice=125;
		            format(string, sizeof(string),"~g~%s", FormatMoney(pawnprice));
          		    GameTextForPlayer(playerid, string, 5000, 1);
             	    GivePlayerMoneyEx(playerid, pawnprice);
             	    format(string, sizeof(string),"Watch pawned for %s!", FormatMoney(pawnprice));
             	    scm(playerid, COLOR_LIGHTBLUE, string);
             	    RemoveInvItem(playerid, GetInvSlotFromID(playerid, 404));
		        }
		        if(listitem == sizeof(WarItems)+1) { // Pawn a Cellphone
		            if (!CheckInvItem(playerid, 405)) return scm(playerid, -1, "You don't have a cellphone to pawn.");
		            pawnprice=210;
		            format(string, sizeof(string),"~g~%s", FormatMoney(pawnprice));
          		    GameTextForPlayer(playerid, string, 5000, 1);
             	    GivePlayerMoneyEx(playerid, pawnprice);
             	    format(string, sizeof(string),"Cellphone pawned for %s!", FormatMoney(pawnprice));
             	    scm(playerid, COLOR_LIGHTBLUE, string);
             	    RemoveInvItem(playerid, GetInvSlotFromID(playerid, 405));
		        }
		        if(listitem == sizeof(WarItems)+2) { // Pawn a MP3 Player
		            if (!CheckInvItem(playerid, 408)) return scm(playerid, -1, "You don't have a MP3 player to pawn.");
		            pawnprice=75;
		            format(string, sizeof(string),"~g~%s", FormatMoney(pawnprice));
          		    GameTextForPlayer(playerid, string, 5000, 1);
             	    GivePlayerMoneyEx(playerid, pawnprice);
             	    format(string, sizeof(string),"MP3 Player pawned for %s!", FormatMoney(pawnprice));
             	    scm(playerid, COLOR_LIGHTBLUE, string);
             	    RemoveInvItem(playerid, GetInvSlotFromID(playerid, 408));
		        }
		        return 1;
		    }

		    if(WarItems[listitem][0] == 428 && GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a house.");
		    if(WarItems[listitem][0] == 429 && GetPVarInt(playerid, "BizKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not own a business.");
		    if(WarItems[listitem][0] == 430)
	    	{
	    		new query[128];
				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
				mysql_pquery(handlesql, query, "OnCheckWarehouseVehicle", "ii", playerid, listitem);
				return 1;
	    	}

		    SetPVarInt(playerid, "PDBT", 8), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(WarItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		case 68: // HOUSE RADIO
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: // Radio Stations
		        {
		            new result[5000];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 5000, "%s", CarRadio[i][cName]); }
			            else { format(result, 5000, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialogEx(playerid,69,DIALOG_STYLE_LIST,"Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Link
		        {
		            ShowPlayerDialogEx(playerid, 70, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
		        }
		        case 2: // Turn Off
		        {
		            strmid(HouseInfo[GetPVarInt(playerid, "HouseKey")][hRadioU], "None", 0, strlen("None"), 255);
		            GameTextForPlayer(playerid, "~w~Radio~n~~r~OFF", 4000, 3);
		            foreach(new i : Player)
		            {
		                if(GetPVarInt(i, "HouseEnter") == GetPVarInt(playerid, "HouseKey"))
		                {
		                    StopAudioStreamForPlayerEx(i);
		                }
		            }
		        }
		    }
		}
		case 69:
		{
		    if(!response) return cmd_house(playerid, "radio");
		    PlayHouseRadio(GetPVarInt(playerid, "HouseKey"), CarRadio[listitem][cURL]);
		}
		case 70:
		{
		    if(!response) return cmd_house(playerid, "radio");
		    if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, 70, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialogEx(playerid, 70, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
		    PlayHouseRadio(GetPVarInt(playerid, "HouseKey"), inputtext);
		}
		case 71: // FISH STORE
		{
			if(!response) return true;
			if(listitem == sizeof(FishItems)) // Sell fish
			{
				if(!CheckInvItem(playerid, 421) && !CheckInvItem(playerid, 422) && !CheckInvItem(playerid, 423) && !CheckInvItem(playerid, 424) &&
					!CheckInvItem(playerid, 425) && !CheckInvItem(playerid, 426) && !CheckInvItem(playerid, 427)) return scm(playerid, -1, "You don't have any fish to sell.");
		       	new fishprice = 0;

		       	for(new i = 0; i < MAX_INV_SLOTS; i++)
				{
					if(PlayerInfo[playerid][pInvItem][i] == 421)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 55 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 421));
					}
					if(PlayerInfo[playerid][pInvItem][i] == 422)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 75 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 422));
					}
					if(PlayerInfo[playerid][pInvItem][i] == 423)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 65 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 423));
					}
					if(PlayerInfo[playerid][pInvItem][i] == 424)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 80 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 424));
					}
					if(PlayerInfo[playerid][pInvItem][i] == 425)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 75 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 425));
					}
					if(PlayerInfo[playerid][pInvItem][i] == 426)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 75 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 426));
					}
					if(PlayerInfo[playerid][pInvItem][i] == 427)
					{
						fishprice += (PlayerInfo[playerid][pInvQ][i] * 350 * JOB_FISHING_MULTIPLIER);
						RemoveInvItem(playerid, GetInvSlotFromID(playerid, 427));
					}
				}

		        format(string, sizeof(string),"~g~%s", FormatMoney(fishprice));
          		GameTextForPlayer(playerid, string, 5000, 1);
             	GivePlayerMoneyEx(playerid, fishprice);
             	format(string, sizeof(string),"Fish sold for %s!", FormatMoney(fishprice));
             	scm(playerid, COLOR_LIGHTBLUE, string);
			}
			else
			{
				SetPVarInt(playerid, "PDBT", 11), SetPVarInt(playerid, "PDBTLI", listitem);
			    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(FishItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
			    //ShowPlayerDialog(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
			    ConfigPayment(playerid, 1, string);
			}
		}
		case 72: // Walkstyle dialog
	    {
	        switch(response)
	        {
	            case 0: cmd_options(playerid, "");
	            case 1: // Selecting
	            {
	                cmd_options(playerid, "");
					switch(listitem)
					{
					     case 0: SetPlayerWalkStyle(playerid,WALKSTYLE_GANG1);
					     case 1: SetPlayerWalkStyle(playerid,WALKSTYLE_GANG2);
					     case 2: SetPlayerWalkStyle(playerid,WALKSTYLE_NORMAL);
					     case 3: SetPlayerWalkStyle(playerid,WALKSTYLE_SEXY);
					     case 4: SetPlayerWalkStyle(playerid,WALKSTYLE_OLD);
					     case 5: SetPlayerWalkStyle(playerid,WALKSTYLE_SNEAK);
					     case 6: SetPlayerWalkStyle(playerid,WALKSTYLE_BLIND);
					     case 7: SetPlayerWalkStyle(playerid,WALKSTYLE_ARMED);
					     case 8: SetPlayerWalkStyle(playerid,WALKSTYLE_POLICE);
					     case 9: SetPlayerWalkStyle(playerid,WALKSTYLE_FEMALE);
					     case 10: SetPlayerWalkStyle(playerid,WALKSTYLE_FAT);
					     case 11: SetPlayerWalkStyle(playerid,WALKSTYLE_MUSCLE);
					     case 12: RemovePlayerWalkStyle(playerid);
					}
	            }
	        }
	    }
	    case 73: {
		    if(GetPVarInt(playerid, "RentKey") != 0) return SendClientMessage(playerid, COLOR_ERROR, "ERROR: You already rent a vehicle, (/unrent)!");
			if(GetPlayerMoneyEx(playerid) >= 50)
			{
			    if(GetPlayerScore(playerid) > 8){
				    GivePlayerMoneyEx(playerid, -50);
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your $50 purchase!");
				}
				
				SendClientMessage(playerid, COLOR_WHITE, "To unrent your rental vehicle type (/unrent).");
				new found = 0, foundid = 0;
				for(new r = 0; r < sizeof(RentalSpot); r++) {
				    if(IsPlayerInRangeOfPoint(playerid, 20.0, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2])) {
					    if(found == 0) {
						    found++;
							foundid=r;
					    }
				    }
				}
				
				new veh;
				new rancol = random(200) + 1;
				veh = CreateVehicle(gRentalIDs[listitem][0], RentalSpot[foundid][3], RentalSpot[foundid][4], RentalSpot[foundid][5], RentalSpot[foundid][6], rancol,rancol, -1);
				Iter_Add(VehicleIterator, veh);
				VehicleInfo[veh][vFuel] = 100, VehicleInfo[veh][vEngine]=0;
    			VehicleInfo[veh][vWindows] = 0, VehicleInfo[veh][vID]=0;
    			VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vCreated]=1;
				VehicleInfo[veh][vType] = VEHICLE_RENTAL, VehicleInfo[veh][vJob]=0;
				VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vLock] = 0;
				VehicleInfo[veh][vEngineStats][1] = 1;
				VehicleInfo[veh][vEngineStats][2] = 1;
				VehicleInfo[veh][vBattery][1] = 1;
				VehicleInfo[veh][vBattery][2] = 1;
				SetVehicleNumberPlate(veh, PrintVehiclePlate(GenerateRandomVehiclePlate()));
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, alarm, 0, bonnet, boot, objective);
    			SetVehicleToRespawn(veh);
				SetPVarInt(playerid, "RentKey", veh);
		        PutPlayerInVehicleEx(playerid, veh, 0);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		/*case 74: // House Furniture Dialog
	    {
			if(!response) return true;
			new objectid=FurnitureObject[listitem][fmodel], Float:X, Float:Y, Float:Z, obj = 0;
			GetPlayerPos(playerid, X, Y, Z);
			obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
			SetPVarInt(playerid, "FurnObject", obj);
			SetPVarInt(playerid, "EditorMode", 1);
			SetPVarInt(playerid, "Mute", 1);
			SetPVarInt(playerid, "FurnID", listitem);
			EditPlayerObject(playerid, obj);
			format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", );
			SendClientMessage(playerid, COLOR_WHITE, string);
		}*/
		case 75: // House Furniture AGREEMENT Dialog
	    {
	        if(!response) return true;
	        new keyex = FurnRight(playerid, 1);
            if(keyex <= 0) return true;
            new cost = 250;
            if(GetPVarInt(playerid, "MonthDon") > 0) { cost = 0; }
			if(GetPlayerMoneyEx(playerid) >= cost)
         	{
         	    if(GetPlayerInterior(playerid) == 0)
				{
             	    new Float:radius;
             	    radius = GetDistanceFromPointToPoint(PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], HouseInfo[keyex][hXo], HouseInfo[keyex][hYo], HouseInfo[keyex][hZo]);
             	    if(radius > HOUSE_PLANT_DISTANCE)
             	    {
             	        scm(playerid, COLOR_ERROR, "WARNING: Object is too far from the property and could not be planted!");
             	        return 1;
             	    }
             	    else
             	    {
						new found = 0;
             	        
             	        for(new i = 0; i < sizeof(FurnObjs); i++)
	                    {
                            if(PlayerInfo[playerid][pFurnID] == FurnObjs[i])
                            {
							    found++;
                            }
	                    }

	                    if(found == 0)
	                    {
	                    	if(GetCount() > GetPVarInt(playerid, "OutDelay"))
	                    	{
	                    	//format(string, sizeof(string), "AdmWarn: %s has planted objectid: %d(%s) outside of houseid: %d.", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFurnID], GetObjName(PlayerInfo[playerid][pFurnID]), keyex);
                	    	//SendAdminMessage(COLOR_YELLOW,string);
                	    	SetPVarInt(playerid, "OutDelay", GetCount()+10000); }
							scm(playerid, COLOR_ERROR, "WARNING: Abusing the outdoor objects will result in a permanent ban!");
						}
             	    }
				}
          		format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);

             	GivePlayerMoneyEx(playerid, -cost);

           	    BuildHouseObject(playerid, PlayerInfo[playerid][pFurnID], PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], PlayerInfo[playerid][pFurnR][0], PlayerInfo[playerid][pFurnR][1], PlayerInfo[playerid][pFurnR][2]);
         	}
	        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	    }
	    case 76:
        {
            if(response)
            {
                new furnid = 0, furnitname[100];
				key = FurnRight(playerid, 1);
				if(key <= 0) return 1;
                furnitname="N/A";
				for(new xe; xe < sizeof(FurnObjs); xe++)
                {
                    if(HouseInfo[key][hoID][GetPVarInt(playerid, "FurnEditH")] == FurnObjs[xe])
                    {
                        format(furnitname, 100, "%d", FurnObjs[xe]);
                        furnid=xe;
                        break;
		            }
                }
                //new priceex = 100;
                switch(listitem)
                {
                    case 0: // Edit Object
                    {
                        new obj = 0, h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
                        obj = CreatePlayerObject(playerid, HouseInfo[key2][hoID][h], HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h], 100.0);
                        SetPVarInt(playerid, "FurnObject", obj);
			            SetPVarInt(playerid, "EditorMode", 2);
			            SetPVarInt(playerid, "Mute", 1);
			            PlayerInfo[playerid][pFurnID] = furnid;
			            EditPlayerObject(playerid, obj);
			            format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", GetObjName(HouseInfo[key2][hoID][h]));
			            SendClientMessage(playerid, COLOR_WHITE, string);
                    }
					case 1: // Select Material
					{
					    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						SendClientMessage(playerid, COLOR_ERROR,"WARNING: Editing an invalid-layer MAY cause parts of the object to turn invisible, resetting the layers material will fix this.");
						ShowPlayerDialogEx(playerid, 503, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "Select", "Close");
					}
					case 2: // Reset Material
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						new i = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
						if(IsValidDynamicObject(HouseInfo[key2][hObject][i])) DestroyDynamicObject(HouseInfo[key2][hObject][i]);

						if(GetDistanceFromPointToPoint(HouseInfo[key2][hoX][i], HouseInfo[key2][hoY][i], HouseInfo[key2][hoZ][i], 
							HouseInfo[key2][hXo], HouseInfo[key2][hYo], HouseInfo[key2][hZo]) <= HOUSE_PLANT_DISTANCE)
						{
							HouseInfo[key2][hObject][i] = CreateDynamicObject(HouseInfo[key2][hoID][i], 
								HouseInfo[key2][hoX][i], HouseInfo[key2][hoY][i], HouseInfo[key2][hoZ][i], 
								HouseInfo[key2][horX][i], HouseInfo[key2][horY][i], HouseInfo[key2][horZ][i], 
								HouseInfo[key2][hVwOut]);
						}
						else
						{
							HouseInfo[key2][hObject][i] = CreateDynamicObject(HouseInfo[key2][hoID][i], 
								HouseInfo[key2][hoX][i], HouseInfo[key2][hoY][i], HouseInfo[key2][hoZ][i], 
								HouseInfo[key2][horX][i], HouseInfo[key2][horY][i], HouseInfo[key2][horZ][i], 
								HouseInfo[key2][hVwIn]);
						}

						format(string, sizeof(string), "Object %i's material has been reset.", HouseInfo[key2][hoID][i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						
						for(new i2 = 0; i2 < HOUSE_OBJECT_MATERIALS; i2++)
						{
							HouseMaterialInfo[key2][i][i2] = 0;
						}

						SaveFurn(key2);

						Streamer_Update(playerid);
					}
					case 3: // Copy Object
                    {
                    	new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);

                    	new found = 0, foundid;
		                for(new i = 0; i < MAX_OBJECT_ARRAY; i++)
		                {
							if(found == 0)
							{
		                        if(ObjectList[i][oID] == HouseInfo[key2][hoID][h])
		                        {
		                            found++;
		                            foundid=i;
		                            break;
		                        }
		                    }
		                }
		                if(found == 0) return scm(playerid, COLOR_ERROR, "Invalid Object ID!");

		                new obj = 0;

				        obj = CreatePlayerObject(playerid, HouseInfo[key2][hoID][h], 
							HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], 
							HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h]);

				        SetPVarInt(playerid, "FurnObject", obj);
				        SetPVarInt(playerid, "EditorMode", 1);
				        SetPVarInt(playerid, "Mute", 1);
				        PlayerInfo[playerid][pFurnID]=HouseInfo[key2][hoID][h];
				        EditPlayerObject(playerid, obj);
				        format(string, sizeof(string),"%s copied, use the SPRINT key to navigate.", ObjectList[foundid][oName]);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        AddPlayerTag(playerid, "(planting furniture)");
                    }
                    case 4: // Remove Object
                    {
                        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
                        new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
                        
                        RemoveHouseObject(key2, h);

		                format(string, sizeof(string), "%s removed.", furnitname);
		                SendClientMessage(playerid, COLOR_WHITE, string);
                    }
                }
            }
        }
        case 78:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: CreateGovVehicle(playerid, 560, 0, 0);
		        case 1: CreateGovVehicle(playerid, 405, 0, 0);
		        case 2: CreateGovVehicle(playerid, 490, 0, 0);
		        case 3: CreateGovVehicle(playerid, 409, 0, 0);
		    }
		}
		case 79: // GOV ARMOURY DIALOG
		{
		    if(!response) return true;
		    if(listitem == sizeof(GovItems))
		    {
		        ResetPlayerWeaponsEx(playerid);
		        SetPlayerArmourEx(playerid, 0.0);
				for(new p = 0; p < MAX_INV_SLOTS; p++)
				{
				    if(PlayerInfo[playerid][pInvItem][p] >= 22 && PlayerInfo[playerid][pInvItem][p] <= 41) // Weapons
				    {
					    RemoveInvItem(playerid, p);
					}

					if(PlayerInfo[playerid][pInvItem][p] >= 100 && PlayerInfo[playerid][pInvItem][p] <= 128) // Armmo
				    {
					    RemoveInvItem(playerid, p);
					}
				}
				return 1;
		    }
			else
			{
				if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");

			    switch(GovItems[listitem][0])
			    {
			        case 22 .. 41:
			        {
			            if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS!");
			        }
			        case 1000:
			        {
			        	SetPlayerArmourEx(playerid, 99.0);
			        	return 1;
			        }
			        case 1001:
			        {
			        	SetPlayerHealthEx(playerid, 99.0);
			        	return 1;
			        }
			    }
			    if(GetPVarInt(playerid, "Rank") >= GovItems[listitem][1])
			    {
			        if(GovItems[listitem][0] == 3) GiveInvItem(playerid, GovItems[listitem][0], 1, 0);
			        else if(GovItems[listitem][0] == 41) GiveInvItem(playerid, GovItems[listitem][0], 1000, 0);
			        else if(GovItems[listitem][0] == 43) GiveInvItem(playerid, GovItems[listitem][0], 50, 0);
			        else GiveInvItem(playerid, GovItems[listitem][0], PrintIQ(GovItems[listitem][0]), 0, GetPVarInt(playerid, "WepSerial"));
			        format(string, 128, "%s selected!", PrintIName(GovItems[listitem][0]), GovItems[listitem][1]);
			        SendClientMessage(playerid, COLOR_WHITE, string);
		        }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient rank!");
		    }
		}
		case 80:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: ShowPlayerDialogEx(playerid, 81, DIALOG_STYLE_INPUT, "Chat Style", "Select a prefered chatstyle animation for your character\nChoose from numbers (1-8)", "Enter", "Go Back");
		        case 1: ShowPlayerDialogEx(playerid,72,DIALOG_STYLE_LIST,"Walk Style","Gang 1\nGang 2\nNormal\nSexy\nOld\nSneaking\nBlind\nArmed\nPolice\nFemale\nFat\nMuscular\nRemove","Select", "Go Back");
		        case 2:
                {
		            cmd_options(playerid, "");
		            cmd_togpm(playerid, "");
		        }
		        case 3:
		        {
		            cmd_options(playerid, "");
		            cmd_toghud(playerid, "");
		        }
		        case 4:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "AudioT") == 0)
		            {
			            SetPVarInt(playerid, "AudioT", 1);
			            SCM(playerid, -1, "Audio toggled off.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "AudioT", 0);
			            SCM(playerid, -1, "Audio toggled on.");
		            }
		        }
		        case 5:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "AutoReload") == 0)
		            {
 			            SetPVarInt(playerid, "AutoReload", 1);
 			            SCM(playerid, -1, "Auto-reload toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "AutoReload", 0);
			            SCM(playerid, -1, "Auto-reload toggled ON.");
		            }
		        }
		        case 6: ShowPlayerDialogEx(playerid,82,DIALOG_STYLE_LIST,"Money Bar Color","Green\nRed\nWhite\nYellow\nPink\nBlue","Select", "Go Back");
		        case 7: ShowPlayerDialogEx(playerid,88,DIALOG_STYLE_LIST,"Cellphone Color","Dark Orange\nBlue\nLight Orange\nBlack\nPink\nRed\nGreen\nDark Blue\nYellow\nGrey\nWhite","Select", "Go Back");
		        case 8:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "TogNews") == 0)
		            {
 			            SetPVarInt(playerid, "TogNews", 1);
 			            SCM(playerid, -1, "SAN Network Radio toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "TogNews", 0);
			            SCM(playerid, -1, "SAN Network Radio toggled ON.");
		            }
		        }
		        case 9:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "TogRadio") == 0)
		            {
 			            SetPVarInt(playerid, "TogRadio", 1);
 			            SCM(playerid, -1, "RLS Radio toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "TogRadio", 0);
			            SCM(playerid, -1, "RLS Radio toggled ON.");
		            }
		        }
		        case 10:
		        {
		            cmd_options(playerid, "");
		            cmd_togb(playerid, "");
		        }
		        case 11:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "TogUnhol") == 0)
		            {
 			            SetPVarInt(playerid, "TogUnhol", 1);
 			            SCM(playerid, -1, "The reloading animation when unholstering your weapon will not occur.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "TogUnhol", 0);
			            SCM(playerid, -1, "The reloading animation when unholstering your weapon will now occur!");
		            }
		        }
		    }
		}
		case 81:
		{
		    cmd_options(playerid, "");
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext);
	        if(amount <= 0) return true;
	        if(amount > 8) return true;
	        format(string, sizeof(string), "Chatstyle set to [%d].", amount);
	        SCM(playerid, COLOR_WHITE, string);
	        SetPVarInt(playerid, "ChatStyle", amount);
		}
		case 82:
		{
		    cmd_options(playerid, "");
		    if(!response) return true;
		    new result[50];
		    switch(listitem)
		    {
			    case 0: result="green";
			    case 1: result="red";
			    case 2: result="white";
			    case 3: result="yellow";
			    case 4: result="pink";
			    case 5: result="blue";
		    }
		    format(string, sizeof(string), "Moneybar color set to [%s].", result);
	        SCM(playerid, COLOR_WHITE, string);
		    SetPVarInt(playerid, "HudCol", listitem);
		    SetSlidedMoneyBar(playerid);
		}
		case 83:
		{
		    cmd_options(playerid, "");
		    if(!response) return true;
		    SetPVarInt(playerid, "PrimHol", listitem);
		    SCM(playerid, COLOR_WHITE, "Primary Holster position changed!");
            CallRemoteFunction("LoadHolsters","i",playerid);
		}
		case 84:
		{
		    cmd_options(playerid, "");
		    if(!response) return true;
		    SetPVarInt(playerid, "SecHol", listitem);
		    SCM(playerid, COLOR_WHITE, "Secondary Holster position changed!");
		    CallRemoteFunction("LoadHolsters","i",playerid);
		}
		case 86:
		{
		    if(!response) return true;
		    format(string, sizeof(string),"GPS marker set at location [%s]." , Locations[listitem][lname]);
		    SCM(playerid, COLOR_WHITE, string);
		    DestroyDynamicCP(PlayerInfo[playerid][pLocationsCP]);
		    PlayerInfo[playerid][pLocationsCP] = CreateDynamicCP(Locations[listitem][lx], Locations[listitem][ly], Locations[listitem][lz], 2.5, -1, -1, playerid, 2000);
		}
		case 87:
		{
		    if(!response) return 1;
		    new i, text[128];
		    i = listitem;
		    format(text, sizeof(text), "Government: You took skin '%s'", Govskin[i][Name]);
	    	SetPlayerSkinEx(playerid, Govskin[i][SkinID]);
	    	SCM(playerid, -1, text);
		}
		case 88:
		{
		    cmd_options(playerid, "");
		    if(!response) return 1;
		    new object = 0;
		    switch(listitem)
		    {
		        case 0: object=18865;
		        case 1: object=18866;
		        case 2: object=18867;
		        case 3: object=18868;
		        case 4: object=18869;
		        case 5: object=18870;
		        case 6: object=18871;
		        case 7: object=18872;
		        case 8: object=18873;
		        case 9: object=18874;
		        case 10: object=19513;
		    }
		    SCM(playerid, COLOR_WHITE, "Cellphone color changed!");
		    SetPVarInt(playerid, "CellCol", object);
        }
        case 89:
        {
            new option[5], optionname[5][128];
            option[0]=1, optionname[0]="Last Location";
            if(GetPVarInt(playerid,"HouseKey") != 0) option[1]=1, optionname[1]="Property";
			if(GetPVarInt(playerid,"BizKey") != 0) option[2]=1, optionname[2]="Business";
			if(GetPVarInt(playerid,"Member") == FACTION_LSPD || GetPVarInt(playerid,"Member") == FACTION_LSFD) option[3]=1, optionname[3]="Faction HQ";
			for(new i = 0; i < 4; i++)
			{
				if(i != 0)
				{
			        if(listitem == i && option[i] == 0)
			        {
			            listitem=i+1;
			        }
			    }
			}
			format(string, sizeof(string), "Selected Spawnpoint: %s!", optionname[listitem]);
			SCM(playerid, COLOR_WHITE, string);
			switch(listitem)
			{
			    /*case 0: // Last Location
			    {
			    }*/
			    case 1: // Property
			    {
			        key = GetPVarInt(playerid,"HouseKey");
			        SetPVarFloat(playerid, "PosX", HouseInfo[key][hXi]);
			        SetPVarFloat(playerid, "PosY", HouseInfo[key][hYi]);
			        SetPVarFloat(playerid, "PosZ", HouseInfo[key][hZi]);
			        SetPVarInt(playerid, "World", HouseInfo[key][hVwIn]);
			        SetPVarInt(playerid, "Interior", HouseInfo[key][hIntIn]);
			    }
			    case 2: // Business
			    {
			        key = GetPVarInt(playerid,"BizKey");
			        SetPVarFloat(playerid, "PosX", BizInfo[key][Xi]);
			        SetPVarFloat(playerid, "PosY", BizInfo[key][Xi]);
			        SetPVarFloat(playerid, "PosZ", BizInfo[key][Xi]);
			        SetPVarInt(playerid, "World", BizInfo[key][VwIn]);
			        SetPVarInt(playerid, "Interior", BizInfo[key][IntIn]);
			    }
			    case 3:
			    {
			        switch(GetPVarInt(playerid,"Member"))
			        {
			            case 1: // LSPD
			            {
			                SetPVarFloat(playerid, "PosX", 1553.4929);
			                SetPVarFloat(playerid, "PosY", -1675.7034);
			                SetPVarFloat(playerid, "PosZ", 16.1953);
			                SetPVarInt(playerid, "World", 0);
			                SetPVarInt(playerid, "Interior", 0);
			            }
			            case 2: // LSFD
			            {
			                SetPVarFloat(playerid, "PosX", 1182.5016);
			                SetPVarFloat(playerid, "PosY", -1321.9572);
			                SetPVarFloat(playerid, "PosZ", 13.5788);
			                SetPVarInt(playerid, "World", 0);
			                SetPVarInt(playerid, "Interior", 0);
			            }
			        }
			    }
			}
            SetPVarInt(playerid, "SpawnLocation", 0);
            SetTimerEx("OnLoginInit", 500, false, "ii", playerid, 1);
        }
		case 92:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < FactGuns[listitem][1]) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to buy this package.");
			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");

			switch(FactGuns[listitem][0])
			{
				case 4, 1: // knife & brass knuckles
				{
					GiveInvItem(playerid, FactGuns[listitem][0], 1, 0);
				}
				case 100 .. 126: // ammo
				{
					for(new i = 0; i < sizeof(ItemIDs); i++)
					{
						if(FactGuns[listitem][0] == ItemIDs[i][ItemID])
						{
							GiveInvItem(playerid, FactGuns[listitem][0], ItemIDs[i][Q], 0);
							break;
						}
					}
				}
				case 413: // Bomb
				{
					GiveInvItem(playerid, FactGuns[listitem][0], 1, GetPVarInt(playerid, "Member"));
				}
				default: // guns
				{
					if(FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This warehouse has no more packages left to buy.");
					GiveInvItem(playerid, FactGuns[listitem][0], 0, GetPVarInt(playerid, "Member"));
					FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]--;
				}
			}

			GivePlayerMoneyEx(playerid, -FactGuns[listitem][1]);

			format(string, sizeof(string), "Package puchased from the faction warehouse! (%i packages left)", FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			ServerLog(LOG_WAREHOUSE_BUY, PlayerInfo[playerid][pUsername], PrintIName(FactGuns[listitem][0]));
		}
		case 93:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < FactDrug1[listitem][1]) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to buy this package.");
			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");

			switch(FactDrug1[listitem][0])
			{
				case 4, 1: // knife & brass knuckles
				{
					GiveInvItem(playerid, FactDrug1[listitem][0], 1, 0);
				}
				case 409: // seeds
				{
					if(FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This warehouse has no more packages left to buy.");
					GiveInvItem(playerid, FactDrug1[listitem][0], 1, 0);
					FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]--;
				}
				default: // drug packs
				{
					if(FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This warehouse has no more packages left to buy.");
					GiveInvItem(playerid, FactDrug1[listitem][0], 50, 0);
					FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]--;
				}
			}

			GivePlayerMoneyEx(playerid, -FactDrug1[listitem][1]);

			format(string, sizeof(string), "Package puchased from the faction warehouse! (%i packages left)", FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			ServerLog(LOG_WAREHOUSE_BUY, PlayerInfo[playerid][pUsername], PrintIName(FactDrug1[listitem][0]));
		}
		case 94:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < FactDrug2[listitem][1]) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to buy this package.");
			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");
			if(FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This warehouse has no more packages left to buy.");
			
			switch(FactDrug2[listitem][0])
			{
				case 4, 1: // knife & brass knuckles
				{
					GiveInvItem(playerid, FactDrug2[listitem][0], 1, 0);
				}
				case 409: // seeds
				{
					if(FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This warehouse has no more packages left to buy.");
					GiveInvItem(playerid, FactDrug2[listitem][0], 1, 0);
					FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]--;
				}
				default: // drug packs
				{
					if(FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages] <= 0) return SendClientMessage(playerid, COLOR_ERROR, "This warehouse has no more packages left to buy.");
					GiveInvItem(playerid, FactDrug2[listitem][0], 50, 0);
					FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]--;
				}
			}

			GivePlayerMoneyEx(playerid, -FactDrug2[listitem][1]);

			format(string, sizeof(string), "Package puchased from the faction warehouse! (%i packages left)", FactionInfo[GetPVarInt(playerid, "Member")][fAvailablePackages]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			ServerLog(LOG_WAREHOUSE_BUY, PlayerInfo[playerid][pUsername], PrintIName(FactDrug2[listitem][0]));
		}
        case 96:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: // Radio Stations
		        {
		            new result[5000];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 5000, "%s", CarRadio[i][cName]); }
			            else { format(result, 5000, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialogEx(playerid,97,DIALOG_STYLE_LIST,"Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Link
		        {
		            ShowPlayerDialogEx(playerid, 98, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
		        }
		        case 2: // Turn Off
		        {
		            GameTextForPlayer(playerid, "~w~MP3~n~~r~OFF", 4000, 3);
		            StopAudioStreamForPlayerEx(playerid);
		        }
		    }
		}
		case 97:
		{
		    if(!response) return cmd_mp3(playerid, "");
		    PlayAudioStreamForPlayerEx(playerid, CarRadio[listitem][cURL]);
		}
		case 98:
		{
		    if(!response) return cmd_mp3(playerid, "");
		    if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, 98, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialogEx(playerid, 98, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 download link you would like to stream.", "Enter", "Go Back");
		    PlayAudioStreamForPlayerEx(playerid, inputtext);
		}
		case 99:
		{
		    switch(response)
	        {
	            case 0:
	            {
	                format(string,sizeof(string),"%s denied your marriage offer.", PlayerInfo[playerid][pName]);
	                SendClientMessage(GetPVarInt(playerid, "MarriagePlayer"),COLOR_WHITE,string);
	                DeletePVar(GetPVarInt(playerid, "MarriagePlayer"),"MarriagePlayer");
	                DeletePVar(playerid,"MarriagePlayer");
	            }
	            case 1:
	            {
	                strmid(PlayerInfo[playerid][pMarriedTo], PlayerInfo[GetPVarInt(playerid, "MarriagePlayer")][pUsername], 0, strlen(PlayerInfo[GetPVarInt(playerid, "MarriagePlayer")][pUsername]), 255);
	                strmid(PlayerInfo[GetPVarInt(playerid, "MarriagePlayer")][pMarriedTo], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
                    /*format(string, sizeof(string),"users/%s_%s.ini", GetPlayerSurname(playerid,1), GetPlayerSurname(GetPVarInt(playerid, "MarriagePlayer"),2));
	                if(!DOF2_FileExists(string))
	                {
	                    format(string, sizeof(string),"%s_%s", GetPlayerSurname(playerid,1), GetPlayerSurname(GetPVarInt(playerid, "MarriagePlayer"),2));
	                    ChangeName(playerid, string, PlayerInfo[playerid][pUsername]);
	                    strmid(PlayerInfo[GetPVarInt(playerid, "MarriagePlayer")][pMarriedTo], string, 0, strlen(string), 255);
	                }*/
	                format(string,sizeof(string),"Marriage News: We have a new lovely couple, %s & %s have been married.", PlayerInfo[playerid][pName], PlayerInfo[GetPVarInt(playerid, "MarriagePlayer")][pName]);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	                SendClientMessage(GetPVarInt(playerid, "MarriagePlayer"), COLOR_WHITE, string);
	                DeletePVar(GetPVarInt(playerid, "MarriagePlayer"), "MarriagePlayer");
	                DeletePVar(playerid, "MarriagePlayer");
	            }
			}
		}
		//=========//
		case 100:
		{
		    switch(response)
		    {
		        case 0: // NO
		        {
		            DeletePVar(playerid, "PDBT");
		        }
		        case 1: // YES
		        {
		            CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 1);
		        }
		    }
		}
		case 101: // Fire Dialog
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                switch(GetPVarInt(playerid, "FDDUTY"))
                    {
                        case 0:
                        {
                            SetPVarInt(playerid, "FDDUTY", 1);
	                        SetPlayerColor(playerid, 0xFF800096);
	                        SendClientMessage(playerid, COLOR_WHITE, "You are now on fire duty!");
	                        DeletePVar(playerid, "SubaGear");
	                        EnablePlayerCameraTarget(playerid, 1);
                        }
                        case 1:
                        {
                            SetPVarInt(playerid, "FDDUTY", 0);
                            SetPlayerColor(playerid,0xFF8282AA);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH2);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH3);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
                            SendClientMessage(playerid, COLOR_WHITE, "You are now off fire duty!");
                            DeletePVar(playerid, "SubaGear");
                            EnablePlayerCameraTarget(playerid, 0);
                        }
                    }
	            }
	            case 1:
	            {
					if(GetPVarInt(playerid, "FDDUTY") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You aren't on duty!");
	                GiveInvItem(playerid, 42, 9999, 0);
	                SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1, 366, 1, 0.39999988, -0.33199998, -0.07199998, 102.39997863, 132.00007629, -4.30000448, 1.07200002, 1.42599999, 1.25799977);
	                SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH2, 19472, 2, 0.00000000, 0.14700001, 0.00300004, 4.09999942, 87.90000915, 90.80001831, 0.48099988, 1.32099997, 1.07500040);
	                SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH3, 19033, 2, 0.08499999, 0.05699998, 0.00099998, 81.90000152, 85.39998626, 7.69999837, 1.00500023, 1.14899992, 1.03999996);
                    SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4, 18641, 2, 0.17600002, 0.04700000, 0.08900001, 84.69998168, -5.49999904, 0.00000000, 0.88199973, 0.98299992, 0.79199993);
                    SendClientMessage(playerid, COLOR_ERROR, "Fire fighter items equiped!");
                    DeletePVar(playerid, "SubaGear");
	            }
	            case 2:
	            {
	                if(GetPVarInt(playerid, "FDDUTY") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You aren't on duty!");
	                SetPlayerSkin(playerid, 285);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1, 19514, 2, 0.11199998, 0.01800000, 0.00600000, 0.00000000, 0.00000000, 0.00000000, 1.05900001, 1.03100013, 1.09200048);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH2, 19515, 1, 0.08199999, 0.03599999, 0.01700007, 0.00000000, 0.00000000, 0.00000000, 1.02300012, 1.03900003, 1.02300000);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH3, 19472, 2, 0.01000000, 0.12899997, 0.00600000, -18.59999847, 91.19998931, 102.59998321, 1.01100003, 1.14500010, 1.00000000);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4, 19163, 2, 0.06099998, 0.04099998, 0.00699991, -5.59999370, 93.79998779, -175.49990844, 0.92300033, 0.94700014, 0.88500010);
                    SendClientMessage(playerid, COLOR_ERROR, "Scuba gear equiped!");
                    SetPVarInt(playerid, "SubaGear", 1);
	            }
	        }
	    }
	    case 102: // BIZ Furniture AGREEMENT Dialog
	    {
	        if(!response) return true;
	        new keyex = FurnRight(playerid, 2);
            if(keyex <= 0) return true;
            new cost = 250;
            if(GetPVarInt(playerid, "MonthDon") > 0) { cost = 0; }
			if(GetPlayerMoneyEx(playerid) >= cost)
         	{
         	    if(GetPlayerInterior(playerid) == 0)
				{
             	    new Float:radius;
             	    radius = GetDistanceFromPointToPoint(PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], BizInfo[keyex][Xo], BizInfo[keyex][Yo], BizInfo[keyex][Zo]);
             	    if(radius > BUSINESS_PLANT_DISTANCE) {
             	        scm(playerid, COLOR_ERROR, "WARNING: Object is too far from the business and could not be planted!");
             	        return 1;
             	    } else {
						new found = 0;
             	        for(new i = 0; i < sizeof(FurnObjs); i++)
	                    {
                            if(PlayerInfo[playerid][pFurnID] == FurnObjs[i])
                            {
							    found++;
                            }
	                    }
	                    if(found == 0) {
	                    if(GetCount() > GetPVarInt(playerid, "OutDelay")) {
	                    //format(string, sizeof(string), "AdmWarn: %s has planted objectid: %d(%s) outside of business ID: %d.", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFurnID], GetObjName(PlayerInfo[playerid][pFurnID]), keyex);
                	    //SendAdminMessage(COLOR_YELLOW,string);
                	    SetPVarInt(playerid, "OutDelay", GetCount()+10000); }
						scm(playerid, COLOR_ERROR, "WARNING: Abusing the outdoor objects will result in a permanent ban!"); }
             	    }
				}
          		format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);
             	GivePlayerMoneyEx(playerid, -cost);

           	    BuildBizObject(playerid, PlayerInfo[playerid][pFurnID], PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], PlayerInfo[playerid][pFurnR][0], PlayerInfo[playerid][pFurnR][1], PlayerInfo[playerid][pFurnR][2]);
         	}
	        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	    }
	    case 103:
        {
            if(response)
            {
                new furnid = 0, furnitname[100];
				key = FurnRight(playerid, 2);
				if(key <= 0) return 1;
                furnitname="N/A";

				for(new xe; xe < sizeof(FurnObjs); xe++)
                {
                    if(BizInfo[key][boID][GetPVarInt(playerid, "FurnEditH")] == FurnObjs[xe])
                    {
                        format(furnitname, 100, "%d", FurnObjs[xe]);
                        furnid=xe;
                        break;
		            }
                }
                //new priceex = 100;
                switch(listitem)
                {
                    case 0: // Edit Object
                    {
                        new obj = 0, h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
                        obj = CreatePlayerObject(playerid, BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], 100.0);
                        SetPVarInt(playerid, "FurnObject", obj);
			            SetPVarInt(playerid, "EditorMode", 4);
			            SetPVarInt(playerid, "Mute", 1);
			            PlayerInfo[playerid][pFurnID] = furnid;
			            EditPlayerObject(playerid, obj);
			            format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", GetObjName(BizInfo[key2][boID][h]));
			            SendClientMessage(playerid, COLOR_WHITE, string);
                    }
					case 1: // Select Material
					{
					    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						SendClientMessage(playerid,COLOR_ERROR,"WARNING: Editing an invalid-layer MAY cause parts of the object to turn invisible, resetting the layers material will fix this.");
						ShowPlayerDialogEx(playerid, 501, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "Select", "Close");
					}
					case 2: // Reset Material
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);

						if(IsValidDynamicObject(BizInfo[key2][bObject][h])) DestroyDynamicObject(BizInfo[key2][bObject][h]);
						
						if(IsBizOutdoorObject(key2, h))
						{
							BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], BizInfo[key2][VwOut]);
						}
						else
						{
							BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], BizInfo[key2][VwIn]);
						}

						for(new v = 0; v < BUSINESS_OBJECT_MATERIALS; v++)
						{
							BizMaterialInfo[key2][h][v] = 0;
						}

						SaveBizFurn(key2);
					}
					case 3: // Copy Object
                    {
                    	new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);

                    	new found = 0, foundid;
		                for(new i = 0; i < MAX_OBJECT_ARRAY; i++)
		                {
							if(found == 0)
							{
		                        if(ObjectList[i][oID] == BizInfo[key2][boID][h])
		                        {
		                            found++;
		                            foundid=i;
		                            break;
		                        }
		                    }
		                }
		                if(found == 0) return scm(playerid, COLOR_ERROR, "Invalid Object ID!");

		                new obj = 0;

				        if(IsBizOutdoorObject(key2, h))
						{
							obj = CreatePlayerObject(playerid, 
				        	BizInfo[key2][boID][h], 
				        	BizInfo[key2][boX][h], 
				        	BizInfo[key2][boY][h], 
				        	BizInfo[key2][boZ][h], 
				        	BizInfo[key2][borX][h], 
				        	BizInfo[key2][borY][h], 
				        	BizInfo[key2][borZ][h]);
						}
						else
						{
							obj = CreatePlayerObject(playerid, 
				        	BizInfo[key2][boID][h], 
				        	BizInfo[key2][boX][h], 
				        	BizInfo[key2][boY][h], 
				        	BizInfo[key2][boZ][h], 
				        	BizInfo[key2][borX][h], 
				        	BizInfo[key2][borY][h], 
				        	BizInfo[key2][borZ][h]);
						}

				        SetPVarInt(playerid, "FurnObject", obj);
				        SetPVarInt(playerid, "EditorMode", 3);
				        SetPVarInt(playerid, "Mute", 1);
				        PlayerInfo[playerid][pFurnID]=BizInfo[key2][boID][h];
				        EditPlayerObject(playerid, obj);
				        format(string, sizeof(string),"%s copied, use the SPRINT key to navigate.", ObjectList[foundid][oName]);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        AddPlayerTag(playerid, "(planting furniture)");
                    }
                    case 4: // Remove Object
                    {
                        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
                        new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
                        
                        RemoveBizObject(key2, h);

		                format(string, 128, "%s removed.", furnitname);
		                SendClientMessage(playerid, COLOR_WHITE, string);
		                SaveBizFurn(key2);
                    }
                }
            }
        }
        case 104: // TREATWOUND DIALOG
		{
		    if(!response) return true;
		    new priceex = GetPVarInt(playerid,"WoundC");
		    if(GetPlayerMoneyEx(playerid) >= priceex)
		    {
		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(priceex));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        GivePlayerMoneyEx(playerid,-priceex);
		        SetPVarInt(playerid, "TWO", 1);
		        DeathPlayer(playerid, "You need to rest to heal your wounds!");
		        SetPVarInt(playerid, "DR", 0);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		//====200 - 250 house system==//
		//
		//===========================//
		case 200: //Business inventory
		{
		    if(!response) return SCM(playerid, -1, "You didn't take anything from the business.");
		    new hid = GetPVarInt(playerid, "BizEnter");
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[hid][Xi], BizInfo[hid][Yi], BizInfo[hid][Zi]))
			{
			    if(GetPlayerVirtualWorld(playerid) == BizInfo[hid][VwIn])
				{
				    if(GetCloseBizSafe(playerid, hid))
				    {
		                new stri2[128];
		                format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
			            GiveNameSpace(sendername);
		                if(response)
		                {
		                    if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
		                    new i = listitem;
		                    if(BizInfo[hid][InvID][i] == 0)
		                    {
		                    	error(playerid, "Slot is empty.");
		                    	PrintBizInv(playerid);
		                    	return 1;
		                    }
		                    GiveInvItem(playerid, BizInfo[hid][InvID][i], BizInfo[hid][InvQ][i], BizInfo[hid][InvE][i], BizInfo[hid][InvS][i]);
				            format(stri2, sizeof(stri2), "You took a (%s) from the business.", PrintIName(BizInfo[hid][InvID][i]));
				            scm(playerid, -1, stri2);
    			            format(stri2, sizeof(stri2), "* %s takes a %s from the business.", sendername, PrintIName(BizInfo[hid][InvID][i]));
				            ProxDetector(30.0, playerid, stri2, COLOR_PURPLE);
				            format(stri2, sizeof(stri2), "* %s took a %s from business ID: %d.", PlayerInfo[playerid][pUsername], PrintIName(BizInfo[hid][InvID][i]), hid);
				            SafeLog(stri2);
		                    BizInfo[hid][InvID][i] = 0;
				            BizInfo[hid][InvQ][i] = 0;
				            BizInfo[hid][InvE][i] = 0;
				            BizInfo[hid][InvS][i] = 0;
				            SaveHouseID(hid, 0);

				            ServerLog(LOG_STORE_BIZ_ITEM, PlayerInfo[playerid][pUsername], stri2);
				        }
		            }
				}
			}
		}
		case 202: //House inventory
		{
		    if(!response) return SCM(playerid, -1, "You didn't take anything from the property.");
		    new hid = GetPVarInt(playerid, "HouseEnter");
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hid][hXi], HouseInfo[hid][hYi], HouseInfo[hid][hZi]))
			{
			    if(GetPlayerVirtualWorld(playerid) == HouseInfo[hid][hVwIn])
				{
				    if(GetCloseHouseSafe(playerid, hid))
				    {
		                new stri2[128];
		                format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
			            GiveNameSpace(sendername);
		                if(response)
		                {
		                    if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
		                    new i = listitem;
		                    if(HouseInfo[hid][hInvID][i] == 0)
		                    {
		                    	error(playerid, "Slot is empty.");
		                    	PrintHouseInv(playerid);
		                    	return 1;
		                    }
		                    GiveInvItem(playerid, HouseInfo[hid][hInvID][i], HouseInfo[hid][hInvQ][i], HouseInfo[hid][hInvE][i], HouseInfo[hid][hInvS][i]);
				            format(stri2, sizeof(stri2), "You took a (%s) from the property.", PrintIName(HouseInfo[hid][hInvID][i]));
				            scm(playerid, -1, stri2);
    			            format(stri2, sizeof(stri2), "* %s takes a %s from the property.", sendername, PrintIName(HouseInfo[hid][hInvID][i]));
				            ProxDetector(30.0, playerid, stri2, COLOR_PURPLE);
				            format(stri2, sizeof(stri2), "* %s took a %s from houseid: %d.", PlayerInfo[playerid][pUsername], PrintIName(HouseInfo[hid][hInvID][i]), hid);
				            SafeLog(stri2);

				            ServerLog(LOG_STORE_HOUSE_ITEM, PlayerInfo[playerid][pUsername], stri2);

		                    HouseInfo[hid][hInvID][i] = 0;
				            HouseInfo[hid][hInvQ][i] = 0;
				            HouseInfo[hid][hInvE][i] = 0;
				            HouseInfo[hid][hInvS][i] = 0;
				            SaveHouseID(hid, 0);
				        }
		            }
				}
			}
		}
		case 203: //Vehicle inventory
		{
			new kez = -1, keyex = -1;
			if(PlayerToCar(playerid, 1, 4.0)) {
		        keyex = PlayerToCar(playerid, 2, 4.0);
		        if(IsValidTCar(keyex)) {
				kez = keyex; }
		    }
		    
		    if(kez == -1) {
		        if(IsPoliceCar(playerid)) {
				kez = GetPoliceCarID(playerid); }
		    }
			
 			//if(kez == -1) return SendClientMessage(playerid, COLOR_ERROR, "You are not around any valid vehicle!");
 			//if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return scm(playerid, -1, "You must be on foot to use this!");

 			if(kez != -1)
 			{
	   	        if(VehicleInfo[kez][vType] == VEHICLE_PERSONAL || VehicleInfo[kez][vType] == VEHICLE_LSPD)
	   	        {
	   	        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	   	        	{
						new Float:xx,Float:yy,Float:zz;
		                GetVehiclePos(kez,xx,yy,zz);
		   	            if(IsPlayerInRangeOfPoint(playerid,10.0,xx,yy,zz))
		   	            {
						    new stri2[128];
						    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
							GiveNameSpace(sendername);
						    if(response)
						    {
						        if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
						        new i = listitem;
						        if(VehicleInfo[kez][vInvID][i] == 0)
						        {
						        	error(playerid, "Slot is empty.");
						        	PrintVehInv(playerid, kez);
						        	return 1;
						        }
								GiveInvItem(playerid, VehicleInfo[kez][vInvID][i], VehicleInfo[kez][vInvQ][i], VehicleInfo[kez][vInvE][i], VehicleInfo[kez][vInvS][i]);
								format(stri2, sizeof(stri2), "You took a (%s) from your vehicle.", PrintIName(VehicleInfo[kez][vInvID][i]));
								scm(playerid, -1, stri2);
				    			format(stri2, sizeof(stri2), "* %s takes a %s from the vehicle.", sendername, PrintIName(VehicleInfo[kez][vInvID][i]));
								ProxDetector(30.0, playerid, stri2, COLOR_PURPLE);
						        VehicleInfo[kez][vInvID][i] = 0;
								VehicleInfo[kez][vInvQ][i] = 0;
								VehicleInfo[kez][vInvE][i] = 0;
								VehicleInfo[kez][vInvS][i] = 0;
								SaveVehicleData(kez);

								ServerLog(LOG_STORE_VEHICLE_ITEM, PlayerInfo[playerid][pUsername], stri2);
						    }
						}
					}
				}
			}

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new stri2[128];
				format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
				GiveNameSpace(sendername);
				if(response)
				{
					if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
					new i = listitem;
					if(VehicleInfo[vehicleid][vgbInvID][i] == 0)
					{
						error(playerid, "Slot is empty.");
						PrintVehInv(playerid, vehicleid);
						return 1;
					}
					GiveInvItem(playerid, VehicleInfo[vehicleid][vgbInvID][i], VehicleInfo[vehicleid][vgbInvQ][i], VehicleInfo[vehicleid][vgbInvE][i], VehicleInfo[vehicleid][vgbInvS][i]);
					format(stri2, sizeof(stri2), "You took a (%s) from your vehicle.", PrintIName(VehicleInfo[vehicleid][vgbInvID][i]));
					scm(playerid, -1, stri2);
					format(stri2, sizeof(stri2), "* %s takes a %s from the vehicle.", sendername, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]));
					ProxDetector(30.0, playerid, stri2, COLOR_PURPLE);
					VehicleInfo[vehicleid][vgbInvID][i] = 0;
					VehicleInfo[vehicleid][vgbInvQ][i] = 0;
					VehicleInfo[vehicleid][vgbInvE][i] = 0;
					VehicleInfo[vehicleid][vgbInvS][i] = 0;
					SaveVehicleData(vehicleid);

					ServerLog(LOG_STORE_GLOVEBOX_ITEM, PlayerInfo[playerid][pUsername], stri2);
				}
			}
		}
		case 204:
		{
			if(!response) return 1;
			if(listitem == 0)
			{
			    PrintInv(playerid);
			}
			if(listitem == 1)
			{
				new found = 0;
			    new hh = GetPVarInt(playerid, "HouseEnter");
				if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hh][hXi], HouseInfo[hh][hYi], HouseInfo[hh][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[hh][hVwIn])
				{
				    if(GetCloseHouseSafe(playerid, hh))
				    {
	   					PrintHouseInv(playerid);
						found++;
					}
				}
				new bh = GetPVarInt(playerid, "BizEnter");
				if(found == 0)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[bh][Xi], BizInfo[bh][Yi], BizInfo[bh][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[bh][VwIn])
				    {
				        if(GetCloseBizSafe(playerid, bh))
				        {
	   				   	 	PrintBizInv(playerid); 
	   						found++;
	   					}
				    }
				}

				if(found == 0)
				{
				    key = -1;
			        new keyex = -1;
			        
			        if(PlayerToCar(playerid, 1, 4.0))
			        {
	    		    	keyex = PlayerToCar(playerid, 2, 4.0);
		    		    if(IsValidTCar(keyex))
		    		    {
				        	key = keyex;
				    	}
	                }
	                
	                if(key == -1)
	                {
				        if(IsPoliceCar(playerid))
				        {
				        	key = GetPoliceCarID(playerid);
				    	}
			        }

			        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !IsPlayerInAnyVehicle(playerid))
			        {
				    	PrintVehInv(playerid, key);
				    	found++;
					}

					if(IsPlayerInAnyVehicle(playerid))
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						if(VehicleInfo[vehicleid][vID] != 0)
					    {
			        		if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL || VehicleInfo[vehicleid][vType] == VEHICLE_LSPD)
			        		{
				            	if(!IsInvalidVeh(vehicleid))
				            	{
								    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
									{
										PrintVehInv(playerid, vehicleid);
										found++;
									}
								}
							}
						}
					}
				}
			}
		}
		case 205:
		{
		    if(!response) return 1;
		    new i, text[128];
		    i = listitem;
		    format(text, sizeof(text), "LSPD: You took skin '%s'", LSPDskin[i][Name]);
		    if(GetPVarInt(playerid, "Rank") < LSPDskin[i][Rank]) return error(playerid, "You are not allowed to wear this skin.");
	    	SetPlayerSkinEx(playerid, LSPDskin[i][SkinID]);
	    	SCM(playerid, -1, text);
		}
		case 206:
		{
		    if(response)
		    {
		        new pmtext[128], targetid;
		        GetPVarString(playerid, "APMMSG", pmtext, 128);
				targetid = GetPVarInt(playerid, "APMID");
				format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, PlayerInfo[playerid][pName], pmtext);
				SendClientMessage(targetid,  0xF9F900FF, string);
				if(GetPVarInt(playerid, "AdminDuty"))
				{
					format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", targetid, PlayerInfo[targetid][pName], pmtext);
				}
				else
				{
					format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", targetid, PlayerInfo[targetid][pName], pmtext);
				}
				SendClientMessage(playerid,  0xE5C43EAA, string);
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				SetPVarInt(playerid, "APMWRN", 1);
		    }
		}
		case 207: // Property Buy Dialog
		{
			if(response)
			{
				foreach(new h : HouseIterator)
				{
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
				    if(HouseInfo[h][hID] != 0)
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
				        {
				            if(HouseInfo[h][hOwned] == 0)
				            {
				                if(GetPVarInt(playerid, "HouseKey") == 0)
				                {
			                		if(GetPVarInt(playerid, "Bank") >= HouseInfo[h][hValue])
									{
						                SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - HouseInfo[h][hValue]);
						                format(string, sizeof(string), "Congratulations on purchasing this property for %s!", FormatMoney(HouseInfo[h][hValue]));
						                SendClientMessage(playerid, -1, string);
						                SendClientMessage(playerid, -1, "Use /help > House Commands for any help regarding properties.");
										SetPVarInt(playerid, "HouseKey", h);
										HouseInfo[h][hOwned] = 1;
										HouseInfo[h][hCode] = 0;
										strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
										SaveHouseID(h, 1);
										GiveAchievement(playerid, 8);
									}
									else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
				                }
				                else scm(playerid, -1, "You already own a property.");
				            }
				            else scm(playerid, -1, "Property not for sale.");
						}
					}
				}
			}
		}
		case 280: //Toys
		{
		    if(!response) return 1;
		    SetPVarInt(playerid, "ToyModelC", AttachmentObjects[listitem][attachmodel]);
			ShowPlayerDialogEx(playerid, 294, DIALOG_STYLE_LIST, "Select bone", "Spine\nHead\nLeft Upper Arm\nRight Upper Arm\nLeft Hand\nRight Hand\nLeft Thigh\nRight Thigh\nLeft foot\nRight Foot\nRight Calf\nLeft Calf\nLeftForearm\nRight Forearm\nLeft Shoulder\nRight Shoulder\nNeck\nJaw", "Select","Cancel");
		}
		case 281: //MDC
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        /*case 0: ShowPlayerDialogEx(playerid, 282, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the name.", "Continue","Back");
		        case 1: ShowPlayerDialogEx(playerid, 287, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the vehicle plate.", "Continue","Back");*/
		        case 2: ShowPlayerDialogEx(playerid, 433, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert a serial ID.", "Insert","Cancel");
		        /*case 3: ShowPlayerDialogEx(playerid, 289, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the Case ID.", "Continue","Back");
		        case 4:
				{
					if(GetPVarInt(playerid, "Member") == FACTION_LSPD) ShowPlayerDialogEx(playerid, 297, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the phone number.", "Continue","Back");
					else nal(playerid);
				}*/
		    }
		}
		case 282: //MDC - Person
		{
		    if(!response) return ShowPlayerDialogEx(playerid, 281, DIALOG_STYLE_LIST, "Mobile data computer", "Check Person\nCheck Vehicle\nCheck Serial ID\nCase ID\nTrace Phone", "Select","Close");
			new input[500], query[400];
			mysql_escape_string(inputtext, input); //Protecting the database.
			format(MDCinfo[playerid][1][mChecking], 25, "%s", input);
			mysql_format(handlesql, query, sizeof(query), "SELECT `accounts`.`PhoneNum`, `accounts`.`Name`, `accounts`.`Sex`, `accounts`.`Age`, `accounts`.`DriveLic`, \
														   `accounts`.`GunLic`, `accounts`.`HouseKey`, `accounts`.`BizKey`, `vehicles`.* FROM `accounts` LEFT JOIN `vehicles` \
														   ON `accounts`.`Name` = `vehicles`.`Owner` WHERE `accounts`.`Name` = '%e';", input);
														   
			mysql_pquery(handlesql, query, "MDCPlayer", "i", playerid);
		}
		case 283: //MDC - Check criminal record
		{
		    new query[128];
		    if(!response) return 1;
		    
			switch(listitem)
			{
				/*case 5 .. 7: //Vehicle
				{
				    if(MDCinfo[playerid][listitem - 4][mVID] == 0)
				    {
		   				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name='%e'", MDCinfo[playerid][1][mChecking]);
						mysql_pquery(handlesql, query, "MDCPlayer", "i", playerid);
				    }
				    else
				    {
						mysql_format(handlesql, query, sizeof(query), "SELECT * FROM vehicles WHERE ID=%d", MDCinfo[playerid][listitem - 4][mVID]);
						mysql_pquery(handlesql, query, "MDCPlayer4", "i", playerid);
					}
				}*/
				case 11: //Criminal record
				{
					mysql_format(handlesql, query, sizeof(query), "SELECT * FROM criminals WHERE player='%e' AND type=1 ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
					mysql_pquery(handlesql, query, "MDCPlayer2", "i", playerid);
				}
				case 12: //Ticket record
				{
					mysql_format(handlesql, query, sizeof(query), "SELECT * FROM tickets WHERE player='%e' AND paid=0 ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
					mysql_pquery(handlesql, query, "MDCPlayer5", "i", playerid);
				}
			}
		}
		case 284: //MDC - Check crime in detail
		{
		    new query[128];
			if(!response)
			{
   				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name='%e'", MDCinfo[playerid][1][mChecking]);
				mysql_pquery(handlesql, query, "MDCPlayer", "i", playerid);
			}
			else
			{
				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM criminals WHERE time='%e' AND type=1", MDCinfo[playerid][listitem][mTime]);
				mysql_pquery(handlesql, query, "MDCPlayer3", "i", playerid);
			}
		}
		case 285: //MDC - Check crime in detail (selected)
		{
		    new query[128];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM criminals WHERE player='%e' AND type=1 ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
			mysql_pquery(handlesql, query, "MDCPlayer2", "i", playerid);
		}
		case 286: //MDC - Check vehicle in detail (selected)
		{
		    new query[128];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name='%e'", MDCinfo[playerid][1][mChecking]);
			mysql_pquery(handlesql, query, "MDCPlayer", "i", playerid);
		}
		case 287: //MDC - Vehicle
		{
		    if(!response) return ShowPlayerDialogEx(playerid, 281, DIALOG_STYLE_LIST, "Mobile data computer", "Check Person\nCheck Vehicle\nCheck Serial ID\nCase ID\nTrace Phone", "Select","Close");
			new input[500], query[128];
			mysql_escape_string(inputtext, input); //Protecting the database.
			format(MDCinfo[playerid][1][mChecking], 25, "%s", input);
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM vehicles WHERE Plate='%e'", input);
			mysql_pquery(handlesql, query, "MDCVehicle", "i", playerid);
		}
		case 288: //MDC - Vehicle in detail from vehicle (selected)
		{
		    ShowPlayerDialogEx(playerid, 287, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the vehicle plate.", "Continue","Back");
		}
		case 289: //MDC - Case ID
		{
		    if(!response) return ShowPlayerDialogEx(playerid, 281, DIALOG_STYLE_LIST, "Mobile data computer", "Check Person\nCheck Vehicle\nCheck Serial ID\nCase ID\nTrace Phone", "Select","Close");
			new input[500], query[128], inputid;
			mysql_escape_string(inputtext, input); //Protecting the database.
			format(MDCinfo[playerid][1][mChecking], 25, "%s", input);
			inputid = strval(input);
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM criminals WHERE ID=%d", inputid - 900);
			mysql_pquery(handlesql, query, "MDCCase", "i", playerid);
		}
		case 290: //MDC - Case in detail from case ID (selected)
		{
  			ShowPlayerDialogEx(playerid, 289, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the Case ID.", "Continue","Back");
		}
		case 291: //MDC - Check crime in detail
		{
		    new query[128];
			if(!response)
			{
   				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM accounts WHERE Name='%e'", MDCinfo[playerid][1][mChecking]);
				mysql_pquery(handlesql, query, "MDCPlayer", "i", playerid);
			}
			else
			{
				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM tickets WHERE time='%e'", MDCinfo[playerid][listitem][mTime]);
				mysql_pquery(handlesql, query, "MDCPlayer6", "i", playerid);
			}
		}
		case 292:
		{
		    new query[128];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM tickets WHERE player='%e' ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
			mysql_pquery(handlesql, query, "MDCPlayer5", "i", playerid);
		}
		//==========================================================//
		case 293: // Using /tickets
		{
		    new query[128];
			if(response)
			{
				mysql_format(handlesql, query, sizeof(query), "SELECT * FROM tickets WHERE time='%e'", MDCinfo[playerid][listitem][mTime]);
				mysql_pquery(handlesql, query, "GetTicketsP2", "i", playerid);
			}
		}
		//==========================================================//
		case 294: //Toys
		{
		    if(!response) return 1;
		    
		    SetPVarInt(playerid, "ToyBoneC", listitem + 1);
 			
 			new countid = 0;
			for(new i = 0; i < MAX_PLAYER_TOYS; i++)
			{
			    if(countid == 0)
			    {
			        if(ToyInfo[playerid][i][tModel] == 0)
			        {
			        	countid = i;
			        	break;
			        }
			    }
			}

			new modelid = GetPVarInt(playerid,"ToyModelC");
			new boneid = GetPVarInt(playerid,"ToyBoneC");
            SetPlayerAttachedObject(playerid, countid, modelid, boneid, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
            EditAttachedObject(playerid, countid);
		}
		case 295: //Toys buying
		{
 			new countid = 0;
			
			for(new i = 0; i < MAX_PLAYER_TOYS; i++)
			{
		        if(ToyInfo[playerid][i][tModel] == 0)
		        {
		        	countid = i;
		        	break;
		        }
			}

		    if(!response) //no
		    {
		        RemovePlayerAttachedObject(playerid, countid);
		        SetPVarInt(playerid, "ToyBoneC", 0);
		        SetPVarInt(playerid, "ToyModelC", 0);
		    }
		    else
			{
			    if(GetPVarInt(playerid, "ToyModelC") != 0) //to avoid crashes.
			    {
			        ToyInfo[playerid][countid][tBone] = GetPVarInt(playerid, "ToyBoneC");
                    ToyInfo[playerid][countid][tModel] = GetPVarInt(playerid, "ToyModelC");
					ToyInfo[playerid][countid][toX] = GetPVarFloat(playerid, "ToyoX");
	    			ToyInfo[playerid][countid][toY] = GetPVarFloat(playerid, "ToyoY");
	    			ToyInfo[playerid][countid][toZ] = GetPVarFloat(playerid, "ToyoZ");
	    			ToyInfo[playerid][countid][trX] = GetPVarFloat(playerid, "ToyrX");
	    			ToyInfo[playerid][countid][trY] = GetPVarFloat(playerid, "ToyrY");
	    			ToyInfo[playerid][countid][trZ] = GetPVarFloat(playerid, "ToyrZ");
	    			ToyInfo[playerid][countid][tsX] = GetPVarFloat(playerid, "ToysX");
	    			ToyInfo[playerid][countid][tsY] = GetPVarFloat(playerid, "ToysY");
	    			ToyInfo[playerid][countid][tsZ] = GetPVarFloat(playerid, "ToysZ");
	    			
	    			scm(playerid, -1, "You have bought an attachable item. (/items)");

	    			new query[1024];
	    			mysql_format(handlesql, query, sizeof(query), "INSERT INTO toys (PlayerName, modelid, bone, Equipped) VALUES ('%e', %d, %d, 1)", PlayerInfo[playerid][pUsername], ToyInfo[playerid][countid][tModel], ToyInfo[playerid][countid][tBone]);
	    			mysql_pquery(handlesql, query, "OnPlayerToyCreated", "ii", playerid, countid);

	    			SaveToys(playerid);
			    }
			}
		}
		case 296: //Edit/Take off/Delete items
		{
		    if(!response) return 1;
		    new diatxt[256];
		    
		    for(new i = 0; i < MAX_PLAYER_TOYS; i++)
		    {
		        if(ToyInfo[playerid][i][tModel] != 0)
		        {
					format(diatxt, sizeof(diatxt), "%s%d: %s\n", diatxt, i + 1, GetAttachmentName(ToyInfo[playerid][i][tModel]));
		        }
				else
				{
				    format(diatxt, sizeof(diatxt), "%s{5F5F5F}%d: EMPTY SLOT\n", diatxt, i + 1);
				}
		    }

		    switch(listitem)
		    {
		        case 0: //Edit
		        {
		        	ShowPlayerDialogEx(playerid, 401, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		        case 1: //Take off
		        {
		        	ShowPlayerDialogEx(playerid, 402, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		        case 2: //Put on
		        {
		        	ShowPlayerDialogEx(playerid, 403, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		        case 3: //Remove
		        {
		        	ShowPlayerDialogEx(playerid, 404, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		    }
		}
		case 297:
		{
		    new found = 0;
			foreach(new i : Player)
			{
				if(GetPVarInt(i, "PlayerLogged") == 1)
				{
					format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
					if(strcmp(string, inputtext, true) == 0)
					{
					    found++;
					    if(GetPVarInt(i, "OnPhone") > 60)
					    {
					    	format(string, sizeof(string), "HQ: Officer %s requested a trace of (%d)", PlayerInfo[playerid][pName], inputtext);
						    SendFactionMessage(1, COLOR_BLUE, string);
					    	format(string, sizeof(string), "HQ: Location: %s", GetPlayerArea(i));
						    SendFactionMessage(1, COLOR_BLUE, string);
					    }
					    else return scm(playerid, COLOR_BLUE, "HQ: Sorry, number could not be localized. It hasn't been in use for sixty seconds.");
					}
				}
			}
			if(found == 0) return scm(playerid, COLOR_BLUE, "HQ: Phone Number unknown.");
		}
		//==========================================================//
		case 300: //Biz buy dialog
		{
			if(response)
			{
				new foundin = 0;
				foreach(new h : BizIterator)
				{
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
				    if(BizInfo[h][ID] != 0)
				    {
				        if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
				        {
				            foundin++;
				            if(BizInfo[h][Owned] == 0)
				            {
				                if(GetPVarInt(playerid, "BizKey") == 0)
				                {
			                		if(GetPVarInt(playerid, "Bank") >= BizInfo[h][Value])
									{
						                SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - BizInfo[h][Value]);
						                format(string, sizeof(string), "Congratulations on purchasing your business for %s!", FormatMoney(BizInfo[h][Value]));
						                SendClientMessage(playerid, -1, string);
						                SendClientMessage(playerid, -1, "Use /help for any help regarding businesses and their commands.");
										SetPVarInt(playerid, "BizKey", h);
										BizInfo[h][Owned] = 1;
										BizInfo[h][Code] = 0;
										format(BizInfo[h][Owner], 25, PlayerInfo[playerid][pUsername]);
										SaveBizID(h, 1);
										GiveAchievement(playerid, 8);
									}
									else error(playerid, "Insufficient funds.");
				                }
				                else error(playerid, "You already own a business.");
				            }
				            else error(playerid, "Property not for sale.");
						}
					}
				}
			}
		}
		case 301:
		{
		    if(!response) return 1;
		    if(strlen(inputtext) > 80) return error(playerid, "Slogan is too long.");
		    new bid = GetPVarInt(playerid, "BizKey");
			format(BizInfo[bid][Slogan], 80, "%s", inputtext);

			format(string, sizeof(string), "You business slogan has been set to: %s", BizInfo[bid][Slogan]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			SaveBizID(bid);
		}
		case 302:
		{
		    if(!response) return 1;
		    if(strval(inputtext) < 1 || strval(inputtext) > 100) return error(playerid, "Invalid number.");
		    new bid = GetPVarInt(playerid, "BizKey");
		    BizInfo[bid][EnterPrice] = strval(inputtext);
			scm(playerid, -1, "Entrance Fee has been changed.");
			
			SaveBizID(bid);
		}
		case 303:
		{
		    if(!response || strlen(inputtext) == 0) return 1;
		    if(strlen(inputtext) > 20) return error(playerid, "Name is too long.");
		    new bid = GetPVarInt(playerid, "BizKey");
			format(BizInfo[bid][Name], 20, "%s", inputtext);
			
			format(string, sizeof(string), "You business name has been set to: %s", BizInfo[bid][Name]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			
			SaveBizID(bid);

			DestroyDynamic3DTextLabel(BizInfo[bid][Text]);
			
			new msg[70];
			format(msg, sizeof(msg), "%s",BizInfo[bid][Name]);
			BizInfo[bid][Text] = CreateDynamic3DTextLabel(msg, COLOR_WHITE, BizInfo[bid][Xo], BizInfo[bid][Yo], BizInfo[bid][Zo] + 0.5, 20.0);
		}
		case 401: //Edit item
		{
			if(!response) return 1;

			if(ToyInfo[playerid][listitem][tModel] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have no item in this slot.");
			
			if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
				EditAttachedObject(playerid, listitem);
			}
			else
			{
				ToyInfo[playerid][listitem][tEquipped] = 1;
				
				SetPlayerAttachedObject(playerid, listitem, ToyInfo[playerid][listitem][tModel],ToyInfo[playerid][listitem][tBone], 
					ToyInfo[playerid][listitem][toX], ToyInfo[playerid][listitem][toY], ToyInfo[playerid][listitem][toZ], 
					ToyInfo[playerid][listitem][trX], ToyInfo[playerid][listitem][trY], ToyInfo[playerid][listitem][trZ], 
					ToyInfo[playerid][listitem][tsX], ToyInfo[playerid][listitem][tsY], ToyInfo[playerid][listitem][tsZ]);

				EditAttachedObject(playerid, listitem);
			}
		}
		case 402: //Take off item
		{
		    if(!response) return 1;
		    
			if(ToyInfo[playerid][listitem][tModel] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
				RemovePlayerAttachedObject(playerid, listitem);
				ToyInfo[playerid][listitem][tEquipped] = 0;
	        }
			else
			{
   				SendClientMessage(playerid, COLOR_ERROR, "You have no item in this slot.");
			}
		}
		case 403: //Put on item
		{
		    if(!response) return 1;

			if(ToyInfo[playerid][listitem][tModel] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have no item in this slot.");

			if(IsPlayerAttachedObjectSlotUsed(playerid, listitem) == 0)
			{
				ToyInfo[playerid][listitem][tEquipped] = 1;

				SetPlayerAttachedObject(playerid, listitem, ToyInfo[playerid][listitem][tModel], ToyInfo[playerid][listitem][tBone],
 					ToyInfo[playerid][listitem][toX], ToyInfo[playerid][listitem][toY], ToyInfo[playerid][listitem][toZ],
					ToyInfo[playerid][listitem][trX], ToyInfo[playerid][listitem][trY], ToyInfo[playerid][listitem][trZ],
					ToyInfo[playerid][listitem][tsX], ToyInfo[playerid][listitem][tsY], ToyInfo[playerid][listitem][tsZ]);
	        }
			else
			{
			    SendClientMessage(playerid, COLOR_ERROR, "You are already wearing this item.");
			}
		}
		case 404: //Delete item
		{
		    if(!response) return 1;

			if(ToyInfo[playerid][listitem][tModel] != 0)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
				{
					RemovePlayerAttachedObject(playerid, listitem);
				}

				new query[256];
				mysql_format(handlesql, query, sizeof(query), "DELETE FROM toys WHERE ID=%i", ToyInfo[playerid][listitem][tDBID]);
	  			mysql_pquery(handlesql, query);

				ToyInfo[playerid][listitem][tModel] = 0;
	        }
			else
			{
				SendClientMessage(playerid, COLOR_ERROR, "You have no item in this slot.");
			}
		}
		case 405:
		{
			if(!response) return 1;
			new diatxt[1028];
			if(listitem == 0) //View
			{
				for(new i = 0; i < 19; i++)
				{
				    format(diatxt, sizeof(diatxt), "%s{cccccc}Warrant %d:{8BE0DF} %s\n", diatxt, i + 1, APB[i]);
				}
				ShowPlayerDialogEx(playerid, 406, DIALOG_STYLE_LIST, "Warrant", diatxt, "Close","");
			}
			if(listitem == 1) //Add
			{
			    new found = 0;
   				for(new i = 0; i < 19; i++)
				{
			    	if(strlen(APB[i]) > 3) found++;
				}
				if(found < 19) ShowPlayerDialogEx(playerid, 407, DIALOG_STYLE_INPUT, "Warrant", "Enter your Warrant", "Add","Cancel");
				else error(playerid, "No free spots.");
			}
			if(listitem == 2) //Remove
			{
				for(new i = 0; i < 19; i++)
				{
				    format(diatxt, sizeof(diatxt), "%s{cccccc}Warrant %d:{8BE0DF} %s\n", diatxt, i + 1, APB[i]);
				}
				ShowPlayerDialogEx(playerid, 408, DIALOG_STYLE_LIST, "Warrant", diatxt, "Remove Warrant","Cancel");
			}
		}
		case 407: //Add APB
		{
		    if(!response) return 1;
		    if(strlen(inputtext) > 80) return error(playerid, "Warrant too long.");
		    new found = -1;
			for(new i = 0; i < 19; i++)
			{
			    if(found == -1)
			    {
		    		if(strlen(APB[i]) < 3) found = i;
				}
			}
			if(found != -1)
			{
			    format(APB[found], 80, "%s",inputtext);
				scm(playerid, -1, "Warrant placed!");
			}
		}
		case 408:
		{
		    format(APB[listitem], 80, "");
		    scm(playerid, -1, "Warrant removed!");
		}
		case 409: //Clothing store
		{
			if(!response) return 1;
			if(listitem == 0) //Buy attachment
			{
				new countid = 0;

				for(new i = 0; i < MAX_PLAYER_TOYS; i++)
				{
			        if(ToyInfo[playerid][i][tModel] == 0)
			        {
			        	countid++;
			        }
				}

				if(countid == 0) return error(playerid, "You have no free slots left.");

				new oblist[sizeof(AttachmentObjects)];
				for(new i = 0; i < sizeof(AttachmentObjects); i++)
				{
			        oblist[i] = AttachmentObjects[i][attachmodel];
				}
				ShowModelSelectionMenuEx(playerid, oblist, sizeof(AttachmentObjects), "Select item", 1, 16.0, 0.0, -55.0);
			}
			if(listitem == 1)
			{
				new Skin[312], count = -1;
   				for(new i = 1; i < sizeof(Skin); i++)
			    {
			       	if(i != 0 && i != 300 && i != 74 && (i < 274 || i > 288) && (i < 264 || i >267) && i != 149 &&
			       		i != 311 && i != 310 && i != 309 && i != 308 && i != 307 && i != 306 && i != 302 && i != 301 &&
			       		i != 300)
			       	{
						count++;
	   					Skin[count] = i;
					}
			    }
			    if(count != -1) ShowModelSelectionMenuEx(playerid, Skin, count, "Select skin", 5, 0.0, 0.0, 0.0);
			}
		}
		case 410: //new house int
		{
		    if(!response) return 1;
		    new keyh = GetPVarInt(playerid, "HouseKey");
            RemoveHouseObjects(keyh);
            new count = -1;
            new Houseclass = HouseInfo[keyh][hClass];
           	for(new i = 0; i < sizeof(HouseCoordinates); i++)
			{
			    if(HouseCoordinates[i][Class] == Houseclass)
			    {
			        if(count != listitem)
			        {
				        count++;
						HouseInfo[keyh][hXi] = HouseCoordinates[i][mbX];
						HouseInfo[keyh][hYi] = HouseCoordinates[i][mbY];
						HouseInfo[keyh][hZi] = HouseCoordinates[i][mbZ];
						HouseInfo[keyh][hIntIn] = HouseCoordinates[i][HouseInt];
					}
			    }
			}
			scm(playerid, -1, "interior changed.");
		}
		case 411: //PCR - index
		{
		    if(!response) return 1;
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
		    new name[200], query[200];
			mysql_escape_string(inputtext, name);
			SetPVarString(playerid, "PCR-name", name);
			//ShowPlayerDialogEx(playerid, 412, DIALOG_STYLE_LIST, "Patient Care Report", "View record\nAdd record","Continue","Close");
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM pcr WHERE player='%e'", name);
			mysql_pquery(handlesql, query, "PCRPlayer", "ii", playerid, 1);
		}
		case 412: //PCR - Name selected - NOT IN USE.
		{
	 		if(!response) return 1;
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
	 		new query[200], name[24];
	 		GetPVarString(playerid, "PCR-name", name, 24);
			switch(listitem)
			{
			    case 0:
			    {
					mysql_format(handlesql, query, sizeof(query), "SELECT * FROM pcr WHERE player='%e'", name);
					mysql_pquery(handlesql, query, "PCRPlayer", "ii", playerid, 1);
			    }
			}
		}
		case 413: //PCR - See record
		{
		    new query[128], name[24];
	 		GetPVarString(playerid, "PCR-name", name, 24);
			if(!response)
			{
				return 1;
			}
			else
			{
			    if(listitem == 0)
			    {
			        ShowPlayerDialogEx(playerid, 414, DIALOG_STYLE_INPUT, "Patient Care Report", "Insert a short title/summary of the file.","Continue","");
			    }
			    else
			    {
					mysql_format(handlesql, query, sizeof(query), "SELECT * FROM pcr WHERE time='%e'", MDCinfo[playerid][listitem -1][mTime]);
					mysql_pquery(handlesql, query, "PCRPlayer", "ii", playerid, 2);
				}
			}
		}
		case 414: //PCR - Insert Name
		{
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
		    new title[200];
		    mysql_escape_string(inputtext, title);
		    SetPVarString(playerid, "PCR-insert-title", title);
		    ShowPlayerDialogEx(playerid, 415, DIALOG_STYLE_LIST, "Patient Care Report - Select impact", "{33A0FF}Check-up\n{33FF66}Casual\n{FFCC33}Normal\n{FF0000}Severe","Continue","");
		}
		case 415: //PCR - Insert Severity
		{
		    SetPVarInt(playerid, "PCR-insert-critic", listitem);
		    ShowPlayerDialogEx(playerid, 416, DIALOG_STYLE_INPUT, "Patient Care Report", "Insert the detailed text of the incident (max 400 words)","Continue","");
		}
		case 416: //PCR- Insert Text
		{
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
		    new text[1500];
		    mysql_escape_string(inputtext, text);
		    SetPVarString(playerid, "PCR-insert-text", text);
		    
			new query[1024], year, month, day, hour, minute, second;
			getdate(year, month, day);
			gettime(hour,minute,second);
			new datum[64], time[64];
			new name[24], title[50];
	 		GetPVarString(playerid, "PCR-name", name, 24);
	 		GetPVarString(playerid, "PCR-insert-title", title, 50);
	 		
			format(time, sizeof(time), "%d:%d:%d", hour, minute, second);
		 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO `pcr`(`player`, `medic`, `date`, `time`, `text`, `title`, `critic`) VALUES ('%e','%e','%e','%e','%e','%e','%d')",
			name, PlayerInfo[playerid][pUsername], datum, time, text, title, GetPVarInt(playerid, "PCR-insert-critic"));
			mysql_pquery(handlesql, query, "unusedquery", "i", playerid);
	 		GetPVarString(playerid, "PCR-name", name, 24);
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM pcr WHERE player='%e'", name);
			mysql_pquery(handlesql, query, "PCRPlayer", "ii", playerid, 1);

		}
		case 417: //PCR - See in detail
		{
		    new query[128], name[24];
	 		GetPVarString(playerid, "PCR-name", name, 24);
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM pcr WHERE player='%e'", name);
			mysql_pquery(handlesql, query, "PCRPlayer", "ii", playerid, 1);
		}
		case 418: //Lotery
		{
		    if(strval(inputtext) < 1 || strval(inputtext) > 100) return ShowPlayerDialogEx(playerid, 418, DIALOG_STYLE_INPUT, "Lottery ticket", "What number would you like your ticket to be? \nInsert any number between 1-100", "Submit","");
			new number = strval(inputtext);
			new query[500];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM lottery WHERE Number=%d AND Active=1", number);
			mysql_pquery(handlesql, query, "LotteryCheck", "iii", playerid, 1, number);
		}
		case 419: // Using /lottery
		{
		
		}
		case 420: // Dealership menu
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0:
		        {
		            new query[75];
		            mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
		            mysql_pquery(handlesql, query, "OnPlayerEntersDealership", "i", playerid);
		        }
		        case 1:
		        {
		            new keyex = IsPlayerVehicleSpawned(playerid);
            		if(keyex == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
   	                if (OwnableVehicle(keyex))
   	                {
				        if(IsNotAEngineCar(OwnableVehicleID(keyex))) return true;
				        format(string, sizeof(string), "Vehicle Upgrades (%s)", VehicleName[GetVehicleModel(OwnableVehicleID(keyex))-400]);
				        ShowPlayerDialogEx(playerid, 421, DIALOG_STYLE_LIST, string, "Insurance\nEngine\nBattery\nLock\nAlarm", "Select", "Close");
			        }
				}
		    }
		}
		case 421: // Vehicle Upgrades
		{
		    if(!response) return true;
		    new strie[1024];
		    switch(listitem)
		    {
		        case 0: // Insurance
		        {
                    strcat(strie, "{3366FF}Enter the insurance level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Insurance will cost {FFFFFF}($150) {3366FF}each payday, failure to pay will result in penalty charges.");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}Insurance will cover the damages when a vehicle is destroyed, ($1,500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Insurance will cover any scratches etc on the vehicle when spawned +lvl 1, ($2,500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Insurance will spawn your vehicle at full health after despawning with low hp +lvl 1-2, ($5,000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialogEx(playerid, 422, DIALOG_STYLE_INPUT, "Vehicle Insurance", strie, "Purchase","Close");
		        }
		        case 1: // Engine
		        {
		            ShowPlayerDialogEx(playerid, 423, DIALOG_STYLE_MSGBOX, "Engine Upgrade", "{3366FF}Would you like to upgrade your engine?\n{3366FF}Perk: {FFFFFF}Extra life percentage\n{3366FF}Cost: {FFFFFF}$2,500", "Yes", "No");
		        }
		        case 2: // Battery
		        {
		            ShowPlayerDialogEx(playerid, 424, DIALOG_STYLE_MSGBOX, "Battery Upgrade", "{3366FF}Would you like to upgrade your battery?\n{3366FF}Perk: {FFFFFF}Extra life percentage\n{3366FF}Cost: {FFFFFF}$1,500", "Yes", "No");
		        }
		        case 3: // Lock
		        {
		            strcat(strie, "{3366FF}Enter the lock level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}Extended time when attempting to breakin the vehicle, ($875 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Extra extended time when attempt to break into vehicle + breakin success more difficult, ($1,500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Superior extended time when attempt to break into vehicle {FFFFFF}+lvl 2{3366FF}, ($2,000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialogEx(playerid, 425, DIALOG_STYLE_INPUT, "Vehicle Lock", strie, "Purchase","Close");
		        }
		        case 4: // Alarm
		        {
		            strcat(strie, "{3366FF}Enter the alarm level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}When someone successfully breaks into your vehicle the alarm will ring, ($950 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Any attempts to break into your vehicle and the alarm will ring {FFFFFF}+lvl 1{3366FF}, ($1,500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Any theft or control attempts to your vehicle and the alarm will ring {FFFFFF}+lvl 1-2{3366FF}, ($3,000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialogEx(playerid, 426, DIALOG_STYLE_INPUT, "Vehicle Alarm", strie, "Purchase","Close");
		        }
		    }
		}
		case 422: // Insurance Purchase
		{
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext), priceex;
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
	        switch(amount)
			{
			    case 1: priceex=1500;
			    case 2: priceex=2500;
			    case 3: priceex=5000;
			}
			
            new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
   	        if(VehicleInfo[keyex][vInsurance] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this insurance level!");
   	        if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_ERROR, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                VehicleInfo[keyex][vInsurance]=0;
				}
			    return 1;
	        }
   	        if(VehicleInfo[keyex][vInsurance] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the insurance amount!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(OwnableVehicleID(keyex))) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-%s", FormatMoney(priceex));
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your level %d insurance for %s!", VehicleName[GetVehicleModel(OwnableVehicleID(keyex))-400], amount, FormatMoney(priceex));
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vInsurance]=amount;
          		    SetPVarInt(playerid, "UpgDelay", 60);
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    }
		}
		case 423:
		{
		    if(!response) return true;
		    new priceex = 2500;
			new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
   	        if (VehicleInfo[keyex][vEngLvl] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You already have this upgrade!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(OwnableVehicleID(keyex))) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-%s", FormatMoney(priceex));
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your engine upgrade for %s!", VehicleName[GetVehicleModel(OwnableVehicleID(keyex))-400], FormatMoney(priceex));
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vEngLvl]=1;
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    }
		}
		case 424:
		{
		    if(!response) return true;
		    new priceex = 1500;
			new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
   	        if (VehicleInfo[keyex][vBatLvl] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You already have this upgrade!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(OwnableVehicleID(keyex))) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-%s", FormatMoney(priceex));
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your battery upgrade for %s!", VehicleName[GetVehicleModel(OwnableVehicleID(keyex))-400], FormatMoney(priceex));
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vBatLvl]=1;
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    }
		}
		case 425: // Lock Purchase
		{
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext), priceex;
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
	        switch(amount)
			{
			    case 1: priceex=875;
			    case 2: priceex=1500;
			    case 3: priceex=2000;
			}
			
			new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
   	        if(VehicleInfo[keyex][vLockLvl] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this lock level!");
   	        if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_ERROR, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                VehicleInfo[keyex][vLockLvl]=0;
				} return 1;
	        }
   	        if(VehicleInfo[keyex][vLockLvl] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the lock level amount!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(OwnableVehicleID(keyex))) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-%s", FormatMoney(priceex));
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your level %d lock for %s!", VehicleName[GetVehicleModel(OwnableVehicleID(keyex))-400], amount, FormatMoney(priceex));
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vLockLvl]=amount;
          		    SetPVarInt(playerid, "UpgDelay", 60);
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    }
		}
		case 426: // Alarm Purchase
		{
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext), priceex;
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
	        switch(amount)
			{
			    case 1: priceex=950;
			    case 2: priceex=1500;
			    case 3: priceex=3000;
			}
			
			new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
   	        if(VehicleInfo[keyex][vAlarmLvl] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this alarm level!");
   	        if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_ERROR, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                VehicleInfo[keyex][vAlarmLvl]=amount;
				} return 1;
	        }
   	        if(VehicleInfo[keyex][vAlarmLvl] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the alarm amount!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(OwnableVehicleID(keyex))) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-%s", FormatMoney(priceex));
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your level %d alarm for %s!", VehicleName[GetVehicleModel(OwnableVehicleID(keyex))-400], amount, FormatMoney(priceex));
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vAlarmLvl]=amount;
          		    SetPVarInt(playerid, "UpgDelay", 60);
			    }
			    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    }
		}
		case 427: // Sell House
		{
		    if(!response) return true;
		    new idh = GetPVarInt(playerid, "HouseKey");
			new value = HouseInfo[idh][hValue];
		    if(GetPVarInt(playerid, "HouseKey") == 0) return 1;
		    if(HouseInfo[idh][hOwned] == 0) return 1;
		    if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[idh][hXo], HouseInfo[idh][hYo], HouseInfo[idh][hZo])) return error(playerid, "You are not near your house door.");
		    GivePlayerMoneyEx(playerid, value / 2);
		    SetPVarInt(playerid, "HouseKey", 0);
		    HouseInfo[idh][hOwned] = 0;
		    format(HouseInfo[idh][hOwner], 128, "None");
		    format(string, 128, "Property sold for %s!", FormatMoney(value / 2)); // Divide by 2.
		    SCM(playerid, -1, string);
		    //=========//
		    SaveHouseID(idh, 1);

		    RemoveHouseObjects(id);
		    //WipeCars(playerid);
		}
		case 428: // Sell Business
		{
		    if(!response) return true;
		    new idh = GetPVarInt(playerid, "BizKey");
		    if(GetPVarInt(playerid, "BizKey") == 0) return 1;
		    if(!IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[idh][Xo], BizInfo[idh][Yo], BizInfo[idh][Zo])) return error(playerid, "You are not near your business door.");
		    GivePlayerMoneyEx(playerid, BizInfo[idh][Value] / 2);
		    SetPVarInt(playerid, "BizKey", 0);
		    BizInfo[idh][Owned] = 0;
		    format(BizInfo[idh][Owner], 128, "None");
		    format(string, 128, "Business sold for %s!", FormatMoney(BizInfo[idh][Value] / 2));
		    SCM(playerid, -1, string);
		    
		    SaveBizID(idh, 1);
		}
		case 430: // Repair Vehicle
		{
		    if(!response) return true;

		    new vehicleID = -1;
		    new Float:distance = VEHICLE_INVENTORY_RANGE;

			for(new i = 0; i < PlayerSpawnedVehicles(playerid); i++)
	    	{
	    		new Float:pos[3];
	    		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	    		new temp_vehicleid = GetSpawnedVehicle(playerid, i);

	    		if(GetVehicleDistanceFromPoint(temp_vehicleid, pos[0], pos[1], pos[2]) < VEHICLE_INVENTORY_RANGE)
	    		{
	    			if(distance > GetVehicleDistanceFromPoint(temp_vehicleid, pos[0], pos[1], pos[2]))
		    		{
		    			distance = GetVehicleDistanceFromPoint(temp_vehicleid, pos[0], pos[1], pos[2]);
		    			vehicleID = temp_vehicleid;
		    		}
	    		}
	    	}

	    	if(vehicleID == -1) return SendClientMessage(playerid, COLOR_ERROR, "You have to be around one of your vehicles in order to use this.");

		    switch(listitem)
		    {
		        case 0: // Engine
		        {
		            if(!CheckVehItem(vehicleID, 801)) return scm(playerid, -1, "Your vehicle doesn't have a spare engine.");
		            if(!CheckInvItem(playerid, 406)) return scm(playerid, -1, "You need a toolkit to continue.");
             	    VehicleInfo[vehicleID][vEngineStats][1]=GetPerkMax(vehicleID, 1);
             	    VehicleInfo[vehicleID][vHealth]=1000.0;
             	    SetVehicleHealth(vehicleID, 1000.0);
             	    RemoveVehItem(vehicleID, 801);
             	    SaveVehicleData(vehicleID, 0);
             	    SetPVarInt(playerid, "RepairType", 1);
             	    TogglePlayerControllable(playerid, false);
             	    AddPlayerTag(playerid, "(replacing engine)");
             	    ProgressBar(playerid, "Replacing Engine...", 30, 5);
		        }
		        case 1: // Battery
		        {
		            if(!CheckVehItem(vehicleID, 802)) return scm(playerid, -1, "Your vehicle doesn't have a spare battery.");
		            if(!CheckInvItem(playerid, 406)) return scm(playerid, -1, "You need a toolkit to continue.");
             	    VehicleInfo[vehicleID][vBattery][1]=GetPerkMax(vehicleID, 2);
             	    RemoveVehItem(vehicleID, 802);
             	    SaveVehicleData(vehicleID, 0);
             	    SetPVarInt(playerid, "RepairType", 2);
             	    TogglePlayerControllable(playerid, false);
             	    AddPlayerTag(playerid, "(replacing battery)");
             	    ProgressBar(playerid, "Replacing Battery...", 30, 5);
		        }
		        case 2: // Tires
		        {
		            if(!CheckVehItem(vehicleID, 803)) return scm(playerid, -1, "Your vehicle doesn't have a spare tire.");
		            if(!CheckInvItem(playerid, 406)) return scm(playerid, -1, "You need a toolkit to continue.");
             	    new panels, doors, lights, tires;
             	    GetVehicleDamageStatus(vehicleID, panels, doors, lights, tires);
             	    UpdateVehicleDamageStatus(vehicleID, panels, doors, lights, 0);
             	    RemoveVehItem(vehicleID, 803);
             	    SaveVehicleData(vehicleID, 0);
             	    SetPVarInt(playerid, "RepairType", 3);
             	    TogglePlayerControllable(playerid, false);
             	    AddPlayerTag(playerid, "(replacing tires)");
             	    ProgressBar(playerid, "Replacing Tires...", 30, 5);
		        }
		    }
		}
		case 431:
		{
		    if(!strlen(inputtext) || strlen(inputtext) > 128)
		    {
		        ShowPlayerDialogEx(playerid,431,DIALOG_STYLE_INPUT, "Tagging", "Insert the text you would like the tag to display.","Insert", "");
		        return true;
		    }
		    new found = 0, foundid = 0;
	        for(new o = 0; o < sizeof(TagInfo); o++)
	        {
			    if(TagInfo[o][tUsed] == 0 && found == 0)
				{
				    found++;
				    foundid = o;
                }
            }
            if(found == 0) return scm(playerid, -1, "Can't find any tag slots available!");
            TagInfo[foundid][tUsed] = 1;
            TagInfo[foundid][tFact]=GetPVarInt(playerid, "Member");
            TagInfo[foundid][tX]=GetPVarFloat(playerid, "fX");
            TagInfo[foundid][tY]=GetPVarFloat(playerid, "fY");
            TagInfo[foundid][tZ]=GetPVarFloat(playerid, "fZ");
            format(TagInfo[foundid][tOwner], 25, "%s", PlayerInfo[playerid][pUsername]);
            SetPVarInt(playerid, "TagID", foundid);
            SetPVarString(playerid, "TagText", inputtext);
            ShowPlayerDialogEx(playerid, 432, DIALOG_STYLE_LIST,"Color Options", "White\nGrey\nRed\nPurple\nGreen\nYellow\nBlue\nLight Blue\nPink\nOrange", "Select", "");
		}
		case 432:
		{
			new color[25], tagbj = 19353, foundid = GetPVarInt(playerid, "TagID"), tagtext[25], tagfont[25], result[128];
			switch(listitem)
			{
			    case 0: color ="FFFFFF";
			    case 1: color ="666666";
			    case 2: color ="A31919";
			    case 3: color ="7A29CC";
			    case 4: color ="00A300";
			    case 5: color ="E6E600";
			    case 6: color ="003D99";
			    case 7: color ="4D77B8";
			    case 8: color ="FF47D1";
			    case 9: color ="FF9933";
			}
			GetPVarString(playerid, "TagText", tagtext, sizeof(tagtext));
			GetPVarString(playerid, "TagFont", tagfont, sizeof(tagfont));
			format(result, 128, "{%s}%s", color, tagtext);
			if(strlen(inputtext) > 25) { tagbj=19445; }
			TagInfo[foundid][tID]=CreateDynamicObject(tagbj, GetPVarFloat(playerid, "fX"), GetPVarFloat(playerid, "fY"), GetPVarFloat(playerid, "fZ"), GetPVarFloat(playerid, "fRotX"), GetPVarFloat(playerid, "fRotY"), GetPVarFloat(playerid, "fRotZ"), 0);
            SetDynamicObjectMaterialText(TagInfo[foundid][tID], 0, result, OBJECT_MATERIAL_SIZE_256x128, tagfont, GetPVarInt(playerid, "TagSize"), 1, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
            scm(playerid, -1, "Graffiti object created!");
            format(string, sizeof(string), "AdmWarn: %s (ID: %i) has created a graffiti object.", PlayerInfo[playerid][pName], playerid);
			SendAdminMessage(COLOR_YELLOW, string);
		}
		case 433:
		{
		    if(!strlen(inputtext) || strlen(inputtext) >= 25)
		    {
		        ShowPlayerDialogEx(playerid, 433, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert a serial ID.", "Insert","Cancel");
		        return true;
		    }
		    new amount = strval(inputtext);
		    mysql_pquery(handlesql, "SELECT `WepSerial`, `Name` FROM `accounts`;", "SerialListSQL", "ii", playerid, amount);
		}
		case 435:
		{
		    if(!response) return 1;
		    new strie[1024];
		    switch(listitem)
		    {
                case 0: // Basic Essentials
                {
                    strcat(strie, "{3366FF}Would you like to purchase basic essentials?");
                    strcat(strie, "\n{3366FF}Perk: {FFFFFF}Water and hydro features\n{3366FF}Cost: {FFFFFF}$1,500");
                    strcat(strie, "\n\n{FFFFFF}You will be deducted -$25 every payday.");
                    ShowPlayerDialogEx(playerid, 436, DIALOG_STYLE_MSGBOX, "Basic Upgrade", strie, "Yes", "No");
                }
                case 1: // Insurance
                {
                    scm(playerid, -1, "Insurance is currently unavailable!");
                }
                case 2: // Lock
                {
                    strcat(strie, "{3366FF}Enter the lock level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}Extended time when attempting to breakin the house, ($575 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Extra extended time when attempt to break into house + breakin success more difficult, ($850 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Superior extended time when attempt to break into house {FFFFFF}+lvl 2{3366FF}, ($1,500 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialogEx(playerid, 437, DIALOG_STYLE_INPUT, "House Lock", strie, "Purchase","Close");
                }
                case 3: // Alarm
                {
                    strcat(strie, "{3366FF}Enter the alarm level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}When someone successfully breaks into your house the alarm will ring, ($500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Any attempts to break into your house and the alarm will ring {FFFFFF}+lvl 1{3366FF}, ($1,000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}NOTE: This upgrade will only work when basic essentials are installed.");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialogEx(playerid, 438, DIALOG_STYLE_INPUT, "House Alarm", strie, "Purchase","Close");
                }
		    }
		}
		case 436:
		{
		    if(!response) return 1;
		    new keyex = GetPVarInt(playerid, "HouseKey");
		    if(keyex == 0) return 1;
		    new cost = 1500;
		    if(HouseInfo[key][hBasic] == 1) return scm(playerid, -1, "You already have this upgrade!");
		    if(GetPlayerMoneyEx(playerid) >= cost)
		    {
		        GivePlayerMoneyEx(playerid, -cost);
			    format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);
          		format(string, sizeof(string),"{FFFFFF}Congratulations on your basic upgrade for %s!", FormatMoney(cost));
          		SCM(playerid, -1, string);
          		HouseInfo[keyex][hBasic]=1;
          		HouseLights(keyex);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 437:
		{
		    if(!response) return 1;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext);
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
		    new keyex = GetPVarInt(playerid, "HouseKey");
		    if(keyex == 0) return 1;
		    new cost = 0;
		    switch(amount)
			{
			    case 1: cost=575;
			    case 2: cost=850;
			    case 3: cost=1500;
			}
		    if(HouseInfo[keyex][hLockLvl] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this lock level!");
		    if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_ERROR, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                HouseInfo[keyex][hLockLvl]=0;
			    } return 1;
	        }
   	        if(HouseInfo[keyex][hLockLvl] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the lock level amount!");
		    if(GetPlayerMoneyEx(playerid) >= cost)
		    {
		        GivePlayerMoneyEx(playerid, -cost);
			    format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);
          		format(string, sizeof(string),"{FFFFFF}Congratulations on your level %d lock for %s!", amount, FormatMoney(cost));
          		SCM(playerid, -1, string);
          		HouseInfo[keyex][hLockLvl]=amount;
          		SetPVarInt(playerid, "UpgDelay", 60);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 438:
		{
		    if(!response) return 1;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext);
	        if(amount < 0) return true;
	        if(amount >= 3) return true;
		    new keyex = GetPVarInt(playerid, "HouseKey");
		    if(keyex == 0) return 1;
		    new cost = 0;
		    switch(amount)
			{
			    case 1: cost=500;
			    case 2: cost=1000;
			}
		    if(HouseInfo[keyex][hAlarm] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this alarm level!");
		    if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_ERROR, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                HouseInfo[keyex][hAlarm]=0;
				} return 1;
	        }
   	        if(HouseInfo[keyex][hAlarm] >= 2) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the alarm level amount!");
		    if(GetPlayerMoneyEx(playerid) >= cost)
		    {
		        GivePlayerMoneyEx(playerid, -cost);
			    format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);
          		format(string, sizeof(string),"{FFFFFF}Congratulations on your alarm %d lock for %s!", amount, FormatMoney(cost));
          		SCM(playerid, -1, string);
          		HouseInfo[keyex][hAlarm]=amount;
          		SetPVarInt(playerid, "UpgDelay", 60);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 440:
		{
		    if(response)
			{
				new found, foundid, Float:pos[3], result[500];
			    for(new i = 0; i < sizeof(CorpInfo); i++)
                {
                    if(CorpInfo[i][cUsed] == 1 && found == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]))
                        {
                            found++;
                            foundid = i;
                        }
                    }
			    }
			    if(found == 0) return 1;
			    switch(listitem)
			    {
			        case 0: // Examine
			        {
						format(result, 500, "%s\n%s", CorpInfo[foundid][cNote1], CorpInfo[foundid][cNote2]);
			            ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Corpse Information", result, "Close", "");
			        }
			        case 1: // Store In Vehicle
			        {
			            if(GetPVarInt(playerid, "Dead") > 0) return 1;
	    	            if(GetPVarInt(playerid, "Mute") == 1) return 1;
	    	            if(GetPVarInt(playerid, "Cuffed") != 0) return 1;
	    	            new vehicleID = IsPlayerVehicleSpawned(playerid);
                        if(vehicleID == -1) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");
                        GetVehiclePos(vehicleID, pos[0], pos[1], pos[2]);
                        if(VehicleInfo[vehicleID][vTrunk] == 0) {
                            scm(playerid, -1, "The trunk must be open to store a corpse inside !");
                            return 1;
                        }
		                if(IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2]))
						{
						    if(VehicleInfo[vehicleID][vCorp] > 0) return scm(playerid, -1, "There's a corpse already in this vehicle!");
						    scm(playerid, -1, "Corpse stored in the vehicle!");
						    CorpInfo[foundid][cTime]=60;
						    CorpInfo[foundid][cVeh]=vehicleID;
						    VehicleInfo[vehicleID][vCorp]=foundid;
						    DestroyDynamic3DTextLabel(CorpInfo[foundid][cText]);
						    //DestroyDynamicObject(CorpInfo[foundid][cObj]);
						    DestroyActorEx(CorpInfo[foundid][cActor]);
						}
						else SendClientMessage(playerid, COLOR_ERROR, "You are not around your vehicle.");
			        }
			        case 2: // Corpse removed
			        {
			            RemoveCorpse(foundid);
			            scm(playerid, -1, "Corpse discarded.");
			        }
			    }
			}
		}
		case 441:
		{
		    if(!response) return 1;
		    new strie[1024];
		    switch(listitem)
		    {
                case 0: // Basic Essentials
                {
                    strcat(strie, "{3366FF}Would you like to purchase basic essentials?");
                    strcat(strie, "\n{3366FF}Perk: {FFFFFF}Water and hydro features\n{3366FF}Cost: {FFFFFF}$1,500");
                    strcat(strie, "\n\n{FFFFFF}You will be deducted -$25 every payday if hydro usage.");
                    ShowPlayerDialogEx(playerid, 442, DIALOG_STYLE_MSGBOX, "Basic Upgrade", strie, "Yes", "No");
                }
                case 1: // Storage
                {
                    strcat(strie, "{3366FF}Enter the storage level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}Max product storage capacity up to 250 {3366FF}, ($1,500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Max product storage capacity up to 500 {3366FF}, ($2,500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Max product storage capacity up to 1000 {3366FF}, ($3,500 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialogEx(playerid, 443, DIALOG_STYLE_INPUT, "House Alarm", strie, "Purchase","Close");
                }
		    }
		}
		case 442:
		{
		    if(!response) return 1;
		    new keyex = GetPVarInt(playerid, "BizKey");
		    if(keyex == 0) return 1;
		    new cost = 1500;
		    if(BizInfo[key][Basic] == 1) return scm(playerid, -1, "You already have this upgrade!");
		    if(GetPlayerMoneyEx(playerid) >= cost)
		    {
		        GivePlayerMoneyEx(playerid, -cost);
			    format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);
          		format(string, sizeof(string),"{FFFFFF}Congratulations on your basic upgrade for %s!", FormatMoney(cost));
          		SCM(playerid, -1, string);
          		BizInfo[keyex][Basic]=1;
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 443:
		{
		    if(!response) return 1;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext);
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
		    new keyex = GetPVarInt(playerid, "BizKey");
		    if(keyex == 0) return 1;
		    new cost = 0;
		    switch(amount)
			{
			    case 1: cost=1500;
			    case 2: cost=2500;
			    case 3: cost=3500;
			}
		    if(BizInfo[keyex][Stor] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this storage level!");
		    if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_ERROR, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                BizInfo[keyex][Stor]=0;
			    } return 1;
	        }
   	        if(BizInfo[keyex][Stor] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the storage level amount!");
		    if(GetPlayerMoneyEx(playerid) >= cost)
		    {
		        GivePlayerMoneyEx(playerid, -cost);
			    format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
          		GameTextForPlayer(playerid, string, 5000, 1);
          		format(string, sizeof(string),"{FFFFFF}Congratulations on your level %d storage for %s!", amount, FormatMoney(cost));
          		SCM(playerid, -1, string);
          		BizInfo[keyex][Stor]=amount;
          		SetPVarInt(playerid, "UpgDelay", 60);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 445:
		{
		    if(!response) return 1;
		    new keyex = FurnRight(playerid, 1), Float:Pos[3];
		    if(keyex <= 0) return 1;
            if(GetPlayerMoneyEx(playerid) >= 1500)
		    {
				GivePlayerMoneyEx(playerid, -1500);
			    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
      		    HouseInfo[keyex][hXi] = Pos[0];
			    HouseInfo[keyex][hYi] = Pos[1];
			    HouseInfo[keyex][hZi] = Pos[2];
			    HouseInfo[keyex][hIntIn] = GetPlayerInterior(playerid);
			    scm(playerid, -1, "House Exit has been switched to your position for $1,500!");
			    HouseInfo[keyex][hUD]++;
			    GameTextForPlayer(playerid, "~r~-$1,500", 5000, 1);
			    SaveHouseID(keyex, 0);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 446:
		{
		    if(!response) return 1;
		    new keyex = FurnRight(playerid, 2), Float:Pos[3];
		    if(keyex <= 0) return 1;
		    if(GetPlayerMoneyEx(playerid) >= 1500)
		    {
				GivePlayerMoneyEx(playerid, -1500);
		    	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
      			BizInfo[keyex][Xi] = Pos[0];
				BizInfo[keyex][Yi] = Pos[1];
				BizInfo[keyex][Zi] = Pos[2];
				BizInfo[keyex][IntIn] = GetPlayerInterior(playerid);
				scm(playerid, -1, "Business exit has been switched to your position for $1,500!");
				BizInfo[keyex][UD]++;
				GameTextForPlayer(playerid, "~r~-$1,500", 5000, 1);
				SaveBizID(keyex, 0);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 447:
		{
		    if(!response) return 1;
		    new keyex = FurnRight(playerid, 2), Float:Pos[3];
		    if(keyex <= 0) return 1;
		    if(GetPlayerMoneyEx(playerid) >= 1500)
		    {
				GivePlayerMoneyEx(playerid, -1500);
		    	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
      			BizInfo[keyex][CP][0] = Pos[0];
				BizInfo[keyex][CP][1] = Pos[1];
				BizInfo[keyex][CP][2] = Pos[2];

				DestroyDynamicCP(BizInfo[keyex][bCP]);
				BizInfo[keyex][bCP] = CreateDynamicCP(BizInfo[keyex][CP][0], BizInfo[keyex][CP][1], BizInfo[keyex][CP][2], 1.0, BizInfo[keyex][VwIn], -1, -1, 5.0);

				scm(playerid, -1, "Business checkpoint has been switched to your position for $1,500!");
				BizInfo[keyex][UD]++;
				GameTextForPlayer(playerid, "~r~-$1,500", 5000, 1);
				SaveBizID(keyex, 0);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 450:
		{
		    if(!response) return 1;
		    new found = 0, foundid = 0;
	        for(new o = 0; o < sizeof(PresInfo); o++)
	        {
			    if(PresInfo[o][pUsed] == 0 && found == 0)
				{
				    found++;
				    foundid=o;
                }
            }
            if(found == 0) return scm(playerid, -1, "Can't find any present slots available!");
            PresInfo[foundid][pID]=CreateDynamicObject(PlayerInfo[playerid][pFurnID], GetPVarFloat(playerid, "fX"), GetPVarFloat(playerid, "fY"), GetPVarFloat(playerid, "fZ"), GetPVarFloat(playerid, "fRotX"), GetPVarFloat(playerid, "fRotY"), GetPVarFloat(playerid, "fRotZ"), 0);
            PresInfo[foundid][pText]=CreateDynamic3DTextLabel( "| CHRISTMAS PRESENT |\nType /unwrap to open!", 0xFF0000FF,  GetPVarFloat(playerid, "fX"), GetPVarFloat(playerid, "fY"), GetPVarFloat(playerid, "fZ")+0.75, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);
            PresInfo[foundid][pUsed]=1;
            PresInfo[foundid][pType]=listitem;
            PresInfo[foundid][pcX]=GetPVarFloat(playerid, "fX");
            PresInfo[foundid][pcY]=GetPVarFloat(playerid, "fY");
            PresInfo[foundid][pcZ]=GetPVarFloat(playerid, "fZ");
            scm(playerid, -1, "Present Created!");
            scm(playerid, -1, "To remove a present type /removepresent or /removepresentall.");
		}
		case 460: // Create security password.
		{
		    if(!strlen(inputtext) || strlen(inputtext) < 5 || strlen(inputtext) > 30) {
		    ShowPlayerDialogEx(playerid,460,DIALOG_STYLE_PASSWORD,"Security Password","For security purposes we are asking you to create a security password\npassword minimum length is 5-30 characters.","Register", ""); return 1; }
		    scm(playerid, -1, "Security password has been created!");
		    scm(playerid, -1, "When someone tries logging into your account with a different IP address ...");
		    scm(playerid, -1, "... it will require you to enter the security psssword.");
		    new input[128], hashpass[129];
		    mysql_escape_string(inputtext, input);
			WP_Hash(hashpass, sizeof(hashpass), input);
		    new query[256], ip[128];
		    mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET SecPass='%e' WHERE Name='%e'", hashpass, PlayerInfo[playerid][pUsername]);
			mysql_pquery(handlesql, query);
			GetPlayerIp(playerid, ip, 128);
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET IP='%e' WHERE Name='%e'", ip, PlayerInfo[playerid][pUsername]);
			mysql_pquery(handlesql, query);

			if(GetPVarInt(playerid, "Registering") == 1)
			{
				new Skin[312], count = -1;
   				for(new i = 1; i < sizeof(Skin); i++)
			    {
			       	if(i != 0 && i != 300 && i != 74 && (i < 274 || i > 288) && (i < 264 || i >267) && i != 149 &&
			       		i != 311 && i != 310 && i != 309 && i != 308 && i != 307 && i != 306 && i != 302 && i != 301 &&
			       		i != 300)
			       	{
						count++;
	   					Skin[count] = i;
					}
			    }
			    if(count != -1) ShowModelSelectionMenuEx(playerid, Skin, count, "Select skin", 14, 0.0, 0.0, 0.0);
				return 1;
			}
			LoadAccEx(playerid);
		}
		case 461: // Login security password.
		{
		    if(!strlen(inputtext) || strlen(inputtext) < 5 || strlen(inputtext) > 30) {
		    ShowPlayerDialogEx(playerid,461,DIALOG_STYLE_PASSWORD,"Security Login","You are logged in with a different IP address, please enter your security password!","Login", ""); return 1; }
		    new hashpass[129], query[256], ip[128];
            WP_Hash(hashpass, sizeof(hashpass), inputtext);
            if(strcmp(PlayerInfo[playerid][pSec], hashpass, true) == 0) {
            scm(playerid, -1, "Security Password successful!");
            GetPlayerIp(playerid, ip, 128);
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET IP='%e' WHERE Name='%e'", ip, PlayerInfo[playerid][pUsername]);
			mysql_pquery(handlesql, query);
			LoadAccEx(playerid);
			} else {
			KickPlayer(playerid, "Security Password invalid, you have been kicked!");
			}
		}
		case 501: //What layer do you want to change? Material-editing.
		{
			if(!response) return 1;
			SetPVarInt(playerid, "FurnEditL", listitem);
			new list[2048];
			for(new i=0; i < sizeof(MaterialIDs); i++)
			{
				format(list, sizeof(list), "%s\n%s", list, MaterialIDs[i][Name]);
			}
			ShowPlayerDialogEx(playerid, 502, DIALOG_STYLE_LIST, "Material List", list, "Select", "Back");
		}
		case 502: //Object Material List
		{
			if(!response) {
				DeletePVar(playerid,"FurnEditL");
				return ShowPlayerDialogEx(playerid, 501, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "Select", "Close");
			}
			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
			if(listitem == 0)
			{
				BizMaterialInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = 0;
				if(IsValidDynamicObject(BizInfo[key2][bObject][h])) DestroyDynamicObject(BizInfo[key2][bObject][h]);

				if(IsBizOutdoorObject(key2, h))
				{
					BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], 
						BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], 
						BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], 
						BizInfo[key2][VwOut]);
				}
				else
				{
					BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], 
						BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], 
						BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], 
						BizInfo[key2][VwIn]);
				}

				for(new v = 0; v < BUSINESS_OBJECT_MATERIALS; v++)
				{
					if(BizMaterialInfo[key2][h][v] != 0)
					{
						ChangeDynamicObjectMaterial(BizInfo[key2][bObject][h], v, BizMaterialInfo[key2][h][v]);
					}
				}

				SaveBizFurn(key2);
				format(string, sizeof(string), "Object %d's material layer %d reset to default.",BizInfo[key2][bObject][h], GetPVarInt(playerid,"FurnEditL"));
				return SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			ChangeDynamicObjectMaterial(BizInfo[key2][bObject][h], GetPVarInt(playerid,"FurnEditL"), listitem);
			BizMaterialInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = listitem;
			SaveBizFurn(key2);
			format(string, sizeof(string), "Object %d's material layer %d changed to: '%s'.",BizInfo[key2][bObject][h], GetPVarInt(playerid,"FurnEditL"), MaterialIDs[listitem][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid,"FurnEditL");
		}
		case 503: //What layer do you want to change? Material-editing.
		{
			if(!response) return 1;
			SetPVarInt(playerid, "FurnEditL", listitem);
			new list[2048];
			for(new i = 0; i < sizeof(MaterialIDs); i++)
			{
				format(list, sizeof(list),"%s\n%s", list, MaterialIDs[i][Name]);
			}
			ShowPlayerDialogEx(playerid, 504, DIALOG_STYLE_LIST, "Material List", list, "Select", "Back");
		}
		case 504: //Object Material List
		{
			if(!response)
			{
				DeletePVar(playerid,"FurnEditL");
				return ShowPlayerDialogEx(playerid, 503, DIALOG_STYLE_LIST, "Which layer would you like to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "Select", "Close");
			}

			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
			if(listitem == 0)
			{
				HouseMaterialInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = 0;
				if(IsValidDynamicObject(HouseInfo[key2][hObject][h])) DestroyDynamicObject(HouseInfo[key2][hObject][h]);

				if(GetDistanceFromPointToPoint(HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], 
				HouseInfo[key2][hXo], HouseInfo[key2][hYo], HouseInfo[key2][hZo]) <= HOUSE_PLANT_DISTANCE)
				{
					HouseInfo[key2][hObject][h] = CreateDynamicObject(HouseInfo[key2][hoID][h], 
						HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], 
						HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h], 
						HouseInfo[key2][hVwOut]);
				}
				else
				{
					HouseInfo[key2][hObject][h] = CreateDynamicObject(HouseInfo[key2][hoID][h], 
						HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], 
						HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h], 
						HouseInfo[key2][hVwIn]);
				}
				
				for( new v = 0; v < HOUSE_OBJECT_MATERIALS; v++)
				{
					if(HouseMaterialInfo[key2][h][v] != 0)
					{
						ChangeDynamicObjectMaterial(HouseInfo[key2][hObject][h], v, HouseMaterialInfo[key2][h][v]);
					}
				}

				SaveFurn(key2);
				format(string, sizeof(string), "Object %d's material layer %d has been reset to default.", HouseInfo[key2][hoID][h], GetPVarInt(playerid,"FurnEditL"));
				return SendClientMessage(playerid, COLOR_WHITE, string);
			}
			ChangeDynamicObjectMaterial(HouseInfo[key2][hObject][h], GetPVarInt(playerid,"FurnEditL"), listitem);
			HouseMaterialInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = listitem;
			SaveFurn(key2);
			format(string, sizeof(string), "Object %d's material layer %d has been set to %s.", HouseInfo[key2][hoID][h], GetPVarInt(playerid,"FurnEditL"), MaterialIDs[listitem][Name]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			DeletePVar(playerid,"FurnEditL");
		}
		case 505:
		{
			new mtg = GetPVarInt(playerid, "MarriagePlayer"), result[256];
			DeletePVar(playerid,"MarriagePlayer");
		    switch(response)
	        {
	            case 0:
	            {
	                format(string,sizeof(string),"%s denied your marriage offer.", PlayerInfo[playerid][pUsername]);
	                SendClientMessage(mtg, COLOR_WHITE, string);
	                DeletePVar(mtg, "MarriagePlayer");
	            }
	            case 1:
	            {
	                if(GetPlayerMoneyEx(mtg) >= 20000) {
	                    GivePlayerMoneyEx(mtg,-20000);
	                }
	                strmid(PlayerInfo[playerid][pMarriedTo], PlayerInfo[mtg][pUsername], 0, strlen(PlayerInfo[mtg][pUsername]), 255);
	                strmid(PlayerInfo[mtg][pMarriedTo], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	                if(GetPVarInt(playerid, "Sex") == GetPVarInt(mtg, "Sex")) {
	                format(result, 256,"(( Marriage News: We have a new lovely gay couple, %s & %s have been legally married. ))", PlayerInfo[playerid][pUsername], PlayerInfo[mtg][pUsername]);
	                } else {
	                format(result, 256,"(( Marriage News: We have a new lovely couple, %s & %s have been married. ))", PlayerInfo[playerid][pUsername], PlayerInfo[mtg][pUsername]); }
	                SendClientMessageToAll(-1, result);
	                DeletePVar(mtg,"MarriagePlayer");
	                scm(mtg, -1, "TIP: You have a free namechange ticket to switch your surname.");
	                SetPVarInt(mtg, "Changes", GetPVarInt(mtg, "Changes")+1);
	            }
			}
		}
		case 506:
		{
		    if(!response) {
				DeletePVar(playerid,"FurnEditL");
				return 1;
			}
			if(!strlen(inputtext) || strlen(inputtext) > 128)
		    {
		        DeletePVar(playerid,"FurnEditL");
		        scm(playerid, -1, "Length is too short or too long.");
		        return true;
		    }
			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
			SetDynamicObjectMaterialText(HouseInfo[key2][hObject][h], 0, inputtext, OBJECT_MATERIAL_SIZE_256x128, "Arial", 30, 1, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
			HouseMaterialInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = listitem;
			format(string, sizeof(string), "Object %d's text set to: '%s'.", inputtext);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			SaveFurn(key2);
			DeletePVar(playerid,"FurnEditL");
		}
		case 507: // Donut DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 9), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(DonutItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}
		case 508:
		{
		    if(!response) return true;

			new Float:cell_pos[3];

		    switch(listitem)
		    {
		        case 0: // Open All Cells
		        {
		        	for(new i = 0; i < sizeof(Cells); i++)
		        	{
		        		new objectid;
		        		if(GetPlayerVirtualWorld(playerid) == 1)
		        		{
		        			objectid = CellObjectID[i];
		        		}
		        		else if(GetPlayerVirtualWorld(playerid) == 2)
		        		{
		        			objectid = CellObjectID2[i];
		        		}

		        		GetDynamicObjectPos(objectid, cell_pos[0], cell_pos[1], cell_pos[2]);
		        		
		        		if(cell_pos[0] == Cells[i][cX])
		        		{
		        			cell_pos[0] += 1.5;
		        		}
		        		
		        		MoveDynamicObject(objectid, cell_pos[0], cell_pos[1], cell_pos[2], 5.0);
		        	}

		        	SendClientMessage(playerid, COLOR_WHITE, "All cells are now opened.");
		        }
		        case 1: // Close All Cells
		        {
		            for(new i = 0; i < sizeof(Cells); i++)
		        	{
		        		new objectid;
		        		if(GetPlayerVirtualWorld(playerid) == 1)
		        		{
		        			objectid = CellObjectID[i];
		        		}
		        		else if(GetPlayerVirtualWorld(playerid) == 2)
		        		{
		        			objectid = CellObjectID2[i];
		        		}

		        		GetDynamicObjectPos(objectid, cell_pos[0], cell_pos[1], cell_pos[2]);
		        		
		        		if(cell_pos[0] != Cells[i][cX])
		        		{
		        			cell_pos[0] = Cells[i][cX];
		        		}
		        		
		        		MoveDynamicObject(objectid, cell_pos[0], cell_pos[1], cell_pos[2], 5.0);
		        	}

		        	SendClientMessage(playerid, COLOR_WHITE, "All cells are now closed.");
		        }
		        case 2: // Open Cell
		        {
		        	SetPVarInt(playerid, "CellCommand", 0);
		            ShowPlayerDialogEx(playerid, 509, DIALOG_STYLE_INPUT, "Open Cell", "Enter the cell number you would like to open.", "Select", "Cancel");
		        }
		        case 3: // Close Cell
		        {
		        	SetPVarInt(playerid, "CellCommand", 1);
		            ShowPlayerDialogEx(playerid, 509, DIALOG_STYLE_INPUT, "Close Cell", "Enter the cell number you would like to close.", "Select", "Cancel");
		        }
		    }
		}
		case 509:
		{
		    if(!response) return 1;

		    if(!IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > sizeof(Cells) - 1)
		    {
		    	format(string, sizeof(string), "Invalid cell number. (input a number between %i and %i)", 0, sizeof(Cells) - 1);
		    	SendClientMessage(playerid, COLOR_ERROR, string);

		    	if(GetPVarInt(playerid, "CellCommand") == 0)
		    	{
		    		ShowPlayerDialogEx(playerid, 509, DIALOG_STYLE_INPUT, "Open Cell", "Enter the cell number you would like to open.", "Select", "Cancel");
		    	}
		    	else
		    	{
		    		ShowPlayerDialogEx(playerid, 509, DIALOG_STYLE_INPUT, "Close Cell", "Enter the cell number you would like to close.", "Select", "Cancel");
		    	}
		    	return 1;
		    }

		    new Float:cell_pos[3];

		    if(GetPVarInt(playerid, "CellCommand") == 0)
		    {
		    	new objectid;
        		if(GetPlayerVirtualWorld(playerid) == 1)
        		{
        			objectid = CellObjectID[strval(inputtext)];
        		}
        		else if(GetPlayerVirtualWorld(playerid) == 2)
        		{
        			objectid = CellObjectID2[strval(inputtext)];
        		}

		    	GetDynamicObjectPos(objectid, cell_pos[0], cell_pos[1], cell_pos[2]);
		        		
        		if(cell_pos[0] == Cells[strval(inputtext)][cX])
        		{
        			cell_pos[0] += 1.5;
        			SendClientMessage(playerid, COLOR_WHITE, "Cell opened.");
        		}
        		else
        		{
        			return SendClientMessage(playerid, COLOR_ERROR, "This cell is already opened.");
        		}
        		
        		MoveDynamicObject(objectid, cell_pos[0], cell_pos[1], cell_pos[2], 5.0);
		    }
		    else
		    {
		    	new objectid;
        		if(GetPlayerVirtualWorld(playerid) == 1)
        		{
        			objectid = CellObjectID[strval(inputtext)];
        		}
        		else if(GetPlayerVirtualWorld(playerid) == 2)
        		{
        			objectid = CellObjectID2[strval(inputtext)];
        		}

		    	GetDynamicObjectPos(objectid, cell_pos[0], cell_pos[1], cell_pos[2]);
		        		
        		if(cell_pos[0] != Cells[strval(inputtext)][cX])
        		{
        			cell_pos[0] = Cells[strval(inputtext)][cX];
        			SendClientMessage(playerid, COLOR_WHITE, "Cell closed.");
        		}
        		else
        		{
        			return SendClientMessage(playerid, COLOR_ERROR, "This cell is already closed.");
        		}
        		
        		MoveDynamicObject(objectid, cell_pos[0], cell_pos[1], cell_pos[2], 5.0);
		    }
		}
		case 510:
		{
			switch(listitem)
			{
			    case 0: // View Bolo's
			    {
			        ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			        new found = 0;
			        for(new i=0;i<sizeof(BoloInfo);i++)
                    {
                        if(BoloInfo[i][bUsed] == 1)
                        {
							found++;
                        }
                    }
                    if(found == 0) return SendClientMessage(playerid,COLOR_BLUE,"BOLO: No bolo's available.");
                    SendClientMessage(playerid,COLOR_WHITE,"BOLO List:");
                    for(new i = 0; i < sizeof(BoloInfo); i++)
                    {
                        if(BoloInfo[i][bUsed] == 1)
                        {
							format(string, 256, "BOLO %d - %s: %s", i+1, GetNameWithSpace(BoloInfo[i][bOfficer]), BoloInfo[i][bString]);
							SendClientMessage(playerid, COLOR_BLUE, string);
                        }
                    }
			    }
			    case 1: // Add Bolo
			    {
					new found = 0;
			        for(new i=0;i<sizeof(BoloInfo);i++)
                    {
                        if(BoloInfo[i][bUsed] == 0)
                        {
							found++;
                        }
                    }
                    if(found == 0)
                    {
                        ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
					    return SendClientMessage(playerid,COLOR_BLUE,"There is no bolo slots available.");
					}
                    ShowPlayerDialogEx(playerid,511,DIALOG_STYLE_INPUT,"Bolo Add","- Enter your text here -","Enter", "Go Back");
			    }
			    case 2: ShowPlayerDialogEx(playerid,512,DIALOG_STYLE_LIST,"Bolo Remove","ID - 1\nID - 2\nID - 3\nID - 4\nID - 5\nID - 6\nID - 7\nID - 8\nID - 9\nID - 10","Select", "Go Back");
			}
		}
		case 511:
		{
			switch(response)
			{
			    case 0: ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			    case 1: // Add Bolo
			    {
					new found = 0, foundid = 0;
			        for(new i=0;i<sizeof(BoloInfo);i++)
                    {
                        if(BoloInfo[i][bUsed] == 0)
                        {
                            found++;
							foundid=i;
                        }
                    }
                    if(found == 0)
                    {
                        ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
					    return SendClientMessage(playerid,COLOR_BLUE,"There is no bolo slots available.");
					}
					if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid,91,DIALOG_STYLE_INPUT,"Bolo","- Enter your text here -","Enter", "Go Back");
	                if(strlen(inputtext) >= 128)
	                {
					    SendClientMessage(playerid, COLOR_WHITE, "Text is too long (max 128 chars).");
					    ShowPlayerDialogEx(playerid,511,DIALOG_STYLE_INPUT,"Bolo","- Enter your text here -","Enter", "Go Back");
					    return 1;
					}
					BoloInfo[foundid][bUsed]=1;

					format(BoloInfo[foundid][bOfficer], MAX_PLAYER_NAME + 1, "%s", PlayerInfo[playerid][pUsername]);

					strmid(BoloInfo[foundid][bString], inputtext, 0, strlen(inputtext), 255);
					format(string, 256, "BOLO: %s set a bolo: (%s).", PlayerInfo[playerid][pUsername], inputtext);
      		        SendFactionMessage(1,COLOR_BLUE,string);
                    ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			    }
			}
		}
		case 512:
		{
			switch(response)
			{
			    case 0: ShowPlayerDialogEx(playerid,510,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			    case 1:
			    {
			        ShowPlayerDialogEx(playerid,512,DIALOG_STYLE_LIST,"Bolo Remove","ID - 1\nID - 2\nID - 3\nID - 4\nID - 5\nID - 6\nID - 7\nID - 8\nID - 9\nID - 10","Select", "Go Back");
					if(BoloInfo[listitem][bUsed] == 0)
					{
					    format(string, sizeof(string), "Bolo ID: (%d) is not being used.", listitem+1);
					    SendClientMessage(playerid,COLOR_WHITE,string);
					    return 1;
					}
					format(string, 256, "BOLO: %s removed bolo: (%s).", PlayerInfo[playerid][pUsername], BoloInfo[listitem][bString]);
      		        SendFactionMessage(1,COLOR_BLUE,string);
      		        BoloInfo[listitem][bUsed]=0;
      		        strmid(BoloInfo[listitem][bString], "None", 0, strlen("None"), 255);
			    }
			}
		}
		case 513:
		{
			if(!response) return 1;

			new houseid = GetPVarInt(playerid, "HouseKey");

			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "You have to be on foot in order to do this.");
	  		if(!IsPlayerInRangeOfPoint(playerid, HOUSE_GARAGE_DISTANCE, HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo])) return SendClientMessage(playerid, COLOR_ERROR, "You are too far away from your house entrance.");
	  		if(GetPlayerMoneyEx(playerid) < GARAGE_ENTRANCE_COST) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to do this.");

	  		GivePlayerMoneyEx(playerid, -GARAGE_ENTRANCE_COST);

			new Float:x, Float:y, Float:z, Float:a;

			new string3[32];
			format(string3, sizeof(string3),"~r~-%s", FormatMoney(GARAGE_ENTRANCE_COST));
          	GameTextForPlayer(playerid, string3, 5000, 1);

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);

	  		if(HouseInfo[houseid][gIcon] != 0) DestroyDynamicCP(HouseInfo[houseid][gIcon]);
	  		HouseInfo[houseid][gIcon] = CreateDynamicCP(x, y, z, 3.0, 0, -1, -1, 3.0);
	  		HouseInfo[houseid][hgXo] = x;
			HouseInfo[houseid][hgYo] = y;
	        HouseInfo[houseid][hgZo] = z;
	        HouseInfo[houseid][hgAo] = a;
	        HouseInfo[houseid][gInterior] = 1;

	        if(HouseInfo[houseid][Garage] == 0)
	        {
	        	if(HouseInfo[houseid][hClass] == 2)
		        {
		        	HouseInfo[houseid][hgXi] = 286.7440;
					HouseInfo[houseid][hgYi] = 1080.8870;
			        HouseInfo[houseid][hgZi] = 1185.0172;
			        HouseInfo[houseid][hgAi] = 177.6385;
		        }
		        else
		        {
		        	HouseInfo[houseid][hgXi] = 603.3348;
					HouseInfo[houseid][hgYi] = 1829.4977;
			        HouseInfo[houseid][hgZi] = 1586.4860;
			        HouseInfo[houseid][hgAi] = 88.7960;
		        }
	        }

	        HouseInfo[houseid][Garage] = 1;

	        SendClientMessage(playerid, COLOR_WHITE, "Garage entrance has been set!");

	        SaveHouseID(houseid, 0);
		}
		case 514:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < GARAGE_EXIT_COST) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to do this.");

			GivePlayerMoneyEx(playerid, -GARAGE_EXIT_COST);

			new string3[32];
			format(string3, sizeof(string3),"~r~-%s", FormatMoney(GARAGE_EXIT_COST));
          	GameTextForPlayer(playerid, string3, 5000, 1);

			new houseid = GetPVarInt(playerid, "HouseKey");

			new Float:x, Float:y, Float:z, Float:a;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);

	        HouseInfo[houseid][gInterior] = GetPlayerInterior(playerid);
	        HouseInfo[houseid][hgXi] = x;
			HouseInfo[houseid][hgYi] = y;
	        HouseInfo[houseid][hgZi] = z;
	        HouseInfo[houseid][hgAi] = a;

	        SendClientMessage(playerid, COLOR_WHITE, "Garage exit has been set!");

	        SaveHouseID(houseid, 0);
		}
		case 515:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < GARAGE_BARESWITCH_COST) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to do this.");

			new houseid = GetPVarInt(playerid, "HouseKey");

			if(GetPVarInt(playerid, "GarageEnter") != GetPVarInt(playerid, "HouseKey") && 
				!IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[houseid][hgXo], HouseInfo[houseid][hgYo], HouseInfo[houseid][hgZo])) return SendClientMessage(playerid, COLOR_ERROR, "You are not near your garage.");

			GivePlayerMoneyEx(playerid, -GARAGE_BARESWITCH_COST);

			new string3[32];
			format(string3, sizeof(string3),"~r~-%s", FormatMoney(GARAGE_BARESWITCH_COST));
          	GameTextForPlayer(playerid, string3, 5000, 1);

			if(GetPVarInt(playerid, "GarageEnter") != 0)
	  		{
	  			HouseInfo[houseid][gInterior] = 1;
		        HouseInfo[houseid][hgXi] = 1402.7845;
				HouseInfo[houseid][hgYi] = 1.9748;
		        HouseInfo[houseid][hgZi] = 1000.9152;
		        HouseInfo[houseid][hgAi] = 182.1760;

				for(new i = 0; i < MAX_HOUSE_OBJ; i++)
				{
					if(HouseInfo[houseid][hoID][i] != 0 && IsHouseOutdoorObject(houseid, i))
					{
						RemoveHouseObject(houseid, i);
					}
				}

		        SaveFurn(houseid);
		        SaveHouseID(houseid, 0);

		        SendClientMessage(playerid, COLOR_WHITE, "Garage has been reset!");

		        SetPlayerPosEx(playerid, HouseInfo[houseid][hgXi], HouseInfo[houseid][hgYi], HouseInfo[houseid][hgZi]);
		        SetPlayerInterior(playerid, HouseInfo[houseid][gInterior]);
	  		}
	  		else
	  		{
	  			HouseInfo[houseid][gInterior] = 1;
		        HouseInfo[houseid][hgXi] = 1402.7845;
				HouseInfo[houseid][hgYi] = 1.9748;
		        HouseInfo[houseid][hgZi] = 1000.9152;
		        HouseInfo[houseid][hgAi] = 182.1760;

				for(new i = 0; i < MAX_HOUSE_OBJ; i++)
				{
					if(HouseInfo[houseid][hoID][i] != 0 && IsHouseOutdoorObject(houseid, i))
					{
						RemoveHouseObject(houseid, i);
					}
				}

		        SaveFurn(houseid);
		        SaveHouseID(houseid);

		        SendClientMessage(playerid, COLOR_WHITE, "Garage has been reset!");
	  		}
		}
		case 516:
		{
			if(!response) return 1;

			new houseid = GetPVarInt(playerid, "HouseKey");

			if(HouseInfo[houseid][Garage] == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't have a garage to remove.");

			HouseInfo[houseid][Garage] = 0;
			HouseInfo[houseid][gInterior] = 0;
	        HouseInfo[houseid][hgXi] = 0;
			HouseInfo[houseid][hgYi] = 0;
	        HouseInfo[houseid][hgZi] = 0;
	        HouseInfo[houseid][hgAi] = 0;
	        HouseInfo[houseid][hgXo] = 0;
			HouseInfo[houseid][hgYo] = 0;
	        HouseInfo[houseid][hgZo] = 0;
	        HouseInfo[houseid][hgAo] = 0;

	        if(HouseInfo[houseid][gIcon] != 0) DestroyDynamicCP(HouseInfo[houseid][gIcon]);

			for(new i = 0; i < MAX_HOUSE_OBJ; i++)
			{
				if(HouseInfo[houseid][hoID][i] != 0 && IsHouseOutdoorObject(houseid, i))
				{
					RemoveHouseObject(houseid, i);
				}
			}

			

	        SaveFurn(houseid);
	        SaveHouseID(houseid, 0);

	        SendClientMessage(playerid, COLOR_WHITE, "Garage has been removed!");
		}
		case 518:
		{
		    if(!response) return 1;
		    new keyex = FurnRight(playerid, 2), Float:Pos[4];
		    if(keyex <= 0) return 1;
		    if(GetPlayerMoneyEx(playerid) >= 1500)
		    {
				GivePlayerMoneyEx(playerid, -1500);
		    	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		        GetPlayerFacingAngle(playerid, Pos[3]);
		        
		        BizInfo[keyex][Sprunk]=1;
		        BizInfo[keyex][spX]=Pos[0];
		        BizInfo[keyex][spY]=Pos[1];
		        BizInfo[keyex][spZ]=Pos[2];
		        BizInfo[keyex][spA]=Pos[3];

				scm(playerid, -1, "Business Sprunk Machine has been purchased for $1,500!");
				scm(playerid, -1, "Nore: You can use (/biz sprunk) to change the location for free !");
				GameTextForPlayer(playerid, "~r~-$1,500", 5000, 1);
				SaveBizID(keyex, 0);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 519: // Business Actor
	    {
			switch(response)
	        {
	            case 1:
	            {
	                if(!strlen(inputtext)) return 1;
	                if(strlen(inputtext) >= 7) return 1;
	                new amount = strval(inputtext);
	                if(amount <= 0) return 1;
	                if(amount >= 300) return 1;
	                new keyex = FurnRight(playerid, 2), Float:Pos[4];
		            if(keyex <= 0) return 1;
		            if(GetPlayerMoneyEx(playerid) >= 1500)
		            {
				        GivePlayerMoneyEx(playerid, -1500);
		    	        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		                GetPlayerFacingAngle(playerid, Pos[3]);

                        if(BizInfo[keyex][Actor] > 0) {
                            DestroyActorEx(BizInfo[keyex][ActorID]);
                        }
                        
		                BizInfo[keyex][Actor]=1;
		                BizInfo[keyex][aSkin]=amount;
		                BizInfo[keyex][aX]=Pos[0];
		                BizInfo[keyex][aY]=Pos[1];
		                BizInfo[keyex][aZ]=Pos[2];
		                BizInfo[keyex][aA]=Pos[3];

		                new actorid = CreateActor(BizInfo[keyex][aSkin], BizInfo[keyex][aX], BizInfo[keyex][aY], BizInfo[keyex][aZ], BizInfo[keyex][aA]);
		                BizInfo[keyex][ActorID] = actorid;
		                SetActorVirtualWorld(actorid, BizInfo[keyex][VwIn]);
	                    SetActorFacingAngle(actorid, BizInfo[keyex][aA]);

				        scm(playerid, -1, "Business Actor/NPC has been purchased for $1,500!");
				        scm(playerid, -1, "Nore: You can use (/biz actor) to change the location of the actor !");
				        GameTextForPlayer(playerid, "~r~-$1,500", 5000, 1);
				        SaveBizID(keyex, 0);
			        }
		        	else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	            }
	        }
	    }
		case DIALOG_VEHICLE_SPAWN: {
			if(response) {
				new query[256];
				mysql_format(handlesql, query, sizeof(query), "SELECT `ID`, `VirtualWorld`, `Interior` FROM `vehicles` WHERE `Owner` = '%e' LIMIT %i, %i;", PlayerInfo[playerid][pUsername], listitem, 1);
				mysql_pquery(handlesql, query, "vs_OnPlayerVehicleSpawnSelected", "i", playerid);
			}
		}
		case DIALOG_VEHICLE_SELL: {
		    if(response) {
                
		    	if(PlayerSpawnedVehicles(playerid) == 0) return SendClientMessage(playerid, COLOR_ERROR, "You do not have a vehicle spawned.");

		    	new vehicleID = -1;
				for(new i = 0; i < PlayerSpawnedVehicles(playerid); i++)
		    	{
		    		new veh = GetSpawnedVehicle(playerid, i);
		    		if(GetPlayerVehicleID(playerid) == veh)
		    		{
		    			vehicleID = veh;
		    		}
		    	}

            	if(vehicleID == -1) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in your vehicle in order to sell it.");
            	if(VehicleInfo[vehicleID][vDonate] != 0) return SendClientMessage(playerid, COLOR_ERROR, "You cannot sell a Subscription vehicle.");
            	new msg[80],
					sellPrice = GetPVarInt(playerid, "vs_SellVehicle");
					
            	DeletePVar(playerid, "vs_SellVehicle");
            	format(msg, sizeof(msg), "Vehicle sold for %s.", FormatMoney(sellPrice));
				SendClientMessage(playerid, COLOR_WHITE, msg);
				GivePlayerMoneyEx(playerid, sellPrice);
				mysql_format(handlesql, msg, sizeof(msg), "DELETE FROM `vehicles` WHERE `ID` = %i;", VehicleInfo[vehicleID][vID]);
				mysql_pquery(handlesql, msg);
				DespawnVehicle(vehicleID);
			}
		}
		case DIALOG_RADIO: {
		    if(response) {
		        switch(listitem) {
					case 0: {
					    new dialogMsg[5000];
		            	for(new i = 0; i < sizeof(CarRadio); i++)	{
			            	if(i == 0) {
								format(dialogMsg, sizeof(dialogMsg), "%s", CarRadio[i][cName]);
			            	} else {
								format(dialogMsg, sizeof(dialogMsg), "%s\n%s", dialogMsg, CarRadio[i][cName]);
							}
			        	}
			        	
		            	ShowPlayerDialogEx(playerid, DIALOG_RADIO_STATION, DIALOG_STYLE_LIST, "Radio Stations", dialogMsg, "Select", "Go Back");
					}
					case 1: {
					    ShowPlayerDialogEx(playerid, DIALOG_RADIO_CUSTOM, DIALOG_STYLE_INPUT, "Direct URL", "Enter the URL you would like to play:", "Enter", "Go Back");
					}
					case 2: {
					    new vehicleID = GetPlayerVehicleID(playerid);
						if(vehicleID == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in a vehicle with a radio installed.");
   	        			if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in the driver seat of your vehicle in order to set the radio station.");
			            strmid(VehicleInfo[vehicleID][vRadio], "None", 0, strlen("None"), VEHICLE_RADIO_URL_MAX_LENGTH);
			            GameTextForPlayer(playerid, "~w~Radio~n~~r~OFF", 4000, 3);
			            foreach(new i : Player) {
			                if(GetPlayerVehicleID(i) == vehicleID) {
			                    StopAudioStreamForPlayerEx(i);
			                    LoadRadios(i);
			                }
			            }
			        }
				}
		    }
		}
		case DIALOG_RADIO_STATION: {
            if(!response) {
				return cmd_v(playerid, "radio");
			} else {
			    new vehicleID = GetPlayerVehicleID(playerid);
				if(vehicleID == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in a vehicle with a radio installed.");
   	        	if(IsNotAEngineCar(vehicleID)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a radio installed.");
   	        	if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in the driver seat of your vehicle in order to set the radio station.");
		    	PlayRadioURL(vehicleID, CarRadio[listitem][cURL]);
			}
		}
		case DIALOG_RADIO_CUSTOM: {
		    if(!response) {
				return cmd_v(playerid, "radio");
			} else {
                if(!strlen(inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_RADIO_CUSTOM, DIALOG_STYLE_INPUT, "Direct URL", "Enter the URL you would like to play:", "Enter", "Go Back");
	        	if(strlen(inputtext) > VEHICLE_RADIO_URL_MAX_LENGTH) {
	        	    SendClientMessage(playerid, COLOR_ERROR, "The URL you entered is too long, please try again.");
					return ShowPlayerDialogEx(playerid, DIALOG_RADIO_CUSTOM, DIALOG_STYLE_INPUT, "Direct URL", "Enter the URL you would like to play:", "Enter", "Go Back");
				}
				
		    	new vehicleID = GetPlayerVehicleID(playerid);
				if(vehicleID == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in a vehicle with a radio installed.");
   	        	if(IsNotAEngineCar(vehicleID)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a radio installed.");
   	        	if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in the driver seat of your vehicle in order to set the radio station.");
		    	PlayRadioURL(vehicleID, inputtext);
		    }
		}
		case DIALOG_MDC_SEARCH_CITIZEN: {
			if(response) {
                mdc_SearchCitizen(playerid, inputtext);
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_MDC_SEARCH_PHONE_NUMBER: {
			if(response) {
			    if(!IsNumeric(inputtext)) {
			        SendClientMessage(playerid, COLOR_ERROR, "You have to enter a valid numeric phone number.");
			        ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_PHONE_NUMBER, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
			    } else {
			        new query[130];
					mysql_format(handlesql, query, sizeof(query), "SELECT `Name`, `Model`, `Age`, `Sex`, `DriveLic`, `GunLic`, `JobID` FROM `accounts` WHERE `PhoneNum` = %i;", strval(inputtext));
					mysql_pquery(handlesql, query, "mdc_SearchPhoneNumber", "ii", playerid, strval(inputtext));
			    }
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_MDC_SEARCH_SERIAL: {
		    if(response) {
		        if(!IsNumeric(inputtext)) {
		            SendClientMessage(playerid, COLOR_ERROR, "You have to enter a valid numeric weapon serial number.");
		            ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons's serial number below:", "Search", "Cancel");
		        } else {
			    	new query[140];
					mysql_format(handlesql, query, sizeof(query), "SELECT `Name`, `Model`, `Age`, `Sex`, `DriveLic`, `GunLic`, `JobID`, `PhoneNum` FROM `accounts` WHERE `WepSerial` = %i;", strval(inputtext));
					mysql_pquery(handlesql, query, "mdc_SearchSerial", "i", playerid);
				}
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_MDC_SEARCH_PLATE: {
			if(response) {
			    new query[140];
			    mysql_format(handlesql, query, sizeof(query), "SELECT `Model`, `ColorOne`, `ColorTwo`, `Owner`, `Insurance` FROM `vehicles` WHERE `Plate` = '%e';", inputtext);
			    mysql_pquery(handlesql, query, "mdc_SearchLicensePlate", "is", playerid, inputtext);
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_HOUSE_CLOTHING:
		{
			if(!response) return 1;

			new houseid = GetPVarInt(playerid, "HouseEnter");

			if(HouseInfo[houseid][hSkin][listitem] == 0) return SendClientMessage(playerid, COLOR_ERROR, "This skin slot is empty.");

			SetPlayerSkin(playerid, HouseInfo[houseid][hSkin][listitem]);
			SetPVarInt(playerid, "Model", HouseInfo[houseid][hSkin][listitem]);
		}
		case DIALOG_SAN_NEWS_SPAWN:
		{
			if(!response) return 1;

			if(GetPVarInt(playerid, "Member") != FACTION_FOX_ENTERPRISE) return SendClientMessage(playerid, COLOR_ERROR, "You are not a part of SAN Network.");

			switch(listitem)
			{
				case 0:
				{
					CreateNewsVehicle(playerid, 582, 1, 125);
				}
				case 1:
				{
					CreateNewsVehicle(playerid, 488, 1, 125);
				}
			}
		}
		case DIALOG_CLOSE:
		{
   			return 1;
  		}
  		case DIALOG_HOUSE_REMOVEALL:
  		{
  			if(response && FurnRight(playerid, 1))
  			{
  				RemoveHouseObjects(FurnRight(playerid, 1));
				SendClientMessage(playerid, COLOR_WHITE, "All house furniture objects removed!");
  			}
  			return 1;
  		}
  		case DIALOG_BIZ_REMOVEALL:
  		{
  			if(response && FurnRight(playerid, 2))
  			{
  				RemoveBizObjects(FurnRight(playerid, 2));
				SendClientMessage(playerid, COLOR_WHITE, "All business furniture objects removed!");
  			}
  			return 1;
  		}

  		case DIALOG_INVENTORY_DIVIDE:
  		{
  			if(response)
  			{
  				if(CheckInv(playerid) == 0)
  				{
  					SetPVarInt(playerid, "Dividing", 0);
					SetPVarInt(playerid, "DividingChose", 0);
  					return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");
  				}

  				if(!IsNumeric(inputtext))
  				{
  					SetPVarInt(playerid, "Dividing", 0);
					SetPVarInt(playerid, "DividingChose", 0);
					return SendClientMessage(playerid, COLOR_ERROR, "Invalid value.");
  				}
  				
  				if(strval(inputtext) <= 0 || strval(inputtext) >= PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "DividingChose")])
  				{
  					SetPVarInt(playerid, "Dividing", 0);
					SetPVarInt(playerid, "DividingChose", 0);
  					return SendClientMessage(playerid, COLOR_ERROR, "Invalid value.");
  				}

  				PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "DividingChose")] -= strval(inputtext);
  				GiveInvItem(playerid, PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "DividingChose")], strval(inputtext));

  				SetPVarInt(playerid, "Dividing", 0);
				SetPVarInt(playerid, "DividingChose", 0);

  				SendClientMessage(playerid, COLOR_WHITE, "Item divided!");
  			}
  			return 1;
  		}

  		case DIALOG_LSFD_GROUND_ELEVATOR:
  		{
  			if(response)
  			{
  				switch(listitem)
  				{
  					case 0:
  					{
  						SetPlayerPosEx(playerid, 1129.6824, -1345.8639, 20.3343);
  					}
  				}
  			}
  			return 1;
  		}

  		case DIALOG_LSFD_HELIPAD_ELEVATOR:
  		{
  			if(response)
  			{
  				switch(listitem)
  				{
  					case 0:
  					{
  						SetPlayerPosEx(playerid, 1132.5594, -1345.9895, 13.9910);
  					}
  				}
  			}
  			return 1;
  		}

  		case DIALOG_SIREN_EDITOR:
  		{
  			if(response)
  			{
  				switch(listitem)
  				{
  					case 0:
  					{
  						new count = 0;
  						for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
  						{
  							if(VehicleInfo[GetPlayerVehicleID(playerid)][vSirenObject][i] != 0)
  							{
  								count++;
  							}
  						}

  						if(count >= MAX_VEHICLE_SIREN_OBJECTS)
  						{
  							ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  							SendClientMessage(playerid, COLOR_ERROR, "You have reached the maximum ammount of attachable sirens per vehicle.");
  							return 1;
  						}

  						new object_array[sizeof(SirenObjects)];
  						for(new i = 0; i < sizeof(SirenObjects); i++)
  						{
  							object_array[i] = SirenObjects[i][0];
  						}

  						ShowModelSelectionMenuEx(playerid, object_array, sizeof(object_array), "Siren Editor", 10, 16.0, 0.0, -55.0);
  					}
  					case 1:
  					{
  						new count = 0;
  						for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
  						{
  							if(VehicleInfo[GetPlayerVehicleID(playerid)][vSirenObject][i] != 0)
  							{
  								count++;
  							}
  						}

  						if(count == 0)
  						{
  							ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  							SendClientMessage(playerid, COLOR_ERROR, "This vehicle has no siren objects to remove.");
  							return 1;
  						}

  						new vehicleid = GetPVarInt(playerid, "SirenEditorVehicleID");

  						for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
  						{
  							if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
  							{
  								for(new i2 = 0; i2 < sizeof(SirenObjects); i2++)
		  						{
		  							if(VehicleInfo[vehicleid][vSirenObject][i] == SirenObjects[i2][0])
		  							{
		  								format(string, sizeof(string), "%s%s\n", string, SirenObjects[i2][1]);
		  							}
		  						}
  							}
  						}

  						ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR_REMOVE, DIALOG_STYLE_LIST, "Siren Editor", string, "Select","Back");
  					}
  				}
  			}
  			else
  			{
  				TogglePlayerControllable(playerid, 1);
  			}
  			return 1;
  		}

  		case DIALOG_SIREN_EDITOR_REMOVE:
  		{
  			if(response)
  			{
  				new vehicleid = GetPVarInt(playerid, "SirenEditorVehicleID");

  				DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][listitem]);
  				VehicleInfo[vehicleid][vSirenObjectID][listitem] = 0;
  				VehicleInfo[vehicleid][vSirenObject][listitem] = 0;

  				ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  				TogglePlayerControllable(playerid, 0);
  			}
  			else
  			{
  				ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  			}
  			return 1;
  		}

  		case DIALOG_EVENT_CLOTHING:
  		{
  			if(response)
  			{
				if(listitem == 0)
				{
					new countid = 0;
					for(new i = 0; i < MAX_PLAYER_TOYS; i++)
					{
					    if(countid == 0)
					    {
					        if(ToyInfo[playerid][i][tModel] == 0)
					        {
					        	countid = i;
					        }
					    }
					}
					if(countid == 0) return error(playerid, "You have no free attachable item slots left.");
					new oblist[sizeof(EventAttachmentObjects)];
					for(new i = 0; i < sizeof(EventAttachmentObjects); i++)
					{
				        oblist[i] = EventAttachmentObjects[i][attachmodel];
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(EventAttachmentObjects), "Select item", 1, 0, 0.0, 0);
				}
				if(listitem == 1)
				{
					new Skin[sizeof(EventSkin)];
					for(new i = 0; i < sizeof(EventSkin); i++)
				    {
						Skin[i] = EventSkin[i][SkinID];
				    }

				    ShowModelSelectionMenuEx(playerid, Skin, sizeof(Skin), "Select skin", 11, 0.0, 0.0, 0.0);
				}
  			}
  			return 1;
  		}

  		case DIALOG_CELLPHONE_DIAL:
  		{
  			if(response)
  			{

  			}
  			return 1;
  		}

  		case DIALOG_AMMO_STORE: // AMMO DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 10), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(AmmuItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
		    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
		    ConfigPayment(playerid, 1, string);
		}

		case DIALOG_TAKE_INVENTORY:
		{
			if(!response) return 1;

			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");
			if(PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvItem][listitem] == 0) return SendClientMessage(playerid, COLOR_ERROR, "There is nothing in this slot to take.");

			GiveInvItem(playerid, 
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvItem][listitem], 
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvQ][listitem], 
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvEx][listitem], 
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvS][listitem]);

			format(string, sizeof(string), "You took %s(%i) from %s's inventory.", 
				PrintIName(PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvItem][listitem]),
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvQ][listitem], 
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pName]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s took %s(%i) from your inventory.",
				PlayerInfo[playerid][pName], 
				PrintIName(PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvItem][listitem]),
				PlayerInfo[GetPVarInt(playerid, "TakePlayer")][pInvQ][listitem]);
			SendClientMessage(GetPVarInt(playerid, "TakePlayer"), COLOR_WHITE, string);

			RemoveInvItem(GetPVarInt(playerid, "TakePlayer"), listitem);
			DeletePVar(playerid, "TakePlayer");
		}

		case DIALOG_DOC_SPAWN:
		{
			if(!response) return 1;

			switch(listitem)
			{
				case 0: CreateDOCVehicle(playerid,596,29,29);
				case 1: CreateDOCVehicle(playerid,597,29,29);
				case 2: CreateDOCVehicle(playerid,598,29,29);
			}
		}

		case DIALOG_HOUSE_EXIT:
		{
		    if(!response) return 1;

		    if(GetPVarInt(playerid, "HouseKey") == 0) return SendClientMessage(playerid, COLOR_ERROR, "You don't own a house.");
			if(GetPVarInt(playerid, "HouseKey") != GetPVarInt(playerid, "HouseEnter")) return SendClientMessage(playerid, COLOR_ERROR, "You need to be inside of your house to use this.");

			new houseid = GetPVarInt(playerid, "HouseKey");

		    new Float:Pos[3];

		    if(GetPlayerMoneyEx(playerid) >= 1500)
		    {
				GivePlayerMoneyEx(playerid, -1500);
		    	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
      			HouseInfo[houseid][hXi] = Pos[0];
				HouseInfo[houseid][hYi] = Pos[1];
				HouseInfo[houseid][hZi] = Pos[2];
				HouseInfo[houseid][hIntIn] = GetPlayerInterior(playerid);
				scm(playerid, -1, "House exit has been switched to your position for $1,500!");
				GameTextForPlayer(playerid, "~r~-$1,500", 5000, 1);
				SaveHouseID(houseid, 0);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}

		case DIALOG_LOG_NAME:
		{
			if(!response) return 1;

			new query[128];
			mysql_format(handlesql, query, sizeof(query),"SELECT * FROM `accounts` WHERE Name='%e'",
			inputtext);
			mysql_pquery(handlesql, query, "OnLogNameSearch", "i", playerid);
		}

		case DIALOG_LOG_SELECT:
		{
			if(!response)
			{
				ShowPlayerDialogEx(playerid, DIALOG_LOG_NAME, DIALOG_STYLE_INPUT, "Log Checker - Search", "Input the name of the player (Firstname_Lastname):", "Search","Exit");
				return 1;
			}

			new log[32], all = 0;
			switch(listitem)
			{
				case 0: all = 1;
				case 1: format(log, sizeof(log), LOG_GUN_BUY);
				case 2: format(log, sizeof(log), LOG_AMMO_BUY);
				case 3: format(log, sizeof(log), LOG_PAY);
				case 4: format(log, sizeof(log), LOG_LOG_IN);
				case 5: format(log, sizeof(log), LOG_DISCONNECT);
				case 6: format(log, sizeof(log), LOG_ITEM_PICK_UP);
				case 7: format(log, sizeof(log), LOG_ITEM_DROP);
				case 8: format(log, sizeof(log), LOG_ITEM_USE);
				case 9: format(log, sizeof(log), LOG_STORE_HOUSE_ITEM);
				case 10: format(log, sizeof(log), LOG_STORE_BIZ_ITEM);
				case 11: format(log, sizeof(log), LOG_STORE_VEHICLE_ITEM);
				case 12: format(log, sizeof(log), LOG_STORE_GLOVEBOX_ITEM);
				case 13: format(log, sizeof(log), LOG_ADMIN_SPAWN_ITEM);
				case 14: format(log, sizeof(log), LOG_VEHICLE_SPAWN);
				case 15: format(log, sizeof(log), LOG_VEHICLE_DESPAWN);
				case 16: format(log, sizeof(log), LOG_WEAPON_STORE);
				case 17: format(log, sizeof(log), LOG_WEAPON_EQUIP);
				case 18: format(log, sizeof(log), LOG_WEAPON_STORE_AMMO);
				case 19: format(log, sizeof(log), LOG_WEAPON_GIVE);
				case 20: format(log, sizeof(log), LOG_WEAPON_DROP);
				case 21: format(log, sizeof(log), LOG_COMMAND);
				case 22: format(log, sizeof(log), LOG_PLAYER_DEATH);
			}

			new name[MAX_PLAYER_NAME];
			GetPVarString(playerid, "LogName", name, sizeof(name));
			SetPVarInt(playerid, "LogLastListitem", listitem);

			new query[256], time = gettime();
			
			if(all == 0)
			{
				mysql_format(handlesql, query, sizeof(query),"SELECT *, UNIX_TIMESTAMP(Timestamp) AS Timestamp FROM `logs` WHERE Name='%e' AND Log='%e' AND UNIX_TIMESTAMP(Timestamp) >= %i ORDER BY Timestamp DESC",
				name, log, time - (86400 * LOG_DISPLAY_DAYS));
				mysql_pquery(handlesql, query, "OnLogSearch", "i", playerid);
			}
			else
			{
				mysql_format(handlesql, query, sizeof(query),"SELECT *, UNIX_TIMESTAMP(Timestamp) AS Timestamp FROM `logs` WHERE Name='%e' AND UNIX_TIMESTAMP(Timestamp) >= %i ORDER BY Timestamp DESC",
				name, time - (86400 * 2));
				mysql_pquery(handlesql, query, "OnLogSearch", "i", playerid);
			}
		}

		case DIALOG_LOG_DISPLAY:
		{
			if(!response)
			{
				if(!response)
				{
					if(GetPVarInt(playerid, "LogStartRow") == 0)
					{
						ShowPlayerLogSelection(playerid);
					}
					else
					{
						new log[32], all = 0;
						switch(GetPVarInt(playerid, "LogLastListitem"))
						{
							case 0: all = 1;
							case 1: format(log, sizeof(log), LOG_GUN_BUY);
							case 2: format(log, sizeof(log), LOG_AMMO_BUY);
							case 3: format(log, sizeof(log), LOG_PAY);
							case 4: format(log, sizeof(log), LOG_LOG_IN);
							case 5: format(log, sizeof(log), LOG_DISCONNECT);
							case 6: format(log, sizeof(log), LOG_ITEM_PICK_UP);
							case 7: format(log, sizeof(log), LOG_ITEM_DROP);
							case 8: format(log, sizeof(log), LOG_ITEM_USE);
							case 9: format(log, sizeof(log), LOG_STORE_HOUSE_ITEM);
							case 10: format(log, sizeof(log), LOG_STORE_BIZ_ITEM);
							case 11: format(log, sizeof(log), LOG_STORE_VEHICLE_ITEM);
							case 12: format(log, sizeof(log), LOG_STORE_GLOVEBOX_ITEM);
							case 13: format(log, sizeof(log), LOG_ADMIN_SPAWN_ITEM);
							case 14: format(log, sizeof(log), LOG_VEHICLE_SPAWN);
							case 15: format(log, sizeof(log), LOG_VEHICLE_DESPAWN);
							case 16: format(log, sizeof(log), LOG_WEAPON_STORE);
							case 17: format(log, sizeof(log), LOG_WEAPON_EQUIP);
							case 18: format(log, sizeof(log), LOG_WEAPON_STORE_AMMO);
							case 19: format(log, sizeof(log), LOG_WEAPON_GIVE);
							case 20: format(log, sizeof(log), LOG_WEAPON_DROP);
							case 21: format(log, sizeof(log), LOG_COMMAND);
							case 22: format(log, sizeof(log), LOG_PLAYER_DEATH);
						}

						new name[MAX_PLAYER_NAME];
						GetPVarString(playerid, "LogName", name, sizeof(name));
						SetPVarInt(playerid, "LogLastListitem", listitem);

						new query[256], time = gettime();
						
						if(all == 0)
						{
							mysql_format(handlesql, query, sizeof(query),"SELECT *, UNIX_TIMESTAMP(Timestamp) AS Timestamp FROM `logs` WHERE Name='%e' AND Log='%e' AND UNIX_TIMESTAMP(Timestamp) >= %i ORDER BY Timestamp DESC",
							name, log, time - (86400 * LOG_DISPLAY_DAYS));
							mysql_pquery(handlesql, query, "OnLogSearch", "i", playerid);
						}
						else
						{
							mysql_format(handlesql, query, sizeof(query),"SELECT *, UNIX_TIMESTAMP(Timestamp) AS Timestamp FROM `logs` WHERE Name='%e' AND UNIX_TIMESTAMP(Timestamp) >= %i ORDER BY Timestamp DESC",
							name, time - (86400 * 2));
							mysql_pquery(handlesql, query, "OnLogSearch", "i", playerid);
						}
					}
				}
			}
			else
			{
				ShowPlayerLogSelection(playerid);
			}
		}
		case DIALOG_RADIO_YOUTUBE:
		{
			if(!response) {
				return cmd_v(playerid, "radio");
			} else {
			    new vehicleID = GetPlayerVehicleID(playerid);
				if(vehicleID == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in a vehicle with a radio installed.");
   	        	if(IsNotAEngineCar(vehicleID)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a radio installed.");
   	        	if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in the driver seat of your vehicle in order to set the radio station.");
		    	
		    	PlayRadioURL(vehicleID, CarRadio[listitem][cURL]);
			}
		}
		case DIALOG_WAREHOUSE_VEHICLE:
		{
			if(response)
			{
				new query[256];
				mysql_format(handlesql, query, sizeof(query), "SELECT `ID` FROM `vehicles` WHERE `Owner` = '%e' LIMIT %i, %i;", PlayerInfo[playerid][pUsername], listitem, 1);
				mysql_pquery(handlesql, query, "OnWarehouseVehicleSelected", "i", playerid);
			}
		}
		case DIALOG_INJURIES:
		{
			return 1;
		}
	}
	
	return 1;
}

forward OnLogNameSearch(playerid);
public OnLogNameSearch(playerid)
{
	if(cache_get_row_count() > 0)
	{
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "Name", name);
		SetPVarString(playerid, "LogName", name);

		ShowPlayerLogSelection(playerid);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "There is no player with that name registered.");
		ShowPlayerDialogEx(playerid, DIALOG_LOG_NAME, DIALOG_STYLE_INPUT, "Log Checker - Search", "Input the name of the player (Firstname_Lastname):", "Search","Exit");
	}
	return 1;
}

forward OnLogSearch(playerid);
public OnLogSearch(playerid)
{
	if(cache_get_row_count() > 0)
	{
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "Name", name);
		SetPVarString(playerid, "LogName", name);

		new string[128], log_name[32];
		cache_get_field_content(0, "Log", log_name);
		format(string, sizeof(string), "Log Checker - %s - %s", name, log_name);

		new string2[4094];
		for(new i = 0; i < cache_get_row_count(); i++)
		{
			if(strlen(string2) < 3966)
			{
				if(GetPVarInt(playerid, "LogStartRow") >= i) continue;

				new fetch[128], year, month, day, hour, minute, second, log_line[128];
				stamp2datetime(cache_get_field_content_int(i, "Timestamp"), year, month, day, hour, minute, second, SERVER_GMT);
				format(fetch, sizeof(fetch), "%02d/%02d %02d:%02d:%02d | ", month, day, hour, minute, second);
				strins(log_line, fetch, strlen(log_line));

				if(GetPVarInt(playerid, "LogLastListitem") == 0)
				{
					cache_get_field_content(i, "Log", fetch);

					if(strcmp(fetch, "LOG_COMMAND", true) != 0)
					{
						format(fetch, sizeof(fetch), "%s | ", fetch);
						strins(log_line, fetch, strlen(log_line));
					}
				}

				cache_get_field_content(i, "Message", fetch);
				format(fetch, sizeof(fetch), "%s", fetch);
				strins(log_line, fetch, strlen(log_line));

				if(strlen(log_line) >= MAX_MSG_LENGTH - 50)
				{
					new buffer[128];
					strmid(buffer, log_line, MAX_MSG_LENGTH - 50, MAX_MSG_LENGTH);
					strmid(log_line, log_line, 0, MAX_MSG_LENGTH - 50);

					strins(string2, log_line, strlen(string2));
					strins(string2, "\n", strlen(string2));
					strins(string2, buffer, strlen(string2));
					strins(string2, "\n", strlen(string2));
				}
				else
				{
					strmid(log_line, log_line, 0, MAX_MSG_LENGTH);
					strins(string2, log_line, strlen(string2));
					strins(string2, "\n", strlen(string2));
				}

				SetPVarInt(playerid, "LogStartRow", i);
			}
			else
			{
				break;
			}
		}

		if(strlen(string2) >= 3966)
		{
			ShowPlayerDialogEx(playerid, DIALOG_LOG_DISPLAY, DIALOG_STYLE_LIST, string, string2, "Back","Next");
		}
		else
		{
			SetPVarInt(playerid, "LogStartRow", 0);
			ShowPlayerDialogEx(playerid, DIALOG_LOG_DISPLAY, DIALOG_STYLE_LIST, string, string2, "Back","");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "There are no such logs for this player.");
		ShowPlayerLogSelection(playerid);
	}
	return 1;
}

stock ShowPlayerLogSelection(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPVarString(playerid, "LogName", name, sizeof(name));

	new string[128];
	format(string, sizeof(string), "Log Checker - %s", name);

	new string2[2048];
	format(string2, sizeof(string2), "All Logs (48h)\n\
		LOG_GUN_BUY\n\
		LOG_AMMO_BUY\n\
		LOG_PAY\n\
		LOG_LOG_IN\n\
		LOG_DISCONNECT\n\
		LOG_ITEM_PICK_UP\n\
		LOG_ITEM_DROP\n\
		LOG_ITEM_USE\n\
		LOG_STORE_HOUSE_ITEM\n\
		LOG_STORE_BIZ_ITEM\n\
		LOG_STORE_VEHICLE_ITEM\n\
		LOG_STORE_GLOVEBOX_ITEM\n\
		LOG_ADMIN_SPAWN_ITEM\n\
		LOG_VEHICLE_SPAWN\n\
		LOG_VEHICLE_DESPAWN\n\
		LOG_WEAPON_STORE\n\
		LOG_WEAPON_EQUIP\n\
		LOG_WEAPON_STORE_AMMO\n\
		LOG_WEAPON_GIVE\n\
		LOG_WEAPON_DROP\n\
		LOG_COMMAND\n\
		LOG_PLAYER_DEATH\n\
		");

	SetPVarInt(playerid, "LogStartRow", 0);
	ShowPlayerDialogEx(playerid, DIALOG_LOG_SELECT, DIALOG_STYLE_LIST, string, string2, "Search","Back");
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(_:clickedid == INVALID_TEXT_DRAW) return 1; // block any invalid textdraws.
	if(clickedid == td_mdc_Exit) {
		mdc_Hide(playerid, true);
	} else if(clickedid == td_mdc_SectionText[0]) {
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_CITIZEN, DIALOG_STYLE_INPUT, "{3D62A8}Search Citizen", "Please enter the citizen's full name below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[1]) {
        ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons's serial number below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[2]) {
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_PHONE_NUMBER, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[3]) {
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_PLATE, DIALOG_STYLE_INPUT, "{3D62A8}Search License Plate", "Please enter the license plate below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_CriminalRecord || clickedid == td_mdc_CriminalRecordArrow) {
		new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowCriminalRecord(playerid, name);
	} else if(clickedid == td_mdc_Business || clickedid == td_mdc_BusinessArrow) {
		new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowBusiness(playerid, name);
	} else if(clickedid == td_mdc_Property || clickedid == td_mdc_PropertyArrow) {
		new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowProperty(playerid, name);
	} else if(clickedid == td_mdc_Vehicles || clickedid == td_mdc_VehiclesArrow) {
	    new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowVehicles(playerid, name);
	} else if(clickedid == td_mdc_cr_ArrowUp) {
		new ScrollTop = GetPVarInt(playerid, "mdc_cr_ScrollTop");
		if(ScrollTop > 0) {
		    ScrollTop -= 1;
		    SetPVarInt(playerid, "mdc_cr_ScrollTop", ScrollTop);
			for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
			    PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
   				if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_type] == RECORD_CHARGE) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			    	if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_served] == 0) {
				  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_ERROR);
				  	} else {
					   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    } else {
			        PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			        if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_paid] == 0) {
				        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_ERROR);
			        } else {
                        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    }

			    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_date]);
			    if(strlen(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]) < 20) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]);
				} else {
					new desc[25];
					strmid(desc, CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description], 0, 20, MDC_DESCRIPTION_MAX_LENGTH);
					strins(desc, "...", strlen(desc), sizeof(desc));
					PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
				}
				
				PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			}
		}
	} else if(clickedid == td_mdc_cr_ArrowDown) {
	    new ScrollTop = GetPVarInt(playerid, "mdc_cr_ScrollTop");
		if(Iter_Count(CriminalRecordIterator[playerid]) > ScrollTop + 7) {
		    ScrollTop += 1;
		    SetPVarInt(playerid, "mdc_cr_ScrollTop", ScrollTop);
			for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
			    PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
   				if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_type] == RECORD_CHARGE) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			    	if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_served] == 0) {
				  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_ERROR);
				  	} else {
					   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    } else {
			        PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			        if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_paid] == 0) {
				        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_ERROR);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_ERROR);
			        } else {
                        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    }

			    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_date]);
			    if(strlen(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]) < 20) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]);
				} else {
					new desc[25];
					strmid(desc, CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description], 0, 20, MDC_DESCRIPTION_MAX_LENGTH);
					strins(desc, "...", strlen(desc), sizeof(desc));
					PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
				}
				
				PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			}
		}
	} else if(clickedid == td_mdc_cr_Info[0]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop"));
	} else if(clickedid == td_mdc_cr_Info[1]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 1);
	} else if(clickedid == td_mdc_cr_Info[2]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 2);
	} else if(clickedid == td_mdc_cr_Info[3]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 3);
	} else if(clickedid == td_mdc_cr_Info[4]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 4);
	} else if(clickedid == td_mdc_cr_Info[5]) {
		mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 5);
	} else if(clickedid == td_mdc_cr_Info[6]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 6);
	} else if(clickedid == td_mdc_veh_ArrowRight || clickedid == td_mdc_veh_Next) {
		new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
	    SetPVarInt(playerid, "mdc_VehicleIndex", GetPVarInt(playerid, "mdc_VehicleIndex") + 1);
		mdc_ShowVehicles(playerid, name);
	}
	
	else if(clickedid == PayDraw[3]) {
	ConfigPayment(playerid, 2, "");
	CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 1);
	}
	else if(clickedid == PayDraw[4]) {
	ConfigPayment(playerid, 2, "");
	CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 2);
	}
	else if(clickedid == PayDraw[5]) {
	ConfigPayment(playerid, 2, "");
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(playertextid == td_cp_app_dial)
	{
		ShowPlayerCellphoneAppDial(playerid);
		ShowPlayerDialogEx(playerid, DIALOG_CELLPHONE_DIAL, DIALOG_STYLE_INPUT, "Dial", "Enter a number below:", "Confirm", "Close");
		HidePlayerCellphoneApps(playerid);
	}
	else if(playertextid == td_cp_app_contacts)
	{
		HidePlayerCellphoneApps(playerid);
	}
	else if(playertextid == td_cp_app_settings)
	{
		HidePlayerCellphoneApps(playerid);
	}
	else if(playertextid == td_cp_app_house)
	{
		HidePlayerCellphoneApps(playerid);
	}
	else if(playertextid == td_cp_button_home)
	{
		HidePlayerCellphoneApps(playerid);
		ShowPlayerCellphoneApps(playerid);
	}
	else if(playertextid == td_cp_button_back)
	{
		HidePlayerCellphoneApps(playerid);
	}
    return 1;
}

//============================================//
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && GetPVarInt(playerid, "CarRadio") == 0)
	{
		/*
		for(new i=0;i<sizeof(RadioInfo);i++)
		{
		    if(RadioInfo[i][rAreaID] == GetPlayerZone(playerid) && RadioInfo[i][rStatus] == 1)
		    {
		        if(strcmp(RadioInfo[i][rURL], PlayerInfo[playerid][pAudioUrl], true) == 0)
				{
				    return true; // Block script.
				}
		        else
		        {
					if(IsPlayerInAnyVehicle(playerid))
					{
					    if(strcmp(VehicleInfo[GetPlayerVehicleID(playerid)][vRadio], "None", true) == 0){}
					    else
					    {
					        return true; // Blcok overlapping music.
					    }
					}
		            PlayAudioStreamForPlayerEx(playerid, RadioInfo[i][rURL], RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ], 50.0, 1);
		            return true;
				}
		    }
		}
		*/
	}
	return true;
}
//============================================//
public OnPlayerText(playerid, text[])
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPVarInt(playerid, "Registering") == 1)
		{
			if(GetPVarInt(playerid, "Submitted") == 1) return 0;
			if(GetPVarInt(playerid, "RegistrationQuestion") == 1)
			{
				format(PlayerRegistrationAnswers[playerid][0][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][0][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 2: %s", RegistrationQuestions[1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 2);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 2)
			{
				format(PlayerRegistrationAnswers[playerid][1][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][1][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 3: %s", RegistrationQuestions[2]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 3);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 3)
			{
				format(PlayerRegistrationAnswers[playerid][2][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][2][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 4: %s", RegistrationQuestions[3]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 4);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 4)
			{
				format(PlayerRegistrationAnswers[playerid][3][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][3][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 5: %s", RegistrationQuestions[4]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 5);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 5)
			{
				format(PlayerRegistrationAnswers[playerid][4][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][4][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 6: %s", RegistrationQuestions[5]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 6);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 6)
			{
				format(PlayerRegistrationAnswers[playerid][5][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][5][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 7: %s", RegistrationQuestions[6]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 7);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 7)
			{
				format(PlayerRegistrationAnswers[playerid][6][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][6][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 8: %s", RegistrationQuestions[7]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 8);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 8)
			{
				format(PlayerRegistrationAnswers[playerid][7][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][7][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 9: %s", RegistrationQuestions[8]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 9);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 9)
			{
				format(PlayerRegistrationAnswers[playerid][8][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][8][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 10: %s", RegistrationQuestions[9]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 10);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 10)
			{
				format(PlayerRegistrationAnswers[playerid][9][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][9][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 11: %s", RegistrationQuestions[10]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 11);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 11)
			{
				format(PlayerRegistrationAnswers[playerid][10][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][10][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");

				format(string, sizeof(string), "Question 12: %s", RegistrationQuestions[11]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "RegistrationQuestion", 12);
			}
			else if(GetPVarInt(playerid, "RegistrationQuestion") == 12)
			{
				format(PlayerRegistrationAnswers[playerid][11][pRegistrationAnswer], 128, text);
				new string[256];
				format(string, sizeof(string), "Answer: %s", PlayerRegistrationAnswers[playerid][11][pRegistrationAnswer]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " ");
				SendClientMessage(playerid, COLOR_WHITE, "You have submitted your registration ticket to all online Helpers. (wait for it to be reviewed)");

				format(string, sizeof(string), "REGISTRATON: %s [%s] (ID %i) has submitted a registration ticked. (/review %i)",
					GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), GetLowercase(PlayerInfo[playerid][pUsername]), playerid, playerid);
				
				if(GetHelperCount() > 0)
				{
					SendHelperMessage(COLOR_LIGHTBLUE, string);
				}
				else
				{
					SendAdminMessage(COLOR_LIGHTBLUE, string);
				}

				SetPVarInt(playerid, "Submitted", 1);
			}
			return 0;
		}

		if(GetPVarInt(playerid, "PlayerLogged") == 1 && GetPVarInt(playerid, "Muted") == 0)
		{
			new sendername[MAX_PLAYER_NAME], string[256];
			if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL && GetPVarInt(playerid, "Dead") == 0)
            {
		        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		        GiveNameSpace(sendername);
		        if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown";
		        if(GetPVarInt(playerid, "PayPhone") == 1) format(string, sizeof(string), "Payphone: %s", text);
		        else format(string, sizeof(string), "%s %s (cellphone): %s", sendername, PrintPrefix(playerid), text);
		        ProxDetector(20.0, playerid, string,COLOR_FADE);
		        switch(GetPVarInt(playerid, "Mobile"))
		        {
		            case 911:
		            {
		                if(strcmp(text, "Police", true) == 0)
		                {
		                    SetPVarInt(playerid, "Mobile", 912);
		                    SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: I am patching you to LSPD HQ, please hold.");
		                    SendClientMessage(playerid, COLOR_BLUE, "HQ: Please give me a short description of the crime and location.");
		                }
		                else if(strcmp(text, "LSFD", true) == 0)
		                {
		                    SetPVarInt(playerid, "Mobile", 913);
		                    SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: I am patching you to LSFD HQ, please hold.");
		                    SendClientMessage(playerid, COLOR_PINK, "Dispatch: Please give me a short description of the incident.");
		                }
		                else
		                {
		                    SendClientMessage(playerid,COLOR_BLUE,"DISPATCH: I do not recognize this service, please try again.");
		                }
		                return 0;
		            }
		            case 912:
		            {
		                if(!strlen(text))
			            {
	                        SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: Sorry, I dont understand?");
				            return 0;
			            }
			            SendClientMessage(playerid, COLOR_BLUE, "Police Dispatch: We have alerted all units in the area.");
				        SendClientMessage(playerid, COLOR_BLUE, "Thank you for reporting this crime.");
				        if(GetPVarInt(playerid, "PayPhone") == 1)
				        {
							TogglePlayerControllableEx(playerid,true);
				            DeletePVar(playerid,"PayPhone");
                            DeletePVar(playerid,"PhoneID");
				            SendFactionMessage(1, COLOR_BLUE, "HQ: All Units APB: Reporter: Payphone");
				        }
				        else
				        {
				            format(string, sizeof(string), "HQ: All Units APB: Reporter: %s", PlayerInfo[playerid][pName]);
				            SendFactionMessage(1, COLOR_BLUE, string);
				        }
				        format(string, sizeof(string), "HQ: Crime: %s", text);
				        SendFactionMessage(1, COLOR_BLUE, string);
				        format(string, sizeof(string), "HQ: Location: %s", GetPlayerArea(playerid));
				        SendFactionMessage(1, COLOR_BLUE, string);
				        SetPVarInt(playerid, "Mobile", INVALID_MAXPL);
				        SetPVarInt(playerid, "RingTone", 0);
                        SetPVarInt(playerid, "RingPhone", 0);
                        CellphoneState(playerid,2);
                        DeletePVar(playerid, "CellMenu");
				        return 0;
		            }
		            case 913:
		            {
		                if(!strlen(text))
			            {
	                        SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: Sorry, I dont understand?");
				            return 0;
			            }
			            SendClientMessage(playerid, COLOR_PINK, "Dispatch: We have alerted all units in the area.");
			            SendClientMessage(playerid, COLOR_PINK, "Thank you for reporting this incident.");
		                if(GetPVarInt(playerid, "PayPhone") == 1)
				        {
							TogglePlayerControllableEx(playerid,true);
				            DeletePVar(playerid,"PayPhone");
                            DeletePVar(playerid,"PhoneID");
		                    SendFactionMessage(2, COLOR_PINK, "Dispatch: All Units IA: Caller: Payphone");
				        }
				        else
				        {
						    format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s", PlayerInfo[playerid][pName]);
		                    SendFactionMessage(2, COLOR_ERROR, string);
				        }
                        format(string, sizeof(string), "Dispatch: Incident: %s", text);
			            SendFactionMessage(2, COLOR_PINK, string);
			            format(string, sizeof(string), "Dispatch: Location: %s",GetPlayerArea(playerid));
		                SendFactionMessage(2, COLOR_PINK, string);
				        SetPVarInt(playerid, "Mobile", INVALID_MAXPL);
			            SetPVarInt(playerid, "RingTone", 0);
                        SetPVarInt(playerid, "RingPhone", 0);
                        CellphoneState(playerid,2);
                        DeletePVar(playerid, "CellMenu");
				        return 0;
		            }
		        }
		        format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
		        GiveNameSpace(sendername);
				if(IsPlayerConnected(GetPVarInt(playerid, "Mobile")))
				{
					if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid)
					{
						if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Speaker") == 1) ProxDetector(20.0, GetPVarInt(playerid, "Mobile"), string, COLOR_FADE);
						else SendClientMessage(GetPVarInt(playerid, "Mobile"), COLOR_PHONE, string);
				    }
				}
		        return 0;
		    }
		    if(PlayerInfo[playerid][pLiveOffer][0] == 1 && GetPVarInt(playerid, "Dead") == 0)
			{
			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		        GiveNameSpace(sendername);
				if(GetPVarInt(playerid, "Member") == FACTION_FOX_ENTERPRISE) format(string, sizeof(string), "* [SAN Network] %s: %s *", sendername, text);
				else format(string, sizeof(string), "* [News Guest] %s: %s *", sendername, text);
			    SendNewsMessage(0xFFA04296, string);
			    return 0;
			}
			if(PlayerInfo[playerid][pLiveOffer][1] == 1 && GetPVarInt(playerid, "Dead") == 0)
			{
			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		        GiveNameSpace(sendername);
				if(GetPVarInt(playerid, "Member") == FACTION_RLS) format(string, sizeof(string), "* [RLS] %s: %s *", sendername, text);
				else format(string, sizeof(string), "* [RLS Guest] %s: %s *", sendername, text);
			    SendRadioMessage(0xFFA04296, string);
			    return 0;
			}
		    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		    GiveNameSpace(sendername);
    	    if(GetPVarInt(playerid, "Dead") != 0)
    	    {
    	        format(string, sizeof(string), "%s says [low]: %s", sendername, text);
			    ProxDetector(5.0, playerid, string, COLOR_GREY);
    	    }
    	    else
    	    {
				if(GetPVarInt(playerid, "BizEnter") != 0 && GetPlayerVirtualWorld(playerid) == BizInfo[GetPVarInt(playerid, "BizEnter")][VwIn])
				{
				    if(BizInfo[GetPVarInt(playerid, "BizEnter")][Low] > 0) {
				    format(string, sizeof(string), "%s says [low]: %s", sendername, text);
			        ProxDetector(5.0, playerid, string, COLOR_GREY);
				    return 0; }
				}
				format(string, sizeof(string), "%s %s: %s", sendername, PrintPrefix(playerid), text);
    	        new type = 0;
    	        if (IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
                {
                    switch(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows])
			        {
                        case 0:
                        {
                            format(string, sizeof(string), "[Windows Shut]: %s %s: %s", sendername, PrintPrefix(playerid), text);
                            type=1;
                        }
                        case 1: format(string, sizeof(string), "[Windows Open]: %s %s: %s", sendername, PrintPrefix(playerid), text);
                    }
                }
				if(type == 0) ProxDetector(30.0, playerid, string, COLOR_FADE), SetPlayerChatBubble(playerid, string, COLOR_WHITE, 10.0, strlen(text)*100);
				else
				{
                    SendInCarMessage(GetPlayerVehicleID(playerid), string);
				}
				if(GetPVarInt(playerid, "Cuffed") == 0 && GetPVarInt(playerid, "AnimLoop") == 0)
				{
    	            switch(GetPVarInt(playerid, "ChatStyle"))
   	                {
    	                case 0: ApplyAnimationEx(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
                        case 1: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkA", 3.1,0,1,1,1,1);
                        case 2: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkB", 3.1,0,1,1,1,1);
                        case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkC", 3.1,0,1,1,1,1);
                        case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 3.1,0,1,1,1,1);
                        case 5: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkE", 3.1,0,1,1,1,1);
                        case 6: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkF", 3.1,0,1,1,1,1);
                        case 7: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkG", 3.1,0,1,1,1,1);
                        case 8: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 3.1,0,1,1,1,1);
   	                }
   	                new time=strlen(text)*100;
    	            PlayerInfo[playerid][pStopTalkingTimer] = SetTimerEx("StopTalking",time,0,"i",playerid);
    	        }
			}
    	    return 0;
    	}
    	else
    	{
			SendClientMessage(playerid,COLOR_ERROR,"You are either dead/un-logged/muted to use this!");
    	    return 0;
    	}
	}
	return 1;
}
//============================================//
stock GiveInvItem(playerid, itemid, quantity, ex1 = 0, ex2 = 0)
{
	new foundid = 0;
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(foundid == 0)
		{
			if(PlayerInfo[playerid][pInvItem][i] == 0)
			{
		        foundid = i;
		    }
		}
	}

	if(foundid == 0) return 0;

	PlayerInfo[playerid][pInvItem][foundid]=itemid;
	PlayerInfo[playerid][pInvQ][foundid]=quantity;
	PlayerInfo[playerid][pInvEx][foundid]=ex1;
	PlayerInfo[playerid][pInvS][foundid]=ex2;

	CallRemoteFunction("LoadHolsters","i",playerid);
	OnPlayerDataSave(playerid);
	return 1;
}
//============================================//
public PrintInv(playerid)
{
	new result[2048];

	FixInv(playerid);

    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] != 0)
		{
		    switch(PlayerInfo[playerid][pInvItem][i])
		    {
		        case 22 .. 38:
		        {
		            if(PlayerInfo[playerid][pInvQ][i] == 0)
		            {
		            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
		            }
					else
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i], PrintIName(PlayerInfo[playerid][pInvEx][i]));
					}
		        }
		        case 100 .. 199:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 414:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 420 .. 427:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 428 .. 430:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}[%d]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvEx][i]);
		        }
		        case 500 .. 549:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 1000 .. 1001:
		        {
		        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        default:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}
	if(PlayerInfo[playerid][pPlayerWeapon] >= 1) format(result, sizeof(result), "%s\n%d: {33FF66}STORE WEAPON", result, MAX_INV_SLOTS+1);
	if(PlayerInfo[playerid][pPlayerWeapon] >= 1) format(result, sizeof(result), "%s\n%d: {33FF66}DROP WEAPON", result, MAX_INV_SLOTS+2);
	if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
	{
	    if(PlayerInfo[playerid][pPlayerAmmo] > 0) format(result, sizeof(result), "%s\n%d: {33FF66}STORE AMMUNITION", result, MAX_INV_SLOTS+3);
	}
	ShowPlayerDialogEx(playerid, 30, DIALOG_STYLE_LIST, "Player Inventory", result, "Select", "Close");
	return true;
}

forward PrintInvO(playerid, forplayer);
public PrintInvO(playerid, forplayer)
{
	new string[128], result[2048];
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] != 0)
		{
		    switch(PlayerInfo[playerid][pInvItem][i])
		    {
		        case 22 .. 38:
		        {
		        	if(GetPVarInt(forplayer, "Admin") > 0)
		        	{
		        		if(PlayerInfo[playerid][pInvQ][i] == 0)
			            {
			            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY):[%i]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvS][i]);
			            }
						else
						{
							format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]:[%i]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i], PrintIName(PlayerInfo[playerid][pInvEx][i]), PlayerInfo[playerid][pInvS][i]);
						}
		        	}
		        	else
		        	{
			            if(PlayerInfo[playerid][pInvQ][i] == 0)
			            {
			            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
			            }
						else
						{
							format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i], PrintIName(PlayerInfo[playerid][pInvEx][i]));
						}
					}
		        }
		        case 100 .. 199:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 414:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 500 .. 549:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        case 1000 .. 1001:
		        {
		        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
		        }
		        default:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}

	format(string, sizeof(string), "Player Inventory: Cash: %s", FormatMoney(GetPVarInt(playerid, "Cash")));
	ShowPlayerDialogEx(forplayer, 0, DIALOG_STYLE_LIST, string, result, "Close", "");
	return true;
}
//============================================//

forward PrintVehInv(playerid, key);
public PrintVehInv(playerid, key)
{
	new result[2048];
    if(key == -1) return 1; // Invalid vehicleid.
	if(IsInvalidVeh(key)) return 1;
	//if(VehicleInfo[key][vType] == VEHICLE_PERSONAL && VehicleInfo[key][vTrunk] != 1) return 1;
    if(VehicleInfo[key][vType] == VEHICLE_PERSONAL || VehicleInfo[key][vType] == VEHICLE_LSPD)
    {
		new p = DEFAULT_VEHICLE_SLOTS;
		if(IsHelmetCar(key))
		{
	    	p = SMALL_VEHICLE_SLOTS;
		}
		if(IsVehicleSUV(key))
		{
	   		p = MAX_VEH_SLOTS;
	   	}

	    for(new i = 0; i < p; i++)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(VehicleInfo[key][vTrunk] != 1) return 1;
				if(VehicleInfo[key][vInvID][i] > 0)
				{
				    switch(VehicleInfo[key][vInvID][i])
				    {
				        case 22 .. 38:
				        {
				            if(VehicleInfo[key][vInvQ][i] == 0)
				            {
				            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]));
				            }
							else
							{
								format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i], PrintIName(VehicleInfo[key][vInvE][i]));
							}
				        }
				        case 100 .. 199:
				        {
				            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
				        }
				        case 500 .. 549:
				        {
				            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
				        }
				        case 1000 .. 1001:
				        {
				        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
				        }
				        default:
				        {
				            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]));
				        }
				    }
			    }
			    else
			    {
				    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
			    }
			}
			else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
				if(i >= MAX_GLOVE_BOX_SLOTS) break;
				new vehicleid = GetPlayerVehicleID(playerid);
				if(VehicleInfo[vehicleid][vgbInvID][i] > 0)
				{
				    switch(VehicleInfo[vehicleid][vgbInvID][i])
				    {
				        case 22 .. 38:
				        {
				            if(VehicleInfo[vehicleid][vgbInvQ][i] == 0)
				            {
				            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]));
				            }
							else
							{
								format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]), VehicleInfo[vehicleid][vgbInvQ][i], PrintIName(VehicleInfo[vehicleid][vgbInvE][i]));
							}
				        }
				        case 100 .. 199:
				        {
				            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]), VehicleInfo[vehicleid][vgbInvQ][i]);
				        }
				        case 500 .. 549:
				        {
				            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]), VehicleInfo[vehicleid][vgbInvQ][i]);
				        }
				        case 1000 .. 1001:
				        {
				        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]), VehicleInfo[vehicleid][vgbInvQ][i]);
				        }
				        default:
				        {
				            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(VehicleInfo[vehicleid][vgbInvID][i]));
				        }
				    }
			    }
			    else
			    {
				    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
			    }
			}
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			ShowPlayerDialogEx(playerid, 203, DIALOG_STYLE_LIST, "Vehicle Trunk", result, "Take", "Close");
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			ShowPlayerDialogEx(playerid, 203, DIALOG_STYLE_LIST, "Vehicle Glove Conpartment", result, "Take", "Close");
		}

		if(VehicleInfo[key][vCorp] > 0 && CorpInfo[VehicleInfo[key][vCorp]][cUsed] == 1) scm(playerid, COLOR_ERROR, "There's a corpse inside the trunk.");
	}
	return true;
}

forward PrintVehInvEx(playerid, key);
public PrintVehInvEx(playerid, key)
{
	new result[500];
    if(VehicleInfo[key][vType] == VEHICLE_PERSONAL || VehicleInfo[key][vType] == VEHICLE_LSPD)
    {
		new p = DEFAULT_VEHICLE_SLOTS;
		if(IsHelmetCar(key))
		{
	    	p = SMALL_VEHICLE_SLOTS;
		}
		if(IsVehicleSUV(key))
		{
	   		p = MAX_VEH_SLOTS;
	   	}

	    for(new i = 0; i < p; i++)
		{
			if(VehicleInfo[key][vInvID][i] > 0)
			{
			    switch(VehicleInfo[key][vInvID][i])
			    {
			        case 22 .. 38:
			        {
			            if(VehicleInfo[key][vInvQ][i] == 0) { format(result, 500, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i])); }
						else { format(result, 500, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i], PrintIName(VehicleInfo[key][vInvE][i])); }
			        }
			        case 100 .. 199:
			        {
			            format(result, 500, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
			        }
			        case 500 .. 549:
			        {
			            format(result, 500, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
			        }
			        case 1000 .. 1001:
			        {
			        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
			        }
			        default:
			        {
			            format(result, 500, "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(VehicleInfo[key][vInvID][i]));
			        }
			    }
		    }
		    else
		    {
			    format(result, 500, "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
		    }
		}
		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_LIST, "Vehicle Inventory", result, "Close", "");
		if(VehicleInfo[key][vCorp] > 0 && CorpInfo[VehicleInfo[key][vCorp]][cUsed] == 1) scm(playerid, COLOR_ERROR, "There's a corpse inside the trunk.");
	}
	return true;
}


forward PrintHouseInv(playerid);
public PrintHouseInv(playerid)
{
	new result[2048], string[128];

	new hid = GetPVarInt(playerid, "HouseEnter");
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hid][hXi], HouseInfo[hid][hYi], HouseInfo[hid][hZi])) return 1;
	if(GetPlayerVirtualWorld(playerid) != HouseInfo[hid][hVwIn]) return 1;
	if(!GetCloseHouseSafe(playerid, hid)) return 1;
    for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
	{
		if(HouseInfo[hid][hInvID][i] > 0)
		{
		    switch(HouseInfo[hid][hInvID][i])
		    {
		        case 22 .. 38:
		        {
		            if(HouseInfo[hid][hInvQ][i] == 0)
		            {
		            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]));
		        	}
					else
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i], PrintIName(HouseInfo[hid][hInvE][i]));
					}
		        }
		        case 100 .. 199:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
		        }
		        case 500 .. 549:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
		        }
		        case 1000 .. 1001:
		        {
		        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
		        }
		        default:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]));
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}
	format(string, 128, "Property Inventory - Cash %s", FormatMoney(HouseInfo[hid][hBank]));
	ShowPlayerDialogEx(playerid, 202, DIALOG_STYLE_LIST, string, result, "Take", "Close");
	return true;
}

forward PrintHouseInvEx(playerid, hid);
public PrintHouseInvEx(playerid, hid)
{
	new result[2048], string[128];

	for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
	{
		if(HouseInfo[hid][hInvID][i] > 0)
		{
		    switch(HouseInfo[hid][hInvID][i])
		    {
		        case 22 .. 38:
		        {
		            if(HouseInfo[hid][hInvQ][i] == 0)
		            {
		            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]));
		        	}
					else
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i], PrintIName(HouseInfo[hid][hInvE][i]));
					}
		        }
		        case 100 .. 199:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
		        }
		        case 500 .. 549:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
		        }
		        case 1000 .. 1001:
		        {
		        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
		        }
		        default:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(HouseInfo[hid][hInvID][i]));
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}

	format(string, 128, "Property Inventory - Cash %s", FormatMoney(HouseInfo[hid][hBank]));
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_LIST, string, result, "Close", "");
	return true;
}
//============================================//
forward PrintBizInv(playerid);
public PrintBizInv(playerid)
{
	new result[2048], string[128];

	new id = GetPVarInt(playerid, "BizEnter");
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi])) return 1;
	if(GetPlayerVirtualWorld(playerid) != BizInfo[id][VwIn]) return 1;
	if(!GetCloseBizSafe(playerid, id)) return 1;
    for(new i = 0; i < MAX_BUSINESS_SLOTS; i++)
	{
		if(BizInfo[id][InvID][i] > 0)
		{
		    switch(BizInfo[id][InvID][i])
		    {
		        case 22 .. 38:
		        {
		            if(BizInfo[id][InvQ][i] == 0)
		            {
		            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(BizInfo[id][InvID][i]));
		        	}
					else
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i], PrintIName(BizInfo[id][InvE][i]));
					}
		        }
		        case 100 .. 199:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
		        }
		        case 500 .. 549:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
		        }
		        case 1000 .. 1001:
		        {
		        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
		        }
		        default:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(BizInfo[id][InvID][i]));
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}
	format(string, 128, "Business Inventory - Cash %s", FormatMoney(BizInfo[id][Bank]));
	ShowPlayerDialogEx(playerid, 200, DIALOG_STYLE_LIST, string, result, "Take", "Close");
	return true;
}

forward PrintBizInvEx(playerid, id);
public PrintBizInvEx(playerid, id)
{
	new result[2048], string[128];

    for(new i = 0; i < MAX_BUSINESS_SLOTS; i++)
	{
		if(BizInfo[id][InvID][i] > 0)
		{
		    switch(BizInfo[id][InvID][i])
		    {
		        case 22 .. 38:
		        {
		            if(BizInfo[id][InvQ][i] == 0)
		            {
		            	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(BizInfo[id][InvID][i]));
		        	}
					else
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i], PrintIName(BizInfo[id][InvE][i]));
					}
		        }
		        case 100 .. 199:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
		        }
		        case 500 .. 549:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
		        }
		        case 1000 .. 1001:
		        {
		        	format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
		        }
		        default:
		        {
		            format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(BizInfo[id][InvID][i]));
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}

	format(string, 128, "Business Inventory - Cash %s", FormatMoney(BizInfo[id][Bank]));
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_LIST, string, result, "Close", "");
	return true;
}
//============================================//
public FixInv(playerid)
{
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == 0 && i != MAX_INV_SLOTS - 1)
		{
			PlayerInfo[playerid][pInvItem][i] = PlayerInfo[playerid][pInvItem][i + 1];
			PlayerInfo[playerid][pInvQ][i] = PlayerInfo[playerid][pInvQ][i + 1];
			PlayerInfo[playerid][pInvEx][i] = PlayerInfo[playerid][pInvEx][i + 1];
			PlayerInfo[playerid][pInvS][i] = PlayerInfo[playerid][pInvS][i + 1];

			PlayerInfo[playerid][pInvItem][i + 1] = 0;
			PlayerInfo[playerid][pInvQ][i + 1] = 0;
			PlayerInfo[playerid][pInvEx][i + 1] = 0;
			PlayerInfo[playerid][pInvS][i + 1] = 0;
		}
	}
	return 1;
}
//============================================//
stock CheckInv(playerid)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == 0)
		{
		    return 1;
	    }
	}
	return 0;
}
//============================================//
stock CheckInvItem(playerid, itemid)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] >= 1)
		{
            if(PlayerInfo[playerid][pInvItem][i] == itemid)
            {
		        return PlayerInfo[playerid][pInvQ][i];
		    }
	    }
	}
	return 0;
}
//============================================//
stock PrimaryWeapon(playerid)
{
	new found = 0;
	if(CheckInvItem(playerid, 25)) found = 1;
	if(CheckInvItem(playerid, 26)) found = 1;
	if(CheckInvItem(playerid, 28)) found = 1;
	if(CheckInvItem(playerid, 29)) found = 1;
	if(CheckInvItem(playerid, 30)) found = 1;
	if(CheckInvItem(playerid, 31)) found = 1;
	if(CheckInvItem(playerid, 32)) found = 1;
	if(CheckInvItem(playerid, 33)) found = 1;
	if(CheckInvItem(playerid, 34)) found = 1;
	//==========//
	switch(PlayerInfo[playerid][pPlayerWeapon])
	{
	    case 25 .. 34:
	    {
	        found = 1;
	    }
	}
	//==========//
	return found;
}
//============================================//
stock IsPrimary(id)
{
	new found = 0;
	switch(id)
	{
	    case 25 .. 34:
	    {
	        found = 1;
	    }
	}
	return found;
}
//============================================//
stock SecondWeapon(playerid)
{
	new found = 0;
	if(CheckInvItem(playerid, 22)) found = 1;
	if(CheckInvItem(playerid, 23)) found = 1;
	if(CheckInvItem(playerid, 24)) found = 1;
	//==========//
	switch(PlayerInfo[playerid][pPlayerWeapon])
	{
	    case 22 .. 24:
	    {
	        found = 1;
	    }
	}
	//==========//
	return found;
}
//============================================//
stock IsSecond(id)
{
	new found = 0;
	switch(id)
	{
	    case 22 .. 24:
	    {
	        found = 1;
	    }
	}
	return found;
}
//============================================//
stock PrintIName(InvItem)
{
	new result[128], found = 0;
	result="NULL";
	for(new i = 0; i < sizeof(ItemIDs); i++)
	{
	    if(ItemIDs[i][ItemID] == InvItem && found == 0)
	    {
	        format(result, 128, "%s", ItemIDs[i][Name]);
	        found++;
	    }
	}
	return result;
}
//============================================//
stock PrintIid(InvItem)
{
	new result, found = 0;
    for(new i = 0; i < sizeof(ItemIDs); i++)
	{
	    if(ItemIDs[i][ItemID] == InvItem && found == 0)
	    {
	        result=ItemIDs[i][ObjectID];
	        found++;
	    }
	}
	return result;
}
//============================================//
stock PrintIQ(InvItem) {
    for(new i = 0; i < sizeof(ItemIDs); i++) {
	    if(ItemIDs[i][ItemID] == InvItem) {
	        return ItemIDs[i][Q];
	    }
	}
	
	return 0;
}
//============================================//
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(GetPVarInt(playerid, "PlayerLogged") == 0) return 1;
    if(GetPVarInt(issuerid, "LSPD_Ta") == 0) CallRemoteFunction("ShowBlood", "i", playerid);

    if(IsPlayerConnected(issuerid))
    {
        new Float:damage = 0, string[128], Float:amoun, Float:distance = 0.9, Float:radius, feet, Float:x, Float:y, Float:z, Float:health, Float:armour;
		GetPlayerPos(playerid,x,y,z), GetPlayerHealth(playerid,health), GetPlayerArmourEx(playerid,armour);
		//==========//
		// KO System
		if(weaponid <= 15 && GetPVarInt(playerid, "Dead") == 5)
		{
			SetPlayerHealth(playerid, 99);
			return 1;
		}
		
		if(weaponid >= 22 && weaponid <= 38 && GetPVarInt(playerid, "Dead") == 5)
		{
			ResetPlayerWeapons(playerid);
		    TogglePlayerControllableEx(playerid, false);
		    SetPVarInt(playerid, "Dead", 2);
		    SetPlayerPosEx(playerid,GetPVarFloat(playerid, "PosX"),GetPVarFloat(playerid, "PosY"),GetPVarFloat(playerid, "PosZ"));
			SetPlayerFacingAngle(playerid,GetPVarFloat(playerid, "Angle"));
			SetPlayerInterior(playerid,GetPVarInt(playerid, "Interior"));
			SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "World"));
			SetCameraBehindPlayer(playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Type (/accept death) to continue.");
            SetPlayerHealthEx(playerid,1.0);
            GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo]);
			if(GetPVarInt(playerid, "Admin") != 10) SetPVarInt(playerid, "DeathTime", GetCount()+60000);
		}

		if(GetPVarInt(playerid, "Dead") != 0) return 1;

        // Taser System
        if(weaponid == 23 && GetPVarInt(issuerid, "LSPD_Ta") == 1
		&& GetPVarInt(playerid, "Dead") == 0 && GetPVarInt(playerid, "Cuffed") == 0
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT  && !IsPlayerInRangeOfPoint(issuerid,0.9,x,y,z))
		{
		    if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 38) return SendClientMessage(issuerid,COLOR_ERROR,"You can't taze a player who has a weapon in his hand."),SetPlayerHealthEx(playerid,health);
		    if(!IsPlayerInRangeOfPoint(issuerid, 10.0, x, y, z)) return SendClientMessage(issuerid, COLOR_ERROR,"You are too far away from the player you're shooting at.");
		    if(GetPVarInt(issuerid, "LSPD_Delay") > GetCount()) return true;
			new sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
			format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	        format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(issuerid));
      	    GiveNameSpace(sendername);
            GiveNameSpace(giveplayer);
            format(string, sizeof(string), "*** %s aims %s taser at %s and fires it.", giveplayer, CheckSex(issuerid), sendername);
            ProxDetector(30.0, issuerid, string, COLOR_PURPLE);
   	        TogglePlayerControllableEx(playerid,false);
    	    SetPVarInt(playerid, "Cuffed", 1);
    	    SetPVarInt(playerid, "CuffedTime", 60);
    	    SetPVarInt(playerid, "Tazed", 1);
    	    ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
            SetPlayerArmourEx(playerid,armour);
			if(health < 11.0) SetPlayerHealthEx(playerid, 10.0);
		    else SetPlayerHealthEx(playerid,health);
            PlaySoundPlyRadius(playerid, 6003, 10.0);
            scm(issuerid, -1, "You must wait a moment before shooting the taser again.");
            SetPVarInt(issuerid, "LSPD_Delay", GetCount()+1500);
		    return true;
        }

        if(weaponid >= 22 && weaponid <= 38)
	    {
		    SetPVarInt(issuerid, "HitMark", 1);
		    TextDrawHideForPlayer(issuerid, HitMark);
		    TextDrawShowForPlayer(issuerid, HitMark);
		}

		if(weaponid == 41)
		{
		    if(GetPVarInt(playerid, "Blinded") == 0 && GetPVarInt(playerid, "BlackScreen") == 0)
		    {
		        TextDrawShowForPlayer(playerid,BlindDraw);
		        SetTimerEx("EndBlackScreen", 2000, false, "i", playerid);
		        SetPVarInt(playerid, "BlackScreen", 1);
		        SetPlayerHealthEx(playerid, health);
		    }
		    return true;
		}

		if(PlayerInfo[issuerid][pAmmoType] == 113) // BEANBAG
		{
		    if(weaponid == 25 || weaponid == 26)
		    {
		        if(IsPlayerInRangeOfPoint(issuerid, 20.0, x, y, z))
		        {
		        	SetPlayerArmourEx(playerid,armour);
    	            if(health < 10.0) SetPlayerHealthEx(playerid,10.0);
		            else SetPlayerHealthEx(playerid,health);

		            if(PlayerInfo[playerid][pBeanbaggedTime] == 0)
		            {
			            if(PlayerInfo[playerid][pBeanbagged] == 0)
			            {
			            	PlayerInfo[playerid][pBeanbagged] = 1;
			            	PlayerInfo[playerid][pBeanbaggedTime] = 3;
			            }
			            else if(PlayerInfo[playerid][pBeanbagged] == 1)
			            {
			            	PlayerInfo[playerid][pBeanbagged] = 2;
			            	PlayerInfo[playerid][pBeanbaggedTime] = 10;
			            }
			            else if(PlayerInfo[playerid][pBeanbagged] == 2)
			            {
			            	PlayerInfo[playerid][pBeanbagged] = 3;
			            	PlayerInfo[playerid][pBeanbaggedTime] = 20;
			            }

			            ClearAnimations(playerid);

			            format(string, sizeof(string),"You shot %s with a bean bag.", PlayerNameEx(playerid));
				        SendClientMessage(issuerid,COLOR_WHITE,string);
				        format(string, sizeof(string),"%s shot you with a bean bag.", PlayerNameEx(issuerid));
				        SendClientMessage(playerid,COLOR_WHITE,string);

				        TogglePlayerControllableEx(playerid, false);
						ApplyAnimationEx(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		            }
			        return true;
		        }
		        else
		        {
		        	SetPlayerArmourEx(playerid,armour);
    	        	if(health < 10.0) SetPlayerHealthEx(playerid,10.0);
		        	else SetPlayerHealthEx(playerid,health);
    	            return true;
		        }
		    }
		}
		if(PlayerInfo[issuerid][pAmmoType] == 128) // RUBBER
		{
		    if(weaponid == 31)
		    {
		        if(IsPlayerInRangeOfPoint(issuerid, 30.0, x, y, z))
		        {
		        	SetPlayerArmourEx(playerid,armour);
    	            if(health < 10.0) SetPlayerHealthEx(playerid,10.0);
		            else SetPlayerHealthEx(playerid,health);

		           	if(PlayerInfo[playerid][pBeanbaggedTime] == 0)
		            {
			            if(PlayerInfo[playerid][pBeanbagged] == 0)
			            {
			            	PlayerInfo[playerid][pBeanbagged] = 1;
			            	PlayerInfo[playerid][pBeanbaggedTime] = 3;
			            }
			            else if(PlayerInfo[playerid][pBeanbagged] == 1)
			            {
			            	PlayerInfo[playerid][pBeanbagged] = 2;
			            	PlayerInfo[playerid][pBeanbaggedTime] = 10;
			            }
			            else if(PlayerInfo[playerid][pBeanbagged] == 2)
			            {
			            	PlayerInfo[playerid][pBeanbagged] = 3;
			            	PlayerInfo[playerid][pBeanbaggedTime] = 20;
			            }

			            ClearAnimations(playerid);

			            format(string, sizeof(string),"You shot %s with a rubber bullet.", PlayerNameEx(playerid));
				        SendClientMessage(issuerid,COLOR_WHITE,string);
				        format(string, sizeof(string),"%s shot you with a rubber bullet.", PlayerNameEx(issuerid));
				        SendClientMessage(playerid,COLOR_WHITE,string);

				        TogglePlayerControllableEx(playerid, false);
						ApplyAnimationEx(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		        	}
			        return true;
		        }
		        else
		        {
		        	SetPlayerArmourEx(playerid,armour);
    	        	if(health < 10.0) SetPlayerHealthEx(playerid,10.0);
		        	else SetPlayerHealthEx(playerid,health);
    	            return true;
		        }
		    }
		}
		if(bodypart == 9) // HEADSHOT !
		{
		    if(armour > 200)
		    {
				SetPlayerArmourEx(playerid, 100.0);
		    }
		    else if(armour > 100)
		    {
				SetPlayerArmourEx(playerid, 50.0);
		    }
		    else if(armour > 0)
		    {
		        if(armour > 50.0) SetPlayerHealthEx(playerid, 50.0);
				SetPlayerArmourEx(playerid, 0.0);
		    }
		    else
		    {
		        SetPlayerHealthEx(playerid, 0.0), SetPlayerArmourEx(playerid, 0.0);
		    }
		    return true;
		}
	    //==========//
		radius = GetPlayerDistanceFromPoint(issuerid, x, y, z);
		feet = floatround(radius);
		switch(weaponid)
		{
			case 2 .. 3: damage = 5 * 1.5;
			case 4: damage = 20 * 1.5;
			case 5 .. 8: damage = 15 * 1.5;
		    case 22: damage = DAMAGE_COLT * 1.5;
		    case 23: damage = DAMAGE_SILENCER * 1.5;
		    case 24: damage = DAMAGE_DEAGLE * 1.5;
		    case 25:
		    {
			    damage = DAMAGE_SHOTGUN * 1.5;
			    if(feet <= 5.0) damage+=50;
			}
		    case 26:
		    {
			    damage = DAMAGE_SAWNOFF * 1.5;
			    if(feet <= 5.0) damage+=50;
			}
		    case 28: damage = DAMAGE_UZI * 1.5;
		    case 29: damage = DAMAGE_MP5 * 1.5;
		    case 30: damage = DAMAGE_AK47;
		    case 31: damage = DAMAGE_M4;
		    case 32: damage = DAMAGE_TEC9 * 1.5;
		    case 33: damage = DAMAGE_RIFLE;
		    case 34: damage = DAMAGE_SNIPER;
		}

		if(weaponid < 15 && GetPVarInt(playerid,"DrugTime") > 0)
		{
			switch(GetPVarInt(playerid,"DrugHigh"))
			{
				case 501: // cocaine
				{
					damage += 5;
				}
				case 502: // crack
				{
					damage -= 5;
				}
			}
		}

		if(PlayerInfo[issuerid][pAmmoType] == 113) // BEANBAG
		{
			damage = 0;
		}
		else if(PlayerInfo[issuerid][pAmmoType] == 128) // RUBBER
		{
			damage = 0;
		}

		if(damage != 0)
		{
			if(WoundWeapon(weaponid) && PlayerInfo[issuerid][pArcade] == 0 && PlayerInfo[playerid][pArcade] == 0)
			{
			    if(!IsPlayerInRangeOfPoint(issuerid,distance,x,y,z))
			    {
					switch(bodypart)
					{
					    case 3,4: PlayerWound(playerid, 1, 1);
					    case 5,6: PlayerWound(playerid, 2, 1);
					    case 7,8: PlayerWound(playerid, 3, 1);
					}
		    	}
		    }
		    if(armour > 0)
		    {
		        amoun = armour - damage;
			    if(amoun < 0)
			    {
			    	SetPlayerHealthEx(playerid,health - damage);
			    }
			    
			    SetPlayerArmourEx(playerid,armour-damage);
		    }
		    else
		    {
		    	SetPlayerHealthEx(playerid,health-damage);
		    }

		    PlayerInfo[playerid][pInjuries][bodypart] += 1;
		}

		if(weaponid <= 15 && health <= 20.0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarInt(playerid, "Dead") == 0)
		{
		    new rand = random(5);
		    switch(rand)
		    {
		        case 0: ApplyAnimationEx(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		        case 1: ApplyAnimationEx(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		        case 2: ApplyAnimationEx(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		        case 3: ApplyAnimationEx(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
		        case 4: ApplyAnimationEx(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
		        default: ApplyAnimationEx(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
		    }

		    SetPVarInt(playerid, "Dead", 5);
		    SetPVarInt(playerid, "CrackTime", GetCount() + 60000);

		    SendClientMessage(playerid, COLOR_ERROR, "You have been knocked out. (/getup)");

		    PlayerInfo[playerid][pInjuriesText] = CreateDynamic3DTextLabel("This player is injured! (/injuries)", COLOR_ERROR, x, y, z, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 20.0);

		    SetPlayerHealth(playerid, 99);
		    return 1;
		}
    }
	return true;
}
//============================================//
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(GetPVarInt(playerid, "LSPD_Ta") == 1)
    {
		if(weaponid == 23)
		{
			if(hittype != BULLET_HIT_TYPE_PLAYER)
			{
		    	if(GetPVarInt(playerid, "LSPD_Delay") > GetCount()) return true;
		    	new string[128], sendername[MAX_PLAYER_NAME];
		    	SetPVarInt(playerid, "LSPD_Delay",GetCount()+1500);
		    	SetPlayerArmedWeapon(playerid, 0);
		    	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      	    	GiveNameSpace(sendername);
		    	format(string, sizeof(string), "*** %s shoots %s taser and misses.", sendername, CheckSex(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
            	scm(playerid, -1, "You must wait a moment before shooting the taser again.");
		    	return 1;
		    }
		}
    }
    if(!IsPlayerInAnyVehicle(playerid))
    {
        switch(weaponid)
        {
            case 27, 23, 25, 29, 30, 31, 33, 24, 38:
            {
                if(CheckSpeed(playerid))
                {
                    if(gettime() - GetPVarInt(playerid, "LIT") >= 30) SetPVarInt(playerid, "ABI", 1);
                    else SetPVarInt(playerid, "ABI", GetPVarInt(playerid, "ABI")+1);
                    SetPVarInt(playerid, "LIT", gettime());
                    if(GetPVarInt(playerid, "ABI") >= 3)
                    {
                        DeletePVar(playerid, "ABI");
                        ResetPlayerWeaponsEx(playerid);
                        return 0;
                    }
                }
            }
        }
    }
	if(weaponid != 0 && weaponid == PlayerInfo[playerid][pPlayerWeapon])
	{
	    //==============//
	    if(GetPVarInt(playerid, "HouseEnter") != 0 || GetPVarInt(playerid, "BizEnter") != 0 || GetPVarInt(playerid, "IntEnter") != 0 || GetPVarInt(playerid, "GarageEnter") != 0)
    	{
    		if(PlayerInfo[playerid][pPlayerWeapon] != 23)
    		{
    			SetPVarInt(playerid, "ShotTime", 60);
    		}
    	}
    	else
    	{
    		if(PlayerInfo[playerid][pPlayerWeapon] == 23)
    		{
    			SetPVarInt(playerid, "ShotTime", 60);
    		}
    		else
    		{
    			SetPVarInt(playerid, "ShotTime", 10);
    		}
    	}

        new sweapon, sammo;
        for (new i = 0; i < 9; i++)
	    {
	    	GetPlayerWeaponData(playerid, i, sweapon, sammo);

	    	if(sweapon != 0) break;
		}

	    if(sweapon == weaponid)
	    {
	    	if(weaponid >= 16 && weaponid <= 38)
			{
				PlayerInfo[playerid][pPlayerAmmo]--;
				SetPlayerAmmo(playerid, weaponid, PlayerInfo[playerid][pPlayerAmmo]);
			}

	        if(sammo <= 1)
	        {
	            ResetPlayerWeapons(playerid);
	            PlayerInfo[playerid][pPlayerAmmo]=0;
				//if(GetPVarInt(playerid, "AutoReload") == 0) SetTimerEx("ReloadWeapon",2000, false, "i", playerid);
 				new ammo, found = 0;
	            for(new wi = 0; wi < MAX_INV_SLOTS; wi++)
	            {
		            if(found == 0)
		            {
    		            if(PlayerInfo[playerid][pInvItem][wi] > 0)
    		            {
	    		            if(PlayerInfo[playerid][pInvItem][wi] >= 100 && PlayerInfo[playerid][pInvItem][wi] <= 199)
	    		            {
	    		                ammo = CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][wi]);
	    		                if(ammo > 0) {
								found=wi;  }
	    		            }
    		            }
		            }
	            }
	            if(found != 0 && GetPVarInt(playerid, "AutoReload") == 0) {
				GameTextForPlayer(playerid, "Reloading weapon...", 2000, 4);
				SetTimerEx("ReloadWeapon", 2000, false, "i", playerid); }
	        }
	        else
	        {
	            new rac = CompatAmmo(playerid, PlayerInfo[playerid][pAmmoType]), Float:fOPos[3], Float:fHPos[3];
	            if(rac > 0)
	            {
	                GetPlayerPos(playerid, fOPos[0], fOPos[1], fOPos[2]);
	                if(!IsAroundShell(playerid) && GetPVarInt(playerid, "LSPD_Ta") == 0)
	                {
	                    CallRemoteFunction("CreateShell","fffiiii", fOPos[0], fOPos[1], fOPos[2], GetPlayerVirtualWorld(playerid), PlayerInfo[playerid][pAmmoType], GetPlayerInterior(playerid), PlayerInfo[playerid][pPlayerSerial]);
	                }
	                switch(PlayerInfo[playerid][pAmmoType])
	                {
	                    case 122, 123: // TRACERS
	                    {
	                        if(GetPVarInt(playerid, "TracerDelay") > GetCount()) return true;
	                        SetPVarInt(playerid, "TracerDelay" , GetCount()+500);
	                        //==========//
	                        new found = 0, foundid = 0;
	                        for(new i2 = 0; i2 < sizeof(Tracers); i2++)
	                        {
   	                            if(Tracers[i2][tUsed] == 0 && found == 0)
    	                        {
                                    found++;
                                    foundid=i2;
                                }
                            }
                            if(found == 0) return true;
	                        //==========//
	                        Tracers[foundid][tUsed]=1;
	                        GetPlayerLastShotVectors(playerid, fOPos[0], fOPos[1], fOPos[2], fHPos[0], fHPos[1], fHPos[2]);
	                        Tracers[foundid][tObject]=CreateDynamicObject(18647, fOPos[0], fOPos[1], fOPos[2], 0.0, 0.0, 0.0);
	                        SetObjectFacePoint(Tracers[foundid][tObject], fHPos[0], fHPos[1]);
	                        new Float:Speed = VectorSize(fOPos[0]-fHPos[0], fOPos[1]-fHPos[1], fOPos[2]-fHPos[2])+25.0;
	                        MoveDynamicObject(Tracers[foundid][tObject], fHPos[0], fHPos[1], fHPos[2], Speed);
	                        Streamer_Update(playerid);
	                        //==========//
	                    }
	                }
	                Streamer_Update(playerid);
	            }
	        }
	    }
    }
    return 1;
}
//============================================//
public OnDynamicObjectMoved(objectid)
{
    new found = 0, foundid = 0;
	for(new i = 0; i < sizeof(Tracers); i++)
    {
        if(Tracers[i][tUsed] == 1 && found == 0 && objectid == Tracers[i][tObject])
        {
            found++;
            foundid = i;
        }
    }
    if(found != 0)
    {
        Tracers[foundid][tUsed]=0;
        if(IsValidDynamicObject(Tracers[foundid][tObject])) { DestroyDynamicObject(Tracers[foundid][tObject]); }
        Tracers[foundid][tObject]=0;
    }
	return true;
}

public OnObjectMoved(objectid)
{
	for(new i = 0; i < sizeof(Basketball); i++)
	{
		if(objectid == Basketball[i][bID])
		{
			new Float:ball_check_pos[3];
			GetObjectPos(objectid, ball_check_pos[0], ball_check_pos[1], ball_check_pos[2]);
			if(GetDistanceFromPointToPoint(ball_check_pos[0], ball_check_pos[1], ball_check_pos[2], Basketball[i][bX], Basketball[i][bY], Basketball[i][bZ]) >= 100)
			{
				Basketball[i][bBounce] = 1;
				Basketball[i][bState] = 2;

				PlayerInfo[Basketball[i][bBaller]][pHasBasketball] = 0;
				PlayerInfo[Basketball[i][bBaller]][pBasketballID] = 0;
				
				ClearAnimationsEx(Basketball[i][bBaller]);
				SetTimerEx("ClearAnimationsTimer", 500, 0, "i", Basketball[i][bBaller]);

				new Float:player_pos[3];
				GetPlayerPos(Basketball[i][bBaller], player_pos[0], player_pos[1], player_pos[2]);
				SetPlayerPosEx(Basketball[i][bBaller], player_pos[0], player_pos[1], player_pos[2]);

				Basketball[i][bBaller] = INVALID_MAXPL;

				SetObjectPos(objectid, Basketball[i][bX], Basketball[i][bY], Basketball[i][bZ] - 0.8);
				return 1;
			}

			switch(Basketball[i][bState])
			{
				case 1:
				{
					new Float:speed = GetPlayerSpeed(Basketball[i][bBaller], true);
					new Float:distance = 1.0;

					speed = speed / 1.5;

					if(speed < 3.0)
					{
						speed = 3;
					}

					if(speed > 7.0)
					{
						speed = 7.0;
					}

					new Float:ball_pos[3];
					GetObjectPos(objectid, ball_pos[0], ball_pos[1], ball_pos[2]);
					if(GetPlayerDistanceFromPoint(Basketball[i][bBaller], ball_pos[0], ball_pos[1], ball_pos[2]) * 2 > speed)
					{
						speed = GetPlayerDistanceFromPoint(Basketball[i][bBaller], ball_pos[0], ball_pos[1], ball_pos[2]);
					}

					new Keys, ud, lr;
					GetPlayerKeys(Basketball[i][bBaller], Keys, ud, lr);

					if(Keys & KEY_SPRINT)
					{
						ApplyAnimation(Basketball[i][bBaller],"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
						distance = 1.5;
					}
					else if(ud & KEY_UP)
					{
						ApplyAnimation(Basketball[i][bBaller],"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
						distance = 1.0;
					}
					else
					{
						ApplyAnimation(Basketball[i][bBaller],"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
						distance = 0.8;
					}

					new Float:player_pos[3];
					GetPlayerPos(Basketball[i][bBaller], player_pos[0], player_pos[1], player_pos[2]);
					GetXYInFrontOfPlayer(Basketball[i][bBaller], player_pos[0], player_pos[1], distance);

					switch(Basketball[i][bBounce])
					{
						case 1:
						{
							MoveObject(objectid, player_pos[0], player_pos[1], player_pos[2] - 0.8, speed);
						}
						case 2:
						{
							MoveObject(objectid, player_pos[0], player_pos[1], player_pos[2], speed);
						}
					}

					if(Basketball[i][bBounce] == 2)
					{
						Basketball[i][bBounce] = 1;
					}
					else
					{
						Basketball[i][bBounce]++;
					}
				}

				case 2:
				{
					new Float:ball_pos[3];
					GetObjectPos(objectid, ball_pos[0], ball_pos[1], ball_pos[2]);

					switch(Basketball[i][bBounce])
					{
						case 1: MoveObject(objectid, ball_pos[0], ball_pos[1], ball_pos[2] - 0.8, 4);
						case 2: MoveObject(objectid, ball_pos[0], ball_pos[1], ball_pos[2] + 0.4, 5);
						case 3: MoveObject(objectid, ball_pos[0], ball_pos[1], ball_pos[2] - 0.4, 6);
						case 4: MoveObject(objectid, ball_pos[0], ball_pos[1], ball_pos[2] + 0.2, 7);
						case 5: MoveObject(objectid, ball_pos[0], ball_pos[1], ball_pos[2] - 0.2, 8);
					}

					if(Basketball[i][bBounce] == 5)
					{
						Basketball[i][bBounce] = 0;
						Basketball[i][bState] = 0;
					}
					else
					{
						Basketball[i][bBounce]++;
					}
				}

				case 3:
				{
					new Float:ball_pos[3];
					GetObjectPos(objectid, ball_pos[0], ball_pos[1], ball_pos[2]);

					switch(Basketball[i][bResult])
					{
						case 0:
						{
							MoveObject(objectid, Basketball[i][bfX], Basketball[i][bfY], Basketball[i][bfZ], 9);
							Basketball[i][bState] = 4;
						}
						case 1 .. 2:
						{
							MoveObject(objectid, Basketball[i][bfX], Basketball[i][bfY], Basketball[i][bfZ], 9);
							Basketball[i][bState] = 2;
							Basketball[i][bBounce] = 1;
							Basketball[i][bBaller] = INVALID_MAXPL;
						}
					}
				}

				case 4:
				{
					new Float:ball_pos[3];
					GetObjectPos(objectid, ball_pos[0], ball_pos[1], ball_pos[2]);

					switch(Basketball[i][bResult])
					{
						case 0:
						{
							GameTextForPlayer(Basketball[i][bBaller], "~g~Score!", 1500, 3);

							new string[128];
							format(string, sizeof(string), "*** %s scores a point.", PlayerInfo[Basketball[i][bBaller]][pName]);
							SetPlayerChatBubble(Basketball[i][bBaller], string, COLOR_PURPLE, 30.0, 10000);

							MoveObject(objectid, ball_pos[0] + (random(5) / 10), ball_pos[1] + (random(5) / 10), Basketball[i][bZ], 9);
						}
					}
					Basketball[i][bState] = 2;
					Basketball[i][bBounce] = 1;
					Basketball[i][bBaller] = INVALID_MAXPL;
				}

				case 5:
				{
					Basketball[i][bState] = 1;

					new Float:player_pos[3];
					GetPlayerPos(Basketball[i][bBaller], player_pos[0], player_pos[1], player_pos[2]);
					GetXYInFrontOfPlayer(Basketball[i][bBaller], player_pos[0], player_pos[1], 1.0);

					MoveObject(Basketball[i][bID], player_pos[0], player_pos[1], player_pos[2], 4);
				}
			}
		}
	}
	return 1;
}
//============================================//
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new str[128];
	for(new i=0;i<sizeof(SpikeInfo);i++)
	{
        if(pickupid == SpikeInfo[i][sPickup])
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new panels, doors, lights, tires,id;
	    	    GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
		        UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, 15);
		        DestroyDynamicPickup(SpikeInfo[i][sPickup]);
		        id = CreateDynamicPickup(1007, 14, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ], 0);
			    SpikeInfo[i][sPickup] = id;
		    }
		}
	}
    for(new r = 0; r < sizeof(RentalSpot); r++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2]))
	    {
	        CreateLableText(playerid,"Rental Center"," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
        }
	}
	for(new h = 0; h < sizeof(BusRoutes); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.5,BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]))
	    {
			new h2 = h+1, Float:distancef, distance;
			switch(h)
			{
			    case 0 .. 16:
			    {
			        //distancef=GetVehicleDistanceFromPoint(BotBus, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~%s~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), GetZoneArea(BusRoutes[h2][0], BusRoutes[h2][1], BusRoutes[h2][2]), distance);
				}
			    case 17:
			    {
			        //distancef=GetVehicleDistanceFromPoint(BotBus, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~Bus Station~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), distance);
				}
			    case 18 .. 26:
			    {
			        //distancef=GetVehicleDistanceFromPoint(BotBus2, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~%s~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), GetZoneArea(BusRoutes[h2][0], BusRoutes[h2][1], BusRoutes[h2][2]), distance);
				}
			    case 27:
			    {
			        //distancef=GetVehicleDistanceFromPoint(BotBus2, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~Bus Station~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), distance);
				}
			}
            CreateLableText(playerid,"Bus Stop",str);
	    }
    }
	for(new de = 0; de < sizeof(Dealerships); de++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, Dealerships[de][0], Dealerships[de][1], Dealerships[de][2]))
	    {
	        if(GetPVarInt(playerid, "LOADDEAL") != 0) { return true; }
	        CreateLableText(playerid,"DEALER"," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
        }
	}
	for(new p = 0; p < sizeof(PaintSprays); p++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, PaintSprays[p][0], PaintSprays[p][1], PaintSprays[p][2]))
	    {
	        CreateLableText(playerid,"PnS"," ~w~Press ~r~~h~SPACEBAR ~w~to enter!");
        }
	}
	for(new p = 0; p < sizeof(ModShop); p++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, ModShop[p][0], ModShop[p][1], ModShop[p][2]))
	    {
	        CreateLableText(playerid,"Modshop"," ~w~Press ~r~~h~SPACEBAR ~w~to enter!");
        }
	}
	
    for(new jb = 0; jb < sizeof(JobInfo); jb++)
	{
	    if(JobInfo[jb][jID] >= 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.5, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
	        {
	        	if(GetPVarInt(playerid, "Job") == JobInfo[jb][jID])
	        	{
	        		if(GetPVarInt(playerid, "Job") == JOB_FARMER ||
	        			GetPVarInt(playerid, "Job") == JOB_PIZZA ||
	        			GetPVarInt(playerid, "Job") == JOB_MECHANIC ||
	        			GetPVarInt(playerid, "Job") == JOB_TRUCKER)
	        		{
	        			format(str, sizeof(str),"~w~%s", JobInfo[jb][jName]);
						CreateLableText(playerid,str," ~w~type ~r~/jobinfo~w~!");
	        		}
	        		else
	        		{
	        			format(str, sizeof(str),"~w~%s", JobInfo[jb][jName]);
						CreateLableText(playerid,str," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
	        		}
				}
				else
				{
					format(str, sizeof(str),"~w~%s", JobInfo[jb][jName]);
					CreateLableText(playerid,str," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
				}
	        }
	    }
	}

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 369.1131, -115.5914, 1001.4922))
	{
		CreateLableText(playerid,"~w~Pizza Boy"," ~w~type ~r~/pizza~w~!");
	}

	foreach(new i : IntIterator)
	{
	    if(IntInfo[i][iiXo] == 0.0 && IntInfo[i][iiYo] == 0.0 && IntInfo[i][iiZo] == 0.0) continue;
        
        if(IsPlayerInRangeOfPoint(playerid, 2.5, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]) && 
        	GetPlayerVirtualWorld(playerid) == IntInfo[i][iiVirtualWorldo] &&
        	GetPlayerInterior(playerid) == IntInfo[i][iiInterioro])
        {
            format(str, sizeof(str),"~w~%s", IntInfo[i][iiName]);
            CreateLableText(playerid, str," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to enter!");
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.5, IntInfo[i][iiXi], IntInfo[i][iiYi], IntInfo[i][iiZi]) && 
        	GetPlayerVirtualWorld(playerid) == IntInfo[i][iiVirtualWorldi] &&
        	GetPlayerInterior(playerid) == IntInfo[i][iiInteriori])
        {
            format(str, sizeof(str),"~w~%s", IntInfo[i][iiName]);
            CreateLableText(playerid, str," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to exit!");
        }
	}
	foreach(new h : HouseIterator)
	{
	    if(HouseInfo[h][hID] != 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	        {
	            new str2[128];
	            if(HouseInfo[h][hOwned] == 0) //for sale
	            {
				    format(str, sizeof(str),"~w~Property");
					format(str2, sizeof(str2), " ~w~Price: ~g~~h~ %s (buy) ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to buy. ", FormatMoney(HouseInfo[h][hValue]));
		            CreateLableText(playerid, str, str2);
				}
				else //Bought
				{
	            	format(str, sizeof(str),"~w~Property");
					format(str2, sizeof(str2), " ~w~Owned by: ~n~~g~ %s ~w~ ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to enter. ", HouseInfo[h][hOwner]);
	            	CreateLableText(playerid, str, str2);
				}
	        }
	    }
	}
	foreach(new h : BizIterator)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
        {
            new str2[256];
            if(BizInfo[h][Owned] == 0) //for sale
            {
                if(GetPVarInt(playerid, "Bank") < BizInfo[h][Value]) //Can afford it
                {
					format(str2, 256, " ~w~Name: ~r~~h~ %s ~n~~w~ Price: ~r~~h~ %s ~n~~n~ ~w~Press ~r~~h~'H' ~w~to buy~n~ Type ~r~~h~/enter ~w~to enter", BizInfo[h][Name], FormatMoney(BizInfo[h][Value]));
	            	CreateLableText(playerid, "~w~Business", str2);
				}
				else //Cannot afford it.
				{
					format(str2, 256, " ~w~Name: ~r~~h~ %s ~n~~w~ Price: ~g~~h~ %s ~n~~n~ ~w~Press ~r~~h~'H' ~w~to buy~n~ Type ~r~~h~/enter ~w~to enter", BizInfo[h][Name], FormatMoney(BizInfo[h][Value]));
	            	CreateLableText(playerid, "~w~Business", str2);
				}
			}
			else //Bought
			{
				format(str2, sizeof(str2), " ~r~~h~%s ~n~~w~ Owned by: ~n~~g~ %s ~w~ ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to enter. (%s) ", BizInfo[h][Name], BizInfo[h][Owner], FormatMoney(BizInfo[h][EnterPrice]));
	            CreateLableText(playerid, "~w~Business", str2);
			}
        }
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.5, DMVSpot[0][0], DMVSpot[0][1], DMVSpot[0][2]))
	{
	    CreateLableText(playerid,"DMV"," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 2725.7688,-2318.5544,3.0000)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/boatspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1564.6024,-1692.9283,5.8906)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/acuspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1572.4750,-1692.9384,5.8906)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/policespawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 267.5989,1375.9387,10.5859)) CreateLableText(playerid,"DOC"," ~w~type ~r~/docspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1468.5840,-1836.1243,13.5469)) CreateLableText(playerid,"GOV"," ~w~type ~r~/govspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 849.9410,-1383.7013,13.5710)) CreateLableText(playerid,"RLS"," ~w~type ~r~/rlsspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1798.5409,-1281.3446,13.6655)) CreateLableText(playerid,"News"," ~w~type ~r~/newsspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1059.7606,51.4485,801.0403)) CreateLableText(playerid,"News"," ~w~type ~r~/camera~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 374.7547,200.2276,1081.5173)) CreateLableText(playerid,"GOV"," ~w~type ~r~/locker~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 398.9706,203.9854,1081.6190)) CreateLableText(playerid,"GOV"," ~w~type ~r~/uniform~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 129.2496,1131.2227,527.4651)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/payticket~w~!~n~ or ~r~/payimpound~w~!");
    //if(IsPlayerInRangeOfPoint(playerid, 2.5, 125.3675,1111.5530,523.9155)) CreateLableText(playerid,"LSPD"," ~w~Garage, press ~r~'H'~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1045.5764,51.5593,801.0356)) CreateLableText(playerid,"SA Network"," ~w~type ~r~/ad ~w~or ~r~/cad~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 2042.0798,-1349.6273,1271.4860)) CreateLableText(playerid,"LSFD"," ~w~Locker Room ~r~/uniform~w~!");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1128.2969,-1300.9207,13.5751)) CreateLableText(playerid,"LSFD"," ~w~Locker Room ~r~/uniform~w~!");
    if(pickupid == PDP[0]) CreateLableText(playerid,"LSPD"," ~w~Locker Room ~r~/uniform~w~!");
    if(pickupid == PDP[1]) CreateLableText(playerid,"LSP"," ~w~Cellblock ~r~/arrest ~w~or~n~~r~ /darrest!");
    //if(pickupid == PDP[2]) CreateLableText(playerid,"LSPD"," ~w~Cellblock ~r~/darrest~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1640.8882,-2243.1147,13.4936)) return CreateLableText(playerid,"Guide"," ~w~Type ~b~/guide");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 2038.4750,-1365.0499,1271.5000)) return CreateLableText(playerid,"Floors"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 2055.4756,-673.1822,1478.8860)) return CreateLableText(playerid,"Floors"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1994.9702,-1534.0613,1174.6000)) return CreateLableText(playerid,"Floors"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1135.5886,-1293.6591,13.5556)) return CreateLableText(playerid,"LSFD"," ~w~Type ~b~/fdspawn");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1132.5594, -1345.9895, 13.9910)) return CreateLableText(playerid,"LSFD"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1129.6824, -1345.8639, 20.3343)) return CreateLableText(playerid,"LSFD"," ~w~Type ~b~/floor");

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 204.3188,-160.1595,1000.5234)) return CreateLableText(playerid,"Clothes"," ~w~Clothes Shop, press ~r~'H'~w~!");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 217.0851,-98.3804,1005.2578)) return CreateLableText(playerid,"Clothes"," ~w~Clothes Shop, press ~r~'H'~w~!");

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1837.2917,-1721.5858,5202.5859)) return CreateLableText(playerid,"Cells"," ~w~Control Room, press ~r~'H'~w~!");
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1865.4895,-1717.3920,5202.5859)) return CreateLableText(playerid,"Locker"," ~w~Locker Room, press ~r~'H'~w~!");

	//if(IsPlayerInRangeOfPoint(playerid, 2.5, 1396.4072,-30.5178,1001.1188)) CreateLableText(playerid,"VidCon"," ~w~type ~r~/eventclothes~w~!");
	return 1;
}
//============================================//
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(IsPlayerNPC(playerid)) return 1;
    
    CallRemoteFunction("RemoveIdle", "i", playerid);
    
    if(GetPVarInt(playerid, "KeyDelay") > GetCount()) return true;
    SetPVarInt(playerid, "KeyDelay" , GetCount()+1000);
    new string[256], str[256], found = 0, foundid = 0;

    if((newkeys & KEY_JUMP))
    {
    	SetPVarInt(playerid, "JumpCount", GetPVarInt(playerid, "JumpCount") + 1);
    }
    if(PRESSED(KEY_CTRL_BACK))
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
            for(new r = 0; r < sizeof(RentalSpot); r++)
            {
                if(IsPlayerInRangeOfPoint(playerid, 1.0, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2]))
                {
                    if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
                    if(GetPVarInt(playerid, "RentKey") != 0) return SendClientMessage(playerid, COLOR_ERROR, "ERROR: You already rent a vehicle, (/unrent)!");
			        ShowPlayerDialogEx(playerid, 3, DIALOG_STYLE_MSGBOX,"RENTAL AGREEMENT","Agreeing to this document will allow you to rent one of our vehicles.\nYou will be charged $50 now, and $50 each payday. Do you agree?","Accept", "Deny");
                }
            }
            for(new de = 0; de < sizeof(Dealerships); de++)
            {
                if(IsPlayerInRangeOfPoint(playerid, 1.0, Dealerships[de][0], Dealerships[de][1], Dealerships[de][2]))
                {
                	if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_ERROR, "You are currently on a route!");
                    if(GetPVarInt(playerid, "LOADDEAL") != 0) { return true; }
                    SetPVarInt(playerid, "VEHMDL", de+1); // Normal Veh Dealership TYPE
                    SetPVarInt(playerid, "VEHDEAL", de); // Normal Veh Dealership ID
                    ShowPlayerDialogEx(playerid, 420, DIALOG_STYLE_LIST, "Dealership", "Purchase Vehicle\nVehicle Upgrades", "Select", "Close");
                }
            }
            for(new jb = 0; jb < sizeof(JobInfo); jb++)
            {
                if(JobInfo[jb][jID] >= 1)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 2.0, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
					{
						if(GetPVarInt(playerid, "Job") >= 1 && GetPVarInt(playerid, "Job") != jb+1) return SendClientMessage(playerid, COLOR_ERROR, "You already have a job, this is not your station!");
					    if(GetPVarInt(playerid, "Job") == JOB_FARMER ||
					    	GetPVarInt(playerid, "Job") == JOB_PIZZA ||
					    	GetPVarInt(playerid, "Job") == JOB_MECHANIC ||
					    	GetPVarInt(playerid, "Job") == JOB_TRUCKER) return 1;
					    if(GetPVarInt(playerid, "Job") == jb+1)
					    {
					        ShowPlayerDialogEx(playerid, 4, DIALOG_STYLE_LIST, JobInfo[jb][jName], "Start Route\nEnd Route\nQuit Job", "Select", "Close");
					    }
					    else
					    {
							format(str, 256, "Agreeing to this document will allow you to become a %s.", JobInfo[jb][jName]);
					        ShowPlayerDialogEx(playerid, 5, DIALOG_STYLE_MSGBOX, "JOB AGREEMENT",str,"Accept", "Deny");
					    }
                    }
                }
            }

			foreach(new i : IntIterator)
			{
            	if(GetPVarInt(playerid, "OnRoute") != 0) break;
            	if(IntInfo[i][iiXo] == 0.0 && IntInfo[i][iiYo] == 0.0 && IntInfo[i][iiZo] == 0.0) continue;

                if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]) &&
                	GetPlayerInterior(playerid) == IntInfo[i][iiInterioro] && GetPlayerVirtualWorld(playerid) == IntInfo[i][iiVirtualWorldo])
                {
                    if(IntInfo[i][iiFreeze] == 1)
                    {
                    	TogglePlayerControllableEx(playerid, false);
                    	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
                    }

                    SetPlayerPosEx(playerid, IntInfo[i][iiXi], IntInfo[i][iiYi], IntInfo[i][iiZi]);
                    SetPlayerInterior(playerid, IntInfo[i][iiInteriori]);
                    SetPlayerVirtualWorld(playerid, IntInfo[i][iiVirtualWorldi]);

                    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
                    SetPVarInt(playerid, "IntEnter", i), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
                    PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 2, i));

                    if(IntInfo[i][iiVirtualWorldi] == IntInfo[i][iiVirtualWorldo] && IntInfo[i][iiInteriori] == IntInfo[i][iiInterioro])
					{
						SetPVarInt(playerid, "IntEnter", 0);
					}

                    if(GetPVarInt(playerid, "DrugTime") == 0)
					{
	                	//SetPlayerTime(playerid, 12, 0);
	                	//SetPlayerWeather(playerid, 0);
	            	}

	            	Streamer_Update(playerid);
                    return 1;
                }
                else if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[i][iiXi], IntInfo[i][iiYi], IntInfo[i][iiZi]) &&
                	GetPlayerInterior(playerid) == IntInfo[i][iiInteriori] && GetPlayerVirtualWorld(playerid) == IntInfo[i][iiVirtualWorldi])
                {
				    if(IntInfo[i][iiFreeze] == 1)
                    {
                    	TogglePlayerControllableEx(playerid, false);
                    	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
                    }

                    SetPlayerPosEx(playerid, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]);
                    SetPlayerInterior(playerid, IntInfo[i][iiInterioro]);
                    SetPlayerVirtualWorld(playerid, IntInfo[i][iiVirtualWorldo]);

                    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
                    SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
                    PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 2, i));

                    if(GetPVarInt(playerid, "DrugTime") == 0)
					{
	                	//SetPlayerTime(playerid, 12, 0);
	                	//SetPlayerWeather(playerid, 0);
	            	}

	            	Streamer_Update(playerid);
                	return 1;
                }
            }
			foreach(new h : HouseIterator)
			{
				if(GetPVarInt(playerid, "OnRoute") != 0) return 1;
			    if(HouseInfo[h][hID] != 0)
			    {
			    	if(!IsPlayerInAnyVehicle(playerid))
					{
				        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
				        {
				            if(HouseInfo[h][hOwned] != 0)
				            {
				                if(HouseInfo[h][hLocked] == 0)
				                {
				                	TogglePlayerControllableEx(playerid, false);
				        			SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

					                SetPlayerPosEx(playerid, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]);
					                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwIn]);
					                SetPlayerInterior(playerid, HouseInfo[h][hIntIn]);
					                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h);
					                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 1, h));

					                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
		                            else
		                            {
		                                PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
		                            }
		                            HouseLights(h);
		                            if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
		                            if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
		                            if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
						   		    {
		                                HouseAlarm(h, 0);
		                            }

		                            if(GetPVarInt(playerid, "DrugTime") == 0)
									{
					                	//SetPlayerTime(playerid, 12, 0);
					                	//SetPlayerWeather(playerid, 0);
					            	}

					            	Streamer_Update(playerid);
					            	return 1;
								}
								else { error(playerid, "This house is locked."); }
				            }
				            else
				           	{
				           	    format(string, sizeof(string), "Would you like to purchase this property?\nValue: %s | Bank Account: %s", FormatMoney(HouseInfo[h][hValue]), FormatMoney(GetPVarInt(playerid, "Bank")));
		    					ShowPlayerDialogEx(playerid, 207, DIALOG_STYLE_MSGBOX, "Property For Sale!", string, "Purchase", "Cancel");
				            }
						}
				        else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
				        {
				            if(HouseInfo[h][hLocked] == 1) {
		                    HouseInfo[h][hLocked]=0; }
				            TogglePlayerControllableEx(playerid, false);
				        	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
			                SetPlayerPosEx(playerid, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]);
			                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwOut]);
			                SetPlayerInterior(playerid, HouseInfo[h][hIntOut]);
			                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
			                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
			                
			                StopAudioStreamForPlayer(playerid);
			                LoadRadios(playerid);
			                if(GetPVarInt(playerid, "DrugTime") == 0)
							{
						        SetPlayerTime(playerid, GMHour, GMMin);
						        SetPlayerWeather(playerid, GMWeather);
						    }

						    Streamer_Update(playerid);
						    return 1;
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
				        {
				            if(HouseInfo[h][hLocked] == 1 && HouseInfo[h][hOwned] != 0)
				            {
				                error(playerid, "This garage is locked.");
				                return true;
				            }
		           
	                    	TogglePlayerControllableEx(playerid, false);
			        		SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

	                    	SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwIn]);
	                		SetPlayerInterior(playerid, HouseInfo[h][gInterior]);
	                    	SetPlayerPosEx(playerid, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]);
                    		SetPlayerFacingAngle(playerid, HouseInfo[h][hgAi]);
				            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h), SetPVarInt(playerid, "GarageEnter", h);

				            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 1, h));

			                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
	                        else
	                        {
	                            PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
	                        }
	                        HouseLights(h);
	                        if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
	                        if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
	                        if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
				   		    {
	                            HouseAlarm(h, 0);
	                        }

	                        if(GetPVarInt(playerid, "DrugTime") == 0)
							{
			                	//SetPlayerTime(playerid, 12, 0);
			                	//SetPlayerWeather(playerid, 0);
			            	}

			            	Streamer_Update(playerid);
			            	return 1;
					    }
					    else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
				        {
				        	TogglePlayerControllableEx(playerid, false);
				        	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

				        	SetPlayerVirtualWorld(playerid, 0);
		                	SetPlayerInterior(playerid, 0);
		                    SetPlayerPosEx(playerid, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]);
				            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0), SetPVarInt(playerid, "GarageEnter", 0);

				            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
				                
			                StopAudioStreamForPlayer(playerid);
			                LoadRadios(playerid);

			                if(GetPVarInt(playerid, "DrugTime") == 0)
							{
						        SetPlayerTime(playerid, GMHour, GMMin);
						        SetPlayerWeather(playerid, GMWeather);
						    }

						    Streamer_Update(playerid);
						    return 1;
				        }
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hbdXo], HouseInfo[h][hbdYo], HouseInfo[h][hbdZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
				        {
				        	if(HouseInfo[h][hOwned] != 0)
				            {
				                if(HouseInfo[h][hLocked] == 0)
				                {
				                	if(HouseInfo[h][hbdXi] == 0 && HouseInfo[h][hbdYi] == 0 && HouseInfo[h][hbdXi] == 0) return 1;

				                	TogglePlayerControllableEx(playerid, false);
				        			SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
				                	
					                SetPlayerPosEx(playerid, HouseInfo[h][hbdXi], HouseInfo[h][hbdYi], HouseInfo[h][hbdZi]);
					                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwIn]);
					                SetPlayerInterior(playerid, HouseInfo[h][hIntIn]);
					                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h);
					                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 1, h));

					                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
		                            else
		                            {
		                                PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
		                            }
		                            HouseLights(h);
		                            if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
		                            if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
		                            if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
						   		    {
		                                HouseAlarm(h, 0);
		                            }

		                            if(GetPVarInt(playerid, "DrugTime") == 0)
									{
					                	//SetPlayerTime(playerid, 12, 0);
					                	//SetPlayerWeather(playerid, 0);
					            	}

					            	Streamer_Update(playerid);
					            	return 1;
								}
								else { error(playerid, "This house is locked."); }
				            }
				            else
				           	{
				           	    format(string, sizeof(string), "Would you like to purchase this property?\nValue: %s | Bank Account: %s", FormatMoney(HouseInfo[h][hValue]), FormatMoney(GetPVarInt(playerid, "Bank")));
		    					ShowPlayerDialogEx(playerid, 207, DIALOG_STYLE_MSGBOX, "Property For Sale!", string, "Purchase", "Cancel");
				            }
				        }
				        else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hbdXi], HouseInfo[h][hbdYi], HouseInfo[h][hbdZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
				        {
				        	if(HouseInfo[h][hbdXo] == 0 && HouseInfo[h][hbdYo] == 0 && HouseInfo[h][hbdXo] == 0) return 1;

				        	TogglePlayerControllableEx(playerid, false);
				        	SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

			                SetPlayerPosEx(playerid, HouseInfo[h][hbdXo], HouseInfo[h][hbdYo], HouseInfo[h][hbdZo]);
			                SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwOut]);
			                SetPlayerInterior(playerid, HouseInfo[h][hIntOut]);
			                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
			                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
			                
			                StopAudioStreamForPlayer(playerid);
			                LoadRadios(playerid);
			                if(GetPVarInt(playerid, "DrugTime") == 0)
							{
						        SetPlayerTime(playerid, GMHour, GMMin);
						        SetPlayerWeather(playerid, GMWeather);
						    }

						    Streamer_Update(playerid);
						    return 1;
				        }
			    	}
				}
            }
			foreach(new h : BizIterator)
			{
				if(GetPVarInt(playerid, "OnRoute") != 0) return 1;
			    if(BizInfo[h][ID] != 0)
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
			        {
			        	if(BizInfo[h][Closed] == 1) return SendClientMessage(playerid, COLOR_ERROR, "This business has been shut down by the Los Santos Government.");
			            if(BizInfo[h][Owned] != 0)
			            {
			                if(BizInfo[h][Locked] == 0)
			                {
								if(GetPVarInt(playerid, "MonthDon") == 0)
								{
								    if(GetPVarInt(playerid, "Cash") < BizInfo[h][EnterPrice]) return error(playerid,"Insufficient funds.");
 								    GivePlayerMoneyEx(playerid, -BizInfo[h][EnterPrice]);
 								    BizInfo[h][Bank] = BizInfo[h][Bank] + BizInfo[h][EnterPrice];
								}

 								TogglePlayerControllableEx(playerid, false);
				        		SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
								SetPlayerPosEx(playerid, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]);
				                SetPlayerVirtualWorld(playerid, BizInfo[h][VwIn]);
				                SetPlayerInterior(playerid, BizInfo[h][IntIn]);
				                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", h), SetPVarInt(playerid, "HouseEnter", 0);
				                new msg[128];
				                format(msg, sizeof(msg), "{FFFFFF}Biz Slogan: %s", BizInfo[h][Slogan]);
				                scm(playerid, -1, msg);
				                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 3, h));
				                if(strcmp(BizInfo[h][bRadio], "None", true) == 0){}
	                            else
	                            {
	                                PlayAudioStreamForPlayerEx(playerid, BizInfo[h][bRadio]);
	                            }

	                            if(GetPVarInt(playerid, "DrugTime") == 0)
								{
				                	//SetPlayerTime(playerid, 12, 0);
				                	//SetPlayerWeather(playerid, 0);
				            	}

				            	Streamer_Update(playerid);
				            	return 1;
							}
							else
							{
								GameTextForPlayer(playerid, "~r~closed", 5000, 1);
							}
			            }
			            else
			           	{
		           	   		format(string, sizeof(string), "Would you like to buy this business?\nBuy: %s \n\nBank Account: %s", FormatMoney(BizInfo[h][Value]), FormatMoney(GetPVarInt(playerid, "Bank")));
	    					ShowPlayerDialogEx(playerid, 300, DIALOG_STYLE_MSGBOX, "Buy business", string, "Debit", "Cancel");
			            }
					}
			        else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[h][VwIn])
			        {
			            TogglePlayerControllableEx(playerid, false);
		                SetPlayerPosEx(playerid, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]);
		                SetPlayerVirtualWorld(playerid, 0);
		                SetPlayerInterior(playerid, BizInfo[h][IntOut]);
		                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
		                StopAudioStreamForPlayerEx(playerid);
		                LoadRadios(playerid);
		                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
		                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
		                if(GetPVarInt(playerid, "DrugTime") == 0)
						{
					        SetPlayerTime(playerid, GMHour, GMMin);
					        SetPlayerWeather(playerid, GMWeather);
					    }

					    Streamer_Update(playerid);
					    return 1;
					}
				}

				if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][bbdXo], BizInfo[h][bbdYo], BizInfo[h][bbdZo]))
				{
					if(BizInfo[h][Closed] == 1) return SendClientMessage(playerid, COLOR_ERROR, "This business has been shut down by the Los Santos Government.");
					if(BizInfo[h][Owned] != 0)
			        {
		                if(BizInfo[h][Locked] == 0)
		                {
		                	if(BizInfo[h][bbdXi] == 0 && BizInfo[h][bbdYi] == 0 && BizInfo[h][bbdXi] == 0) return 1;
							if(GetPVarInt(playerid, "MonthDon") == 0)
							{
							    if(GetPVarInt(playerid, "Cash") < BizInfo[h][EnterPrice]) return error(playerid,"Insufficient funds.");
								GivePlayerMoneyEx(playerid, -BizInfo[h][EnterPrice]);
								BizInfo[h][Bank] = BizInfo[h][Bank] + BizInfo[h][EnterPrice];
							}

							TogglePlayerControllableEx(playerid, false);
							SetPlayerPosEx(playerid, BizInfo[h][bbdXi], BizInfo[h][bbdYi], BizInfo[h][bbdZi]);
			                SetPlayerVirtualWorld(playerid, BizInfo[h][VwIn]);
			                SetPlayerInterior(playerid, BizInfo[h][IntIn]);
			                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", h), SetPVarInt(playerid, "HouseEnter", 0);
			                new msg[128];
			                format(msg, sizeof(msg), "{FFFFFF}Biz Slogan: %s", BizInfo[h][Slogan]);
			                scm(playerid, -1, msg);
			                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
			                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 3, h));
			                if(strcmp(BizInfo[h][bRadio], "None", true) == 0){}
                            else
                            {
                                PlayAudioStreamForPlayerEx(playerid, BizInfo[h][bRadio]);
                            }

                            if(GetPVarInt(playerid, "DrugTime") == 0)
							{
			                	//SetPlayerTime(playerid, 12, 0);
			                	//SetPlayerWeather(playerid, 0);
			            	}

			            	Streamer_Update(playerid);
			            	return 1;
						}
						else
						{
							GameTextForPlayer(playerid, "~r~closed", 5000, 1);
						}
		            }
		            else
		           	{
	           	   		format(string, sizeof(string), "Would you like to buy this business?\nBuy: %s \n\nBank Account: %s", FormatMoney(BizInfo[h][Value]), FormatMoney(GetPVarInt(playerid, "Bank")));
    					ShowPlayerDialogEx(playerid, 300, DIALOG_STYLE_MSGBOX, "Buy business", string, "Debit", "Cancel");
		            }
				}
				else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][bbdXi], BizInfo[h][bbdYi], BizInfo[h][bbdZi]) && GetPlayerVirtualWorld(playerid) == BizInfo[h][VwIn])
				{
					if(BizInfo[h][bbdXo] == 0 && BizInfo[h][bbdYo] == 0 && BizInfo[h][bbdXo] == 0) return 1;
					TogglePlayerControllableEx(playerid, false);
	                SetPlayerPosEx(playerid, BizInfo[h][bbdXo], BizInfo[h][bbdYo], BizInfo[h][bbdZo]);
	                SetPlayerVirtualWorld(playerid, 0);
	                SetPlayerInterior(playerid, BizInfo[h][IntOut]);
	                SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
	                StopAudioStreamForPlayerEx(playerid);
	                LoadRadios(playerid);
	                PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
	                SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
	                if(GetPVarInt(playerid, "DrugTime") == 0)
					{
				        SetPlayerTime(playerid, GMHour, GMMin);
				        SetPlayerWeather(playerid, GMWeather);
				    }

				    Streamer_Update(playerid);
				    return 1;
				}
            }

		    for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    {
                if(IsPlayerInRangeOfPoint(playerid,2.0,WeedInfo[weed][wX],WeedInfo[weed][wY],WeedInfo[weed][wZ]))
                {
					if(GetPlayerVirtualWorld(playerid) == WeedInfo[weed][wWorld])
					{
				        if(WeedInfo[weed][wPlanted] == 1 && WeedInfo[weed][wX] != 0.0 && WeedInfo[weed][wY] != 0.0 && WeedInfo[weed][wZ] != 0.0)
				        {
				            if (WeedInfo[weed][wTime] > 0)
				            {
				                format(string, sizeof(string), "This plant needs (%d) more minutes before it can be picked!", WeedInfo[weed][wTime]);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        return true;
						    }

						    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_ERROR, "Your inventory is full.");
                            ApplyAnimationEx(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		                    if(WeedInfo[weed][wObject] > 0 && IsValidDynamicObject(WeedInfo[weed][wObject])) { DestroyDynamicObject(WeedInfo[weed][wObject]); }
		                    WeedInfo[weed][wObject]=0;
		                    GiveInvItem(playerid, 506, 100, 0);
		                    WeedInfo[weed][wX] = 0.0;
		    		        WeedInfo[weed][wY] = 0.0;
		    		        WeedInfo[weed][wZ] = 0.0;
		    		        WeedInfo[weed][wPlanted] = 0;
		    		        ProgressBar(playerid, "Collecting Plants...", 5, 0);
		    		        AddPlayerTag(playerid, "(collecting plants)");
		    		        TogglePlayerControllable(playerid, false);
		    		        return 1;
				        }
				    }
				}
			}
			for(new Crack = 0; Crack < sizeof(CrackInfo); Crack++)
    	    {
                if(IsPlayerInRangeOfPoint(playerid,2.0,CrackInfo[Crack][cX],CrackInfo[Crack][cY],CrackInfo[Crack][cZ]))
                {
					if(GetPlayerVirtualWorld(playerid) == CrackInfo[Crack][cWorld])
					{
				        if(CrackInfo[Crack][cPlanted] == 1 && CrackInfo[Crack][cX] != 0.0 && CrackInfo[Crack][cY] != 0.0 && CrackInfo[Crack][cZ] != 0.0)
				        {
				            if (CrackInfo[Crack][cTime] > 0)
				            {
				                format(string, sizeof(string), "This pot needs (%d) more minutes before it can be manufactured!", CrackInfo[Crack][cTime]);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        return true;
						    }
                            ApplyAnimationEx(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		                    if(CrackInfo[Crack][cObject] > 0 && IsValidDynamicObject(CrackInfo[Crack][cObject])) { DestroyDynamicObject(CrackInfo[Crack][cObject]); }
		                    CrackInfo[Crack][cObject]=0;
		                    GiveInvItem(playerid, 507, 100, 0);
		                    CrackInfo[Crack][cX] = 0.0;
		    		        CrackInfo[Crack][cY] = 0.0;
		    		        CrackInfo[Crack][cZ] = 0.0;
		    		        CrackInfo[Crack][cPlanted] = 0;
		    		        ProgressBar(playerid, "Collecting Crack...", 5, 0);
		    		        AddPlayerTag(playerid, "(collecting crack)");
		    		        TogglePlayerControllable(playerid, false);
		    		        return 1;
				        }
				    }
				}
			}
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, DMVSpot[0][0], DMVSpot[0][1], DMVSpot[0][2]))
            {
                if(GetPVarInt(playerid, "OnRoute") != 0) return 1;
                if(GetPVarInt(playerid, "DriveLic") != 0) return SCM(playerid, COLOR_ERROR, "You already have a driver license!");
                if(GetPlayerMoneyEx(playerid) >= 150)
                {
                    ShowPlayerDialogEx(playerid, 6, DIALOG_STYLE_MSGBOX, "DMV CENTER", "License Cost: $150\nIf you'd like to take your driver license test, press continue.", "Continue", "Close");
                }
                else SCM(playerid, COLOR_WHITE, "You need $150 to conduct the driver license test!");
            }
            if(IsPlayerInRangeOfPoint(playerid, 2.5, 204.3188,-160.1595,1000.5234) || IsPlayerInRangeOfPoint(playerid, 2.5, 217.0851,-98.3804,1005.2578))
            {
				cmd_buyclothes(playerid, " ");
            }
            if(IsPlayerInRangeOfPoint(playerid, 5.0, 1835.1335, -1721.7065, 1002.8306))
            {
				if(GetPVarInt(playerid, "Member") == FACTION_LSPD) {
                    ShowPlayerDialogEx(playerid, 508, DIALOG_STYLE_LIST, "Control Room","Open All Cells\nClose All Cells\nOpen Cell\nClose Cell", "Select", "Close");
                } else {
				    scm(playerid, COLOR_ERROR, "You do not have permission for this function.");
                }
            }
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 804.6270,795.3588,708.2117)) {
				if(GetPVarInt(playerid, "Member") == FACTION_LSPD) {
                    if(GetPVarInt(playerid, "Duty") != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty!");
			        if(GetPVarInt(playerid, "Suspend") == 1) return scm(playerid, COLOR_ERROR, "You are currently suspended from the LSPD.");
			        new result[1024];
			        for(new i = 0; i < sizeof(PDItems); i++) {
			            if(i == 0) {
						    format(result, 1024, "%s | Rank: %d", PrintIName(PDItems[i][0]), PDItems[i][1]);
					    } else {
						    format(result, 1024, "%s\n%s | Rank: %d", result, PrintIName(PDItems[i][0]), PDItems[i][1]); }
			        }
			        format(result, 1024, "%s\n{33FF66}Disarm", result);
			        ShowPlayerDialogEx(playerid, 35, DIALOG_STYLE_LIST, "LSPD Armoury", result, "Select", "Close");
                } else {
				    scm(playerid, COLOR_ERROR, "You do not have permission for this function.");
                }
            }

            for(new i = 0; i < MAX_CAMPFIRES; i++)
            {
            	if(IsPlayerInRangeOfPoint(playerid, 2.0, Campfire[i][cX], Campfire[i][cY], Campfire[i][cZ]))
            	{
            		DestroyDynamicObject(Campfire[i][cID]);
					Campfire[i][cID] = 0;

					KillTimer(Campfire[i][cTimer]);
					return 1;
            	}
            }
        }
    }
    if(PRESSED(KEY_NO))
    {
    	if(PlayerInfo[playerid][pHasBasketball] == 1)
		{
			new Float:player_pos[3];
			GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
			GetXYInFrontOfPlayer(playerid, player_pos[0], player_pos[1], 1.0);

			MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], player_pos[0], player_pos[1], player_pos[2], 4);

			Basketball[PlayerInfo[playerid][pBasketballID]][bBounce] = 1;
			Basketball[PlayerInfo[playerid][pBasketballID]][bState] = 2;
			Basketball[PlayerInfo[playerid][pBasketballID]][bBaller] = INVALID_MAXPL;
			PlayerInfo[playerid][pHasBasketball] = 0;
			PlayerInfo[playerid][pBasketballID] = 0;
			ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
			ClearAnimationsEx(playerid);
			SetTimerEx("ClearAnimationsTimer", 500, 0, "i", playerid);

			GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
			SetPlayerPosEx(playerid, player_pos[0], player_pos[1], player_pos[2]);
			return 1;
		}

	    if(GetPVarInt(playerid, "LSPD_Ta") != 0) return true;
	    if(GetPVarInt(playerid, "Mute") == 1) return true;
		if(GetPVarInt(playerid, "Jailed") > 0) return true;
		if(GetPVarInt(playerid, "Dead") > 0) return true;
		
		if (GetPVarInt(playerid, "PlayerLogged") != 1)
		{
        	SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this!"); return 1;
    	}

    	FixInv(playerid);

        new diatxt[128];
        new count_in = 0;
		new id = GetPVarInt(playerid, "HouseEnter");
		format(diatxt, sizeof(diatxt), "Player Inventory");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[id][hVwIn])
		{
		    if(GetCloseHouseSafe(playerid, id))
			{
		        format(diatxt, sizeof(diatxt), "%s\nProperty Inventory", diatxt);
		        count_in = 1;
		    }
		}
		
		id = GetPVarInt(playerid, "BizEnter");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[id][VwIn])
		{
		    if(GetCloseBizSafe(playerid, id))
			{
		        format(diatxt, sizeof(diatxt), "%s\nBusiness Inventory", diatxt);
		        count_in = 1;
		    }
		}
		
		new key = -1, keyex = -1;
		if(PlayerToCar(playerid, 1, 4.0)) {
		    keyex = PlayerToCar(playerid, 2, 4.0);
		    if(IsValidTCar(keyex))
		    {
		        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		        {
		            format(diatxt, sizeof(diatxt), "%s\n%s Inventory", diatxt, PrintVehName(keyex), PrintVehName(keyex));
					count_in = 2;
					key = keyex;
				}
		    }
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vehicleid][vID] != 0)
		    {
        		if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL)
        		{
	            	if(!IsInvalidVeh(vehicleid))
	            	{
					    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && !IsNotAEngineCar(GetVehicleModel(GetPlayerVehicleID(playerid))) && !IsBike(GetPlayerVehicleID(playerid)))
						{
							format(diatxt, sizeof(diatxt), "%s\n%s Glove Compartment", diatxt, PrintVehName(vehicleid));
							count_in = 2;
							key = vehicleid;
						}
					}
				}
			}
		}
		
		if(key == -1)
		{
		    if(IsPoliceCar(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		    {
		        format(diatxt, sizeof(diatxt), "%s\n%s Inventory",diatxt, PrintVehName(GetPoliceCarID(playerid)));
			    count_in = 2;
			}
		}
		
		if(count_in != 0)
		{
		    ShowPlayerDialogEx(playerid, 204, DIALOG_STYLE_LIST, "Select inventory", diatxt, "Open","Close");
		}
		else
		{
		    if(PlayerInfo[playerid][pDelay][0] <= 0) {
        	CallRemoteFunction("PrintInv", "i", playerid); }
		}
    }
    if(PRESSED(KEY_YES))
    {
        if(GetPVarInt(playerid, "OnRoute") != 0) return 1;
        if (GetPVarInt(playerid, "PlayerLogged") != 1) {
        SendClientMessage(playerid, COLOR_ERROR, "You must be logged in to use this!"); return 1; }
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
            if(GetPVarInt(playerid, "PlayerLogged") == 1 && GetPVarInt(playerid, "Muted") == 0 && GetPVarInt(playerid, "Dead") == 0)
            {
				//=========//
				for(new i = 0; i < sizeof(CorpInfo); i++)
                {
                    if(CorpInfo[i][cUsed] == 1 && found == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]))
                        {
                            if(CorpInfo[i][cVeh] == 0)
                            {
                                found++;
                                foundid = i;
                            }
                            if(CorpInfo[i][cVeh] > 0 && GetVehicleModel(CorpInfo[i][cVeh]) < 0)
                            {
                                found++;
                                foundid = i;
                            }
                        }
                    }
			    }
			    if(found != 0)
			    {
					new f1 = 0, key = 0;
					key=GetPVarInt(playerid, "HouseEnter");
					if(key != 0)
					{
					    if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
					    {
					        f1++;
					    }
					}
					key=GetPVarInt(playerid, "BizEnter");
					if(key != 0)
					{
					    if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
					    {
					        f1++;
					    }
					}
					if(GetPVarInt(playerid, "Member") == FACTION_LSFD) f1++;
					if(GetPVarInt(playerid, "Admin") >= 4) f1++;

					f1 = 1;

			        if(f1 == 0) ShowPlayerDialogEx(playerid, 440, DIALOG_STYLE_LIST, "Corpse Options", "Examine Corpse\nStore In Vehicle", "Select", "Close");
			        else ShowPlayerDialogEx(playerid, 440, DIALOG_STYLE_LIST, "Corpse Options", "Examine Corpse\nStore In Vehicle\nDiscard Corpse", "Select", "Close");
			        return 1;
			    }
				//=========//
                for(new i = 0; i < MAX_LOOT; i++)
                {
                    if(LootInfo[i][lUsed] == 1 && found == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 1.0, LootInfo[i][lX], LootInfo[i][lY], LootInfo[i][lZ]))
                        {
                            found++;
                            foundid = i;
                        }
                    }
			    }
			    if(found != 0)
			    {
			        switch(LootInfo[foundid][lItem][0])
			        {
			            case 16 .. 38:
			            {
			                if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS, (8) required!");
			                if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
			            }
			        }
			        if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
			        GiveInvItem(playerid, LootInfo[foundid][lItem][0], LootInfo[foundid][lItem][1], LootInfo[foundid][lItem][2], LootInfo[foundid][lItem][3]);
			        LootInfo[foundid][lX]=0.0, LootInfo[foundid][lY]=0.0, LootInfo[foundid][lZ]=0.0;
			        format(str, 128, "Picked up '%s'!", PrintIName(LootInfo[foundid][lItem][0]));
			        SendClientMessage(playerid, COLOR_WHITE, str);
			        if( LootInfo[foundid][lItem][0] >= 22 && LootInfo[foundid][lItem][0] <= 38)
			        {
			            format(str, 128, "%s picked up %s", PlayerInfo[playerid][pName], PrintIName(LootInfo[foundid][lItem][0]));
			            WepLog(str);
			        }
			        format(str, 128, "%s picked up %s", PlayerInfo[playerid][pName], PrintIName(LootInfo[foundid][lItem][0]));
			        ServerLog(LOG_ITEM_PICK_UP, PlayerInfo[playerid][pUsername], str);

			        LootInfo[foundid][lItem][0]=0;
			        LootInfo[foundid][lItem][1]=0;
			        LootInfo[foundid][lItem][2]=0;
			        if(IsValidDynamicObject(LootInfo[foundid][lObject])) DestroyDynamicObject(LootInfo[foundid][lObject]);
			        LootInfo[foundid][lObject]=0;
			        DestroyDynamic3DTextLabel(LootInfo[foundid][lText]);
			        LootInfo[foundid][lTime]=0, LootInfo[foundid][lUsed]=0;
			        ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			    }
			    //=========//
			    found = 0, foundid = 0;
			    for(new i2 = 0; i2 < sizeof(Shells); i2++)
    		    {
        		    if(Shells[i2][sUsed] == 1)
				    {
		    		    if(IsPlayerInRangeOfPoint(playerid, 2.5, Shells[i2][sX], Shells[i2][sY], Shells[i2][sZ]))
		    		    {
		        		    found++;
                            foundid = i2;
		   		        }
        		    }
    		    }
    		    if(found > 0 && GetPVarInt(playerid, "Member") == FACTION_LSPD) {
					if(Shells[foundid][sSerial] == 0) {
					format(string, 128, "Shell casing %s collected, serial ID: UNKNOWN.", Shells[foundid][sName]);
					} else {
					format(string, 128, "Shell casing %s collected, serial ID: %d.", Shells[foundid][sName], Shells[foundid][sSerial]); }
					scm(playerid, COLOR_LIGHTBLUE, string);
    		        Shells[foundid][sTime]=0;
	                Shells[foundid][sUsed]=0;
	                Shells[foundid][sX]=0.0;
	                Shells[foundid][sY]=0.0;
	                Shells[foundid][sZ]=0.0;
	                DestroyDynamic3DTextLabel(Shells[foundid][sText]);
	                ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
    		    }
				//=========//
				// Always leave this last to disable the bug not being able to access things with gun in hand.
			    if(PlayerInfo[playerid][pPlayerWeapon] > 0)
    		    {
	    		    if(PlayerInfo[playerid][pPlayerAmmo] == 0)
	    		    {
	    		        if(GetPlayerWeapon(playerid) == 0)
	    		        {
							found = 0;
	    		            new ammo, id;
	    		            for(new i = 0; i < MAX_INV_SLOTS; i++)
	    		            {
		    		            if(found == 0)
		    		            {
			    		            if(PlayerInfo[playerid][pInvItem][i] > 0)
			    		            {
		    	    		            if(PlayerInfo[playerid][pInvItem][i] >= 100 && PlayerInfo[playerid][pInvItem][i] <= 199)
		    	    		            {
	    	    		                    ammo = CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][i]);
		    	    		                if(ammo > 0) {
											found++, id = i; }
		    	    		            }
	    	    		            }
		    		            }
	    		            }
	    		            if(found == 0) return true; // block leaks
	    		            //==========//
	    		            if(GetPVarInt(playerid, "TogUnhol") == 0) {
	    		            ApplyAnimationEx(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0); }
	    		            //==========//
						    PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvItem][id];
	    		            GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pInvQ][id]);
	    		            //PlayerInfo[playerid][pPlayerSerial]=PlayerInfo[playerid][pInvS][id];
						    //==========//
						    format(str, 128, "%s reloaded with '%s'!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]), PrintIName(PlayerInfo[playerid][pInvItem][id]));
					        SendClientMessage(playerid, COLOR_WHITE, str);
					        //==========//
					        RemoveInvItem(playerid, id);
					        return true;
	    		        }
	    		    }
				}
				//=========//
            }
            else SendClientMessage(playerid,COLOR_ERROR,"You are either dead/un-logged/muted to use this!");
        }
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return true;
            new idcar = GetPlayerVehicleID(playerid), Float:ghealth, sendername[MAX_PLAYER_NAME];
            switch(VehicleInfo[idcar][vEngine])
            {
                case 0:
                {
                    GetVehicleHealth(idcar, ghealth);
                    if(ghealth <= 300.0)
			        {
			            //RemovePlayerFromVehicleEx(playerid);
					    SendClientMessage(playerid,COLOR_ERROR,"The vehicle is currently damaged!");
					    return true;
			        }
			        if(VehicleInfo[idcar][vFuel] <= 1)
			        {
			            //RemovePlayerFromVehicleEx(playerid);
					    SendClientMessage(playerid,COLOR_ERROR,"The vehicle has no fuel!");
					    return true;
			        }
			        if(VehicleInfo[idcar][vType] == VEHICLE_PERSONAL && strcmp(VehicleInfo[idcar][vOwner], PlayerInfo[playerid][pUsername], false) != 0) {
				        if(VehicleInfo[idcar][vWireTime] == 0) {
				            if(!CheckInvItem(playerid, 406)) {
				                SendClientMessage(playerid, COLOR_ERROR, "You need a toolkit to hotwire the vehicle!");
				                RemovePlayerFromVehicle(playerid);
				                return true;
				            }
				            
				            VehicleInfo[idcar][vWireTime]++;
				            
			                SetPVarInt(playerid, "Hotwire", 1);
				            format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
				            GiveNameSpace(sendername);
   				            format(string, sizeof(string), "*** %s attempts to hotwire the vehicle.", sendername);
   				            ProxDetector(30.0, playerid, string, COLOR_PURPLE);
   				            ProgressBar(playerid, "Hotwiring...", 60, 1);
   				            AddPlayerTag(playerid, "(hotwiring vehicle)");
   				            if(VehicleInfo[idcar][vAlarmLvl] >= 3) {
								VehicleInfo[idcar][vAlarm]=1;
						   	}
				        } else {
				            SendClientMessage(playerid, COLOR_ERROR, "This vehicle has already been hotwired!");
						    RemovePlayerFromVehicle(playerid);
						}
						
						return true;
			        }
			        cmd_engine(playerid, "");
                }
                case 1: {
                    VehicleInfo[idcar][vEngine]=0;
                    CarEngine(idcar, VehicleInfo[idcar][vEngine]);
                    GameTextForPlayer(playerid, "~n~~w~engine ~r~~h~off ~w~!", 5000, 5);
                }
            }
        }
    }
    if(PRESSED(KEY_SECONDARY_ATTACK))
    {
		if(PlayerInfo[playerid][pHasBasketball] == 0)
		{
			for(new i = 0; i < sizeof(Basketball); i++)
			{
				new Float:basketball_pos[3];
				GetObjectPos(Basketball[i][bID], basketball_pos[0], basketball_pos[1], basketball_pos[2]);

				if(IsPlayerInRangeOfPoint(playerid, 1.5, basketball_pos[0], basketball_pos[1], basketball_pos[2]))
				{
					PlayerInfo[playerid][pHasBasketball] = 1;
					PlayerInfo[playerid][pBasketballID] = i;
					Basketball[i][bBaller] = playerid;
					Basketball[i][bBounce] = 1;
					Basketball[i][bState] = 1;
					ApplyAnimation(playerid,"BSKTBALL", "BBALL_pickup", 4.0, 0, 0, 0, 0, 0);

					new Float:player_pos[3];
					GetPlayerPos(Basketball[i][bBaller], player_pos[0], player_pos[1], player_pos[2]);
					GetXYInFrontOfPlayer(Basketball[i][bBaller], player_pos[0], player_pos[1], 1.0);

					MoveObject(Basketball[i][bID], player_pos[0], player_pos[1], player_pos[2], 4);
					break;
				}
			}

			if(PlayerInfo[playerid][pHasBasketball] == 0)
			{
				foreach(new i : Player)
				{
					if(PlayerInfo[i][pHasBasketball] == 1 && IsPlayerFacingPlayer(playerid, i, 15.0))
					{
						ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
						PlayerInfo[playerid][pBasketballDefending] = 1;
						SetTimerEx("ClearAnimationsTimer", 2000, 0, "i", playerid);
					}
				}

				PlayerInfo[playerid][pBasketballDefending] = 0;
			}
		}

	    for(new h = 0; h < sizeof(Vending); h++)
        {
            if(IsPlayerInRangeOfPoint(playerid,1.0,Vending[h][0], Vending[h][1], Vending[h][2]))
            {
				new Float:health;
				GetPlayerHealth(playerid,health);
				if(GetPVarInt(playerid, "VendingUse") != 0) return 1;
				if(health >= 99) return SendClientMessage(playerid,COLOR_ERROR, "Health is too full!");
				if(GetPlayerMoneyEx(playerid) < 3) return SendClientMessage(playerid,COLOR_ERROR,"You need 3$ to use this.");
                if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid,COLOR_ERROR,"You are dead, you cant use this.");
                SetPlayerPosEx(playerid,Vending[h][0], Vending[h][1], Vending[h][2]);
                SetPlayerFacingAngle(playerid,Vending[h][3]);
	            GivePlayerMoneyEx(playerid,-3);
                GameTextForPlayer(playerid, "~r~-$3.", 5000, 1);
                ApplyAnimationEx(playerid, "VENDING", "VEND_Use", 3.0, 0, 0, 0, 0, 0);
                health+=40.0;
                if(health >= 100.0) health=99.0;
                SetPlayerHealthEx(playerid,health);
                SetPVarInt(playerid, "Mute", 1);
                SetPVarInt(playerid, "VendingUse", 1);
                SetTimerEx("VendingFinish", 2300, false, "i", playerid);
    	        ForceAME(playerid, "uses the vending machine");
            }
        }
        if(GetPVarInt(playerid, "BizEnter") != 0) { // Business Sprunks
			new bid = GetPVarInt(playerid, "BizEnter");
            if(GetPlayerVirtualWorld(playerid) == BizInfo[bid][VwIn]) {
                if(IsPlayerInRangeOfPoint(playerid, 1.0, BizInfo[bid][spX], BizInfo[bid][spY], BizInfo[bid][spZ])) {
                    new Float:health;
				    GetPlayerHealth(playerid,health);
				    if(GetPVarInt(playerid, "VendingUse") != 0) return 1;
				    if(health >= 99) return SendClientMessage(playerid,COLOR_ERROR, "Health is too full!");
				    if(GetPlayerMoneyEx(playerid) < 3) return SendClientMessage(playerid,COLOR_ERROR,"You need 3$ to use this.");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid,COLOR_ERROR,"You are dead, you cant use this.");
                    SetPlayerPosEx(playerid,BizInfo[bid][spX], BizInfo[bid][spY], BizInfo[bid][spZ]);
                    SetPlayerFacingAngle(playerid,BizInfo[bid][spA]);
	                GivePlayerMoneyEx(playerid,-3);
                    GameTextForPlayer(playerid, "~r~-$3.", 5000, 1);
                    ApplyAnimationEx(playerid, "VENDING", "VEND_Use", 3.0, 0, 0, 0, 0, 0);
                    health+=40.0;
                    if(health >= 100.0) health=99.0;
                    SetPlayerHealthEx(playerid,health);
                    SetPVarInt(playerid, "Mute", 1);
                    SetPVarInt(playerid, "VendingUse", 1);
                    SetTimerEx("VendingFinish", 2300, false, "i", playerid);
    	            ForceAME(playerid, "uses the vending machine");
                }
            }
        }
    }
    if(PRESSED(KEY_FIRE))
    {
    	if(PlayerInfo[playerid][pHasBasketball] == 1)
		{
			foreach(new i2 : Player)
			{
				if(i2 == playerid) continue;

				new Float:target_pos[3];
				GetPlayerPos(i2, target_pos[0], target_pos[1], target_pos[2]);

				if(PlayerInfo[i2][pHasBasketball] == 0 && IsPlayerInRangeOfPoint(playerid, 15.0, target_pos[0], target_pos[1], target_pos[2]) && IsPlayerFacingPlayer(playerid, i2, 5.0))
				{
					new Float:player_pos[3];
					GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);

					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

					MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], target_pos[0], target_pos[1], target_pos[2], 15);
					
					Basketball[PlayerInfo[playerid][pBasketballID]][bState] = 5;
					Basketball[PlayerInfo[playerid][pBasketballID]][bBaller] = i2;
					Basketball[PlayerInfo[playerid][pBasketballID]][bBounce] = 1;

					PlayerInfo[i2][pHasBasketball] = 1;
					PlayerInfo[i2][pBasketballID] = PlayerInfo[playerid][pBasketballID];

					PlayerInfo[playerid][pHasBasketball] = 0;
					PlayerInfo[playerid][pBasketballID] = 0;
					break;
				}
				else if(PlayerInfo[i2][pHasBasketball] == 0 && IsPlayerInRangeOfPoint(playerid, 20.0, target_pos[0], target_pos[1], target_pos[2]) && IsPlayerFacingPlayer(playerid, i2, 15.0) && PlayerInfo[i2][pBasketballDefending] == 1)
				{
					new Float:player_pos[3];
					GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);

					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

					MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], target_pos[0], target_pos[1], target_pos[2], 15);
					
					Basketball[PlayerInfo[playerid][pBasketballID]][bState] = 5;
					Basketball[PlayerInfo[playerid][pBasketballID]][bBaller] = i2;
					Basketball[PlayerInfo[playerid][pBasketballID]][bBounce] = 1;

					PlayerInfo[i2][pHasBasketball] = 1;
					PlayerInfo[i2][pBasketballID] = PlayerInfo[playerid][pBasketballID];

					PlayerInfo[playerid][pHasBasketball] = 0;
					PlayerInfo[playerid][pBasketballID] = 0;
					break;
				}
			}

			for(new i = 0; i < sizeof(BasketballNets); i++)
			{
				if(PlayerInfo[playerid][pHasBasketball] == 1 && 
					IsPlayerFacingPoint(playerid, 5.0, BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) &&
					IsPlayerInRangeOfPoint(playerid, 20.0, BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]))
				{
					new Float:player_pos[3];
					GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);

					Basketball[PlayerInfo[playerid][pBasketballID]][bState] = 3;
					Basketball[PlayerInfo[playerid][pBasketballID]][bZ] = player_pos[2];

					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

					new result = random(2);
					Basketball[PlayerInfo[playerid][pBasketballID]][bResult] = result;

					if(GetPlayerDistanceFromPoint(playerid, BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) <= 3.2)
					{
						SetPlayerPosEx(playerid, BasketballNets[i][bnsX], BasketballNets[i][bnsY], player_pos[2]);
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);

						GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
						GetXYInFrontOfPlayer(playerid, player_pos[0], player_pos[1],
							GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) / 2);

						Basketball[PlayerInfo[playerid][pBasketballID]][bhX] = player_pos[0];
						Basketball[PlayerInfo[playerid][pBasketballID]][bhY] = player_pos[1];
						Basketball[PlayerInfo[playerid][pBasketballID]][bhZ] = player_pos[2];
						Basketball[PlayerInfo[playerid][pBasketballID]][bTargetNet] = i;

						MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], 
							Basketball[PlayerInfo[playerid][pBasketballID]][bhX], 
							Basketball[PlayerInfo[playerid][pBasketballID]][bhY], 
							Basketball[PlayerInfo[playerid][pBasketballID]][bhZ] + GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) / 2, 9);
					
						Basketball[PlayerInfo[playerid][pBasketballID]][bfX] = BasketballNets[i][bnsX];
						Basketball[PlayerInfo[playerid][pBasketballID]][bfY] = BasketballNets[i][bnsY];
						Basketball[PlayerInfo[playerid][pBasketballID]][bfZ] = BasketballNets[i][bnsZ] + 0.5;

						SetTimerEx("ClearAnimationsTimer", 1200, 0, "i", playerid);

						Basketball[PlayerInfo[playerid][pBasketballID]][bResult] = 0;
					}

					switch(result)
					{
						case 0:
						{
							GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
							GetXYInFrontOfPlayer(playerid, player_pos[0], player_pos[1],
								GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) / 2);

							Basketball[PlayerInfo[playerid][pBasketballID]][bhX] = player_pos[0];
							Basketball[PlayerInfo[playerid][pBasketballID]][bhY] = player_pos[1];
							Basketball[PlayerInfo[playerid][pBasketballID]][bhZ] = player_pos[2];
							Basketball[PlayerInfo[playerid][pBasketballID]][bTargetNet] = i;

							MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], 
								Basketball[PlayerInfo[playerid][pBasketballID]][bhX], 
								Basketball[PlayerInfo[playerid][pBasketballID]][bhY], 
								Basketball[PlayerInfo[playerid][pBasketballID]][bhZ] + GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) / 1.25, 9);
						
							Basketball[PlayerInfo[playerid][pBasketballID]][bfX] = BasketballNets[i][bnsX];
							Basketball[PlayerInfo[playerid][pBasketballID]][bfY] = BasketballNets[i][bnsY];
							Basketball[PlayerInfo[playerid][pBasketballID]][bfZ] = BasketballNets[i][bnsZ] + 0.5;
						}
						case 1 .. 2:
						{
							GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
							GetXYInFrontOfPlayer(playerid, player_pos[0], player_pos[1],
								GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) / 2);

							Basketball[PlayerInfo[playerid][pBasketballID]][bhX] = player_pos[0];
							Basketball[PlayerInfo[playerid][pBasketballID]][bhY] = player_pos[1];
							Basketball[PlayerInfo[playerid][pBasketballID]][bhZ] = player_pos[2];

							GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
							GetXYInFrontOfPlayer(playerid, player_pos[0], player_pos[1],
								GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]));

							Basketball[PlayerInfo[playerid][pBasketballID]][bfX] = player_pos[0] + (random(10) / 10);
							Basketball[PlayerInfo[playerid][pBasketballID]][bfY] = player_pos[1] + (random(10) / 10);
							Basketball[PlayerInfo[playerid][pBasketballID]][bfZ] = player_pos[2];

							GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);

							MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], 
								Basketball[PlayerInfo[playerid][pBasketballID]][bhX], 
								Basketball[PlayerInfo[playerid][pBasketballID]][bhY], 
								Basketball[PlayerInfo[playerid][pBasketballID]][bhZ] + GetDistanceFromPointToPoint(player_pos[0], player_pos[1], player_pos[2], BasketballNets[i][bnsX], BasketballNets[i][bnsY], BasketballNets[i][bnsZ]) / 2, 9);
						}
					}

					Basketball[PlayerInfo[playerid][pBasketballID]][bState] = 3;
					Basketball[PlayerInfo[playerid][pBasketballID]][bBounce] = 1;

					PlayerInfo[playerid][pHasBasketball] = 0;
					PlayerInfo[playerid][pBasketballID] = 0;
					break;
				}
			}
		}

    	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    	{
    		CarLights(GetPlayerVehicleID(playerid));
    		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
    	}

    	if(GetPVarInt(playerid, "SpecID") != INVALID_MAXPL && GetPVarInt(playerid, "Admin") > 0)
		{
			new targetid = INVALID_MAXPL;

			for(new i = GetPVarInt(playerid, "SpecID") - 1; i >= -1; i--)
			{
				if(IsPlayerConnected(i))
				{
					TogglePlayerSpectatingEx(playerid, 1);

					SetPlayerInterior(playerid,GetPlayerInterior(i));
					SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(i));

					if(IsPlayerInAnyVehicle(i))
					{
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(i));
					}
					else
					{
						PlayerSpectatePlayer(playerid, i);
					}

					SetPVarInt(playerid, "SpecID", i);
					targetid = i;
					break;
				}

				if(i <= 0)
				{
					i = MAX_PLAYERS;
				}
			}

			new Float:health, Float:armour;
			GetPlayerHealth(targetid, health);
			GetPlayerArmourEx(targetid, armour);

			if(PlayerInfo[targetid][pPlayerWeapon] == 0)
			{
				format(string, sizeof(string), "[SPECTATE] %s [ID: %i] | Money: %s | Health: %.1f | Armour: %.1f", 
					PlayerInfo[targetid][pName], 
					targetid, 
					FormatMoney(GetPlayerMoneyEx(targetid)), 
					health,
					armour);
			}
			else
			{
				format(string, sizeof(string), "[SPECTATE] %s [ID: %i] | Money: %s | Health: %.1f | Armour: %.1f | Weapon: %s (%d) [%s]", 
					PlayerInfo[targetid][pName], 
					targetid, 
					FormatMoney(GetPlayerMoneyEx(targetid)), 
					health,
					armour,
					PrintIName(PlayerInfo[targetid][pPlayerWeapon]),
					PlayerInfo[targetid][pPlayerAmmo], 
					PlayerInfo[targetid][pPlayerSerial]);
			}

			SendClientMessage(playerid, COLOR_PURPLE, string);
		}
        if(GetPVarInt(playerid, "PlayerLogged") == 2 && GetPVarInt(playerid,"SpawnLocation") != 0) // SELECT SPAWNPOINT
	    {
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		    new listitem = GetPVarInt(playerid,"SSP"), key;
		    if(listitem >= 1) listitem--;
		    switch(listitem)
	        {
	            case 0: // Last Location
		        {
		        }
		        case 1: // Property
			    {
			        key = GetPVarInt(playerid,"HouseKey");
			        SetPVarFloat(playerid, "PosX", HouseInfo[key][hXi]);
			        SetPVarFloat(playerid, "PosY", HouseInfo[key][hYi]);
			        SetPVarFloat(playerid, "PosZ", HouseInfo[key][hZi]);
			        SetPVarInt(playerid, "World", HouseInfo[key][hVwIn]);
			        SetPVarInt(playerid, "Interior", HouseInfo[key][hIntIn]);
			        SetPVarInt(playerid, "HouseEnter", key);
			    }
			    case 2: // Business
			    {
			        key = GetPVarInt(playerid,"BizKey");

			        if(BizInfo[key][Closed] == 1) return SendClientMessage(playerid, COLOR_ERROR, "This business has been shut down by the Los Santos Government.");

			        SetPVarFloat(playerid, "PosX", BizInfo[key][Xi]);
			        SetPVarFloat(playerid, "PosY", BizInfo[key][Yi]);
			        SetPVarFloat(playerid, "PosZ", BizInfo[key][Zi]);
			        SetPVarInt(playerid, "World", BizInfo[key][VwIn]);
			        SetPVarInt(playerid, "Interior", BizInfo[key][IntIn]);
			        SetPVarInt(playerid, "BizEnter", key);
			    }
			    case 3:
			    {
			        switch(GetPVarInt(playerid,"Member"))
			        {
			            case 1: // LSPD
			            {
			                SetPVarFloat(playerid, "PosX", 1553.4929);
			                SetPVarFloat(playerid, "PosY", -1675.7034);
			                SetPVarFloat(playerid, "PosZ", 16.1953);
			                SetPVarInt(playerid, "World", 0);
			                SetPVarInt(playerid, "Interior", 0);
			            }
			            case 2: // LSFD
			            {
			                SetPVarFloat(playerid, "PosX", 1182.5016);
			                SetPVarFloat(playerid, "PosY", -1321.9572);
			                SetPVarFloat(playerid, "PosZ", 13.5788);
			                SetPVarInt(playerid, "World", 0);
                            SetPVarInt(playerid, "Interior", 0);
			            }
			            case 3: // RLS
			            {
			                SetPVarFloat(playerid, "PosX", 816.2530);
			                SetPVarFloat(playerid, "PosY", -1386.0800);
			                SetPVarFloat(playerid, "PosZ", 13.5965);
			                SetPVarInt(playerid, "World", 0);
                            SetPVarInt(playerid, "Interior", 0);
			            }
			            case 4: // SAN Network
			            {
			                SetPVarFloat(playerid, "PosX", 1788.7100);
			                SetPVarFloat(playerid, "PosY", -1298.6400);
			                SetPVarFloat(playerid, "PosZ", 13.3750);
			                SetPVarInt(playerid, "World", 0);
                            SetPVarInt(playerid, "Interior", 0);
			            }
			            case 8: // GOV
			            {
			                SetPVarFloat(playerid, "PosX", 1481.1187);
			                SetPVarFloat(playerid, "PosY", -1770.7849);
			                SetPVarFloat(playerid, "PosZ", 18.7958);
			                SetPVarInt(playerid, "World", 0);
			                SetPVarInt(playerid, "Interior", 0);
			            }
			        }
			    }
		    }
		    for(new i = 0; i < 6; i++) { TextDrawHideForPlayer(playerid, SpawnDraw[i]); }
		    SetPVarInt(playerid, "SpawnLocation", 0);
            SetTimerEx("OnLoginInit", 500, false, "ii", playerid, 1);
            return true;
		}
	}

	if(PRESSED(KEY_HANDBRAKE))
    {
    	if(GetPVarInt(playerid, "SpecID") != INVALID_MAXPL && GetPVarInt(playerid, "Admin") > 0)
		{
			new targetid = INVALID_MAXPL;

			for(new i = GetPVarInt(playerid, "SpecID") + 1; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					TogglePlayerSpectatingEx(playerid, 1);

					SetPlayerInterior(playerid,GetPlayerInterior(i));
					SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(i));

					if(IsPlayerInAnyVehicle(i))
					{
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(i));
					}
					else
					{
						PlayerSpectatePlayer(playerid, i);
					}

					SetPVarInt(playerid, "SpecID", i);
					targetid = i;
					break;
				}

				if(i >= MAX_PLAYERS)
				{
					i = -1;
				}
			}

			new Float:health, Float:armour;
			GetPlayerHealth(targetid, health);
			GetPlayerArmourEx(targetid, armour);

			if(PlayerInfo[targetid][pPlayerWeapon] == 0)
			{
				format(string, sizeof(string), "[SPECTATE] %s [ID: %i] | Money: %s | Health: %.1f | Armour: %.1f", 
					PlayerInfo[targetid][pName], 
					targetid, 
					FormatMoney(GetPlayerMoneyEx(targetid)), 
					health,
					armour);
			}
			else
			{
				format(string, sizeof(string), "[SPECTATE] %s [ID: %i] | Money: %s | Health: %.1f | Armour: %.1f | Weapon: %s (%d) [%s]", 
					PlayerInfo[targetid][pName], 
					targetid, 
					FormatMoney(GetPlayerMoneyEx(targetid)), 
					health,
					armour,
					PrintIName(PlayerInfo[targetid][pPlayerWeapon]),
					PlayerInfo[targetid][pPlayerAmmo], 
					PlayerInfo[targetid][pPlayerSerial]);
			}

			SendClientMessage(playerid, COLOR_PURPLE, string);
		}
        if(GetPVarInt(playerid, "PlayerLogged") == 2 && GetPVarInt(playerid,"SpawnLocation") != 0)
	    {
		    CallRemoteFunction("SelectSpawnpoint","i", playerid);
		    PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		    return true;
		}
        for(new p = 0; p < sizeof(PaintSprays); p++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 5.0, PaintSprays[p][0], PaintSprays[p][1], PaintSprays[p][2]))
	        {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
					if(AbleToUsePNS(playerid))
					{
					    new priceo = 0;
						if(GetPVarInt(playerid, "PaintUse") == 0) priceo=300;
						if(GetPVarInt(playerid, "MonthDon") > 0) priceo=0;
						if(GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSFD || GetPVarInt(playerid, "Member") == FACTION_LSG) priceo=0;
						if(GetPlayerMoneyEx(playerid) >= priceo)
						{
						    new idcar = GetPlayerVehicleID(playerid);

						    foreach(new i : Player)
                		    {
	                		    if(GetPlayerVehicleID(i) == idcar)
	                		    {
	                    		    SetPlayerVirtualWorld(i,playerid);
	                		    }
	            		    }

						    SetVehicleVirtualWorld(idcar, playerid);

	            		    TogglePlayerControllableEx(playerid, false);
	            		    SetVehiclePosEx(GetPlayerVehicleID(playerid),PaintSprays[p][4],PaintSprays[p][5],PaintSprays[p][6]);
	            		    SetPVarInt(playerid, "PaintID", p);
	            		    PlayerPlaySound(playerid,1134, 0.0, 0.0, 0.0);
                		    SetTimerEx("OnPaintSpray", 3000, false, "i", playerid);

                		    if(GetPVarInt(playerid, "MonthDon") == 0 && GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSFD) {
							SetPVarInt(playerid, "PaintUse", GetPVarInt(playerid, "PaintUse")+1); }
                		    if(priceo > 0) GivePlayerMoneyEx(playerid, -priceo);

                		    SetPlayerMoney(playerid, 0);

                		    format(string, sizeof(string),"~r~-%s", FormatMoney(priceo));
							GameTextForPlayer(playerid, string, 3000, 1);
					    }
						else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
					}
                    else SCM(playerid, COLOR_ERROR, "You are not government, subscriber or you have used up your PnS tries!");
                }
                else SCM(playerid, COLOR_ERROR, "You must be in a vehicle to use this!");
            }
        }
        for(new p = 0; p < sizeof(ModShop); p++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 5.0, ModShop[p][0], ModShop[p][1], ModShop[p][2]) &&
	        	GetPlayerState(playerid) == PLAYER_STATE_DRIVER && 
	        	GetPlayerVirtualWorld(playerid) == 0 &&
	        	GetPlayerInterior(playerid) == 0 &&
	        	GetPVarInt(playerid, "ModShopReduce") <= 0)
	        {
                new vehicleID = GetPlayerVehicleID(playerid);
				if(!isnull(VehicleInfo[vehicleID][vOwner]) && strcmp(VehicleInfo[vehicleID][vOwner], PlayerInfo[playerid][pUsername], false) == 0) {
					SetPVarInt(playerid, "VEHMODID", p), SetPVarInt(playerid, "VEHMODKEY", vehicleID);
                    SetPVarInt(playerid, "VEHSEC", 0), SetPVarInt(playerid, "VEHMOD", 0);
                    CallRemoteFunction("VehMod", "i", playerid);
				}
            }
	    }
	    /*
		foreach(new h : HouseIterator)
		{
			if(GetPVarInt(playerid, "OnRoute") != 0) return 1;
		    if(HouseInfo[h][hID] != 0)
			{
		        if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]))
		        {
		            if(HouseInfo[h][hLocked] == 1)
		            {
		                error(playerid, "This garage is locked.");
		                return true;
		            }
           
                    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
                    {
                    	new vehicleid = GetPlayerVehicleID(playerid);
                    	foreach(new i : Player)
                    	{
                    		if(GetPlayerVehicleID(i) == vehicleid)
                    		{
                    			SetPlayerVirtualWorld(i, HouseInfo[h][hVwIn]);
                    			SetPlayerInterior(i, 1);
                    		}
                    	}

                    	TogglePlayerControllableEx(playerid, false);
				        SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

                    	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), HouseInfo[h][hVwIn]);
                    	LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), 1);
                        SetVehiclePosEx(GetPlayerVehicleID(playerid), HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi] + 0.5);
                        SetVehicleZAngle(GetPlayerVehicleID(playerid), HouseInfo[h][hgAi]);

			            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", h), SetPVarInt(playerid, "GarageEnter", h);

			            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 1, h));

		                if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
                        else
                        {
                            PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
                        }

                        HouseLights(h);

                        if(HouseInfo[h][hBasic] == 0) SCM(playerid, COLOR_ERROR, "The house you have entered does not have electricity, therefore your screen is dark.");
                        if(HouseInfo[h][hBasic] == 1 && HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_ERROR, "The house lights are currently off, (/lights) to toggle.");
                        if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
			   		    {
                            HouseAlarm(h, 0);
                        }

                        if(GetPVarInt(playerid, "DrugTime") == 0)
						{
		                	//SetPlayerTime(playerid, 12, 0);
		                	//SetPlayerWeather(playerid, 0);
		            	}

						SetTimerEx("EnterGarage", 1000, false, "ii", playerid, h);

						Streamer_Update(playerid);
						return 1;
                    }
			    }
			    else if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
		        {
		        	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
                    {
                    	if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] == VEHICLE_PERSONAL)
                    	{
				        	new count = 0, vehicleID = -1;
							for(new i2 = 0; i2 < PlayerNameSpawnedVehicles(VehicleInfo[GetPlayerVehicleID(playerid)][vOwner]); i2++)
							{
								vehicleID = GetNameSpawnedVehicle(VehicleInfo[GetPlayerVehicleID(playerid)][vOwner], i2);

								if(GetVehicleVirtualWorld(vehicleID) == 0 && VehicleInfo[vehicleID][vInt] == 0)
								{
									count++;
								}
							}

							if(count >= MAX_SPAWNED_VEHICLES)
							{
								return SendClientMessage(playerid, COLOR_ERROR, "This vehicle owner already has two vehicles outside the garage.");
							}
						}

						new vehicleid = GetPlayerVehicleID(playerid);

                    	foreach(new i : Player)
                    	{
                    		if(GetPlayerVehicleID(i) == vehicleid)
                    		{
                    			SetPlayerVirtualWorld(i, 0);
                    			SetPlayerInterior(i, 0);
                    		}
                    	}

                    	TogglePlayerControllableEx(playerid, false);
				        SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

			        	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	                	LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), 0);
	                    SetVehiclePosEx(GetPlayerVehicleID(playerid), HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo] + 0.5);
	                    SetVehicleZAngle(GetPlayerVehicleID(playerid), HouseInfo[h][hgAo]);

			            SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizEnter", 0), SetPVarInt(playerid, "HouseEnter", 0), SetPVarInt(playerid, "GarageEnter", 0);

			            PlayerTextDrawSetString(playerid, LocationDraw[playerid], PrintArea(playerid, 0, 0));
			                
		                StopAudioStreamForPlayer(playerid);
		                LoadRadios(playerid);

		                if(GetPVarInt(playerid, "DrugTime") == 0)
						{
					        SetPlayerTime(playerid, GMHour, GMMin);
					        SetPlayerWeather(playerid, GMWeather);
					    }

					    Streamer_Update(playerid);
					    return 1;
					}
		        }
		    }
		}
		*/

        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1827.2499,-1538.7515,13.3828))
        {
		    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		    {
			    new carid = GetPlayerVehicleID(playerid);
				SetVehiclePos(carid, 1818.5525, -1537.1500, 13.1206);
				SetVehicleZAngle(carid, 84.1236);
				PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
            }
            else
            {
		    	scm(playerid, COLOR_ERROR, "You do not have permission for this function.");
			}
        }

        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1817.1091,-1536.7454,13.3274))
        {
		    if(GetPVarInt(playerid, "Member") == FACTION_LSPD)
		    {
		        new carid = GetPlayerVehicleID(playerid);
		        SetVehiclePos(carid, 1828.2297, -1538.6709, 13.2019);
		        SetVehicleZAngle(carid, 262.4589);
		        PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
            }
            else
            {
		    	scm(playerid, COLOR_ERROR, "You do not have permission for this function.");
			}
        }
	}
	if(newkeys & KEY_ACTION || oldkeys & KEY_ACTION)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
			{
			    ClearAnimationsEx(playerid), GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~Jump key is restricted for bicycles", 3000, 5);
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPosEx(playerid, x, y, z);
			}
		}
	}
	if(PRESSED(KEY_SPRINT))
	{
	    if(GetPVarInt(playerid, "Admin") == 0)
		{
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		    {
		        new animlib[30],animname[30];
     	        GetAnimationName(GetPlayerAnimationIndex(playerid) , animlib, sizeof(animlib), animname, sizeof(animname));
 	            if(strcmp(animlib, "PED", true) == 0 && strcmp(animname, "RUN_PLAYER", true) == 0 && GetPlayerSkin(playerid) != 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
 	            {
 	                if(GetPVarInt(playerid, "Control") == 0 && GetPVarInt(playerid, "CJRun") == 0)
 	                {
					    SetPVarInt(playerid,"CJRun",1);
					    format(string, sizeof(string), "AdmWarn: %s[%d] is supposedly CJ-Running.", PlayerInfo[playerid][pName], playerid);
                        SendAdminMessage(COLOR_YELLOW,string);
                        return true;
	                }
 	            }

 	            if(PlayerInfo[playerid][pHasBasketball] == 1)
 	            {
 	            	ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
 	            }
		    }
	    }
	}
	return 1;
}
//============================================//
public VendingFinish(playerid)
{
    SetPVarInt(playerid, "Mute", 0);
    SetPVarInt(playerid, "Hunger", 0);
    ApplyAnimationEx(playerid, "VENDING", "VEND_Drink2_P", 3.0, 0, 0, 0, 0, 0);
    SetPlayerSpecialAction(playerid, 0); // Clear sprunk can.
    return DeletePVar(playerid,"VendingUse");
}
//============================================//
public PayDay(playerid)
{
	if(GetPVarInt(playerid, "BotSpawned") == 1) return 1;
    new string[128], account, total = 300, Tax = 0, interest,Float:interestf;
	if(IsPlayerConnected(playerid))
	{
		if(GetPVarInt(playerid, "PlayerLogged") == 1)
		{
		    if(GetPVarInt(playerid, "PayDay") >= 60)
		    {
		        if(GetPVarInt(playerid, "Jailed") == 1 && GetPVarInt(playerid, "JailTime") >= 10) { // AJAIL STOP
				    scm(playerid, COLOR_LIGHTBLUE, "You have missed a payday due to being in admin jail!");
				    SetPVarInt(playerid, "PayDay", 0);
				    return 1;
				}
				if(GetPVarInt(playerid, "Admin") < 4) {
				    if(PlayerInfo[playerid][pIdleTime] > 30) { // IDLE STOP
				        scm(playerid, COLOR_LIGHTBLUE, "You have missed a payday due to being idle for over thirty minutes!");
				        SetPVarInt(playerid, "PayDay", 0);
				        return 1;
				    }
				    if(GetPVarInt(playerid, "AFKTime") > 3600) {  // AFK STOP
				        scm(playerid, COLOR_LIGHTBLUE, "You have missed a payday due to being afk for over sixty minutes!");
				        SetPVarInt(playerid, "PayDay", 0);
					    return 1;
				    }
				}

		        //PlayAudioStreamForPlayerEx(playerid, "http://k007.kiwi6.com/hotlink/jsprrwci5z/tone");

		        SetTimerEx("ResetPlayerRadio", 5000, false, "i", playerid);

		        account = GetPVarInt(playerid, "Bank");
		        if(account >= 0 && account <= 30000) Tax = TaxValue;
		        if(account >= 30000 && account <= 60000) Tax = TaxValue*1;
		        if(account >= 60000 && account <= 80000) Tax = TaxValue*2;
		        if(account >= 80000 && account <= 100000) Tax = TaxValue*3;
		        if(account >= 100000 && account <= 300000) Tax = TaxValue*5;
		        if(account >= 300000 && account <= 600000) Tax = TaxValue*7;
		        if(account >= 600000 && account <= 900000) Tax = TaxValue*9;
		        if(account >= 900000) Tax = TaxValue*20;
		        new cnt;
				
				if(GetPVarInt(playerid, "ConnectTime") < 700)
				{
					cnt = GetPVarInt(playerid, "ConnectTime");
				}
				else
				{
					cnt = 700;
				}
				
		        total += cnt;

		        total += GetPVarInt(playerid, "CheckEarn");
		        total += GetPVarInt(playerid, "PayCheck");

		        SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
		        SendClientMessage(playerid, COLOR_WHITE, "                           Bank Statement");
		        format(string, sizeof(string), "Paycheck: %s", FormatMoney(total));
		        SendClientMessage(playerid,COLOR_GREEN,string);
				total -= Tax;
				interestf = (GetPVarInt(playerid, "Bank") / 100) * 0.3;
				interest = floatround(interestf, floatround_floor);
				if(interest > 700) interest = 700;
				if(interest < 0) interest = 0;
				if(GetPVarInt(playerid, "MonthDon") > 0)
				{
					total = total + interest;
				}
				//SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") + interest);
		        format(string, sizeof(string), "Tax: -%s", FormatMoney(Tax));
		        SendClientMessage(playerid,COLOR_GREEN,string);
		        if(GetPVarInt(playerid, "MonthDon") > 0)
		        {
			        format(string, sizeof(string), "Interest: +%s", FormatMoney(interest));
			        SendClientMessage(playerid,COLOR_GREEN,string);
				}
		        //==========//
				new bonusex = 0;

		        if(GetPVarInt(playerid,"Member") == FACTION_LSPD || GetPVarInt(playerid,"Member") == FACTION_LSFD || GetPVarInt(playerid,"Member") == FACTION_RLS || GetPVarInt(playerid,"Member") == FACTION_FOX_ENTERPRISE || GetPVarInt(playerid,"Member") == FACTION_LSG)
		        {
	        	    bonusex += FactionRankInfo[GetPVarInt(playerid, "Member")][GetPVarInt(playerid,"Rank")][fRankBonus];

			        if(bonusex > 0)
			        {
			        	format(string, sizeof(string), "Bonus: +$%d", bonusex);
		            	SendClientMessage(playerid, COLOR_GREEN, string);
		            	total += bonusex;
		        	}
				}
				//==========//

		        if(total < 0)
		        {
		        	total = 0;
		        }

		        format(string, sizeof(string), "Total Amount: %s", FormatMoney(total));
		        SendClientMessage(playerid, COLOR_GREEN, string);

		        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") + total);

		        SetPVarInt(playerid, "CheckEarn", 0);
		        SetPVarInt(playerid, "PayCheck", 0);
		        if(DoubleTLS == 0) {
		        SetPVarInt(playerid, "ConnectTime", 1+GetPVarInt(playerid, "ConnectTime"));
				} else {
				SetPVarInt(playerid, "ConnectTime", 2+GetPVarInt(playerid, "ConnectTime")); }
		        SetPlayerScore(playerid,GetPVarInt(playerid, "ConnectTime"));
				SetPVarInt(playerid, "PayDay", 0);
		        //==========//
		        if(GetPVarInt(playerid, "RentKey") >= 1 && VehicleInfo[GetPVarInt(playerid, "RentKey")][vType] == VEHICLE_RENTAL)
		        {
		            if(GetPVarInt(playerid, "Bank") >= 50)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, "Rental Fee: -$50");
		                SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-50);
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_WHITE, "Rental fee could not be paid!");
		                if(GetPVarInt(playerid, "RentKey") >= 1)
		                {
		                    DespawnVehicle(GetPVarInt(playerid, "RentKey"));
		                }
		                DeletePVar(playerid, "RentKey");
		                GameTextForPlayer(playerid, "~w~You no longer rent a vehicle!", 5000, 3);
		            }
		        }
		        new hid = GetPVarInt(playerid, "HouseKey");
		        if(HouseInfo[hid][hOwned] == 1)
		        {
		            if(strcmp(HouseInfo[hid][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
					{
					    if(HouseInfo[hid][hBasic] == 1)
					    {
							new fee;
							fee = 25;
					        if(GetPVarInt(playerid, "Bank") >= fee)
		                    {
		                        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - fee);
					            format(string, sizeof(string), "Basic Upgrade (HOUSE): -%s", FormatMoney(fee));
		        		        SendClientMessage(playerid, COLOR_GREEN, string);
		        		    }
		        		    else
		        		    {
		        		        HouseInfo[hid][hBasic]=0;
		        		        HouseLights(hid);
		        		        scm(playerid, COLOR_ERROR, "You couldn't afford your houses basic essential bill.");
		        		    }
					    }
					}
		            else
		            {
		                if(HouseInfo[hid][hRentFee] > 0)
		                {
		                    if(GetPVarInt(playerid, "Bank") >= HouseInfo[hid][hRentFee])
		                    {
		                        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - HouseInfo[hid][hRentFee]);
		                        format(string, sizeof(string), "Rent: -%s", FormatMoney(HouseInfo[hid][hRentFee]));
		        		        SendClientMessage(playerid, COLOR_GREEN, string);
		        		        PayHouseRent(hid);
		                    }
		                    else
		                    {
		                        SetPVarInt(playerid, "PaidRent", GetPVarInt(playerid, "PaidRent") + 1);
		                        if(GetPVarInt(playerid, "PaidRent") == 2)
		                        {
		                            SCM(playerid, COLOR_ERROR, "You have been evicted from your house since you were unable to pay the rent.");
							        SetPVarInt(playerid, "PaidRent",0);
							        SetPVarInt(playerid, "HouseKey", 0);
		                        }
		                    }
		                }
		            }
		        }
		        
		        new bid = GetPVarInt(playerid, "BizKey");
		        if(BizInfo[bid][Owned] == 1)
		        {
		            if(strcmp(BizInfo[bid][Owner], PlayerInfo[playerid][pUsername], true) == 0)
					{
					    if(BizInfo[bid][Basic] == 1)
					    {
							new fee;
							fee = 25;
							if(strcmp(BizInfo[bid][bRadio], "None", true) == 0) { fee = 25; }
					        if(GetPVarInt(playerid, "Bank") >= fee)
		                    {
		                        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - fee);
					            format(string, sizeof(string), "Basic Upgrade (BUSINESS): -%s", FormatMoney(fee));
		        		        SendClientMessage(playerid, COLOR_GREEN, string);
		        		    }
		        		    else
		        		    {
		        		        BizInfo[bid][Basic]=0;
		        		        scm(playerid, COLOR_ERROR, "You couldn't afford your businesses basic essential bill.");
		        		        strmid(BizInfo[bid][bRadio], "None", 0, strlen("None"), 255);
		            	        foreach(new i : Player)
		            	        {
		                	        if(GetPVarInt(i, "BizEnter") == bid)
		                	        {
		                    	        StopAudioStreamForPlayerEx(i);
		                	        }
		            	        }
		        		    }
					    }
					}
		        }
		        
				new query[110];
				mysql_format(handlesql, query, sizeof(query), "SELECT `ID`, `Insurance`, `InsuranceC` FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
				mysql_pquery(handlesql, query, "OnPlayerPayDayInsurancePay", "i", playerid);
		        //==========//
		        if(GetPVarInt(playerid, "LicTime") > 0)
		        {
		            SetPVarInt(playerid, "LicTime", GetPVarInt(playerid, "LicTime")-1);
		            if(GetPVarInt(playerid, "LicTime") == 0)
		            {
		                SetPVarInt(playerid, "LicGuns", 0);
		                SendClientMessage(playerid,COLOR_WHITE,"You are now able to purchase weapons again!");
		            }
		        }
		        //==========//
		        if(GetPVarInt(playerid, "PaintUse") > 0)
		        {
		            SetPVarInt(playerid, "PaintUse", GetPVarInt(playerid, "PaintUse")-1);
		            if(GetPVarInt(playerid, "PaintUse") == 0)
		            {
		                SendClientMessage(playerid,COLOR_WHITE,"You are now able to use the Pay & Spray again!");
		            }
		        }
		        if(GetPVarInt(playerid, "Forbid") > 0)
		        {
		            SetPVarInt(playerid, "Forbid", GetPVarInt(playerid, "Forbid")-1);
		            if(GetPVarInt(playerid, "Forbid") == 0)
		            {
		                SendClientMessage(playerid,COLOR_WHITE,"Your time is up from your forbidden of weapons.");
		            }
		        }
		        //==========//
		        if(GetPVarInt(playerid, "CheckEarn") <= 0) SetPVarInt(playerid, "CheckEarn", 0);
		        
		        if(GetPVarInt(playerid, "ConnectTime") >= 8)
		        {
		        	GiveAchievement(playerid, 0);
		        }
		        
		        if(GetPVarInt(playerid, "ConnectTime") >= 500)
		        {
		        	GiveAchievement(playerid, 1);
		        }
		        
		        if(GetPVarInt(playerid, "ConnectTime") >= 2500)
		        {
		        	GiveAchievement(playerid, 2);
		    	}
		        
		        OnPlayerDataSave(playerid);
		        SendClientMessage(playerid, COLOR_WHITE, "________________________________________________________");
		    }
		}
	}
    return 1;
}
//============================================//
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(GetPVarInt(playerid, "Admin") >= 1 && GetPlayerInterior(playerid) == 0)
    {
        SendClientMessage(playerid,COLOR_ERROR,"You have been teleported.");
        SetPlayerVirtualWorld(playerid, 0);
        if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid), fX, fY, fZ);
		}
		else
		{
            SetPlayerPosEx(playerid, fX, fY, fZ);
        }
    }
    return 1;
}
//============================================//
public ShowBlood(playerid)
{
	/*
	if(GetPVarInt(playerid,"PlayerLogged") == 1 && GetPVarInt(playerid,"PlayerBlood") == 0)
	{
        TextDrawHideForPlayer(playerid,BloodDraw[0]),TextDrawHideForPlayer(playerid,BloodDraw[1]),TextDrawHideForPlayer(playerid,BloodDraw[2]);
        TextDrawShowForPlayer(playerid,BloodDraw[0]),TextDrawShowForPlayer(playerid,BloodDraw[1]),TextDrawShowForPlayer(playerid,BloodDraw[2]);
        SetPVarInt(playerid,"PlayerBlood", 1);
    }
    */
    return true;
}
//============================================//
public OnPlayerStreamIn(playerid, forplayerid)
{
    if(GetPVarInt(forplayerid, "Admin") > 0)
    {
    	ShowPlayerNameTagForPlayer(forplayerid,playerid,1);
    }
    else
    {
	    switch(GetPVarInt(playerid, "MaskUse"))
	    {
	        case 0: ShowPlayerNameTagForPlayer(forplayerid,playerid,1);
	        case 1: ShowPlayerNameTagForPlayer(forplayerid,playerid,0);
	    }
	}
	return 1;
}
//============================================//
public OnPlayerSpawn(playerid)
{
    if(IsPlayerNPC(playerid))
	{
        return 1;
	}

	SetPlayerMoney(playerid, GetPlayerMoneyEx(playerid));

	if(PlayerInfo[playerid][pArcade] != 0)
	{
		ResetPlayerWeaponsEx(playerid);

		PlayerInfo[playerid][pAmmoType] = 0;
		PlayerInfo[playerid][pPlayerWeapon] = 0;
		PlayerInfo[playerid][pPlayerAmmo] = 0;
		PlayerInfo[playerid][pPlayerSerial] = 0;

		PlayerInfo[playerid][pArcade] = 0;
		SetPlayerPosEx(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "Interior"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "World"));
		SetPlayerArmourEx(playerid, GetPVarInt(playerid, "Armour"));
		SetPlayerSkin(playerid, GetPVarInt(playerid, "Model"));

		new count = 0, winner = -1;
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pArcade] != 0)
			{
				count++;
				winner = i;
			}
		}

		if(count == 1)
		{
			new string[64];
			format(string, sizeof(string), "~w~Winner: ~y~%s", PlayerInfo[winner][pUsername]);
			GameTextForAll(string, 10000, 4);

			ResetPlayerWeaponsEx(winner);
		
			PlayerInfo[winner][pAmmoType] = 0;
			PlayerInfo[winner][pPlayerWeapon] = 0;
			PlayerInfo[winner][pPlayerAmmo] = 0;
			PlayerInfo[winner][pPlayerSerial] = 0;

			PlayerInfo[winner][pArcade] = 0;
			SetPlayerPosEx(winner, GetPVarFloat(winner, "PosX"), GetPVarFloat(winner, "PosY"), GetPVarFloat(winner, "PosZ"));
			SetPlayerInterior(winner, GetPVarInt(winner, "Interior"));
			SetPlayerVirtualWorld(winner, GetPVarInt(winner, "World"));

			for(new i = 0; i < MAX_ARCADES; i++)
			{
				Arcade[i][aStarted] = 0;
			}
		}
		return 1;
	}

	Streamer_Update(playerid);

	new string[128];
	if(GetPVarInt(playerid, "PlayerLogged") == 1)
	{
		CallRemoteFunction("LoadHolsters","i",playerid);
        ReloadPlayerToys(playerid);

        SetPlayerSkinEx(playerid, GetPVarInt(playerid, "Model"));

	    SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL,200);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_SAWNOFF_SHOTGUN,200);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_MICRO_UZI,200);
	    
	    if(GetPVarInt(playerid,"Wound_A") == 0)
	    {
    	    SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL_SILENCED, 9999);
    	    SetPlayerSkillLevel(playerid,WEAPONSKILL_DESERT_EAGLE, 9999);
    	    SetPlayerSkillLevel(playerid,WEAPONSKILL_SHOTGUN, 9999);
    	    SetPlayerSkillLevel(playerid,WEAPONSKILL_MP5, 9999);
    	    SetPlayerSkillLevel(playerid,WEAPONSKILL_AK47, 9999);
    	    SetPlayerSkillLevel(playerid,WEAPONSKILL_M4, 9999);
	    }
        
        switch(GetPVarInt(playerid, "FightStyle"))
        {
            case 0: SetPlayerFightingStyle(playerid,FIGHT_STYLE_NORMAL);
            case 1: SetPlayerFightingStyle(playerid,FIGHT_STYLE_BOXING);
            case 2: SetPlayerFightingStyle(playerid,FIGHT_STYLE_KUNGFU);
            case 3: SetPlayerFightingStyle(playerid,FIGHT_STYLE_KNEEHEAD);
            case 4: SetPlayerFightingStyle(playerid,FIGHT_STYLE_GRABKICK);
            case 5: SetPlayerFightingStyle(playerid,FIGHT_STYLE_ELBOW);
        }
			
		if(GetPVarInt(playerid, "Jailed") == 1)
		{
		    SetPlayerPosEx(playerid, -1406.7714,1245.1904,1029.8984);
			SetPlayerFacingAngle(playerid, 177.0008);
			SetPlayerInterior(playerid, 16);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			format(string, sizeof(string),"[JAILED] You are in jail for %d seconds.", GetPVarInt(playerid, "JailTime"));
			SCM(playerid, 0xE65A5AAA, string);
			SetPVarInt(playerid, "Mute", 1);
			SetPVarInt(playerid, "Dead", 0);
			return true;
		}
		if(GetPVarInt(playerid, "Jailed") == 2)
		{
		    TogglePlayerControllableEx(playerid, false);
			SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

	        new ran = random(23) + 1;
			switch(ran)
			{
				case 1: SetPlayerPosEx(playerid, 1827.7781,-1731.1105,1002.5859);
				case 2: SetPlayerPosEx(playerid, 1830.8279,-1731.3368,1002.5859);
				case 3: SetPlayerPosEx(playerid, 1834.0068,-1731.9955,1002.5859);
				case 4: SetPlayerPosEx(playerid, 1837.2377,-1731.4010,1002.5859);
				case 5: SetPlayerPosEx(playerid, 1840.6808,-1732.0594,1002.5859);
				case 6: SetPlayerPosEx(playerid, 1843.5640,-1732.1567,1002.5859);
				case 7: SetPlayerPosEx(playerid, 1843.6758,-1711.5168,1002.5859);
				case 8: SetPlayerPosEx(playerid, 1840.5532,-1712.0255,1002.5859);
				case 9: SetPlayerPosEx(playerid, 1837.4333,-1712.2550,1002.5859);
				case 10: SetPlayerPosEx(playerid, 1834.1997,-1712.3615,1002.5859);
				case 11: SetPlayerPosEx(playerid, 1830.8928,-1712.3453,1002.5859);
				case 12: SetPlayerPosEx(playerid, 1827.8674,-1711.8103,1002.5859);
				case 13: SetPlayerPosEx(playerid, 1830.7412,-1731.9961,1006.1860);
				case 14: SetPlayerPosEx(playerid, 1827.4778,-1731.5767,1006.1860);
				case 15: SetPlayerPosEx(playerid, 1834.1556,-1731.6372,1006.1860);
				case 16: SetPlayerPosEx(playerid, 1837.2511,-1731.3159,1006.1860);
				case 17: SetPlayerPosEx(playerid, 1840.3973,-1731.7581,1006.1860);
				case 18: SetPlayerPosEx(playerid, 1843.6770,-1731.4130,1006.1860);
				case 19: SetPlayerPosEx(playerid, 1843.7390,-1711.2112,1006.1860);
				case 20: SetPlayerPosEx(playerid, 1840.5001,-1711.6290,1006.1860);
				case 21: SetPlayerPosEx(playerid, 1837.4194,-1711.3104,1006.1860);
				case 22: SetPlayerPosEx(playerid, 1834.2599,-1711.4907,1006.1860);
				case 23: SetPlayerPosEx(playerid, 1830.8385,-1711.5261,1006.1860);
				case 24: SetPlayerPosEx(playerid, 1827.8015,-1711.8590,1006.1860);
			}

			format(string, sizeof(string),"[JAILED] You are in prison for %i minute(s) and %i second(s).", floatround(GetPVarInt(playerid, "JailTime") / 60, floatround_floor), GetPVarInt(playerid, "JailTime") % 60);
			SCM(playerid, 0xE65A5AAA, string);
			SetPVarInt(playerid, "Dead", 0);

			SetPlayerVirtualWorld(playerid, 1);
			SetPlayerInterior(playerid, 1);
			return true;
		}
		if(GetPVarInt(playerid, "Jailed") == 3)
		{
		    TogglePlayerControllableEx(playerid, false);
			SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);

			new ran = random(23) + 1;
			switch(ran)
			{
				case 1: SetPlayerPosEx(playerid, 1827.7781,-1731.1105,1002.5859);
				case 2: SetPlayerPosEx(playerid, 1830.8279,-1731.3368,1002.5859);
				case 3: SetPlayerPosEx(playerid, 1834.0068,-1731.9955,1002.5859);
				case 4: SetPlayerPosEx(playerid, 1837.2377,-1731.4010,1002.5859);
				case 5: SetPlayerPosEx(playerid, 1840.6808,-1732.0594,1002.5859);
				case 6: SetPlayerPosEx(playerid, 1843.5640,-1732.1567,1002.5859);
				case 7: SetPlayerPosEx(playerid, 1843.6758,-1711.5168,1002.5859);
				case 8: SetPlayerPosEx(playerid, 1840.5532,-1712.0255,1002.5859);
				case 9: SetPlayerPosEx(playerid, 1837.4333,-1712.2550,1002.5859);
				case 10: SetPlayerPosEx(playerid, 1834.1997,-1712.3615,1002.5859);
				case 11: SetPlayerPosEx(playerid, 1830.8928,-1712.3453,1002.5859);
				case 12: SetPlayerPosEx(playerid, 1827.8674,-1711.8103,1002.5859);
				case 13: SetPlayerPosEx(playerid, 1830.7412,-1731.9961,1006.1860);
				case 14: SetPlayerPosEx(playerid, 1827.4778,-1731.5767,1006.1860);
				case 15: SetPlayerPosEx(playerid, 1834.1556,-1731.6372,1006.1860);
				case 16: SetPlayerPosEx(playerid, 1837.2511,-1731.3159,1006.1860);
				case 17: SetPlayerPosEx(playerid, 1840.3973,-1731.7581,1006.1860);
				case 18: SetPlayerPosEx(playerid, 1843.6770,-1731.4130,1006.1860);
				case 19: SetPlayerPosEx(playerid, 1843.7390,-1711.2112,1006.1860);
				case 20: SetPlayerPosEx(playerid, 1840.5001,-1711.6290,1006.1860);
				case 21: SetPlayerPosEx(playerid, 1837.4194,-1711.3104,1006.1860);
				case 22: SetPlayerPosEx(playerid, 1834.2599,-1711.4907,1006.1860);
				case 23: SetPlayerPosEx(playerid, 1830.8385,-1711.5261,1006.1860);
				case 24: SetPlayerPosEx(playerid, 1827.8015,-1711.8590,1006.1860);
			}

			format(string, sizeof(string),"[JAILED] You are in prison until %s.", PlayerInfo[playerid][pJailedUntil]);
			SCM(playerid, 0xE65A5AAA, string);
			SetPVarInt(playerid, "Dead", 0);

			SetPlayerVirtualWorld(playerid, 1);
			SetPlayerInterior(playerid, 1);
			return 1;
		}
        if(GetPVarInt(playerid, "Dead") == 1 || GetPVarInt(playerid, "Dead") == 2)
		{
		    ResetPlayerWeapons(playerid);
		    TogglePlayerControllableEx(playerid, false);
		    SetPVarInt(playerid, "Dead", 2);
		    SetPlayerPosEx(playerid,GetPVarFloat(playerid, "PosX"),GetPVarFloat(playerid, "PosY"),GetPVarFloat(playerid, "PosZ"));
			SetPlayerFacingAngle(playerid,GetPVarFloat(playerid, "Angle"));
			SetPlayerInterior(playerid,GetPVarInt(playerid, "Interior"));
			SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "World"));
			SetCameraBehindPlayer(playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Type (/accept death) to continue.");
            SetPlayerHealthEx(playerid,1.0);
            GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo]);
            new rand = random(5);
			switch(rand)
			{
			    case 0: ApplyAnimationEx(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		        case 1: ApplyAnimationEx(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		        case 2: ApplyAnimationEx(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		        case 3: ApplyAnimationEx(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
                case 4: ApplyAnimationEx(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
			    default: ApplyAnimationEx(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
			}
			if(GetPVarInt(playerid, "Admin") != 10) SetPVarInt(playerid, "DeathTime", GetCount()+60000);
            return 1;
		}
		if(GetPVarInt(playerid, "Dead") == 3)
		{
		    ResetPlayerWeaponsEx(playerid);
            SetPVarInt(playerid, "Mute", 1);
            TogglePlayerControllableEx(playerid, false);
            SetPlayerHealthEx(playerid,1.0);
            SetPlayerInterior(playerid,0);
            SetPlayerPosEx(playerid, 269.4417,1861.8927,8.7578);
            SetPlayerCameraPos(playerid, 275.2712,1859.6465,9.8133);
		    SetPlayerCameraLookAt(playerid, 275.2712,1859.6465,16.6257, 0);
            if(playerid == 0) SetPlayerVirtualWorld(playerid,INVALID_MAXPL);
            else SetPlayerVirtualWorld(playerid,playerid);
            return 1;
		}

		if(GetPVarInt(playerid, "Dead") == 5)
		{
			ResetPlayerWeapons(playerid);
		    TogglePlayerControllableEx(playerid, false);
		    SetPlayerPosEx(playerid,GetPVarFloat(playerid, "PosX"),GetPVarFloat(playerid, "PosY"),GetPVarFloat(playerid, "PosZ"));
			SetPlayerFacingAngle(playerid,GetPVarFloat(playerid, "Angle"));
			SetPlayerInterior(playerid,GetPVarInt(playerid, "Interior"));
			SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "World"));
			SetCameraBehindPlayer(playerid);
            SetPlayerHealthEx(playerid,99.0);
            GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo]);

		    new rand = random(5);
		    switch(rand)
		    {
		        case 0: ApplyAnimationEx(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		        case 1: ApplyAnimationEx(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		        case 2: ApplyAnimationEx(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		        case 3: ApplyAnimationEx(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
		        case 4: ApplyAnimationEx(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
		        default: ApplyAnimationEx(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
		    }

		    SetPVarInt(playerid, "Dead", 5);
		    SetPVarInt(playerid, "CrackTime", GetCount() + 120000);
		}

		if(GetPVarInt(playerid, "Tazed") == 1)
		{
			TogglePlayerControllableEx(playerid,false);
    	    SetPVarInt(playerid, "Cuffed", 1);
    	    SetPVarInt(playerid, "CuffedTime", 60);
    	    SetPVarInt(playerid, "Tazed", 0);
    	    ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
    	    SetPlayerHealthEx(playerid, 5.0);
		}

		if(PlayerInfo[playerid][pPlayerWeapon] > 0 && PlayerInfo[playerid][pPlayerAmmo] > 0)
		{
		    SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pPlayerWeapon]);
		}
	}
	return 1;
}
//============================================//
public OnPlayerDeath(playerid, killerid, reason)
{
	if(PlayerInfo[playerid][pArcade] != 0)
	{
		new string[128];
		foreach(new i : Player)
		{
			if(PlayerInfo[i][pArcade] != 0)
			{
				format(string, sizeof(string), "%s has been eliminated!", PlayerInfo[playerid][pUsername]);
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
			}
		}
		return 1;
	}

	if(PlayerInfo[playerid][pHasBasketball] == 1)
	{		
		new Float:player_pos[3];
		GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
		GetXYInFrontOfPlayer(playerid, player_pos[0], player_pos[1], 1.0);

		MoveObject(Basketball[PlayerInfo[playerid][pBasketballID]][bID], player_pos[0], player_pos[1], player_pos[2], 4);

		Basketball[PlayerInfo[playerid][pBasketballID]][bBounce] = 1;
		Basketball[PlayerInfo[playerid][pBasketballID]][bState] = 2;
		Basketball[PlayerInfo[playerid][pBasketballID]][bBaller] = INVALID_MAXPL;
		PlayerInfo[playerid][pHasBasketball] = 0;
		PlayerInfo[playerid][pBasketballID] = 0;
	}

	new string[128], Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    SetPVarInt(playerid, "Drag", INVALID_MAXPL);
    RemovePlayerTag(playerid);
    if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL)
    {
        if(IsPlayerConnected(GetPVarInt(playerid, "Mobile")) && GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid)
        {
            CallRemoteFunction("LoadRadios","i", GetPVarInt(playerid, "Mobile"));
		    SendClientMessage(GetPVarInt(playerid, "Mobile"),COLOR_ERROR,"The phone line went dead...");
		    if(GetPlayerSpecialAction(GetPVarInt(playerid, "Mobile")) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(GetPVarInt(playerid, "Mobile"), SPECIAL_ACTION_STOPUSECELLPHONE);
            SetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile", INVALID_MAXPL);
		}
        SetPVarInt(playerid, "Mobile", INVALID_MAXPL);
    }
    if(killerid != INVALID_MAXPL)
	{
	    if(IsPlayerConnected(killerid))
		{
			if(GetPVarInt(playerid, "Dead") != 5)
			{
			    format(string, sizeof(string), "KILL: %s has killed %s (Weapon: %s [%i]).", PlayerInfo[killerid][pName], PlayerInfo[playerid][pName], DeathNames[reason], PlayerInfo[killerid][pPlayerSerial]);
		    	SendAdminMessage(0xAA3333AA, string);
		    	KillLog(string);
		    	SetPVarInt(killerid, "Kills", GetPVarInt(killerid, "Kills")+1);
		    	if(GetPVarInt(killerid, "Member") != FACTION_LSPD)
		    	{
				    if(reason == 22 || (reason >= 24 && reason <= 34))
					{
					    if(PoliceWarnArea(playerid))
						{
							format(string, sizeof(string), "HQ: All Units - HQ: Shots fired | Location: %s.", PrintPlayerArea(playerid));
							SendFactionMessage(1, COLOR_BLUE, string);
							SendFactionMessage(2, COLOR_PINK, "HQ: All Units - HQ: Civilian is injured.");
							format(string, sizeof(string), "HQ: Location: %s", PrintPlayerArea(playerid));
							SendFactionMessage(2, COLOR_PINK, string);
					    }
					}
			    }
			}
		}
	}
	
	if(GetPVarInt(playerid, "Jailed") == 0 && GetPVarInt(playerid, "JailTime") <= 0)
	{
		if(GetPVarInt(playerid, "Dead") != 5 && GetPVarInt(playerid, "Tazed") != 1)
		{
	   		SetPVarInt(playerid, "Dead", 1);
	   	}

	    new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);

	    SetPVarFloat(playerid, "PosX", x);
	    SetPVarFloat(playerid, "PosY", y);
	    SetPVarFloat(playerid, "PosZ", z);
	    SetPVarFloat(playerid, "Angle", a);

	    SetPVarInt(playerid, "Interior", GetPlayerInterior(playerid));
	    SetPVarInt(playerid, "World", GetPlayerVirtualWorld(playerid));

	    PlayerInfo[playerid][pInjuriesText] = CreateDynamic3DTextLabel("This player is dead! (/injuries)", COLOR_ERROR, x, y, z, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 20.0);
	}
    
    SetPVarInt(playerid, "DR", reason);

    if(GetPVarInt(playerid, "PlayerLogged") == 1)
    {
    	if(killerid != INVALID_MAXPL)
		{
    		new log[128];
    		format(log, sizeof(log), "KILL: %s has killed %s (Weapon: %s [%i]).", PlayerInfo[killerid][pName], PlayerInfo[playerid][pName], DeathNames[reason], PlayerInfo[killerid][pPlayerSerial]);
    	}
    	ServerLog(LOG_PLAYER_DEATH, PlayerInfo[playerid][pUsername], string);
    }

    GiveAchievement(playerid, 13);
	return 1;
}
//============================================//
public EngineResult(playerid, vehicleid)
{
    DeletePVar(playerid, "EngAmpt");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
    if(GetPlayerVehicleID(playerid) != vehicleid) return true;
    if(VehicleInfo[vehicleid][vEngine] != 0) return true;
    new rand = random(1000);
    new Float:h;
    GetVehicleHealth(vehicleid, h);
    if(rand < (floatround(h, floatround_ceil)) - 50)
    {
        VehicleInfo[vehicleid][vEngine]=1;
        CarEngine(vehicleid, VehicleInfo[vehicleid][vEngine]);
        GameTextForPlayer(playerid, "~n~~w~engine ~g~~h~on~w~!", 1000, 5);
        foreach(new i : Player)
        {
            if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
            {
            	new Float:x, Float:y, Float:z;
            	GetPlayerPos(i, x, y, z);

	            if(IsPlayerInRangeOfPoint(i, 10, x, y, z))
	            {
	                CallRemoteFunction("LoadRadios", "i", i);
	            }
			}
        }
        TriggerBomb(vehicleid);
	}
	else
	{
        GameTextForPlayer(playerid, "~n~~n~~n~~w~attempt ~r~~h~failed~n~~w~try again!", 1000, 3);
    }
	return true;
}
//============================================//
public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;
    
    CallRemoteFunction("RemoveIdle", "i", playerid);
    
	new string[128];
	switch(newstate)
	{
		case PLAYER_STATE_ONFOOT:
		{
			UpdateSpectator(playerid);

			if(GetPVarInt(playerid, "Wound_T") != 0 ||
				GetPVarInt(playerid, "Wound_A") != 0 ||
				GetPVarInt(playerid, "Wound_L") != 0)
			{
				SetPlayerDrunkLevel(playerid, 0);
			}

			if(GetPVarInt(playerid, "Job") == JOB_FARMER)
			{
				if(PlayerInfo[playerid][pJobStatus] == 4)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 5.0,-368.1157,-1439.5592,25.6909))
					{
						SendClientMessage(playerid, COLOR_ERROR, "You have not returned your job vehicle to it's correct position.");
						PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, -368.1157,-1439.5592,25.6909, 0.0,0.0,0.0, 3, -1, -1, playerid);
						PlayerInfo[playerid][pJobStatus] = 3;
						return 1;
					}

					DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
					DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
					PlayerInfo[playerid][pJobStatus] = 5;
					PlayerInfo[playerid][pJobExtraVehicleID] = 0;
					PlayerInfo[playerid][pJobProgress] = 0;
					SendClientMessage(playerid, COLOR_JOB, "Now that you have fertilized the crops, you will have to collect them with the newly spawned Harvester.");
				
					new vehicleid;
					vehicleid = CreateVehicle(532, -377.6374, -1420.5276, 26.7031, 359.0583, -1, -1, -1);
					PlayerInfo[playerid][pJobVehicleID] = vehicleid;

					Iter_Add(VehicleIterator, vehicleid);
					VehicleInfo[vehicleid][vFuel] = 100;
					VehicleInfo[vehicleid][vEngine] = 1;
					VehicleInfo[vehicleid][vWindows] = 0;
					VehicleInfo[vehicleid][vID] = 0;
					VehicleInfo[vehicleid][vLights] = 0;
					VehicleInfo[vehicleid][vCreated] = 1;
					VehicleInfo[vehicleid][vType] = VEHICLE_JOB;
					VehicleInfo[vehicleid][vJob] = GetPVarInt(playerid, "Job");
					VehicleInfo[vehicleid][vLights] = 0;
					VehicleInfo[vehicleid][vLock] = 0;
					VehicleInfo[vehicleid][vEngineStats][1] = 1;
					VehicleInfo[vehicleid][vEngineStats][2] = 1;
					VehicleInfo[vehicleid][vBattery][1] = 1;
					VehicleInfo[vehicleid][vBattery][2] = 1;

					SetVehicleNumberPlate(vehicleid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
					SetVehicleToRespawn(vehicleid);

					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);
				}
				else if(PlayerInfo[playerid][pJobStatus] == 7)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 7.0,-377.6374,-1420.5276,26.7031))
					{
						SendClientMessage(playerid, COLOR_ERROR, "You have not returned your job vehicle to it's correct position.");
						PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, -377.6374,-1420.5276,26.7031, 0.0,0.0,0.0, 3, -1, -1, playerid);
						PlayerInfo[playerid][pJobStatus] = 6;
						return 1;
					}

					new payment = JOB_FARMER_PAY;
					format(string, sizeof(string), "Route finished: %s has been added to your next paycheck.", FormatMoney(payment));
					SendClientMessage(playerid, COLOR_GREEN, string);

					SetPVarInt(playerid, "CheckEarn", payment + GetPVarInt(playerid, "CheckEarn"));

					DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
					DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);

					PlayerInfo[playerid][pJobStatus] = 0;
					PlayerInfo[playerid][pJobProgress] = 0;
					PlayerInfo[playerid][pJobVehicleID] = 0;
					PlayerInfo[playerid][pJobExtraVehicleID] = 0;
				}
			}
			else if(GetPVarInt(playerid, "Job") == JOB_PIZZA)
			{
				if(PlayerInfo[playerid][pJobStatus] == 4)
				{
					if(GetPlayerDistanceFromPoint(playerid,
						HouseInfo[PlayerInfo[playerid][pJobHouseID]][hXo],
						HouseInfo[PlayerInfo[playerid][pJobHouseID]][hYo],
						HouseInfo[PlayerInfo[playerid][pJobHouseID]][hZo]) < 15.0)
					{
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						SetPlayerAttachedObject(playerid, 9, 1582, 1, -0.064613, 0.520760, 0.000000, 0.000000, 84.217391, 0.000000, 1.000000, 1.000000, 1.000000);
						PlayerInfo[playerid][pJobStatus] = 5;
					}
				}
			}
			else if(GetPVarInt(playerid, "Job") == JOB_TRUCKER)
			{
				if(PlayerInfo[playerid][pJobStatus] == 3)
				{
					if(IsPlayerInRangeOfPoint(playerid, 50.0,94.4029,-268.6584,1.5781))
					{
						if(PlayerInfo[playerid][pJobProgress] > 0)
						{
							if(!IsTrailerAttachedToVehicle(PlayerInfo[playerid][pJobVehicleID])) return SendClientMessage(playerid, COLOR_ERROR, "You must not only return your truck but also your trailer to the station.");

							new payment = floatround(PlayerInfo[playerid][pJobProgress] * JOB_TRUCKER_MULTIPLIER);
							format(string, sizeof(string), "Route finished: %s has been added to your next paycheck.", FormatMoney(payment));
							SendClientMessage(playerid, COLOR_GREEN, string);

							SetPVarInt(playerid, "CheckEarn", payment + GetPVarInt(playerid, "CheckEarn"));

							DespawnVehicle(PlayerInfo[playerid][pJobVehicleID]);
							DespawnVehicle(PlayerInfo[playerid][pJobExtraVehicleID]);
							DestroyDynamicRaceCP(PlayerInfo[playerid][pJobCP]);

							PlayerInfo[playerid][pJobStatus] = 0;
							PlayerInfo[playerid][pJobProgress] = 0;
							PlayerInfo[playerid][pJobVehicleID] = 0;
							PlayerInfo[playerid][pJobExtraVehicleID] = 0;
							PlayerInfo[playerid][pJobCP] = 0;
						}
						return 1;
					}
				}
			}

			if(PlayerInfo[playerid][pPlantRadio] == 0)
	    	{
	    		for(new i2 = 0; i2 < MAX_BOOM_BOXES; i2++)
	    		{
	    			if(IsPlayerInRangeOfPoint(playerid, MAX_BOOM_BOX_RANGE, RadioInfo[i2][rX], RadioInfo[i2][rY], RadioInfo[i2][rZ]) &&
	    				RadioInfo[i2][rStatus] == 1 &&
	    				!IsPlayerInAnyVehicle(playerid))
					{
						PlayerInfo[playerid][pPlantRadioID] = i2;
						PlayerInfo[playerid][pPlantRadio] = 1;

						PlayAudioStreamForPlayerEx(playerid, RadioInfo[i2][rURL], RadioInfo[i2][rX], RadioInfo[i2][rY], RadioInfo[i2][rZ], MAX_BOOM_BOX_RANGE, 1);
					}
	    		}
	    	}

	    	if(PlayerInfo[playerid][pPlantRadio] == 1)
	    	{
    			if(!IsPlayerInRangeOfPoint(playerid, MAX_BOOM_BOX_RANGE, 
    				RadioInfo[PlayerInfo[playerid][pPlantRadioID]][rX], 
    				RadioInfo[PlayerInfo[playerid][pPlantRadioID]][rY], 
    				RadioInfo[PlayerInfo[playerid][pPlantRadioID]][rZ]))
				{
					PlayerInfo[playerid][pPlantRadio] = 0;
					PlayerInfo[playerid][pPlantRadioID] = 0;

					StopAudioStreamForPlayerEx(playerid);
				}
	    	}
		}

	    case PLAYER_STATE_DRIVER:
	    {
	    	PlayerInfo[playerid][pPlantRadio] = 0;
			PlayerInfo[playerid][pPlantRadioID] = 0;
			StopAudioStreamForPlayerEx(playerid);

	        new idcar = GetPlayerVehicleID(playerid);

		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 510 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 509)
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
		    	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		    	SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, lights, alarm, doors, bonnet, boot, objective);
			}

			if(GetPVarInt(playerid, "Wound_T") != 0 ||
				GetPVarInt(playerid, "Wound_A") != 0 ||
				GetPVarInt(playerid, "Wound_L") != 0)
			{
				SetPlayerDrunkLevel(playerid, 4500);
			}

			/*
	        if(GetPVarInt(playerid, "EnterVehicle") < GetCount() && GetPVarInt(playerid, "Admin") == 0 && GetPlayerPing(playerid) <= 800 && PlayerInfo[playerid][pArcade] == 0)
		    {
		        format(string, sizeof(string), "AdmCmd: %s is supposedly vehicle warping.", PlayerInfo[playerid][pName]);
			    SendAdminMessage(COLOR_YELLOW, string);
		        new acount = GetAdminCount(2);
		        if(acount == 0)
		        {
					KickPlayer(playerid, "You have been kicked for supposedly vehicle warping.");
		        }
		        else
		        {
			        SendClientMessage(playerid, COLOR_WHITE, "You have been ejected due to supposedly vehicle warping.");
			        RemovePlayerFromVehicle(playerid);
			    }
			    return true; // Pause the script from entering extra useless information.
			}
			DeletePVar(playerid,"EnterVehicle");
			*/

			DeletePVar(playerid, "FlipWarn");
			RemovePlayerTag(playerid);
	        if(GetPVarInt(playerid, "PlayerLogged") == 1)
	        {
	            //=========//]
	            SetPlayerArmedWeapon(playerid,0);
	            //=========//]
	            if(!IsNotAEngineCar(idcar))
	            {
	                CarEngine(idcar, VehicleInfo[idcar][vEngine]);
	                LoadVehicleMeter(playerid);
	                if(GMWeather == 8) {
	                    if(VehicleInfo[idcar][vWipers] == 1) {
					        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Windshield wipers are currently on.");
					        SetPlayerWeather(playerid,9);
						} else {
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"Use (/wipers) to stop the rain effect.");
						}
					}
				}
	            //=========//
                format(string, 128, "~n~~n~~n~~n~~n~~n~~n~~g~~h~%s", VehicleName[GetVehicleModel(idcar)-400]);
	            GameTextForPlayer(playerid, string, 3500, 5);
	            //=========//
	            switch(VehicleInfo[idcar][vType])
	            {
	                case VEHICLE_RENTAL:
	                {
	                    if(GetPVarInt(playerid, "RentKey") != idcar) RemovePlayerFromVehicle(playerid);
	                }
	                case VEHICLE_JOB:
	                {
	                    if(GetPVarInt(playerid, "Job") != VehicleInfo[idcar][vJob]) RemovePlayerFromVehicle(playerid);

	                    switch(GetPVarInt(playerid, "Job"))
	                    {
	                    	case JOB_FARMER:
	                    	{
	                    		if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pJobVehicleID]) return RemovePlayerFromVehicle(playerid);

	                    		if(PlayerInfo[playerid][pJobStatus] == 1)
	                    		{
		                    		new vehicleid;
									vehicleid = CreateVehicle(610, -385.0278,-1454.3075,25.6890,270.8714, -1, -1, -1);
									Iter_Add(VehicleIterator, vehicleid);
									PlayerInfo[playerid][pJobExtraVehicleID] = vehicleid;
									PlayerInfo[playerid][pJobStatus] = 2;

									SendClientMessage(playerid, COLOR_JOB, "Attach the fertilizer to your Tractor using /tow to continue.");
								}
								else if(PlayerInfo[playerid][pJobStatus] == 5)
	                    		{
	                    			PlayerInfo[playerid][pJobStatus] = 6;
	                    			SendClientMessage(playerid, COLOR_JOB, "Go over the grown crops with your Harvester and return it back afterwards.");
	                    			PlayerInfo[playerid][pJobProgress] = 0;
	                    			PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, 
										FarmerRoute[PlayerInfo[playerid][pJobProgress]][0],
										FarmerRoute[PlayerInfo[playerid][pJobProgress]][1],
										FarmerRoute[PlayerInfo[playerid][pJobProgress]][2],
										0.0,0.0,0.0, 3, -1, -1, playerid);
									PlayerInfo[playerid][pJobProgress] = 1;
	                    		}
	                    	}
	                    	case JOB_PIZZA:
	                    	{
	                    		if(PlayerInfo[playerid][pJobStatus] == 3)
	                    		{
	                    			new houseid = random(Iter_Count(HouseIterator));
	                    			PlayerInfo[playerid][pJobHouseID] = houseid;

	                    			PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, 
										HouseInfo[houseid][hXo],
										HouseInfo[houseid][hYo],
										HouseInfo[houseid][hZo],
										0.0,0.0,0.0, 2, -1, -1, playerid, -1);

	                    			PlayerInfo[playerid][pJobStatus] = 4;

	                    			format(string, sizeof(string), "Deliver the goods to {FFFFFF}%s{B56AFF}.", GetZone(HouseInfo[houseid][hXo],
										HouseInfo[houseid][hYo],
										HouseInfo[houseid][hZo]));
	                    			SendClientMessage(playerid, COLOR_JOB, string);
	                    		}
	                    	}
	                    	case JOB_MECHANIC:
	                    	{
								format(string, sizeof(string),"Job vehicle borrowed by %s.", VehicleInfo[GetPlayerVehicleID(playerid)][vOwner]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                    	}
	                    	case JOB_TRUCKER:
	                    	{
								if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pJobVehicleID]) return RemovePlayerFromVehicle(playerid);

	                    		if(PlayerInfo[playerid][pJobStatus] == 1)
	                    		{
		                    		new vehicleid;
		                    		new modelid;

		                    		switch(random(4))
		                    		{
		                    			case 0: modelid = 435;
		                    			case 1: modelid = 450;
		                    			case 2: modelid = 584;
		                    			case 3: modelid = 591;
		                    		}

		                    		switch(random(2))
		                    		{
		                    			case 0: vehicleid = CreateVehicle(modelid, 65.0766,-281.9194,2.5977,358.8351, -1, -1, -1);
		                    			case 1: vehicleid = CreateVehicle(modelid, 52.2411,-283.0988,2.7184,359.3962, -1, -1, -1);
		                    		}

									Iter_Add(VehicleIterator, vehicleid);
									PlayerInfo[playerid][pJobExtraVehicleID] = vehicleid;
									PlayerInfo[playerid][pJobStatus] = 2;

									SendClientMessage(playerid, COLOR_JOB, "Attach the trailer to your truck using /tow to continue.");
								}
	                    	}
	                    	default: InitJob(playerid, GetPVarInt(playerid, "Job"));
	                    }
	                }
	                case VEHICLE_LSPD:
	                {
	                    if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_LSFD:
	                {
	                    if(GetPVarInt(playerid, "Member") != FACTION_LSFD) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_GOV:
	                {
	                    if(GetPVarInt(playerid, "Member") != FACTION_LSG) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_RLS:
	                {
	                    if(GetPVarInt(playerid, "Member") != FACTION_RLS) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_SAN:
	                {
	                    if(GetPVarInt(playerid, "Member") != FACTION_FOX_ENTERPRISE) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_PERSONAL:
	        	    {
					    if(VehicleInfo[idcar][vLock] == 1)
					    {
					        if(GetVehicleModel(idcar) == 481 || GetVehicleModel(idcar) == 509 || GetVehicleModel(idcar) == 510)
					        {
							    new Float:X, Float:Y, Float:Z;
							    GetPlayerPos(playerid,X,Y,Z); SetPlayerPosEx(playerid,X,Y,Z);
							    RemovePlayerFromVehicle(playerid);
				                SendClientMessage(playerid,COLOR_ERROR,"WARNING: You can't ride a bike if it's locked!");
				                return true;
					        }
					    }
					    if(GetPVarInt(playerid, "InitJob") >= 1) {
					        InitJob(playerid, GetPVarInt(playerid, "Job"));
					    }
					    if(VehicleInfo[idcar][vEngine] == 0 && !IsNotAEngineCar(idcar))
					    {
							new vehicleID = -1;
							for(new i = 0; i < PlayerSpawnedVehicles(playerid); i++)
							{
								new veh = GetSpawnedVehicle(playerid, i);
								if(GetPlayerVehicleID(playerid) == veh)
								{
									vehicleID = veh;
								}
							}

					    	if(vehicleID == -1)
					        {
				                SendClientMessage(playerid, COLOR_ERROR, "Press '~k~~CONVERSATION_YES~' to hotwire the vehicle!");
				                return true;
             				}
					    }
					    VehicleInfo[idcar][vAlarm] = 0;
	        	        format(string, sizeof(string),"Vehicle registered to %s.", GetNameWithSpace(VehicleInfo[idcar][vOwner]));
		                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		                new vehicleID = IsPlayerVehicleSpawned(playerid);
		                if(vehicleID != -1 && vehicleID == idcar)
		                {
	                        if(VehicleInfo[idcar][vInsurance] > 1 && VehicleInfo[idcar][vInsuranceC] > 0)
	                        {
	                            format(string, sizeof(string),"You owe %s to the insurance company, type (/v payinsurance) or wait until payday!", FormatMoney(VehicleInfo[idcar][vInsuranceC]));
		                        SendClientMessage(playerid, COLOR_ERROR, string);
	                        }
	                    }
					}
	            }
	            /*if(VehicleInfo[idcar][vEngine] == 0)
	            {
	                ClearChatbox(playerid, 1);
	                SendClientMessage(playerid, COLOR_ERROR, "Press '~k~~CONVERSATION_YES~' to toggle the engine!");
	            }*/
				if(!IsNotAEngineCar(idcar))
				{
					if(strcmp(VehicleInfo[idcar][vRadio], "None", true) == 0){}
	            	else
	            	{
	                    PlayAudioStreamForPlayerEx(playerid, VehicleInfo[idcar][vRadio]);
	            	}
	            	if(GetPVarInt(playerid, "Seatbelt") == 0)
				    {
					    if(IsHelmetCar(idcar)) SendClientMessage(playerid,COLOR_GREEN,"Remember to put your helmet on (/helmet).");
					    else SendClientMessage(playerid,COLOR_GREEN,"Remember to put your seatbelt on (/seatbelt).");
				    }
	            }
	        }

			UpdateSpectator(playerid);
	    }
	    case PLAYER_STATE_PASSENGER:
	    {
	    	PlayerInfo[playerid][pPlantRadio] = 0;
			PlayerInfo[playerid][pPlantRadioID] = 0;
			StopAudioStreamForPlayerEx(playerid);

			DeletePVar(playerid,"EnterVehicle");

			if(PlayerInfo[playerid][pPlayerWeapon] == 24) SetPlayerArmedWeapon(playerid,0);
			//=========//
	        new idcar = GetPlayerVehicleID(playerid);
	        if(!IsNotAEngineCar(idcar))
	        {
	            LoadVehicleMeter(playerid);
	        	//=========//
	        	if(strcmp(VehicleInfo[idcar][vRadio], "None", true) == 0){}
	            else
	            {
	                PlayAudioStreamForPlayerEx(playerid, VehicleInfo[idcar][vRadio]);
	            }
	        	if(VehicleInfo[idcar][vType] == VEHICLE_JOB || VehicleInfo[idcar][vType] == VEHICLE_PERSONAL) {
	        	    InitiateFare(playerid); }
	        	//=========//
	        	if(GetPVarInt(playerid, "Seatbelt") == 0)
				{
			    	if(IsHelmetCar(idcar)) SendClientMessage(playerid,COLOR_GREEN,"Remember to put your helmet on, (/helmet).");
					else SendClientMessage(playerid,COLOR_GREEN,"Remember to put your seatbelt on, (/seatbelt).");
		    	}
		    	if(VehicleInfo[idcar][vWipers] == 1 && GMWeather == 8) {
				    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Windshield wipers are currently on.");
					SetPlayerWeather(playerid,9); }
		    }

		    UpdateSpectator(playerid);
	    }
	}
	switch(oldstate)
	{
		case PLAYER_STATE_DRIVER:
	    {
	        mdc_Hide(playerid, true);
			StopProgress(playerid);
			StopAudioStreamForPlayer(playerid);
			CallRemoteFunction("LoadRadios","i", playerid);
	        DeletePVar(playerid, "PizzaTimeEx"), DeletePVar(playerid, "RefillAM"), DeletePVar(playerid, "RefillPR");
	        if(GetPVarInt(playerid, "VD") == 1)
	        {
	            for(new i = 0; i < 5; i++)
				{
	        	    TextDrawHideForPlayer(playerid,VehicleDraw[0]);
	        	    TextDrawHideForPlayer(playerid,VehicleDraw[1]);
            	    TextDrawHideForPlayer(playerid,VehicleDraw[2]);
	        	    TextDrawHideForPlayer(playerid,VehicleDraw[3]);
            	    TextDrawHideForPlayer(playerid,VehicleDraw[4]);
            	}
	        	for(new i = 0; i < 2; i++)
				{
				    PlayerTextDrawHide(playerid,VehicleIDraw[i][playerid]);
				}
			    DeletePVar(playerid, "VD");
			}
			if(GetPVarInt(playerid, "Hotwire") > 0) { DeletePVar(playerid,"Hotwire"); }
			if(GetPVarInt(playerid, "TakeTest") >= 1)
			{
			    if(GetPVarInt(playerid, "TestVeh") >= 1) { DespawnVehicle(GetPVarInt(playerid, "TestVeh")); }
			    DeletePVar(playerid, "TakeTest");
				DeletePVar(playerid, "TestVeh");
			    SendClientMessage(playerid, COLOR_ERROR, "You left your vehicle, therefore you failed.");
			    DisablePlayerRaceCheckpoint(playerid);
			}
			/*if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_ITEM)) RemovePlayerAttachedObject(playerid,HOLDOBJECT_ITEM);*/
			SetPVarInt(playerid, "Seatbelt", 0);
			if(GetPVarInt(playerid, "OnRoute") != 0)
			{
				switch(GetPVarInt(playerid, "Job"))
				{
				    case 1: return true;
				    case 5: return true;
				}
				SetPVarInt(playerid, "RouteOT", 15);
			}
	    }
	    case PLAYER_STATE_PASSENGER:
	    {
	        mdc_Hide(playerid, true);
	        StopAudioStreamForPlayer(playerid);
	        RemovePlayerTag(playerid);
			CallRemoteFunction("LoadRadios","i", playerid);
	        /*if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_ITEM)) RemovePlayerAttachedObject(playerid,HOLDOBJECT_ITEM);*/
	        SetPVarInt(playerid, "Seatbelt", 0);
	        if(GetPVarInt(playerid, "VD") == 1)
	        {
	            for(new i = 0; i < 5; i++)
				{
	        	    TextDrawHideForPlayer(playerid,VehicleDraw[0]);
	        	    TextDrawHideForPlayer(playerid,VehicleDraw[1]);
            	    TextDrawHideForPlayer(playerid,VehicleDraw[2]);
	        	    TextDrawHideForPlayer(playerid,VehicleDraw[3]);
            	    TextDrawHideForPlayer(playerid,VehicleDraw[4]);
            	}
	        	for(new i = 0; i < 2; i++)
				{
				    PlayerTextDrawHide(playerid,VehicleIDraw[i][playerid]);
				}
			    DeletePVar(playerid, "VD");
			}
	    }
	}
	return 1;
}
//============================================//
/*public FadeScreen(playerid, type)
{
	switch(type)
	{
	    case 1: // Fade In
	    {
            if(GetPVarInt(playerid, "FADEIN") == 0)
            {
                FadeTime[playerid]=0;
                SetPVarInt(playerid, "FADEIN", 1);
                FadeDraw[playerid] = TextDrawCreate(-10.000000, 1.000000, "-INPUT TEXT-");
		        TextDrawBackgroundColor(FadeDraw[playerid], 0);
		        TextDrawFont(FadeDraw[playerid], 1);
		        TextDrawLetterSize(FadeDraw[playerid], 0.500000, 50.000000);
		        TextDrawColor(FadeDraw[playerid], 0);
		        TextDrawSetOutline(FadeDraw[playerid], 1);
		        TextDrawSetProportional(FadeDraw[playerid], 1);
		        TextDrawUseBox(FadeDraw[playerid], 1);
		        TextDrawBoxColor(FadeDraw[playerid], 255);
		        TextDrawTextSize(FadeDraw[playerid], 720.000000, 0.000000);
            }
            if(GetPVarInt(playerid, "FADEOUT")) DeletePVar(playerid, "FADEOUT");
			if(FadeTime[playerid] >= 255 && FadeTime[playerid] <= 299)
			{
			    TextDrawBoxColor(FadeDraw[playerid], 255);
			    FadeTime[playerid]=300;
			    SetTimerEx("FadeScreen", 2000, false, "ii", playerid, 1);
			    return 1;
			}
			if(FadeTime[playerid] >= 300) // End the fade
			{
			    TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
			    FadeTime[playerid]=0;
			    DeletePVar(playerid, "FADEIN");
			    TextDrawDestroy(FadeDraw[playerid]);
			    CallRemoteFunction("OnPlayerFade","ii",playerid, 1);
			    return 1;
			}
			if(FadeTime[playerid] == 0) TextDrawBoxColor(FadeDraw[playerid], 0), TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            FadeTime[playerid]+=25;
            TextDrawBoxColor(FadeDraw[playerid], FadeTime[playerid]);
            TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
            TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            SetTimerEx("FadeScreen", 20, false, "ii", playerid, 1);
	    }
	    case 2: // Fade Out
	    {
	        if(GetPVarInt(playerid, "FADEOUT") == 0)
            {
                FadeTime[playerid]=255;
                SetPVarInt(playerid, "FADEOUT", 1);
                FadeDraw[playerid] = TextDrawCreate(-10.000000, 1.000000, "-INPUT TEXT-");
		        TextDrawBackgroundColor(FadeDraw[playerid], 0);
		        TextDrawFont(FadeDraw[playerid], 1);
		        TextDrawLetterSize(FadeDraw[playerid], 0.500000, 50.000000);
		        TextDrawColor(FadeDraw[playerid], 0);
		        TextDrawSetOutline(FadeDraw[playerid], 1);
		        TextDrawSetProportional(FadeDraw[playerid], 1);
		        TextDrawUseBox(FadeDraw[playerid], 1);
		        TextDrawBoxColor(FadeDraw[playerid], 255);
		        TextDrawTextSize(FadeDraw[playerid], 720.000000, 0.000000);
            }
            if(GetPVarInt(playerid, "FADEIN")) DeletePVar(playerid, "FADEIN");
			if(FadeTime[playerid] <= 0) // End the fade
			{
			    TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
			    FadeTime[playerid]=0;
			    DeletePVar(playerid, "FADEOUT");
			    TextDrawDestroy(FadeDraw[playerid]);
			    CallRemoteFunction("OnPlayerFade","ii",playerid, 2);
			    return 1;
			}
			if(FadeTime[playerid] == 255) TextDrawBoxColor(FadeDraw[playerid], 255), TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            FadeTime[playerid]-=25;
            TextDrawBoxColor(FadeDraw[playerid], FadeTime[playerid]);
            TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
            TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            SetTimerEx("FadeScreen", 20, false, "ii", playerid, 2);
	    }
	}
    return 1;
}*/
//============================================//
public AfterSpawnHos(playerid)
{
	if(IsPlayerConnected(playerid) && GetPVarInt(playerid, "PlayerLogged") == 1)
	{
	    new string[128], bill, tax, amount=0, year, month, day,sendername[MAX_PLAYER_NAME];
	    getdate(year, month, day);
	    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]), GiveNameSpace(sendername);
	    bill = 270 + GetPVarInt(playerid,"Deaths") * 4, tax = 5 * GetPVarInt(playerid,"Kills");
		SendClientMessage(playerid,0xFF8282AA,"**********************************************");
        SendClientMessage(playerid,0xFF8282AA,"            Hospital Receipt:");
        format(string, sizeof(string),"Name: %s - Date: %d-%d-%d.", sendername, day, month, year);
        SendClientMessage(playerid,0xFF8282AA,string);
        if(GetPVarInt(playerid, "TWO") == 0)
        {
	        format(string, sizeof(string),"Medical Bill: %s - Tax: %s.", FormatMoney(bill), FormatMoney(tax));
            SendClientMessage(playerid,0xFF8282AA,string);
            bill+=tax;
            format(string, sizeof(string),"Total Charge: %s.", FormatMoney(bill));
            SendClientMessage(playerid,0xFF8282AA,string);
        }
        SendClientMessage(playerid,0xFF8282AA,"**********************************************");
        if(GetPVarInt(playerid, "TWO") == 0)
        {
            if(GetPVarInt(playerid, "MonthDon") > 0) { bill = bill/2; }
        	if(GetPVarInt(playerid, "Cash") >= bill) { GivePlayerMoneyEx(playerid,-bill), amount=2; }
        	else
        	{
            	if(GetPVarInt(playerid, "Bank") >= bill)
            	{
			    	SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-bill);
			    	amount=1;
				}
				if(amount == 0)
				{
			    	SetPVarInt(playerid, "Cash", 0);
			    	SetPVarInt(playerid, "Bank", 0);
				}
			}
			format(string, sizeof(string),"~r~-%s", FormatMoney(bill));
			GameTextForPlayer(playerid, string, 5000, 1);
		}
		TogglePlayerControllableEx(playerid, true);
		SetPlayerPosEx(playerid, 1178.3928,-1323.4797,14.1178);
    	SetPlayerFacingAngle(playerid, 270.9649);
    	SetPlayerInterior(playerid,0);
    	SetPlayerVirtualWorld(playerid,0);
		ClearAnimationsEx(playerid);
    	SetPlayerHealthEx(playerid, 50.0);
    	PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
    	SetPVarInt(playerid, "Dead", 0);
    	SetPVarInt(playerid, "Mute", 0);
    	ResetPlayerWeaponsEx(playerid);
    	SetCameraBehindPlayer(playerid);
    	SetPlayerColor(playerid, COLOR_WHITE);
    	PlayerWound(playerid, 0, 0);
        if(GetPVarInt(playerid, "Member") == FACTION_LSPD && GetPVarInt(playerid, "Duty") == 1)
        {
            format(string, sizeof(string),"%s", PlayerNameEx(playerid));
            SetPlayerColor(playerid, 0x8080FFFF);
		    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], 0x8080FFFF, string);
		}
        if(GetPVarInt(playerid, "Member") == FACTION_LSFD && GetPVarInt(playerid, "Duty") == 1)
        {
            format(string, sizeof(string),"%s", PlayerNameEx(playerid));
            SetPlayerColor(playerid, COLOR_PINK);
		    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], COLOR_PINK, string);
		}

    	if(GetPVarInt(playerid, "Jailed") > 0) SpawnPlayer(playerid);
    	SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL_SILENCED,9999);
        SetPlayerSkillLevel(playerid,WEAPONSKILL_DESERT_EAGLE,9999);
        SetPlayerSkillLevel(playerid,WEAPONSKILL_SHOTGUN,9999);
        SetPlayerSkillLevel(playerid,WEAPONSKILL_MP5,9999);
        SetPlayerSkillLevel(playerid,WEAPONSKILL_AK47,9999);
        SetPlayerSkillLevel(playerid,WEAPONSKILL_M4,9999);
        DeletePVar(playerid, "TWO");
        if(amount == 0)
        {
        	SetPlayerHealthEx(playerid, 10.0);
        }
    }
	return 1;
}
//============================================//
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(oldinteriorid != 0 && newinteriorid == 0)
	{
	    SetPVarInt(playerid, "IntEnter", 0);
		SetPVarInt(playerid, "BizEnter", 0);
		SetPVarInt(playerid, "HouseEnter", 0);
		TextDrawHideForPlayer(playerid, BlindDraw2);
	}
    return 1;
}
//============================================//
public VehicleTrunk(vehicleid, type)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(type)
	{
	    case true:
	    {
            SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,1,objective);
	    }
	    case false:
	    {
	        SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,0,objective);
	    }
	}
	return true;
}
//============================================//
public SetCameraBehindPlayerEx(playerid) return SetCameraBehindPlayer(playerid);
//============================================//
public UnFreeze(playerid) return TogglePlayerControllable(playerid, true);
//============================================//
public ForceInVeh(playerid, veh)
{
	if(VehicleInfo[veh][vType] == VEHICLE_DMV)
	{
	    foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 1); }
	}
	else
	{
	    foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 0); }
	}
    PutPlayerInVehicleEx(playerid, veh, 0);
    TogglePlayerControllableEx(playerid, true);
	return true;
}
//============================================//
public NextRoute(playerid, Float:X, Float:Y, Float:Z, next)
{
    if(GetPVarInt(playerid, "OnRoute") == 0) return true;
    if(GetPlayerVehicleID(playerid) != GetPVarInt(playerid, "RouteVeh")) return true;
    new str[128];
    SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
    if(next == 0) format(str, sizeof(str), "Proceed to the checkpoint in %s!", GetZone(X, Y, Z));
    else format(str, sizeof(str), "Proceed to the next checkpoint in %s!", GetZone(X, Y, Z));
    if(GetPVarInt(playerid, "Job") == 3 && GetPVarInt(playerid, "Job") == 7)
    {
        if(GetPVarInt(playerid, "OnRoute") <= 3) SendClientMessage(playerid, COLOR_WHITE, str);
	}
	else SendClientMessage(playerid, COLOR_WHITE, str);
	TogglePlayerControllableEx(playerid,true);
    return true;
}
//============================================//
public EndRoute(playerid, cash)
{
	new str[128];
    if(GetPVarInt(playerid, "OnRoute") == 0) return true;
	DeletePVar(playerid, "OnRoute");
	if(GetPVarInt(playerid, "RouteVeh") >= 1) {
	    if(VehicleInfo[GetPVarInt(playerid, "RouteVeh")][vType] == VEHICLE_JOB) {
		DespawnVehicle(GetPVarInt(playerid, "RouteVeh")); }
	}

	if(GetPVarInt(playerid, "OnRouteTime") >= 0) {
		new year, month, day, hour, minute, second;
		getdate(year, month, day);
		gettime(hour, minute, second);

		new date_current[32];
		format(date_current, sizeof(date_current), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);

		new query[512];
		mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_jobroutes (Player, Time, Date, JobID) VALUES ('%e', '%i', '%e', '%i')", 
		PlayerInfo[playerid][pUsername], GetPVarInt(playerid, "OnRouteTime"), date_current, GetPVarInt(playerid, "Job"));
		mysql_pquery(handlesql, query);

		// If been on route less than 10 seconds, automated ban.
		if(GetPVarInt(playerid, "OnRouteTime") < 10) {
			BanPlayer(playerid, "Teleport Hacks", "Server");
		}

		DeletePVar(playerid, "OnRouteTime");
	}


	DeletePVar(playerid, "RouteVeh");
	format(str, 128, "You have completed your route and as a result %s has been added to your paycheck!", FormatMoney(cash));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, str);
	SetPVarInt(playerid, "CheckEarn", cash+GetPVarInt(playerid, "CheckEarn"));
    TogglePlayerAllDynamicCPs(playerid, true);
    DisablePlayerCheckpoint(playerid);
    if(GetPVarInt(playerid, "MonthDon") == 0) {
    SetPVarInt(playerid, "JobReduce", 300); }
    GiveAchievement(playerid, 4);
	return true;
}
//============================================//
public KickPlayer(playerid, reason[])
{
    switch(GetPVarInt(playerid, "KPNUM"))
    {
        case 0:
        {
            SetPVarInt(playerid, "KPNUM", 1);

            if(strlen(reason) > 1)
            {
            	SendClientMessageEx(playerid, COLOR_ERROR, reason);
            }
            
            SetTimerEx("KickPlayer", 500, false, "is", playerid, " ");
            return 1;
        }
        case 1:
        {
            DeletePVar(playerid, "KPNUM");
            Kick(playerid);
            return 1;
        }
    }
	return 1;
}
//============================================//
public ProxDetector(Float:radi, playerid, string[], color)
{
    new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
	CallRemoteFunction("RemoveIdle", "i", playerid);
	if(color == COLOR_PURPLE) SetPlayerChatBubble(playerid, string, COLOR_PURPLE, radi, 5000);
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "PlayerLogged") == 1)
        {
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
		        if(IsPlayerInRangeOfPoint(i,radi,posx, posy, posz))
		        {
					if(color == COLOR_FADE)
					{
						new Float:radius, feet;
						radius = GetPlayerDistanceFromPoint(i,posx, posy, posz);
		                feet = floatround(radius);
		                switch(feet)
		                {
		                    case 0 .. 10: SPCM(i,0xF0F0F096,string), SendBugMessage(i,string);
			                case 11 .. 15: SPCM(i,0xC9C9C996,string), SendBugMessage(i,string);
			                case 16 .. 20: SPCM(i,0xB5B5B596,string), SendBugMessage(i,string);
			                case 21 .. 25: SPCM(i,0xA3A3A396,string), SendBugMessage(i,string);
			                case 26 .. 100: SPCM(i,0x79797996,string), SendBugMessage(i,string);
		                }
					}
					else SPCM(i, color, string);
		        }
		    }
        }
    }
    return 1;
}
//============================================//
public StopTalking(playerid) return ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
//============================================//
public LoginCamera(playerid)
{
	SetPlayerTime(playerid, GMHour, GMMin);
	SetPlayerWeather(playerid, GMWeather);
    //SetPVarInt(playerid, "LoginCA", GetPVarInt(playerid, "LoginCA")+1);
	/*switch(GetPVarInt(playerid, "LoginCA"))
	{
	    case 1: SetPlayerCameraPos(playerid, 1738.6039,-2346.3584,44.8555), SetPlayerCameraLookAt(playerid, 1578.8135,-2206.3071,24.0884);
	    case 2: SetPlayerCameraPos(playerid, 1552.0936,-1948.3346,77.6734), SetPlayerCameraLookAt(playerid, 1624.8260,-1605.8579,90.5439, 1);
	    case 3: SetPlayerCameraPos(playerid, 1732.0344,-1346.4556,108.8265), SetPlayerCameraLookAt(playerid, 1489.5177,-1030.1857,31.1757, 1);
	    case 4: SetPlayerCameraPos(playerid, 2248.3684,-1518.0212,115.2022), SetPlayerCameraLookAt(playerid, 2582.2124,-1272.1514,68.6015, 1);
	    case 5:
	    {
	        SetPlayerCameraPos(playerid, 1738.6039,-2346.3584,44.8555);
			SetPlayerCameraLookAt(playerid, 1578.8135,-2206.3071,24.0884, 1);
	        SetPVarInt(playerid, "LoginCA", 1);
	    }
	}*/
	new rand = random(4);
	switch(rand)
	{
	    case 1: InterpolateCameraPos(playerid, 2608.8567,-2495.1262,66.1117, 621.4464,-973.0934,140.1878, 60000, CAMERA_MOVE);
		case 2: InterpolateCameraPos(playerid, 621.4464,-973.0934,140.1878, 2608.8567,-2495.1262,66.1117, 60000, CAMERA_MOVE);
		case 3: InterpolateCameraPos(playerid, 2666.7107,-1399.4921,108.5323, 1361.1880,-2338.8389,65.3276, 60000, CAMERA_MOVE);
		default: InterpolateCameraPos(playerid, 1361.1880,-2338.8389,65.3276, 2666.7107,-1399.4921,108.5323, 60000, CAMERA_MOVE);
	}
	return true;
}
//============================================//
public PrintHud(playerid)
{
	if(GetPVarInt(playerid, "PlayerLogged") == 1) SetSlidedMoneyBar(playerid);
	return true;
}
//============================================//
forward PrintStats(playerid, forplayerid);
public PrintStats(playerid, forplayerid)
{
	new msg[256],
	    color[7],
	    donator[10],
	    fightstyle[10],
	    walkstyle[10],
		marriedto[128],
		Float:health,
		Float:armour;
    
    switch(GetPVarInt(playerid, "DonateRank")) {
        case 1: donator = "Bronze", color="FFFFFF";
        case 2: donator = "Silver", color="FFFFFF";
        case 3: donator = "Gold", color="FFFFFF";
        case 4: donator = "Premium", color="FFA319";
        default: donator = "None", color="FFFFFF";
    }
    
    switch(GetPlayerFightingStyle(playerid)) {
        case FIGHT_STYLE_BOXING: fightstyle = "Boxing";
		case FIGHT_STYLE_KUNGFU: fightstyle = "KungFu";
		case FIGHT_STYLE_KNEEHEAD: fightstyle = "KneeHead";
		case FIGHT_STYLE_GRABKICK: fightstyle = "GrabKick";
		case FIGHT_STYLE_ELBOW: fightstyle = "Elbow";
		default: fightstyle = "Normal";
    }
    
    switch(GetPlayerWalkStyle(playerid)) {
        case WALKSTYLE_GANG1: walkstyle = "Gang-1";
        case WALKSTYLE_GANG2: walkstyle = "Gang-2";
        case WALKSTYLE_NORMAL: walkstyle = "Normal";
        case WALKSTYLE_SEXY: walkstyle = "Sexy";
        case WALKSTYLE_OLD: walkstyle = "Old";
        case WALKSTYLE_SNEAK: walkstyle = "Sneaking";
        case WALKSTYLE_BLIND: walkstyle = "Blind";
        case WALKSTYLE_ARMED: walkstyle = "Armed";
        case WALKSTYLE_POLICE: walkstyle = "Police";
        case WALKSTYLE_FEMALE: walkstyle = "Female";
        case WALKSTYLE_FAT: walkstyle = "Fat";
        case WALKSTYLE_MUSCLE: walkstyle = "Muscular";
        default: walkstyle = "Original";
    }

    GetPlayerHealth(playerid,health);
    GetPlayerArmourEx(playerid,armour);

    strmid(marriedto, PlayerInfo[playerid][pMarriedTo], 0, strlen(PlayerInfo[playerid][pMarriedTo]), 255);
    if(strcmp(marriedto, "None", true) == 0) {
    strmid(marriedto, "No-one", 0, strlen("No-one"), 255); }

    /* Line 0 */
    format(msg, sizeof(msg), "{%s}_____________________________________________________", color);
    SendClientMessage(forplayerid, -1, msg);
    
    format(msg, sizeof(msg), "                               %s", GiveNameSpaceEx(PlayerInfo[playerid][pUsername]));
    SendClientMessage(forplayerid, -1, msg);

	/* Line 1 */
	format(msg, sizeof(msg), "{%s}(ACC): Cash: %s | Bank: %s | Occupation: %s | Age: %d", color, FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")), GetOccupation(GetPVarInt(playerid, "Job")), GetPVarInt(playerid, "Age"));
	SendClientMessage(forplayerid, -1, msg);

    /* Line 2 */
	format(msg, sizeof(msg), "{%s}(ACC): Gender: %s | Fightstyle: %s | Walkstyle: %s | Married To: %s", color, GetGenderString(GetPVarInt(playerid, "Sex")), fightstyle, walkstyle, GiveNameSpaceEx(marriedto));
    SendClientMessage(forplayerid, -1, msg);

    /* Line 3 */
	if(GetPVarInt(playerid, "Member") >= 1) {
	    if(GetPVarInt(playerid, "MonthDon") != 0) {
			format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: Yes (%i days left) | Faction: %s | Rank: %s", color, donator, GetPVarInt(playerid, "MonthDonT"), FactionInfo[GetPVarInt(playerid, "Member")][fName], FactionRankInfo[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")][fRank]);
		} else {
            format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: No | Faction: %s | Rank: %s", color, donator, FactionInfo[GetPVarInt(playerid, "Member")][fName], FactionRankInfo[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")][fRank]);
		}
    } else {
        if(GetPVarInt(playerid, "MonthDon") != 0) {
			format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: Yes (%i days left) | Faction: None | Rank: None", color, donator, GetPVarInt(playerid, "MonthDonT"));
		} else {
		    format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: No | Faction: None | Rank: None", color, donator);
		}
	}
	
	SendClientMessage(forplayerid, -1, msg);
	
	/* Line 4 */
	format(msg, sizeof(msg), "{%s}(MISC): Number: %d | Walkie Freq: %d | Health: %.1f | Armour: %.1f", color, GetPVarInt(playerid, "PhoneNum"), GetPVarInt(playerid, "WalkieFreq"), health, armour);
    SendClientMessage(forplayerid, -1, msg);

    /* Line 5 */
    format(msg, sizeof(msg), "{%s}(LICENSES): Driver's License: %s | Weapon License: %s | Medical License: %s", color, GetDriveLicStatus(GetPVarInt(playerid, "DriveLic")), GetWeaponLicStatus(GetPVarInt(playerid, "GunLic")), GetMedLicStatus(GetPVarInt(playerid, "MedLic")));
    SendClientMessage(forplayerid, -1, msg);
	
	/* Line 6 */
	format(msg, sizeof(msg), "{%s}(OOC): TLS:[%d] | Car Tickets:[%d] | Name Changes:[%d] | Forum Name:[%s]", color, GetPVarInt(playerid, "ConnectTime"), GetPVarInt(playerid, "CarTicket"), GetPVarInt(playerid, "Changes"), AdminName(playerid));
    SendClientMessage(forplayerid, -1, msg);

    new query[512];
    mysql_format(handlesql, query, sizeof(query), "SELECT * FROM vehicles WHERE Owner='%e'", PlayerInfo[playerid][pUsername]);
    mysql_pquery(handlesql, query, "OnStatsVehicleLoaded", "iis", playerid, forplayerid, color);
	return true;
}

forward OnStatsVehicleLoaded(playerid, forplayerid, color[]);
public OnStatsVehicleLoaded(playerid, forplayerid, color[])
{
	new string[256];
	new vehicleid = -1;

	for(new i = 0; i < cache_get_row_count(); i++)
	{
		foreach(new i2 : VehicleIterator)
		{
    		if(VehicleInfo[i2][vID] == cache_get_field_content_int(i, "ID"))
    		{
    			vehicleid = i2;
    		}
    	}

    	if(vehicleid == -1)
    	{
    		new value[32], impounded[32];

			if(cache_get_field_content_int(i, "Donate") == 0)
			{
				format(value, sizeof(value), "%s", FormatMoney(cache_get_field_content_int(i, "Value")));
			}
			else
			{
				format(value, sizeof(value), "Donator Vehicle");
			}

			if(cache_get_field_content_int(i, "Impound") == 0)
			{
				format(impounded, sizeof(impounded), "No");
			}
			else
			{
				format(impounded, sizeof(impounded), "%s", FormatMoney(cache_get_field_content_int(i, "Impound")));
			}

			if(GetPVarInt(forplayerid, "Admin") > 0)
			{
				format(string, sizeof(string), "{%s}(VEHICLE): Database ID:[%i] | ID:[Not Spawned] | Model:[%s] | Value:[%s] | Locked:[%s] | Impounded:[%s]",
					color, cache_get_field_content_int(i, "ID"), VehicleName[cache_get_field_content_int(i, "Model") - 400], value, 
					YesNo(cache_get_field_content_int(i, "Locked")), impounded);
			}
			else
			{
				format(string, sizeof(string), "{%s}(VEHICLE): Model:[%s] | Value:[%s] | Locked:[%s] | Impounded:[%s]",
					color, VehicleName[cache_get_field_content_int(i, "Model") - 400], value, 
					YesNo(cache_get_field_content_int(i, "Locked")), impounded);
			}

			SendClientMessage(forplayerid, COLOR_WHITE, string);
    	}
    	else
    	{
    		new value[32], impounded[32];

			if(VehicleInfo[vehicleid][vDonate] == 0)
			{
				format(value, sizeof(value), "%s", FormatMoney(VehicleInfo[vehicleid][vValue]));
			}
			else
			{
				format(value, sizeof(value), "Donator Vehicle");
			}

			if(VehicleInfo[vehicleid][vImpound] == 0)
			{
				format(impounded, sizeof(impounded), "No");
			}
			else
			{
				format(impounded, sizeof(impounded), "%s", FormatMoney(VehicleInfo[vehicleid][vImpound]));
			}

			if(GetPVarInt(forplayerid, "Admin") > 0)
			{
				format(string, sizeof(string), "{%s}(VEHICLE): Database ID:[%i] | ID:[%i] | Model:[%s] | Value:[%s] | Locked:[%s] | Impounded:[%s]", 
					color, VehicleInfo[vehicleid][vID], vehicleid, VehicleName[VehicleInfo[vehicleid][vModel] - 400], value, 
					YesNo(VehicleInfo[vehicleid][vLock]), impounded);
			}
			else
			{
				format(string, sizeof(string), "{%s}(VEHICLE): Model:[%s] | Value:[%s] | Locked:[%s] | Impounded:[%s]", 
					color, VehicleName[VehicleInfo[vehicleid][vModel] - 400], value, YesNo(VehicleInfo[vehicleid][vLock]), impounded);
			}

			SendClientMessage(forplayerid, COLOR_WHITE, string);
    	}
    	vehicleid = -1;
	}

	if(GetPVarInt(forplayerid, "Admin") > 0)
	{
        format(string, sizeof(string),"{FF3333}(ADMIN): Admin Level:[%d] | HouseKey:[%d] | BizKey:[%d] | Interior:[%d] | Virtual World:[%d] | Kills:[%d] | Deaths:[%d]", GetPVarInt(playerid, "Admin"), GetPVarInt(playerid, "HouseKey"), GetPVarInt(playerid, "BizKey"), GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), GetPVarInt(playerid,"Kills"), GetPVarInt(playerid, "Deaths"));
		SendClientMessage(forplayerid, -1, string);

		new query[128];
	    mysql_format(handlesql, query, sizeof(query), "SELECT * FROM logs_adminjails WHERE Name='%e'", PlayerInfo[playerid][pUsername]);
	    mysql_pquery(handlesql, query, "OnStatsAdminJailsLoaded", "iis", playerid, forplayerid, color);
	}
	else
	{
	    format(string, sizeof(string), "{%s}_____________________________________________________", color);
	    SendClientMessage(forplayerid, -1, string);
	}
	return 1;
}

forward OnStatsAdminJailsLoaded(playerid, forplayerid, color[]);
public OnStatsAdminJailsLoaded(playerid, forplayerid, color[])
{
	new admin_jails[64];
	format(admin_jails, sizeof(admin_jails),"{FF3333}(ADMIN): Admin Jails:[%i] | ", cache_get_row_count());

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM logs_bans WHERE bUsername='%e'", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "OnStatsBansLoaded", "iiss", playerid, forplayerid, color, admin_jails);
	return 1;
}

forward OnStatsBansLoaded(playerid, forplayerid, color[], admin_jails[]);
public OnStatsBansLoaded(playerid, forplayerid, color[], admin_jails[])
{
	new string[128];
	format(string, sizeof(string),"%sBans:[%i]", admin_jails, cache_get_row_count());
	SendClientMessage(forplayerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{%s}_____________________________________________________", color);
	SendClientMessage(forplayerid, -1, string);
	return 1;
}

//============================================//
public CreateLoot(itemid1, itemid2, itemid3, itemid4, Float:X, Float:Y, Float:Z, worldid, intid)
{
	new found = 0, foundid = 0, str[128];
    for(new i = 0; i < MAX_LOOT; i++)
    {
        if(LootInfo[i][lUsed] == 0 && found == 0)
        {
            found++;
            foundid=i;
        }
    }
    if(found == 0) return true;
    LootInfo[foundid][lUsed]=1;
    format(str, 128, "%s\nPress '~k~~CONVERSATION_YES~' to pick up", PrintIName(itemid1));
    LootInfo[foundid][lText]=CreateDynamic3DTextLabel(str, 0x33AA33FF, X, Y, Z-0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, worldid, intid, -1, 20.0);
    if(itemid1 > 21 && itemid1 < 35)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(PrintIid(itemid1), X, Y, Z - 1, 80.0, 0.0, 0.0, worldid);
    }
    if(itemid1 >= 100 && itemid1 <= 150)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(2037, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 == 403)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(1650, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 == 406)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(1210, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 == 414)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(19897, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 >= 500 && itemid1 <= 550)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(1575, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 == 1000)
    {
    	LootInfo[foundid][lObject] = CreateDynamicObject(19142, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    LootInfo[foundid][lTime]=60;
    LootInfo[foundid][lItem][0]=itemid1;
    LootInfo[foundid][lItem][1]=itemid2;
    LootInfo[foundid][lItem][2]=itemid3;
    LootInfo[foundid][lItem][3]=itemid4;
    LootInfo[foundid][lX]=X;
    LootInfo[foundid][lY]=Y;
    LootInfo[foundid][lZ]=Z;
	return true;
}
//============================================//
public IsAroundShell(playerid)
{
    for(new i2 = 0; i2 < sizeof(Shells); i2++)
    {
        if(Shells[i2][sUsed] == 1)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 1, Shells[i2][sX], Shells[i2][sY], Shells[i2][sZ]))
		    {
		        return true;
		    }
        }
    }
	return false;
}
//============================================//
public CreateShell(Float:X, Float:Y, Float:Z, worldid, ammotype, intid, serialid)
{
	if(ammotype == 0) return 1; // Blocks NULL shell casings.
	new found = 0, foundid = 0, found2 = 0, str[128];
    for(new i = 0; i < sizeof(Shells); i++)
    {
        if(Shells[i][sUsed] == 0 && found == 0)
        {
            found++;
            foundid=i;
        }
    }
    for(new i2 = 0; i2 < sizeof(Shells); i2++)
    {
        if(Shells[i2][sUsed] == 1 && Shells[i2][sX] == X && Shells[i2][sY] == Y && Shells[i2][sZ] == Z)
        {
            found2++;
        }
    }
    if(found == 0) return true;
	if(found2 != 0) return true;
    Shells[foundid][sUsed]=1;
    format(str, 128, "Shell Casing\n%s", PrintIName(ammotype));
    Shells[foundid][sText]=CreateDynamic3DTextLabel(str, COLOR_ERROR, X, Y, Z-0.8, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, worldid, intid, -1, 50.0);
    Shells[foundid][sX]=X, Shells[foundid][sY]=Y, Shells[foundid][sZ]=Z;
    Shells[foundid][sTime]=10;
    Shells[foundid][sSerial]=serialid;
    format(str, 128, "%s", PrintIName(ammotype));
    strmid(Shells[foundid][sName], str, 0, strlen(str), 255);
	return true;
}
//============================================//
stock CreateLableText(playerid,lable[],text[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    if(GetPVarInt(playerid, "PlayTime") < 5) return 1;
    new string[256];
    if(GetPVarInt(playerid, "LableDraw") > 0)
    {
        PlayerTextDrawSetString(playerid, LableDraw[playerid],lable);
        format(string, sizeof(string),"~n~~n~%s~n~~n~",text);
        return PlayerTextDrawSetString(playerid, UsedDraw[playerid], string);
    }
	PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
    UsedDraw[playerid] = CreatePlayerTextDraw(playerid,440.000000,173.000000," ");
    PlayerTextDrawUseBox(playerid, UsedDraw[playerid],1);
    PlayerTextDrawBoxColor(playerid, UsedDraw[playerid],0x00000066);
    PlayerTextDrawTextSize(playerid, UsedDraw[playerid],636.000000,308.000000);
    PlayerTextDrawAlignment(playerid, UsedDraw[playerid],0);
    PlayerTextDrawBackgroundColor(playerid, UsedDraw[playerid],0x000000ff);
    PlayerTextDrawFont(playerid, UsedDraw[playerid],2);
    PlayerTextDrawLetterSize(playerid, UsedDraw[playerid],0.300000,1.000000);
    PlayerTextDrawColor(playerid, UsedDraw[playerid],0xffffffff);
    PlayerTextDrawSetOutline(playerid, UsedDraw[playerid],1);
    PlayerTextDrawSetProportional(playerid, UsedDraw[playerid],1);
    PlayerTextDrawSetShadow(playerid, UsedDraw[playerid],1);
    PlayerTextDrawShow(playerid,UsedDraw[playerid]);
    format(string, sizeof(string),"~n~~n~%s~n~~n~",text);
    PlayerTextDrawSetString(playerid, UsedDraw[playerid], string);
    //==========//
    LableDraw[playerid] = CreatePlayerTextDraw(playerid,456.000000,160.000000," ");
	PlayerTextDrawAlignment(playerid, LableDraw[playerid],0);
	PlayerTextDrawBackgroundColor(playerid, LableDraw[playerid],0x000000ff);
	PlayerTextDrawFont(playerid, LableDraw[playerid],1);
	PlayerTextDrawLetterSize(playerid, LableDraw[playerid],0.500000,1.500000);
	PlayerTextDrawColor(playerid, LableDraw[playerid],0xffffffff);
	PlayerTextDrawSetOutline(playerid, LableDraw[playerid],1);
	PlayerTextDrawSetProportional(playerid, LableDraw[playerid],1);
	PlayerTextDrawSetShadow(playerid, LableDraw[playerid],1);
    PlayerTextDrawSetString(playerid, LableDraw[playerid],lable);
    PlayerTextDrawHide(playerid,LableDraw[playerid]);
    PlayerTextDrawShow(playerid,LableDraw[playerid]);
    return SetPVarInt(playerid, "LableDraw", 4);
}
//============================================//
stock GivePlayerWeaponEx(playerid, weaponid, amount)
{
	if(weaponid >= 41 && weaponid <= 46)
	{
	    PlayerInfo[playerid][pPlayerWeapon]=weaponid;
		PlayerInfo[playerid][pPlayerAmmo]=9999;
		GivePlayerWeapon(playerid, weaponid, 9999);
        return 1;
	}
    PlayerInfo[playerid][pPlayerWeapon]=weaponid, PlayerInfo[playerid][pPlayerAmmo]=amount;
    if(weaponid == 23 && amount == 9999) return GivePlayerWeapon(playerid, weaponid, amount);
	if(amount >= 1)
	{
		
		if(weaponid >= 22 && weaponid <= 34)
		{
		    GiveAchievement(playerid, 12);
		}

	    GivePlayerWeapon(playerid, weaponid, amount);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(playerid, 0);
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && weaponid == 24) SetPlayerArmedWeapon(playerid, 0);
	}
	SetTimerEx("LoadHolsters", 2000, false, "i", playerid);
	return 1;
}
//============================================//
stock ResetPlayerWepaonsEx(playerid)
{
    PlayerInfo[playerid][pPlayerWeapon]=0, PlayerInfo[playerid][pPlayerAmmo]=0;
    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN3)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
	ResetPlayerWepaons(playerid);
	SetPVarInt(playerid, "JustChosen", 0);
	return true;
}
//============================================//
stock GivePlayerMoneyEx(playerid, money)
{
	SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	if(GetPVarInt(playerid, "Cash") < 0) SetPVarInt(playerid, "Cash", 0);
	//SetSlidedMoneyBar(playerid);
	GivePlayerMoney(playerid, money);

	if(GetPVarInt(playerid, "Cash") >= 1000000)
	{
		GiveAchievement(playerid, 11);
	}
	return true;
}
stock SetPlayerMoneyEx(playerid, money)
{
	SetPVarInt(playerid, "Cash", money);
	if(GetPVarInt(playerid, "Cash") < 0) SetPVarInt(playerid, "Cash", 0);
	//SetSlidedMoneyBar(playerid);
	GivePlayerMoney(playerid, -GetPlayerMoney(playerid));
	GivePlayerMoney(playerid, money);
	return true;
}

stock SetPlayerMoney(playerid, money)
{
	GivePlayerMoney(playerid, -GetPlayerMoney(playerid));
	GivePlayerMoney(playerid, money);
	return true;
}
//============================================//
stock ResetPlayerMoneyEx(playerid)
{
	DeletePVar(playerid,"Cash");
	//SetSlidedMoneyBar(playerid);
	GivePlayerMoney(playerid, -GetPlayerMoney(playerid));
	return 1;
}
//============================================//
stock GetPlayerMoneyEx(playerid)
{
	return GetPVarInt(playerid, "Cash");
}
//============================================//
stock SetSlidedMoneyBar(playerid)
{
	SetPlayerMoney(playerid, GetPlayerMoneyEx(playerid));

	if(GetPVarInt(playerid, "Cash") >= 1000000)
	{
		GiveAchievement(playerid, 11);
	}
	/*
	switch(GetPVarInt(playerid,"HudCol"))
	{
		case 0: result="~g~~h~";
		case 1: result="~r~~h~";
		case 2: result="~w~~h~";
		case 3: result="~y~~h~";
		case 4: result="~p~~h~";
		case 5: result="~b~~h~";
	}
	if(amount >= 0 && amount <= 9) format(string, sizeof(string),"%s$0000000%d", result, amount);
	if(amount >= 10 && amount <= 99) format(string, sizeof(string),"%s$000000%d", result, amount);
	if(amount >= 100 && amount <= 999) format(string, sizeof(string),"%s$00000%d", result, amount);
	if(amount >= 1000 && amount <= 9999) format(string, sizeof(string),"%s$0000%d", result, amount);
	if(amount >= 10000 && amount <= 99999) format(string, sizeof(string),"%s$000%d", result, amount);
	if(amount >= 100000 && amount <= 999999) format(string, sizeof(string),"%s$00%d", result, amount);
	if(amount >= 1000000 && amount <= 9999999) format(string, sizeof(string),"%s$0%d", result, amount);
    return PlayerTextDrawSetString(playerid, MoneyDraw[playerid], string);
	*/
    return 1;
}
//============================================//
stock PreloadAnimLib(playerid, animlib[]) return ApplyAnimationEx(playerid,animlib,"null",0.0,0,0,0,0,0,1);
//============================================//
stock PlayerToCar(playerid,type,Float:distance)
{
    new Float:x, Float:y, Float:z;
    foreach(new c : VehicleIterator)
	{
        if(IsVehicleStreamedIn(c, playerid))
        {
            GetVehiclePos(c,x,y,z);
            if(IsPlayerInRangeOfPoint(playerid,distance,x,y,z))
            {
			    switch(type)
			    {
			        case 1: return true;
			        case 2: return c;
			    }
            }
        }
    }
    if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}
//============================================//
stock PlayerToPlayer(playerid,targetid,Float:distance)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid,x,y,z);
    if(IsPlayerConnected(targetid)&&IsPlayerInRangeOfPoint(targetid,distance,x,y,z)&&IsPlayerStreamedIn(targetid, playerid))
    {
    	return true;
    }
    if(playerid == targetid)
    {
    	return true;
    }
    return false;
}
//============================================//
stock GiveNameSpace(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]=='_')	str[strl]=' ';
    }
    return 0;
}

stock GiveNameSpaceEx(name[])
{
	new result[MAX_PLAYER_NAME];
	format(result, sizeof(result), "%s", name);

	for(new i = 0; i < strlen(result); i++)
	{
		if(result[i] == '_')
		{
			result[i]= ' ';
		}
	}
    return result;
}

stock RemoveNameSpace(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]==' ')	str[strl]='_';
    }
    return 0;
}
//============================================//
stock PlayerNameEx(playerid) {
	new name[MAX_PLAYER_NAME];
	if(GetPVarInt(playerid, "MaskUse") == 1) {
 		format(name,sizeof(name),"Stranger_%d",GetPVarInt(playerid, "MaskID"));
  		return name;
   	}
    
    format(name, sizeof(name), "%s", PlayerInfo[playerid][pName]);
	return name;
}
//============================================//
stock ClearChatbox(playerid, lines)
{
    for(new i=0; i<lines; i++)
	{
	    SendClientMessage(playerid,COLOR_WHITE, " ");
	}
	return true;
}
//============================================//
stock GetCount()
{
	new count = GetTickCount();
	return count;
}
//============================================//
IsUpper(ch)
{
    if(ch>64&&ch<91) return 1;
    return 0;
}
//============================================//
TooManyCaps(name[])
{
    new Float:caps,num,sz;
    sz=strlen(name[0]);
    while(sz--) {
    if(IsUpper(name[sz])) num++;
    }
    caps=floatdiv(num,float(strlen(name[0])-1));
    caps=floatmul(caps,float(100));
    if(caps>40) return 1;
    return 0;
}
//============================================//
CapsOnEnd(name[])
{
    new sz;
    sz=strlen(name[0]);
    if(IsUpper(name[sz-1])) return 1;
    if(IsUpper(name[FirstSeperationLoc(name[0])-1])) return 1;
    return 0;
}
//============================================//
ConsecutiveCaps(name[])
{
    new sz,lastcaps;
    sz=strlen(name[0]);
    while(sz--) {
    if(IsUpper(name[sz])) {
    if(lastcaps==1) {
    return 1;
    }
    lastcaps=1;
    } else lastcaps=0;
    }
    return 0;
}
//============================================//
TooShortOnEnd(name[])
{
    new pnt;
    pnt=FirstSeperationLoc(name[0]);
    name[pnt]=0;
    if((strlen(name[0])<3)||strlen(name[pnt+1])<3) {
    name[pnt]='_';
	return 1;
	 }
    name[pnt]='_';
    return 0;
}
//============================================//
NumOccurences(str[],ch)
{
    new num=0,strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]==ch) num++;
    }
    return num;
}
//============================================//
IsInvalid(x)
{
    if(x==95) return 0;
    if(x>64&&x<91) return 0;
    if(x>96&&x<123) return 0;
    return 1;
}
//============================================//
FirstSeperationLoc(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]=='_') return strl;
    }
    return 0;
}
//============================================//
InvalidCaps(str[])
{
    if(!IsUpper(str[0])||!IsUpper(str[FirstSeperationLoc(str[0])+1])) return 1;
    return 0;
}
//============================================//
NameIsRP(name[])
{
    new len;
    len=strlen(name[0]);
    if(InvalidCaps(name[0]) || (NumOccurences(name[0],'_') != 1 && NumOccurences(name[0],'_') != 2)) return 0;
    while(len--)
	{
    	if(IsInvalid(name[len])) return 0;
    }
    if(TooManyCaps(name[0])) return 0;
    if(ConsecutiveCaps(name[0])) return 0;
    if(CapsOnEnd(name[0])) return 0;
    if(TooShortOnEnd(name[0])) return 0;
    return 1;
}
//============================================//
stock SetObjectFacePoint(objectid, Float: X, Float: Y)
{
    static
        Float: pX, Float: oX,
        Float: pY, Float: oY,
        Float: oZ
    ;
    GetDynamicObjectRot(objectid, oX, oY, oZ);
    GetDynamicObjectPos(objectid, pX, pY, oZ);

    oZ = ( floatadd(atan2(floatsub(Y, pY), floatsub(X, pX)), 270.0) );

    SetDynamicObjectRot(objectid, oX, oY, oZ);
    return true;
}
//============================================//
stock IsNotAEngineCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 435 || pveh == 441 || pveh == 449 || pveh == 450 || pveh == 464 || 
		pveh == 465 || pveh == 481 || pveh == 501 || pveh == 509 || pveh == 510 ||
		pveh == 537 || pveh == 538 || pveh == 564 || pveh == 569 || pveh == 570 ||
		pveh == 590 || pveh == 591 || pveh == 594 || pveh == 606 || pveh == 607 ||
		pveh == 608 || pveh == 610 || pveh == 611)
    {
        return true;
    }
	return false;
}
//============================================//
stock IsNotAEngineCarEx(pveh)
{
    if(pveh == 435 || pveh == 441 || pveh == 449 || pveh == 450 || pveh == 464 || 
		pveh == 465 || pveh == 481 || pveh == 501 || pveh == 509 || pveh == 510 ||
		pveh == 537 || pveh == 538 || pveh == 564 || pveh == 569 || pveh == 570 ||
		pveh == 590 || pveh == 591 || pveh == 594 || pveh == 606 || pveh == 607 ||
		pveh == 608 || pveh == 610 || pveh == 611)
    {
        return true;
    }
	return false;
}
//============================================//
stock IsBike(vehid)
{
    new pveh = GetVehicleModel(vehid);

    if(pveh == 462 || pveh == 448 || pveh == 581 || pveh == 522 || pveh == 461 || pveh == 521
	|| pveh == 463 || pveh == 586 || pveh == 468 || pveh == 471)
    {
        return true;
    }

	return false;
}
//============================================//
stock CarEngine(idcar,type)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(type)
	{
		case 0: SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		case 1: SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	}
	return 1;
}
//============================================//
stock IsAWindowCar(playerid)
{
    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(pveh >= 400 && pveh <= 423 || pveh >= 425 && pveh <= 429 || pveh >= 431 && pveh <= 434 || pveh >= 436 && pveh <= 438
	|| pveh >= 440 && pveh <= 445 || pveh == 451 || pveh >= 455 && pveh <= 456 || pveh >= 458 && pveh <= 459
	|| pveh >= 466 && pveh <= 467 || pveh >= 469 && pveh <= 470 || pveh >= 474 && pveh <= 475 || pveh >= 477 && pveh <= 479
	|| pveh >= 482 && pveh <= 483 || pveh >= 487 && pveh <= 492 || pveh >= 494 && pveh <= 508 || pveh >= 514 && pveh <= 520
	|| pveh >= 524 && pveh <= 529 || pveh >= 534 && pveh <= 538 || pveh >= 540 && pveh <= 566 || pveh >= 576 && pveh <= 580
	|| pveh == 585 || pveh >= 587 && pveh <= 589 || pveh >= 596 && pveh <= 605)
    {
        return true;
    }
	return false;
}
//============================================//
stock GetPlayerZone(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		return i;
	}
	return false;
}
//============================================//
stock GetZone(Float:x,Float:y,Float:z)
{
	new string[128];
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		{
		    format(string,sizeof(string),"%s",Zones[i][zone_name]);
		    return string;
		}
	}
	return string;
}
//============================================//
stock GetPlayerArea(playerid)
{
	new str[128];
	format(str,sizeof(str),"%s",Zones[GetPlayerZone(playerid)][zone_name]);
	return str;
}
//============================================//
stock PrintTime(amount, time)
{
	new minute = 0, result[50];
	if(amount >= 60)
	{
		new dump = amount, found = 0;
	    for(new i=0;i<time;i++)
	    {
			if(dump >= 60)
			{
			    found++;
			    dump-=60;
			}
	    }
	    amount-=60*found;
	    minute+=found;
	}
	if(amount <= 9) format(result, sizeof(result),"%d:0%d", minute,amount);
	else format(result, sizeof(result),"%d:%d", minute,amount);
	return result;
}
//============================================//
stock PrintTestResult(playerid, status, reason[])
{
	new string[128], cartxt[50], reward = 0, name[MAX_PLAYER_NAME];
    ClearChatbox(playerid, 20);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Los Santos Department Of Motor Vehicles");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
    new maxspeed = floatround(GetPVarFloat(playerid, "TestSpeed")), Float:health;
    GetVehicleHealth(GetPlayerVehicleID(playerid),health);
    new varhp = floatround(health);
    switch(varhp)
    {
        case 800 .. 1000: cartxt = "Fine";
		case 600 .. 799:
		{
		    cartxt = "Normal";
		    reward+=5;
		}
		case 400 .. 599:
		{
		    cartxt = "Moderate";
		    reward+=10;
		}
		case 50 .. 399: cartxt = "Damaged";
    }
    if(maxspeed >= 70) reward+=1;
    else if(maxspeed >= 75) reward+=2;
    else if(maxspeed >= 80) reward+=5;
    else if(maxspeed >= 85) reward+=10;
	switch(GetPVarInt(playerid, "TestTime"))
	{
		case 130 .. 139: reward+=5;
	    case 140 .. 209: reward+=10;
		case 210 .. 300: reward+=20;
	}
    format(string, sizeof(string),"Elapsed time: %s - Max Speed: %d KPH - Vehicle Status: %s.", PrintTime(GetPVarInt(playerid, "TestTime"),20), maxspeed, cartxt);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    switch(status)
    {
		case 1:
		{
	        switch(reward)
	        {
				case 0 .. 10:
				{
				    format(string, sizeof(string),"Status: Passed (Golden Ribbon) - Reason: %s.", reason);
				    //CallRemoteFunction("GiveAchievement", "iii", playerid, 10, 1);
				}
				case 11 .. 20: format(string, sizeof(string),"Status: Passed (Silver Ribbon) - Reason: %s.", reason);
				case 21 .. 100: format(string, sizeof(string),"Status: Passed (Bronze Ribbon) - Reason: %s.", reason);
	        }
		}
		case 2:
		{
		    format(string, sizeof(string),"Status: Failed - Reason: %s.", reason);
		    reward+=20;
		}
    }
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    new overall = 100 - reward;
    format(string, sizeof(string),"Overall Percentage: %d.", overall);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    format(name, sizeof(name), "%s", PlayerInfo[playerid][pUsername]), GiveNameSpace(name);
    format(string, sizeof(string),"Signature: %s.", name);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
    DeletePVar(playerid,"TestTime"), DeletePVar(playerid,"TestSpeed"), DeletePVar(playerid,"DriveTest");
    return true;
}
//============================================//
/*
stock GetPlayerSpeed(playerid, bool:kmh)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}*/

stock GetPlayerSpeed(playerid, bool:kmh)
{
	new Float:Vx, Float:Vy, Float:Vz;

	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), Vx, Vy, Vz);
	}
	else
	{
		GetPlayerVelocity(playerid, Vx, Vy, Vz);
	}

    new Float:rtn;

    rtn = floatsqroot(floatpower(Vx*100,2) + floatpower(Vy*100,2));
    rtn = floatsqroot(floatpower(rtn,2) + floatpower(Vz*100,2));

    if(kmh)
    {
    	return floatround(rtn * 1.61);
    }
    else
    {
    	return floatround(rtn);
    }
}
//============================================//
stock LoadMaps()
{
    new arrCoords[2][128], strFromFile2[128], output;
	new File: file = fopen("PR-RP/mapping/list.ini", io_read);
	if (file)
	{
        while (output < 500)
        {
            fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			if(strlen(arrCoords[0]) >= 4) { LoadMapFile(arrCoords[0], strval(arrCoords[1])); }
            output++;
		}
	}
	fclose(file);

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `maps`");
	mysql_pquery(handlesql, query, "OnMapsLoaded", "");
	return true;
}

stock SaveMap(tag[])
{
	for(new i = 0; i < MAX_MAP_OBJECTS; i++)
	{
		if(MapInfo[i][mObjectID] != 0)
		{
			if(!strcmp(MapInfo[i][mTag], tag))
			{
				new query[256];
				mysql_format(handlesql, query, sizeof(query), "UPDATE `maps` SET ObjectModel=%i, X=%f, Y=%f, Z=%f, rX=%f, rY=%f, rZ=%f, Interior=%i, VirtualWorld=%i WHERE Tag='%s'",
					MapInfo[i][mObjectModel], 
					MapInfo[i][mX], 
					MapInfo[i][mY], 
					MapInfo[i][mZ], 
					MapInfo[i][mrX], 
					MapInfo[i][mrY], 
					MapInfo[i][mrZ],
					MapInfo[i][mInt],
					MapInfo[i][mVw],
					MapInfo[i][mTag]);
				mysql_pquery(handlesql, query);
			}
		}
	}
}

forward OnMapsLoaded();
public OnMapsLoaded()
{
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		MapInfo[i][mID] = cache_get_field_content_int(i, "ID");
		MapInfo[i][mObjectModel] = cache_get_field_content_int(i, "ObjectModel");
		MapInfo[i][mX] = cache_get_field_content_float(i, "X");
		MapInfo[i][mY] = cache_get_field_content_float(i, "Y");
		MapInfo[i][mZ] = cache_get_field_content_float(i, "Z");
		MapInfo[i][mrX] = cache_get_field_content_float(i, "rX");
		MapInfo[i][mrY] = cache_get_field_content_float(i, "rY");
		MapInfo[i][mrZ] = cache_get_field_content_float(i, "rZ");
		MapInfo[i][mInt] = cache_get_field_content_int(i, "Interior");
		MapInfo[i][mVw] = cache_get_field_content_int(i, "VirtualWorld");


		MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
			MapInfo[i][mX], 
			MapInfo[i][mY], 
			MapInfo[i][mZ], 
			MapInfo[i][mrX], 
			MapInfo[i][mrY], 
			MapInfo[i][mrZ], 
			MapInfo[i][mVw], 
			MapInfo[i][mInt]);

		new tag[16];
		cache_get_field_content(i, "Tag", tag);
		format(MapInfo[i][mTag], 16, "%s", tag);
	}
	return 1;
}
//============================================//
stock LoadMapFile(filename[], worldid)
{
    new arrCoords[11][128], strFromFile2[256], str[128], output;
    format(str, 128, "PR-RP/mapping/%s.ini", filename);
	new File: file = fopen(str, io_read), obj;
	if (file)
	{
		new found = 0;
        while (output < 5000)
        {
            fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			if(strval(arrCoords[0]) >= 1)
			{
			    obj = CreateDynamicObjectFix(strval(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]), floatstr(arrCoords[3]), floatstr(arrCoords[4]), floatstr(arrCoords[5]), floatstr(arrCoords[6]), worldid);
			    if(strval(arrCoords[8]) > 0)
			    {
			        SetDynamicObjectMaterial(obj,  strval(arrCoords[7]), strval(arrCoords[8]), arrCoords[9], arrCoords[10], 0xFFFFFFFF);
			    }
				//if(worldid == 0) CreateDynamicObject(strval(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]), floatstr(arrCoords[3]), floatstr(arrCoords[4]), floatstr(arrCoords[5]), floatstr(arrCoords[6]), -1);
				found++;
            }
            output++;
		}
		format(str, 128, "Loaded Mapfile: %s.ini - %d Objects - WorldID: %d.", filename, found, worldid);
		printf(str);
	}
	fclose(file);
	return true;
}
//============================================//
/*stock LoadIntID(id)
{
	new str[128];
    format(str, 128, "PR-RP/ints/%d.ini", id);
    if(DOF2_FileExists(str))
    {
		IntInfo[id][iiVirtualWorldi]=DOF2_GetInt(str, "World");
		IntInfo[id][iiInteriori]=DOF2_GetInt(str, "Int");
		IntInfo[id][iiXo]=DOF2_GetFloat(str, "eX");
		IntInfo[id][iiYo]=DOF2_GetFloat(str, "eY");
		IntInfo[id][iiZo]=DOF2_GetFloat(str, "eZ");
		IntInfo[id][iiXi]=DOF2_GetFloat(str, "xX");
		IntInfo[id][iiYi]=DOF2_GetFloat(str, "xY");
		IntInfo[id][iiZi]=DOF2_GetFloat(str, "xZ");
		IntInfo[id][iiFreeze]=DOF2_GetInt(str, "Freeze");
		strmid(IntInfo[id][iiName], DOF2_GetString(str, "Name"), 0, strlen(DOF2_GetString(str, "Name")), 255);
		//==========//
		format(str, 128, "| %s (%d) |", IntInfo[id][iiName], id);
		//format(str, 128, "| %s |", IntInfo[id][iName]);
		format(str, 128, "Loaded INTfile: %d.ini.", id);
		printf(str);

		new query[512];
		mysql_format(handlesql, query, sizeof(query), "INSERT INTO interiors (Name, VirtualWorldi, Interiori, Xo, Yo, Zo, Xi, Yi, Zi, Freeze) VALUES ('%s', %i, %i, %f, %f, %f, %f, %f, %f, %i)",
			IntInfo[id][iiName], IntInfo[id][iiVirtualWorldi], IntInfo[id][iiInteriori], 
			IntInfo[id][iiXo], IntInfo[id][iiYo], IntInfo[id][iiZo], 
			IntInfo[id][iiXi], IntInfo[id][iiYi], IntInfo[id][iiZi],
			IntInfo[id][iiFreeze]);
		mysql_pquery(handlesql, query, "OnInteriorCreated", "i", id);
    }
	return true;
}*/

stock LoadInteriors()
{
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM interiors");
	mysql_pquery(handlesql, query, "OnInteriorsLoaded");
	
	/*for(new i = 0; i < MAX_INTS; i++)
	{
		LoadIntID(i);
	}*/
	return 1;
}
//============================================//
forward OnInteriorsLoaded();
public OnInteriorsLoaded()
{
	for(new i = 0; i < MAX_INTS; i++)
	{
		if(i < cache_get_row_count())
		{
			new interiorid = i + 1;

			IntInfo[interiorid][iiID] = cache_get_field_content_int(i, "ID");
			cache_get_field_content(i, "Name", IntInfo[interiorid][iiName], handlesql, 32);
			IntInfo[interiorid][iiVirtualWorldo] = cache_get_field_content_int(i, "VirtualWorldo");
			IntInfo[interiorid][iiInterioro] = cache_get_field_content_int(i, "Interioro");
			IntInfo[interiorid][iiVirtualWorldi] = cache_get_field_content_int(i, "VirtualWorldi");
			IntInfo[interiorid][iiInteriori] = cache_get_field_content_int(i, "Interiori");
			IntInfo[interiorid][iiXo] = cache_get_field_content_float(i, "Xo");
			IntInfo[interiorid][iiYo] = cache_get_field_content_float(i, "Yo");
			IntInfo[interiorid][iiZo] = cache_get_field_content_float(i, "Zo");
			IntInfo[interiorid][iiXi] = cache_get_field_content_float(i, "Xi");
			IntInfo[interiorid][iiYi] = cache_get_field_content_float(i, "Yi");
			IntInfo[interiorid][iiZi] = cache_get_field_content_float(i, "Zi");
			IntInfo[interiorid][iiFreeze] = cache_get_field_content_int(i, "Freeze");

			IntInfo[interiorid][iiPickupo] = CreateDynamicPickup(1318, 1, 
				IntInfo[interiorid][iiXo], IntInfo[interiorid][iiYo], IntInfo[interiorid][iiZo], 
				IntInfo[interiorid][iiVirtualWorldo], IntInfo[interiorid][iiInterioro], -1, 75);

			IntInfo[interiorid][iiPickupi] = CreateDynamicPickup(1318, 1, 
				IntInfo[interiorid][iiXi], IntInfo[interiorid][iiYi], IntInfo[interiorid][iiZi], 
				IntInfo[interiorid][iiVirtualWorldi], IntInfo[interiorid][iiInteriori], -1, 75);

			IntInfo[interiorid][iiTextLabelo] = CreateDynamic3DTextLabel(IntInfo[interiorid][iiName], 0xFFFFFFFF, 
				IntInfo[interiorid][iiXo], IntInfo[interiorid][iiYo], IntInfo[interiorid][iiZo] + 0.5, 25.0, 
				INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[interiorid][iiVirtualWorldo], IntInfo[interiorid][iiInterioro], -1, 25);

			new exit_name[64];
			format(exit_name, sizeof(exit_name), "%s Exit", IntInfo[interiorid][iiName]);

			IntInfo[interiorid][iiTextLabeli] = CreateDynamic3DTextLabel(exit_name, 0xFFFFFFFF, 
				IntInfo[interiorid][iiXi], IntInfo[interiorid][iiYi], IntInfo[interiorid][iiZi] + 0.5, 25.0, 
				INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IntInfo[interiorid][iiVirtualWorldi], IntInfo[interiorid][iiInteriori], -1, 25);

			Iter_Add(IntIterator, interiorid);
		}
	}
	return true;
}

forward OnInteriorCreated(interiorid);
public OnInteriorCreated(interiorid)
{
	IntInfo[interiorid][iiID] = cache_insert_id();
	return 1;
}

forward SaveInterior(interiorid);
public SaveInterior(interiorid)
{
	new query[1024];
	mysql_format(handlesql, query, sizeof(query), "UPDATE interiors SET Name='%e', VirtualWorldo=%i, Interioro=%i, VirtualWorldi=%i, Interiori=%i, Xo=%f, Yo=%f, Zo=%f, Xi=%f, Yi=%f, Zi=%f, Freeze=%i WHERE ID=%i",
		IntInfo[interiorid][iiName], IntInfo[interiorid][iiVirtualWorldo], IntInfo[interiorid][iiInterioro], IntInfo[interiorid][iiVirtualWorldi], IntInfo[interiorid][iiInteriori], 
		IntInfo[interiorid][iiXo], IntInfo[interiorid][iiYo], IntInfo[interiorid][iiZo], IntInfo[interiorid][iiXi], IntInfo[interiorid][iiYi], IntInfo[interiorid][iiZi], 
		IntInfo[interiorid][iiFreeze], IntInfo[interiorid][iiID]);
	mysql_pquery(handlesql, query);
	return 1;
}
//============================================//
stock LoadFactions()
{
	for(new i = 1; i < MAX_FACTIONS; i++)
	{
		FactionCP[i] = -1;
	}

	new query[128];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM factions");
	mysql_pquery(handlesql, query, "OnFactionsLoaded");
	return 1;
}
//============================================//
stock SaveFaction(id)
{
	new RankNames[2048];
	new RankBonuses[2048];

	for(new i = 1; i < MAX_FACTION_RANKS; i++)
	{
		if(!isnull(FactionRankInfo[id][i][fRank]))
		{
			if(i == 1)
			{
				format(RankNames, sizeof(RankNames), "%s", FactionRankInfo[id][i][fRank]);
				format(RankBonuses, sizeof(RankBonuses), "%d", FactionRankInfo[id][i][fRankBonus]);
			}
			else
			{
				format(RankNames, sizeof(RankNames), "%s,%s", RankNames, FactionRankInfo[id][i][fRank]);
				format(RankBonuses, sizeof(RankBonuses), "%s,%d", RankBonuses, FactionRankInfo[id][i][fRankBonus]);
			}
		}
	}

	new query[4096];
	mysql_format(handlesql, query, sizeof(query), 
		"UPDATE factions SET Name='%e', MOTD='%e', Rights=%i, TagRights=%i, FactionChat=%i, WarehouseX=%f, WarehouseY=%f, WarehouseZ=%f, WarehouseInterior=%i, WarehouseVirtualWorld=%i, DailyPackages=%i, AvailablePackages=%i WHERE ID=%d", 
		FactionInfo[id][fName], FactionInfo[id][fMOTD], FactionInfo[id][fRights], FactionInfo[id][fTagRights], FactionInfo[id][fFactionChat], 
		FactionInfo[id][fWarehouseX], FactionInfo[id][fWarehouseY], FactionInfo[id][fWarehouseZ], FactionInfo[id][fWarehouseInterior], FactionInfo[id][fWarehouseVirtualWorld], FactionInfo[id][fDailyPackages], FactionInfo[id][fAvailablePackages],
		id);
    mysql_pquery(handlesql, query);

    mysql_format(handlesql, query, sizeof(query), 
		"UPDATE factions SET RankNames='%e', RankBonuses='%e' WHERE ID=%d", 
		RankNames, RankBonuses, 
		id);
    mysql_pquery(handlesql, query);
	return 1;
}
//============================================//
stock LoadBusinesses()
{
	new query[256];
	for(new i = 1; i < MAX_BUSINESSES; i++)
	{
		format(query, sizeof(query), "SELECT * FROM businesses WHERE ID=%d", i);
		mysql_function_query(handlesql, query, true, "LoadBizSQL", "d", i);
	}

	printf("LOADING BUSINESSES...");
	return 1;
}
//============================================//
forward LoadBizSQL(id);
public LoadBizSQL(id)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		new fetch[256];
    	cache_get_field_content(0, "ID", fetch);
		BizInfo[id][ID] = strval(fetch);
		cache_get_field_content(0, "Xo", fetch);
		BizInfo[id][Xo] = floatstr(fetch);
		cache_get_field_content(0, "Yo", fetch);
		BizInfo[id][Yo] = floatstr(fetch);
		cache_get_field_content(0, "Zo", fetch);
		BizInfo[id][Zo] = floatstr(fetch);
		cache_get_field_content(0, "Xi", fetch);
		BizInfo[id][Xi] = floatstr(fetch);
		cache_get_field_content(0, "Yi", fetch);
		BizInfo[id][Yi] = floatstr(fetch);
		cache_get_field_content(0, "Zi", fetch);
		BizInfo[id][Zi] = floatstr(fetch);
		cache_get_field_content(0, "bdXo", fetch);
		BizInfo[id][bbdXo] = floatstr(fetch);
		cache_get_field_content(0, "bdYo", fetch);
		BizInfo[id][bbdYo] = floatstr(fetch);
		cache_get_field_content(0, "bdZo", fetch);
		BizInfo[id][bbdZo] = floatstr(fetch);
		cache_get_field_content(0, "bdXi", fetch);
		BizInfo[id][bbdXi] = floatstr(fetch);
		cache_get_field_content(0, "bdYi", fetch);
		BizInfo[id][bbdYi] = floatstr(fetch);
		cache_get_field_content(0, "bdZi", fetch);
		BizInfo[id][bbdZi] = floatstr(fetch);
		cache_get_field_content(0, "IntIn", fetch);
		BizInfo[id][IntIn] = strval(fetch);
		cache_get_field_content(0, "IntOut", fetch);
		BizInfo[id][IntOut] = strval(fetch);
		cache_get_field_content(0, "VwOut", fetch);
		BizInfo[id][VwOut] = strval(fetch);
		cache_get_field_content(0, "Owned", fetch);
		BizInfo[id][Owned] = strval(fetch);
		cache_get_field_content(0, "Owner", fetch);
		format(BizInfo[id][Owner], 25, fetch);
		cache_get_field_content(0, "Slogan", fetch);
		format(BizInfo[id][Slogan], 128, fetch);
		cache_get_field_content(0, "Name", fetch);
		format(BizInfo[id][Name], 128, fetch);
		cache_get_field_content(0, "Value", fetch);
		BizInfo[id][Value] = strval(fetch);
		cache_get_field_content(0, "Locked", fetch);
		BizInfo[id][Locked] = strval(fetch);
		cache_get_field_content(0, "Closed", fetch);
		BizInfo[id][Closed] = strval(fetch);
		cache_get_field_content(0, "Products", fetch);
		BizInfo[id][Products] = strval(fetch);
		cache_get_field_content(0, "Bank", fetch);
		BizInfo[id][Bank] = strval(fetch);
		cache_get_field_content(0, "bReq", fetch);
		BizInfo[id][bReq] = strval(fetch);
		cache_get_field_content(0, "bProd", fetch);
		BizInfo[id][bProd] = strval(fetch);
		cache_get_field_content(0, "Basic", fetch);
		BizInfo[id][Basic] = strval(fetch);
		cache_get_field_content(0, "Stor", fetch);
		BizInfo[id][Stor] = strval(fetch);
		cache_get_field_content(0, "FurnR", fetch);
  		format(BizInfo[id][FurnR], 128, fetch);
  		cache_get_field_content(0, "CP1", fetch);
		BizInfo[id][CP][0] = floatstr(fetch);
		cache_get_field_content(0, "CP2", fetch);
		BizInfo[id][CP][1] = floatstr(fetch);
		cache_get_field_content(0, "CP3", fetch);
		BizInfo[id][CP][2] = floatstr(fetch);
  		cache_get_field_content(0, "cT", fetch);
		BizInfo[id][cT] = strval(fetch);
		cache_get_field_content(0, "Low", fetch);
		BizInfo[id][Low] = strval(fetch);
		cache_get_field_content(0, "Code", fetch);
		BizInfo[id][Code] = strval(fetch);
		cache_get_field_content(0, "Sprunk", fetch);
		BizInfo[id][Sprunk] = strval(fetch);
		cache_get_field_content(0, "spX", fetch);
		BizInfo[id][spX] = floatstr(fetch);
		cache_get_field_content(0, "spY", fetch);
		BizInfo[id][spY] = floatstr(fetch);
		cache_get_field_content(0, "spZ", fetch);
		BizInfo[id][spZ] = floatstr(fetch);
		cache_get_field_content(0, "spA", fetch);
		BizInfo[id][spA] = floatstr(fetch);
		
		cache_get_field_content(0, "EnterPrice", fetch);
		BizInfo[id][EnterPrice] = strval(fetch);
		
		cache_get_field_content(0, "Actor", fetch);
		BizInfo[id][Actor] = strval(fetch);
		cache_get_field_content(0, "aSkin", fetch);
		BizInfo[id][aSkin] = strval(fetch);
		cache_get_field_content(0, "aX", fetch);
		BizInfo[id][aX] = floatstr(fetch);
		cache_get_field_content(0, "aY", fetch);
		BizInfo[id][aY] = floatstr(fetch);
		cache_get_field_content(0, "aZ", fetch);
		BizInfo[id][aZ] = floatstr(fetch);
		cache_get_field_content(0, "aA", fetch);
		BizInfo[id][aA] = floatstr(fetch);

		new InventoryFetch[1024];

		// Load inventory
		new InventoryItemID[MAX_BUSINESS_SLOTS][64];
		new InventoryItemQuantity[MAX_BUSINESS_SLOTS][64];
		new InventoryItemEx[MAX_BUSINESS_SLOTS][64];
		new InventoryItemSerial[MAX_BUSINESS_SLOTS][64];

		cache_get_field_content(0, "InventoryItemID", InventoryFetch);
		split(InventoryFetch, InventoryItemID, ',');

		cache_get_field_content(0, "InventoryItemQuantity", InventoryFetch);
		split(InventoryFetch, InventoryItemQuantity, ',');

		cache_get_field_content(0, "InventoryItemEx", InventoryFetch);
		split(InventoryFetch, InventoryItemEx, ',');

		cache_get_field_content(0, "InventoryItemSerial", InventoryFetch);
		split(InventoryFetch, InventoryItemSerial, ',');

		for(new i = 0; i < MAX_BUSINESS_SLOTS; i++)
		{
			if(strval(InventoryItemID[i]) >= 1)
			{
				BizInfo[id][InvID][i] = strval(InventoryItemID[i]);
				BizInfo[id][InvQ][i] = strval(InventoryItemQuantity[i]);
				BizInfo[id][InvE][i] = strval(InventoryItemEx[i]);
				BizInfo[id][InvS][i] = strval(InventoryItemSerial[i]);
			}
		}

		BizInfo[id][VwIn] = MAX_INTS + MAX_HOUSES + id;
  		
		BizInfo[id][Icon] = CreateDynamicPickup(1272, 1, BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo], BizInfo[id][VwOut], -1, -1, 75);
		BizInfo[id][bCP] = CreateDynamicCP(BizInfo[id][CP][0], BizInfo[id][CP][1], BizInfo[id][CP][2], 1.0, BizInfo[id][VwIn], -1, -1, 10.0);

		new msg[70];

		format(msg, sizeof(msg), "%s",BizInfo[id][Name]);

		BizInfo[id][Text] = CreateDynamic3DTextLabel(msg, COLOR_WHITE, BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo] + 0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

		if(BizInfo[id][bbdXo] != 0 || BizInfo[id][bbdYo] != 0 || BizInfo[id][bbdZo] != 0)
  		{
  			BizInfo[id][bbdoIcon] = CreateDynamicCP(BizInfo[id][bbdXo], BizInfo[id][bbdYo], BizInfo[id][bbdZo], 1.5, 0, -1, -1, 10.0);
  		}

  		if(BizInfo[id][bbdXi] != 0 || BizInfo[id][bbdYi] != 0 || BizInfo[id][bbdZi] != 0)
  		{
  			BizInfo[id][bbdiIcon] = CreateDynamicCP(BizInfo[id][bbdXi], BizInfo[id][bbdYi], BizInfo[id][bbdZi], 1.5, BizInfo[id][VwIn], -1, -1, 10.0);
  		}

		if(BizInfo[id][Actor] == 1) {
		    new actorid = CreateActor(BizInfo[id][aSkin], BizInfo[id][aX], BizInfo[id][aY], BizInfo[id][aZ], BizInfo[id][aA]);
		    BizInfo[id][ActorID] = actorid;
		    SetActorVirtualWorld(actorid, BizInfo[id][VwIn]);
	        SetActorFacingAngle(actorid, BizInfo[id][aA]);
		}

		strmid(BizInfo[id][bRadio], "None", 0, strlen("None"), 255);

		new query[248];
		format(query, sizeof(query), "SELECT * FROM bizzfurn WHERE BID=%d", id);
		mysql_function_query(handlesql, query, true, "LoadBizFurn", "i", id);

		Iter_Add(BizIterator, id);
	}
	return 1;
}

//============================================//

stock SaveBizes(saveowner)
{
    new query[700];
	foreach(new i : BizIterator)
	{
        if(saveowner == 1)
        {
            mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Owner`='%e' WHERE ID=%d", BizInfo[i][Owner], BizInfo[i][ID]);
            mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
        }
        mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET bReq=%d, bProd=%d, `Xo`=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`bdXo`=%f,`bdYo`=%f,`bdZo`=%f,`bdXi`=%f,`bdYi`=%f,`bdZi`=%f,`IntOut`=%d,`IntIn`=%d WHERE ID=%d",
        BizInfo[i][bReq], BizInfo[i][bProd],
        BizInfo[i][Xo],BizInfo[i][Yo],BizInfo[i][Zo],
        BizInfo[i][Xi],BizInfo[i][Yi],BizInfo[i][Zi],
        BizInfo[i][bbdXo],BizInfo[i][bbdYo],BizInfo[i][bbdZo],
        BizInfo[i][bbdXi],BizInfo[i][bbdYi],BizInfo[i][bbdZi],
        BizInfo[i][IntOut],BizInfo[i][IntIn], BizInfo[i][ID]);
        mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
        
        mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Owned`=%d, Slogan='%e', `Value`=%d, Locked=%d, Closed=%d, Products=%d, EnterPrice=%d, Bank=%d, Basic=%d, Stor=%d, Name='%e',`FurnR`='%e' WHERE ID=%d",
        BizInfo[i][Owned],BizInfo[i][Slogan],
        BizInfo[i][Value],BizInfo[i][Locked],BizInfo[i][Closed],BizInfo[i][Products],BizInfo[i][EnterPrice],
        BizInfo[i][Bank],BizInfo[i][Basic],BizInfo[i][Stor],BizInfo[i][Name],BizInfo[i][FurnR],
        BizInfo[i][ID]);
        mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
        
        mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `CP1`=%f,`CP2`=%f,`CP3`=%f,`cT`=%d,`FurnR`='%e',`Low`=%d,`Code`=%d WHERE ID=%d",
        BizInfo[i][CP][0],BizInfo[i][CP][1],BizInfo[i][CP][2],
        BizInfo[i][cT],BizInfo[i][FurnR],BizInfo[i][Low],BizInfo[i][Code],BizInfo[i][ID]);
        mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
        
        mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Sprunk`=%d,`spX`=%f,`spY`=%f,`spZ`=%f,`spA`=%f WHERE ID=%d",
        BizInfo[i][Sprunk], BizInfo[i][spX], BizInfo[i][spY], BizInfo[i][spZ], BizInfo[i][spA],BizInfo[i][ID]);
        mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
        
        mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Actor`=%d,`aSkin`=%d,`aX`=%f,`aY`=%f,`aZ`=%f,`aA`=%f WHERE ID=%d",
        BizInfo[i][Actor], BizInfo[i][aSkin], BizInfo[i][aX], BizInfo[i][aY], BizInfo[i][aZ], BizInfo[i][aA],BizInfo[i][ID]);
        mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);

		// Saving inventory
		new InventoryItemID[MAX_BUSINESS_SLOTS * 5];
		new InventoryItemQuantity[MAX_BUSINESS_SLOTS * 5];
		new InventoryItemEx[MAX_BUSINESS_SLOTS * 5];
		new InventoryItemSerial[MAX_BUSINESS_SLOTS * 11];

		for(new i2 = 0; i2 < MAX_BUSINESS_SLOTS; i2++)
		{
			if(BizInfo[i][InvID][i2] != 0)
			{
				if(i2 == 0)
				{
			    	format(InventoryItemID, sizeof(InventoryItemID), "%d", BizInfo[i][InvID][i2]);
			    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%d", BizInfo[i][InvQ][i2]);
			    	format(InventoryItemEx, sizeof(InventoryItemEx), "%d", BizInfo[i][InvE][i2]);
			    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%d", BizInfo[i][InvS][i2]);
			    }
			    else
			    {
			    	format(InventoryItemID, sizeof(InventoryItemID), "%s,%d", InventoryItemID, BizInfo[i][InvID][i2]);
			    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%s,%d", InventoryItemQuantity, BizInfo[i][InvQ][i2]);
			    	format(InventoryItemEx, sizeof(InventoryItemEx), "%s,%d", InventoryItemEx, BizInfo[i][InvE][i2]);
			    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%s,%d", InventoryItemSerial, BizInfo[i][InvS][i2]);
				}
			}
		}

		mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `InventoryItemID`='%s', `InventoryItemQuantity`='%s', `InventoryItemEx`='%s', `InventoryItemSerial`='%s' WHERE `ID`=%i",
		InventoryItemID, InventoryItemQuantity, InventoryItemEx, InventoryItemSerial, 
		BizInfo[i][ID]);
 		mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    }
    return 1;
}

stock SaveBizID(i, saveowner = 1)
{
    new query[700];

    if(saveowner == 1) {
        mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Owner`='%e' WHERE ID=%d", BizInfo[i][Owner], BizInfo[i][ID]);
        mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    }
    mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET bReq=%d, bProd=%d, `Xo`=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`bdXo`=%f,`bdYo`=%f,`bdZo`=%f,`bdXi`=%f,`bdYi`=%f,`bdZi`=%f,`IntOut`=%d,`IntIn`=%d WHERE ID=%d",
    BizInfo[i][bReq], BizInfo[i][bProd],
    BizInfo[i][Xo],BizInfo[i][Yo],BizInfo[i][Zo],
    BizInfo[i][Xi],BizInfo[i][Yi],BizInfo[i][Zi],
    BizInfo[i][bbdXo],BizInfo[i][bbdYo],BizInfo[i][bbdZo],
    BizInfo[i][bbdXi],BizInfo[i][bbdYi],BizInfo[i][bbdZi],
    BizInfo[i][IntOut],BizInfo[i][IntIn], BizInfo[i][ID]);
    mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Owned`=%d, Slogan='%e', `Value`=%d, Locked=%d, Closed=%d, Products=%d, EnterPrice=%d, Bank=%d, Basic=%d, Stor=%d, Name='%e',`FurnR`='%e' WHERE ID=%d",
    BizInfo[i][Owned],BizInfo[i][Slogan],
    BizInfo[i][Value],BizInfo[i][Locked],BizInfo[i][Closed],BizInfo[i][Products],BizInfo[i][EnterPrice],
    BizInfo[i][Bank],BizInfo[i][Basic],BizInfo[i][Stor],BizInfo[i][Name],BizInfo[i][FurnR],
    BizInfo[i][ID]);
    mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `CP1`=%f,`CP2`=%f,`CP3`=%f,`cT`=%d,`FurnR`='%e',`Low`=%d,`Code`=%d WHERE ID=%d",
    BizInfo[i][CP][0],BizInfo[i][CP][1],BizInfo[i][CP][2],
    BizInfo[i][cT],BizInfo[i][FurnR],BizInfo[i][Low],BizInfo[i][Code], BizInfo[i][ID]);
    mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Sprunk`=%d,`spX`=%f,`spY`=%f,`spZ`=%f,`spA`=%f WHERE ID=%d",
    BizInfo[i][Sprunk], BizInfo[i][spX], BizInfo[i][spY], BizInfo[i][spZ], BizInfo[i][spA],BizInfo[i][ID]);
    mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `Actor`=%d,`aSkin`=%d,`aX`=%f,`aY`=%f,`aZ`=%f,`aA`=%f WHERE ID=%d",
    BizInfo[i][Actor], BizInfo[i][aSkin], BizInfo[i][aX], BizInfo[i][aY], BizInfo[i][aZ], BizInfo[i][aA],BizInfo[i][ID]);
    mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    
	// Saving inventory
	new InventoryItemID[MAX_BUSINESS_SLOTS * 5];
	new InventoryItemQuantity[MAX_BUSINESS_SLOTS * 5];
	new InventoryItemEx[MAX_BUSINESS_SLOTS * 5];
	new InventoryItemSerial[MAX_BUSINESS_SLOTS * 11];

	for(new i2 = 0; i2 < MAX_BUSINESS_SLOTS; i2++)
	{
		if(BizInfo[i][InvID][i2] != 0)
		{
			if(i2 == 0)
			{
		    	format(InventoryItemID, sizeof(InventoryItemID), "%d", BizInfo[i][InvID][i2]);
		    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%d", BizInfo[i][InvQ][i2]);
		    	format(InventoryItemEx, sizeof(InventoryItemEx), "%d", BizInfo[i][InvE][i2]);
		    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%d", BizInfo[i][InvS][i2]);
		    }
		    else
		    {
		    	format(InventoryItemID, sizeof(InventoryItemID), "%s,%d", InventoryItemID, BizInfo[i][InvID][i2]);
		    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%s,%d", InventoryItemQuantity, BizInfo[i][InvQ][i2]);
		    	format(InventoryItemEx, sizeof(InventoryItemEx), "%s,%d", InventoryItemEx, BizInfo[i][InvE][i2]);
		    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%s,%d", InventoryItemSerial, BizInfo[i][InvS][i2]);
			}
		}
	}

	mysql_format(handlesql, query, sizeof(query), "UPDATE `businesses` SET `InventoryItemID`='%s', `InventoryItemQuantity`='%s', `InventoryItemEx`='%s', `InventoryItemSerial`='%s' WHERE `ID`=%i",
	InventoryItemID, InventoryItemQuantity, InventoryItemEx, InventoryItemSerial, 
	BizInfo[i][ID]);
	mysql_pquery(handlesql, query, "SendQueryBiz", "d", i);
    return 1;
}

//============================================//
stock LoadHouses()
{
	new query[256];
	for(new i = 1; i < MAX_HOUSES; i++)
	{
		format(query, sizeof(query), "SELECT * FROM houses WHERE ID=%i", i);
		mysql_function_query(handlesql, query, true, "LoadHouseSQL", "d", i);
	}

	printf("LOADING HOUSES...");
	return 1;
}
//============================================//

stock LoadHouseID(id)
{
	new query[256];
	format(query, sizeof(query), "SELECT * FROM houses WHERE ID=%d", id);
	mysql_function_query(handlesql, query, true, "LoadHouseSQL", "d", id);
	return 1;
}
//============================================//

stock SaveHouses(saveowner)
{
	new query[700];
	foreach(new i : HouseIterator)
	{
	    if(HouseInfo[i][hValue] > 0)
	    {
			if(saveowner == 1) {
			    mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Owner`='%e' WHERE ID=%d", HouseInfo[i][hOwner], HouseInfo[i][hID]);
			    mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
			}
			
            mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Xo`=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`bdXo`=%f,`bdYo`=%f,`bdZo`=%f,`bdXi`=%f,`bdYi`=%f,`bdZi`=%f,`IntOut`=%d,`IntIn`=%d,`VwOut`=%d,`Owned`=%d,`Value`=%d,`Class`=%d WHERE ID=%d",
			HouseInfo[i][hXo],HouseInfo[i][hYo],HouseInfo[i][hZo],HouseInfo[i][hXi],HouseInfo[i][hYi],HouseInfo[i][hZi],
			HouseInfo[i][hbdXo],HouseInfo[i][hbdYo],HouseInfo[i][hbdZo],HouseInfo[i][hbdXi],HouseInfo[i][hbdYi],HouseInfo[i][hbdZi],
			HouseInfo[i][hIntOut],HouseInfo[i][hIntIn],HouseInfo[i][hVwOut],HouseInfo[i][hOwned],HouseInfo[i][hValue],HouseInfo[i][hClass], HouseInfo[i][hID]);
		    mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);

			mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Garage`=%i, `hgXo`=%f, `hgYo`=%f, `hgZo`=%f, `hgAo`=%f, `gInterior`=%d, `hgXi`=%f, `hgYi`=%f, `hgZi`=%f, `hgAi`=%f WHERE ID=%d",
			HouseInfo[i][Garage],
			HouseInfo[i][hgXo],
			HouseInfo[i][hgYo],
			HouseInfo[i][hgZo],
			HouseInfo[i][hgAo],
			HouseInfo[i][gInterior],
			HouseInfo[i][hgXi],
			HouseInfo[i][hgYi],
			HouseInfo[i][hgZi],
			HouseInfo[i][hgAi], HouseInfo[i][hID]);
			mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);

			//if(HouseInfo[i][hgXo] > 1 || HouseInfo[i][hgXo] < -1) mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
			mysql_escape_string(HouseInfo[i][hFurnR], HouseInfo[i][hFurnR], 1, 25);
			mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `RentFee`=%d,`Basic`=%d,`Insurance`=%d,`LockLvl`=%d,`Alarm`=%d,`FurnR`='%e',`Bank`=%d,`Code`=%d WHERE ID=%d",
			HouseInfo[i][hRentFee], HouseInfo[i][hBasic], HouseInfo[i][hInsurance], HouseInfo[i][hLockLvl], HouseInfo[i][hAlarm], HouseInfo[i][hFurnR], HouseInfo[i][hBank], HouseInfo[i][hCode], HouseInfo[i][hID]);
		    mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
		    
			// Saving inventory
			new InventoryItemID[MAX_HOUSE_SLOTS * 5];
			new InventoryItemQuantity[MAX_HOUSE_SLOTS * 5];
			new InventoryItemEx[MAX_HOUSE_SLOTS * 5];
			new InventoryItemSerial[MAX_HOUSE_SLOTS * 11];

			for(new i2 = 0; i2 < MAX_HOUSE_SLOTS; i2++)
			{
				if(HouseInfo[i][hInvID][i2] != 0)
				{
					if(i2 == 0)
					{
				    	format(InventoryItemID, sizeof(InventoryItemID), "%d", HouseInfo[i][hInvID][i2]);
				    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%d", HouseInfo[i][hInvQ][i2]);
				    	format(InventoryItemEx, sizeof(InventoryItemEx), "%d", HouseInfo[i][hInvE][i2]);
				    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%d", HouseInfo[i][hInvS][i2]);
				    }
				    else
				    {
				    	format(InventoryItemID, sizeof(InventoryItemID), "%s,%d", InventoryItemID, HouseInfo[i][hInvID][i2]);
				    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%s,%d", InventoryItemQuantity, HouseInfo[i][hInvQ][i2]);
				    	format(InventoryItemEx, sizeof(InventoryItemEx), "%s,%d", InventoryItemEx, HouseInfo[i][hInvE][i2]);
				    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%s,%d", InventoryItemSerial, HouseInfo[i][hInvS][i2]);
					}
				}
			}

			mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `InventoryItemID`='%s', `InventoryItemQuantity`='%s', `InventoryItemEx`='%s', `InventoryItemSerial`='%s' WHERE `ID`=%i",
			InventoryItemID, InventoryItemQuantity, InventoryItemEx, InventoryItemSerial, 
			HouseInfo[i][hID]);
	 		mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);


	 		// Saving skins
	 		new Skins[MAX_HOUSE_SKINS * 4];

	 		for(new i2 = 0; i2 < MAX_HOUSE_SKINS; i2++)
			{
				if(i2 == 0)
				{
			    	format(Skins, sizeof(Skins), "%d", HouseInfo[i][hSkin][i2]);
			    }
			    else
			    {
			    	format(Skins, sizeof(Skins), "%s,%d", Skins, HouseInfo[i][hSkin][i2]);
			    }
			}

	        mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Skins`='%s' WHERE `ID`=%i", 
	        Skins, 
	        HouseInfo[i][hID]);
			mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
		}
	}
	return 1;
}

stock SaveHouseID(i, saveowner = 1)
{
	new query[700];
	if(HouseInfo[i][hValue] > 0)
	{
		if(saveowner == 1)
		{
			mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Owner`='%e' WHERE ID=%d", HouseInfo[i][hOwner], HouseInfo[i][hID]);
		    mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
		}
		
		mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Xo`=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`bdXo`=%f,`bdYo`=%f,`bdZo`=%f,`bdXi`=%f,`bdYi`=%f,`bdZi`=%f,`IntOut`=%d,`IntIn`=%d,`VwOut`=%d,`Owned`=%d,`Value`=%d,`Class`=%d WHERE `ID`=%d",
		HouseInfo[i][hXo],HouseInfo[i][hYo],HouseInfo[i][hZo],HouseInfo[i][hXi],HouseInfo[i][hYi],HouseInfo[i][hZi],
		HouseInfo[i][hbdXo],HouseInfo[i][hbdYo],HouseInfo[i][hbdZo],HouseInfo[i][hbdXi],HouseInfo[i][hbdYi],HouseInfo[i][hbdZi],
		HouseInfo[i][hIntOut],HouseInfo[i][hIntIn],HouseInfo[i][hVwOut],HouseInfo[i][hOwned],HouseInfo[i][hValue],HouseInfo[i][hClass], HouseInfo[i][hID]);
		mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);

		mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Garage`=%i, `hgXo`=%f, `hgYo`=%f, `hgZo`=%f, `hgAo`=%f, `gInterior`=%d, `hgXi`=%f, `hgYi`=%f, `hgZi`=%f, `hgAi`=%f WHERE `ID`=%d",
		HouseInfo[i][Garage],
		HouseInfo[i][hgXo],
		HouseInfo[i][hgYo],
		HouseInfo[i][hgZo],
		HouseInfo[i][hgAo],
		HouseInfo[i][gInterior],
		HouseInfo[i][hgXi],
		HouseInfo[i][hgYi],
		HouseInfo[i][hgZi],
		HouseInfo[i][hgAi], HouseInfo[i][hID]);
		mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
		
	    //if(HouseInfo[i][hgX] > 1 || HouseInfo[i][hgX] < -1) mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
	    mysql_escape_string(HouseInfo[i][hFurnR], HouseInfo[i][hFurnR], 1, 25);
	    
	    mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `RentFee`=%d,`Basic`=%d,`Insurance`=%d,`LockLvl`=%d,`Alarm`=%d,`FurnR`='%e',`Bank`=%d,`Code`=%d WHERE `ID`=%d",
		HouseInfo[i][hRentFee], HouseInfo[i][hBasic], HouseInfo[i][hInsurance], HouseInfo[i][hLockLvl], HouseInfo[i][hAlarm], HouseInfo[i][hFurnR], HouseInfo[i][hBank], HouseInfo[i][hCode], HouseInfo[i][hID]);
		mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);

		// Saving inventory
		new InventoryItemID[MAX_HOUSE_SLOTS * 5];
		new InventoryItemQuantity[MAX_HOUSE_SLOTS * 5];
		new InventoryItemEx[MAX_HOUSE_SLOTS * 5];
		new InventoryItemSerial[MAX_HOUSE_SLOTS * 11];

		for(new i2 = 0; i2 < MAX_HOUSE_SLOTS; i2++)
		{
			if(HouseInfo[i][hInvID][i2] != 0)
			{
				if(i2 == 0)
				{
			    	format(InventoryItemID, sizeof(InventoryItemID), "%d", HouseInfo[i][hInvID][i2]);
			    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%d", HouseInfo[i][hInvQ][i2]);
			    	format(InventoryItemEx, sizeof(InventoryItemEx), "%d", HouseInfo[i][hInvE][i2]);
			    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%d", HouseInfo[i][hInvS][i2]);
			    }
			    else
			    {
			    	format(InventoryItemID, sizeof(InventoryItemID), "%s,%d", InventoryItemID, HouseInfo[i][hInvID][i2]);
			    	format(InventoryItemQuantity, sizeof(InventoryItemQuantity), "%s,%d", InventoryItemQuantity, HouseInfo[i][hInvQ][i2]);
			    	format(InventoryItemEx, sizeof(InventoryItemEx), "%s,%d", InventoryItemEx, HouseInfo[i][hInvE][i2]);
			    	format(InventoryItemSerial, sizeof(InventoryItemSerial), "%s,%d", InventoryItemSerial, HouseInfo[i][hInvS][i2]);
				}
			}
		}

		mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `InventoryItemID`='%s', `InventoryItemQuantity`='%s', `InventoryItemEx`='%s', `InventoryItemSerial`='%s' WHERE `ID`=%i",
		InventoryItemID, InventoryItemQuantity, InventoryItemEx, InventoryItemSerial, 
		HouseInfo[i][hID]);
 		mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);


 		// Saving skins
 		new Skins[MAX_HOUSE_SKINS * 4];

 		for(new i2 = 0; i2 < MAX_HOUSE_SKINS; i2++)
		{
			if(i2 == 0)
			{
		    	format(Skins, sizeof(Skins), "%d", HouseInfo[i][hSkin][i2]);
		    }
		    else
		    {
		    	format(Skins, sizeof(Skins), "%s,%d", Skins, HouseInfo[i][hSkin][i2]);
		    }
		}

        mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Skins`='%s' WHERE `ID`=%d", 
        Skins, 
        HouseInfo[i][hID]);
		mysql_pquery(handlesql, query, "SendQueryHouse", "d", i);
	}
	return 1;
}

//============================================//
forward LoadHouseSQL(id);
public LoadHouseSQL(id)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		new fetch[256];
    	cache_get_field_content(0, "ID", fetch);
		HouseInfo[id][hID]= strval(fetch);
		cache_get_field_content(0, "Xo", fetch);
		HouseInfo[id][hXo]= floatstr(fetch);
		cache_get_field_content(0, "Yo", fetch);
		HouseInfo[id][hYo]= floatstr(fetch);
		cache_get_field_content(0, "Zo", fetch);
		HouseInfo[id][hZo]= floatstr(fetch);
		cache_get_field_content(0, "Xi", fetch);
		HouseInfo[id][hXi]= floatstr(fetch);
		cache_get_field_content(0, "Yi", fetch);
		HouseInfo[id][hYi]= floatstr(fetch);
		cache_get_field_content(0, "Zi", fetch);
		HouseInfo[id][hZi]= floatstr(fetch);
		cache_get_field_content(0, "bdXo", fetch);
		HouseInfo[id][hbdXo]= floatstr(fetch);
		cache_get_field_content(0, "bdYo", fetch);
		HouseInfo[id][hbdYo]= floatstr(fetch);
		cache_get_field_content(0, "bdZo", fetch);
		HouseInfo[id][hbdZo]= floatstr(fetch);
		cache_get_field_content(0, "bdXi", fetch);
		HouseInfo[id][hbdXi]= floatstr(fetch);
		cache_get_field_content(0, "bdYi", fetch);
		HouseInfo[id][hbdYi]= floatstr(fetch);
		cache_get_field_content(0, "bdZi", fetch);
		HouseInfo[id][hbdZi]= floatstr(fetch);
		cache_get_field_content(0, "IntOut", fetch);
		HouseInfo[id][hIntOut]= strval(fetch);
		cache_get_field_content(0, "IntIn", fetch);
		HouseInfo[id][hIntIn]= strval(fetch);
		cache_get_field_content(0, "VwOut", fetch);
		HouseInfo[id][hVwOut]= strval(fetch);
		cache_get_field_content(0, "Owned", fetch);
		HouseInfo[id][hOwned]= strval(fetch);
		cache_get_field_content(0, "Owner", fetch);
  		format(HouseInfo[id][hOwner], 128, fetch);
		cache_get_field_content(0, "Value", fetch);
		HouseInfo[id][hValue]= strval(fetch);
		cache_get_field_content(0, "Locked", fetch);
		HouseInfo[id][hLocked]= strval(fetch);
		cache_get_field_content(0, "Radio", fetch);
		HouseInfo[id][hRadio]= strval(fetch);
		cache_get_field_content(0, "TV", fetch);
		HouseInfo[id][hTV]= strval(fetch);
		cache_get_field_content(0, "Class", fetch);
		HouseInfo[id][hClass]= strval(fetch);

		HouseInfo[id][Garage] = cache_get_field_content_int(0, "Garage");
		cache_get_field_content(0, "hgXo", fetch);
		HouseInfo[id][hgXo]= floatstr(fetch);
		cache_get_field_content(0, "hgYo", fetch);
		HouseInfo[id][hgYo]= floatstr(fetch);
		cache_get_field_content(0, "hgZo", fetch);
		HouseInfo[id][hgZo]= floatstr(fetch);
		cache_get_field_content(0, "hgAo", fetch);
		HouseInfo[id][hgAo]= floatstr(fetch);
		cache_get_field_content(0, "gInterior", fetch);
		HouseInfo[id][gInterior]= strval(fetch);
		cache_get_field_content(0, "hgXi", fetch);
		HouseInfo[id][hgXi]= floatstr(fetch);
		cache_get_field_content(0, "hgYi", fetch);
		HouseInfo[id][hgYi]= floatstr(fetch);
		cache_get_field_content(0, "hgZi", fetch);
		HouseInfo[id][hgZi]= floatstr(fetch);
		cache_get_field_content(0, "hgAi", fetch);
		HouseInfo[id][hgAi]= floatstr(fetch);
		cache_get_field_content(0, "RentFee", fetch);
		HouseInfo[id][hRentFee]= strval(fetch);
		
		cache_get_field_content(0, "Basic", fetch);
		HouseInfo[id][hBasic]= strval(fetch);
		cache_get_field_content(0, "Insurance", fetch);
		HouseInfo[id][hInsurance]= strval(fetch);
		cache_get_field_content(0, "LockLvl", fetch);
		HouseInfo[id][hLockLvl]= strval(fetch);
		cache_get_field_content(0, "Alarm", fetch);
		HouseInfo[id][hAlarm]= strval(fetch);
		cache_get_field_content(0, "FurnR", fetch);
  		format(HouseInfo[id][hFurnR], 128, fetch);
  		cache_get_field_content(0, "Bank", fetch);
		HouseInfo[id][hBank]= strval(fetch);
		cache_get_field_content(0, "Code", fetch);
		HouseInfo[id][hCode]= strval(fetch);

		new InventoryFetch[1024];

		// Load inventory
		new InventoryItemID[MAX_HOUSE_SLOTS][5];
		new InventoryItemQuantity[MAX_HOUSE_SLOTS][5];
		new InventoryItemEx[MAX_HOUSE_SLOTS][5];
		new InventoryItemSerial[MAX_HOUSE_SLOTS][11];

		cache_get_field_content(0, "InventoryItemID", InventoryFetch);
		split(InventoryFetch, InventoryItemID, ',');

		cache_get_field_content(0, "InventoryItemQuantity", InventoryFetch);
		split(InventoryFetch, InventoryItemQuantity, ',');

		cache_get_field_content(0, "InventoryItemEx", InventoryFetch);
		split(InventoryFetch, InventoryItemEx, ',');

		cache_get_field_content(0, "InventoryItemSerial", InventoryFetch);
		split(InventoryFetch, InventoryItemSerial, ',');

		for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
		{
			if(strval(InventoryItemID[i]) != 0)
			{
				HouseInfo[id][hInvID][i] = strval(InventoryItemID[i]);
				HouseInfo[id][hInvQ][i] = strval(InventoryItemQuantity[i]);
				HouseInfo[id][hInvE][i] = strval(InventoryItemEx[i]);
				HouseInfo[id][hInvS][i] = strval(InventoryItemSerial[i]);
			}
		}

		// Load skins
		new Skins[MAX_HOUSE_SKINS][4];

		cache_get_field_content(0, "Skins", InventoryFetch);
		split(InventoryFetch, Skins, ',');

		for(new i = 0; i < MAX_HOUSE_SKINS; i++)
		{
			HouseInfo[id][hSkin][i] = strval(Skins[i]);
		}

		HouseInfo[id][hVwIn] = MAX_INTS + id;
		
		//CreateDynamicMapIcon(HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo], 31, COLOR_YELLOW, HouseInfo[id][hVwOut], 0, -1, 10.0);
  		//HouseInfo[id][hIcon]=CreateDynamicPickup(1273, 1, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo],HouseInfo[id][hVwOut]);
  		HouseInfo[id][hIcon] = CreateDynamicCP(HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo], 1.5, HouseInfo[id][hVwOut], -1, -1, 20.0);
  		HouseInfo[id][hIconi] = CreateDynamicCP(HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi], 1.5, HouseInfo[id][hVwIn], -1, -1, 20.0);

  		if(HouseInfo[id][Garage] != 0)
  		{
  			//HouseInfo[id][gIcon] = CreateDynamicCP(HouseInfo[id][hgXo], HouseInfo[id][hgYo], HouseInfo[id][hgZo], 3.0, HouseInfo[id][hVwOut], -1, -1, 10.0);
  		}

  		if(HouseInfo[id][hbdXo] != 0 || HouseInfo[id][hbdYo] != 0 || HouseInfo[id][hbdZo] != 0)
  		{
  			HouseInfo[id][hbdoIcon] = CreateDynamicCP(HouseInfo[id][hbdXo], HouseInfo[id][hbdYo], HouseInfo[id][hbdZo], 1.5, HouseInfo[id][hVwOut], -1, -1, 20.0);
  		}

  		if(HouseInfo[id][hbdXi] != 0 || HouseInfo[id][hbdYi] != 0 || HouseInfo[id][hbdZi] != 0)
  		{
  			HouseInfo[id][hbdiIcon] = CreateDynamicCP(HouseInfo[id][hbdXi], HouseInfo[id][hbdYi], HouseInfo[id][hbdZi], 1.5, HouseInfo[id][hVwIn], -1, -1, 20.0);
  		}

		new query[248];
		format(query, sizeof(query), "SELECT * FROM housefurn WHERE HID=%d", id);
		mysql_function_query(handlesql, query, true, "LoadFurn", "i", id);

		Iter_Add(HouseIterator, id);
    }
	return 1;
}
//============================================//
stock split(const strsrc[], strdest[][], delimiter = '|')
{
	new i, li, aNum, len, srclen = strlen(strsrc);
	while(i <= srclen)
	{
		if (strsrc[i] == delimiter || i == srclen)
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i + 1;
			aNum++;
		}
		i++;
	}
	return 1;
}
//============================================//
public TogglePlayerControllableEx(playerid, option)
{
	TogglePlayerControllable(playerid, option);
	return true;
}
//============================================//
stock CheckSex(playerid)
{
    new stext[5];
	switch(GetPVarInt(playerid, "Sex"))
	{
        case 1: stext = "his";
	    case 2: stext = "her";
	    default: stext = "his";
	}
    return stext;
}
//============================================//
stock GetCharge(playerid, type)
{
	switch(type)
	{
	    case 1: return GetPVarInt(playerid, "Cash");
	    case 2: return GetPVarInt(playerid, "Bank");
	}
	return true;
}
//============================================//
stock GiveCharge(playerid, money, type)
{
	switch(type)
	{
	    case 1:
	    {
	        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	        if(GetPVarInt(playerid, "Cash") < 0) SetPVarInt(playerid, "Cash", 0);
	        SetSlidedMoneyBar(playerid);
	    }
	    case 2:
	    {
	        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+money);
	        if(GetPVarInt(playerid, "Bank") < 0) SetPVarInt(playerid, "Bank", 0);
	    }
	}
	return true;
}
//============================================//
public PurchaseItem(playerid, type, listitem, charge)
{
	new string[128];
    DeletePVar(playerid, "PDBT");
	switch(type)
	{
	    case 1:
	    {
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(StoreItems[listitem][0] >= 300 && StoreItems[listitem][0] <= 302)
		    {
		        if(GetPVarInt(playerid, "Age") <= 20) return SendClientMessage(playerid, COLOR_WHITE, "You are underaged to purchase this item!");
		    }
		    if(GetCharge(playerid, charge) >= StoreItems[listitem][1])
		    {
		        if(StoreItems[listitem][0] != 407 && StoreItems[listitem][0] != 41) {
				GiveInvItem(playerid, StoreItems[listitem][0], PrintIQ(StoreItems[listitem][0]), 0); }
				new gc = charge, id = StoreItems[listitem][0];
				if(GetPVarInt(playerid, "MonthDon") > 0) {
				    if(id == 404 || id == 405 || id == 408) {
				    scm(playerid, COLOR_ERROR, "Subscription Notice: This item will not be free to avoid pawnshop abusing.");
				    } else {
				        gc=0;
				    }
				}
				if(gc > 0) {
		        GiveCharge(playerid, -StoreItems[listitem][1], charge); }
		        format(string, 128, "%s purchased for %s!", PrintIName(StoreItems[listitem][0]), FormatMoney(StoreItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(StoreItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizProduct(GetPVarInt(playerid, "BizEnter"));
		        if(GetPVarInt(playerid, "MonthDon") == 0) BizTill(GetPVarInt(playerid, "BizEnter"), StoreItems[listitem][1]/2);
	            if(StoreItems[listitem][0] == 407) //Lotery ticket
	            {
	                ShowPlayerDialogEx(playerid, 418, DIALOG_STYLE_INPUT, "Lottery ticket", "What number would you like your ticket to be? \nInsert any number between 1-100", "Submit","");
	            }
	            if(StoreItems[listitem][0] == 41) // Spraycan
		        {
				    GiveInvItem(playerid, StoreItems[listitem][0], 500, 0);
				}
	        }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 2:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetCharge(playerid, charge) >= BurgerItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
		        GiveInvItem(playerid, BurgerItems[listitem][0], PrintIQ(BurgerItems[listitem][0]), 0);
		        if(GetPVarInt(playerid, "MonthDon") == 0) GiveCharge(playerid, -BurgerItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(BurgerItems[listitem][0]), FormatMoney(BurgerItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(BurgerItems[listitem][1]));
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
					foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (BurgerItems[listitem][1] / 3);
					            }
							}
						}
		            }
	            }
		        GameTextForPlayer(playerid, string, 5000, 1);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 3:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetCharge(playerid, charge) >= PizzaItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
		        GiveInvItem(playerid, PizzaItems[listitem][0], PrintIQ(PizzaItems[listitem][0]), 0);
		        if(GetPVarInt(playerid, "MonthDon") == 0)GiveCharge(playerid, -PizzaItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(PizzaItems[listitem][0]), FormatMoney(PizzaItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(PizzaItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
					foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (PizzaItems[listitem][1] / 3);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 4:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetCharge(playerid, charge) >= CluckItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
		        GiveInvItem(playerid, CluckItems[listitem][0], PrintIQ(CluckItems[listitem][0]), 0);
		        if(GetPVarInt(playerid, "MonthDon") == 0)GiveCharge(playerid, -CluckItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(CluckItems[listitem][0]), FormatMoney(CluckItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(CluckItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
					foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (CluckItems[listitem][1] / 3);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 5:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS!");
		    if(IsPrimary(AmmuItems[listitem][0]) && PrimaryWeapon(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You already have a primary weapon!");
		    if(IsSecond(AmmuItems[listitem][0]) && SecondWeapon(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You already have a secondary weapon!");
		    if(GetCharge(playerid, charge) >= AmmuItems[listitem][1])
		    {
		    	switch(AmmuItems[listitem][0])
				{
				    case 22 .. 33:
				    {
				        new weaponlimit = 1;
				        if(GetPVarInt(playerid, "LicGuns") >= weaponlimit)
				        {
				            if(GetPVarInt(playerid, "LicTime") == 0) SetPVarInt(playerid, "LicTime", 3);
							format(string, sizeof(string), "You currently bought over (%d) weapons you must wait (%d) paydays!", weaponlimit, GetPVarInt(playerid, "LicTime"));
							SendClientMessage(playerid, COLOR_WHITE, string);
							return 1;
						}
						SetPVarInt(playerid, "LicGuns", GetPVarInt(playerid, "LicGuns")+1);
				    }
				}

				if(GetPVarInt(playerid, "MonthDon") == 1) GiveCharge(playerid, -AmmuItems[listitem][1] / 3, charge);
			 	else GiveCharge(playerid, -AmmuItems[listitem][1], charge);
				GiveInvItem(playerid, AmmuItems[listitem][0], PrintIQ(AmmuItems[listitem][0]), 0, GetPVarInt(playerid, "WepSerial"));
		        format(string, 128, "%s purchased for %s!", PrintIName(AmmuItems[listitem][0]), FormatMoney(AmmuItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(AmmuItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);

		        ServerLog(LOG_GUN_BUY, PlayerInfo[playerid][pUsername], PrintIName(AmmuItems[listitem][0]));

		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
					foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (AmmuItems[listitem][1] / 4);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 6:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(BarItems[listitem][0] >= 300 && BarItems[listitem][0] <= 302)
		    {
		        if(GetPVarInt(playerid, "Age") <= 20) return SendClientMessage(playerid, COLOR_WHITE, "You are underaged to purchase this item!");
		    }
		    if(GetCharge(playerid, charge) >= BarItems[listitem][1])
		    {
		        GiveInvItem(playerid, BarItems[listitem][0], PrintIQ(BarItems[listitem][0]), 0);
		        GiveCharge(playerid, -BarItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(BarItems[listitem][0]), FormatMoney(BarItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(BarItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizProduct(GetPVarInt(playerid, "BizEnter"));
		        BizTill(GetPVarInt(playerid, "BizEnter"), BarItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 7:
		{
		    if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS!");
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetCharge(playerid, charge) >= SexItems[listitem][1])
		    {
		        GiveInvItem(playerid, SexItems[listitem][0], 1, 0);
		        GiveCharge(playerid, -SexItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(SexItems[listitem][0]), FormatMoney(SexItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(SexItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizProduct(GetPVarInt(playerid, "BizEnter"));
		        BizTill(GetPVarInt(playerid, "BizEnter"), SexItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 8:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");

		    if(WarItems[listitem][0] == 428)
		    {
                if(GetCharge(playerid, charge) >= WarItems[listitem][1])
		        {
		            GiveInvItem(playerid, WarItems[listitem][0], 1, GetPVarInt(playerid, "HouseKey"));
		            format(string, 128, "%s purchased for %s!", PrintIName(WarItems[listitem][0]), FormatMoney(WarItems[listitem][1]));
		            SendClientMessage(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string),"~r~-%s", FormatMoney(WarItems[listitem][1]));
		            GameTextForPlayer(playerid, string, 5000, 1);
		            GiveCharge(playerid, -WarItems[listitem][1], charge);
		            BizTill(GetPVarInt(playerid, "BizEnter"), WarItems[listitem][1]/2);
		        }
		        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    	return 1;
		    }
		    else if(WarItems[listitem][0] == 429)
		    {
                if(GetCharge(playerid, charge) >= WarItems[listitem][1])
		        {
		            GiveInvItem(playerid, WarItems[listitem][0], 1, GetPVarInt(playerid, "BizKey"));
		            format(string, 128, "%s purchased for %s!", PrintIName(WarItems[listitem][0]), FormatMoney(WarItems[listitem][1]));
		            SendClientMessage(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string),"~r~-%s", FormatMoney(WarItems[listitem][1]));
		            GameTextForPlayer(playerid, string, 5000, 1);
		            GiveCharge(playerid, -WarItems[listitem][1], charge);
		            BizTill(GetPVarInt(playerid, "BizEnter"), WarItems[listitem][1]/2);
		        }
		        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    	return 1;
		    }
		    else if(WarItems[listitem][0] == 430)
		    {
                if(GetCharge(playerid, charge) >= WarItems[listitem][1])
		        {
		            new query[128];
					mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
					mysql_pquery(handlesql, query, "OnSelectWarehouseVehicle", "ii", playerid, listitem);

		            format(string, 128, "%s purchased for %s!", PrintIName(WarItems[listitem][0]), FormatMoney(WarItems[listitem][1]));
		            SendClientMessage(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string),"~r~-%s", FormatMoney(WarItems[listitem][1]));
		            GameTextForPlayer(playerid, string, 5000, 1);
		            GiveCharge(playerid, -WarItems[listitem][1], charge);
		            BizTill(GetPVarInt(playerid, "BizEnter"), WarItems[listitem][1]/2);
		        }
		        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		    	return 1;
		    }

		    if(WarItems[listitem][0] >= 801 && WarItems[listitem][0] <= 803)
		    {
                if(GetCharge(playerid, charge) >= WarItems[listitem][1])
		        {
		            GiveInvItem(playerid, WarItems[listitem][0], 1, 0);
		            format(string, 128, "%s purchased for %s!", PrintIName(WarItems[listitem][0]), FormatMoney(WarItems[listitem][1]));
		            SendClientMessage(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string),"~r~-%s", FormatMoney(WarItems[listitem][1]));
		            GameTextForPlayer(playerid, string, 5000, 1);
		            GiveCharge(playerid, -WarItems[listitem][1], charge);
		            BizTill(GetPVarInt(playerid, "BizEnter"), WarItems[listitem][1]/2);
		        }
		        else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		        return 1;
		    }
		    if(GetCharge(playerid, charge) >= WarItems[listitem][1])
		    {
				if(WarItems[listitem][0] == 4) {
				    if(GetPVarInt(playerid, "ConnectTime") < 75) return scm(playerid, COLOR_ERROR, "You need up to (150) TLS to purchase a knife!");
				}
		        if(WarItems[listitem][0] == 43) GiveInvItem(playerid, WarItems[listitem][0], 50, 0);
		        else if(WarItems[listitem][0] == 406) GiveInvItem(playerid, WarItems[listitem][0], 5, 0);
		        else GiveInvItem(playerid, WarItems[listitem][0], 1, 0);
		        GiveCharge(playerid, -WarItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(WarItems[listitem][0]), FormatMoney(WarItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(WarItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizProduct(GetPVarInt(playerid, "BizEnter"));
		        BizTill(GetPVarInt(playerid, "BizEnter"), WarItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 9:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetCharge(playerid, charge) >= DonutItems[listitem][1])
		    {
		        GiveInvItem(playerid, DonutItems[listitem][0], 1, 0);
		        GiveCharge(playerid, -DonutItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(DonutItems[listitem][0]), FormatMoney(DonutItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(DonutItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizProduct(GetPVarInt(playerid, "BizEnter"));
		        BizTill(GetPVarInt(playerid, "BizEnter"), DonutItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 10:
		{
			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_ERROR, "Insufficient TLS!");
		    if(GetCharge(playerid, charge) >= AmmoItems[listitem][1])
		    {
				if(GetPVarInt(playerid, "MonthDon") == 1) GiveCharge(playerid, -AmmoItems[listitem][1] / 3, charge);
			 	else GiveCharge(playerid, -AmmoItems[listitem][1], charge);
				GiveInvItem(playerid, AmmoItems[listitem][0], PrintIQ(AmmoItems[listitem][0]), 0, GetPVarInt(playerid, "WepSerial"));
		        format(string, 128, "%s purchased for %s!", PrintIName(AmmoItems[listitem][0]), FormatMoney(AmmoItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(AmmoItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);

		        ServerLog(LOG_AMMO_BUY, PlayerInfo[playerid][pUsername], PrintIName(AmmoItems[listitem][0]));

		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
					foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwIn])
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (AmmoItems[listitem][1] / 4);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
		}
		case 11:
		{
			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetCharge(playerid, charge) >= FishItems[listitem][1])
		    {
		        switch(listitem)
		        {
		        	case 0: GiveInvItem(playerid, FishItems[listitem][0], 1, 0);
		        	case 1: GiveInvItem(playerid, FishItems[listitem][0], 5, 0);
		        	case 2: GiveInvItem(playerid, FishItems[listitem][0], 25, 0);
		        }
		        GiveCharge(playerid, -FishItems[listitem][1], charge);
		        format(string, 128, "%s purchased for %s!", PrintIName(FishItems[listitem][0]), FormatMoney(FishItems[listitem][1]));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(FishItems[listitem][1]));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizProduct(GetPVarInt(playerid, "BizEnter"));
		        BizTill(GetPVarInt(playerid, "BizEnter"), FishItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
	}
	return true;
}
//============================================//
stock SendBankDialog(playerid, type)
{
	new string[256];
	switch(type)
	{
	    case 1: format(string, sizeof(string),"Enter the amount of money you would like to deposit into your bank account.\n{FF0000}Able to deposit up to %s.", FormatMoney(GetPlayerMoneyEx(playerid))), ShowPlayerDialogEx(playerid,12,DIALOG_STYLE_INPUT,"Bank Deposit",string,"Deposit", "Go Back");
	    case 2: format(string, sizeof(string),"Enter the amount of money you would like to withdraw from your bank account.\n{FF0000}Able to withdraw up to %s.", FormatMoney(GetPVarInt(playerid, "Bank"))), ShowPlayerDialogEx(playerid,13,DIALOG_STYLE_INPUT,"Bank Withdraw",string,"Withdraw", "Go Back");
	    case 3: format(string, sizeof(string),"Enter the amount of money you would like to withdraw from your bank account.\n{FF0000}Able to withdraw up to %s.", FormatMoney(GetPVarInt(playerid, "Bank"))), ShowPlayerDialogEx(playerid,14,DIALOG_STYLE_INPUT,"ATM Withdraw",string,"Withdraw", "Close");
	}
	return true;
}
//============================================//
stock IsAtGasStation(playerid)
{
    for(new h = 0; h < sizeof(GasStations); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,7.0,GasStations[h][0], GasStations[h][1], GasStations[h][2])) return true;
	}
	return false;
}
//============================================//
stock OwnableVehicle(key)
{
    if(VehicleInfo[key][vID] != 0) {
		return true;
	}
	
	return false;
}
//============================================//
stock OwnableVehicleID(key)
{
    return key;
}
//============================================//
stock OwnableVehicleEx(key)
{
    if(VehicleInfo[key][vID] != 0) {
    	return true;
	}

	return false;
}
//============================================//
stock OwnableVehicleIDEx(key)
{
    return key;
}
//============================================//
stock LoadOwnableMods(vehicle, idz)
{
	if(VehicleInfo[vehicle][vMod][idz] != 0)
	{
		if(VehicleInfo[vehicle][vMod][idz] != 1008 || VehicleInfo[vehicle][vMod][idz] != 1009 || VehicleInfo[vehicle][vMod][idz] != 1010)
		{
			AddVehicleComponent(vehicle, VehicleInfo[vehicle][vMod][idz]);
		}
	}
	return 1;
}
//============================================//
stock AddVehMod(id, compid, slot = -1)
{
	if(slot == -1)
	{
	    for(new i = 0; i < 11; i++)
	    {
			if(VehicleInfo[id][vMod][i] == 0)
			{
			    VehicleInfo[id][vMod][i]=compid;
			    break;
			}
	    }
	}
	else
	{
		VehicleInfo[id][vMod][slot]=compid;
	}
	return true;
}
//============================================//
stock SendFreqMessage(playerid, freq, color, string[])
{
	new found = 0;
	if(GetPVarInt(playerid, "HouseEnter") != 0 || GetPVarInt(playerid, "GarageEnter") != 0)
	{ 
		foreach(new i : Player)
		{
			if(i != playerid && CheckInvItem(i, 402) && GetPVarInt(i, "WalkieFreq") == freq)
			{
				if(GetPVarInt(playerid, "HouseEnter") == GetPVarInt(i, "HouseEnter"))
				{
					SendClientMessage(i, color, string);
					found++;
				}
				else if(IsPlayerInRangeOfPoint(i, MAX_WALKIE_TALKIE_DISTANCE, 
					HouseInfo[GetPVarInt(playerid, "HouseEnter")][hXo], HouseInfo[GetPVarInt(playerid, "HouseEnter")][hYo], HouseInfo[GetPVarInt(playerid, "HouseEnter")][hZo]))
				{
					SendClientMessage(i, color, string);
					found++;
				}
			}
		}
	}
	else if(GetPVarInt(playerid, "BizEnter") != 0)
	{
		foreach(new i : Player)
		{
			if(i != playerid && CheckInvItem(i, 402) && GetPVarInt(i, "WalkieFreq") == freq)
			{
				if(GetPVarInt(playerid, "BizEnter") == GetPVarInt(i, "BizEnter"))
				{
					SendClientMessage(i, color, string);
					found++;
				}
				else if(IsPlayerInRangeOfPoint(i, MAX_WALKIE_TALKIE_DISTANCE, 
					BizInfo[GetPVarInt(playerid, "BizEnter")][Xo], BizInfo[GetPVarInt(playerid, "BizEnter")][Yo], BizInfo[GetPVarInt(playerid, "BizEnter")][Zo]))
				{
					SendClientMessage(i, color, string);
					found++;
				}
			}
		}
	}
	else if(GetPVarInt(playerid, "IntEnter") != 0)
	{
		foreach(new i : Player)
		{
			if(i != playerid && CheckInvItem(i, 402) && GetPVarInt(i, "WalkieFreq") == freq)
			{
				if(GetPVarInt(playerid, "IntEnter") == GetPVarInt(i, "IntEnter"))
				{
					SendClientMessage(i, color, string);
					found++;
				}
				else if(IsPlayerInRangeOfPoint(i, MAX_WALKIE_TALKIE_DISTANCE, 
					IntInfo[GetPVarInt(playerid, "IntEnter")][iiXo], IntInfo[GetPVarInt(playerid, "IntEnter")][iiYo], IntInfo[GetPVarInt(playerid, "IntEnter")][iiZo]))
				{
					SendClientMessage(i, color, string);
					found++;
				}
			}
		}
	}
	else
	{
		foreach(new i : HouseIterator)
		{
			if(HouseInfo[i][hOwned] == 1 && IsPlayerInRangeOfPoint(playerid, MAX_WALKIE_TALKIE_DISTANCE, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]))
			{
				foreach(new i2 : Player)
				{
					if(i2 != playerid)
					{
						if(GetPVarInt(i2, "HouseEnter") == i || GetPVarInt(i2, "GarageEnter") == i)
						{
							if(CheckInvItem(i2, 402) && GetPVarInt(i2, "WalkieFreq") == freq)
							{
								SendClientMessage(i2, color, string);
								found++;
							}
						}
					}
				}
			}
		}

		foreach(new i : BizIterator)
		{
			if(BizInfo[i][Owned] == 1 && IsPlayerInRangeOfPoint(playerid, MAX_WALKIE_TALKIE_DISTANCE, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]))
			{
				foreach(new i2 : Player)
				{
					if(i2 != playerid && GetPVarInt(i2, "BizEnter") == i)
					{
						if(CheckInvItem(i2, 402) && GetPVarInt(i2, "WalkieFreq") == freq)
						{
							SendClientMessage(i2, color, string);
							found++;
						}
					}
				}
			}
		}

		foreach(new i : IntIterator)
		{
			if(IntInfo[i][iiXo] != 0.0 && IntInfo[i][iiYo] != 0.0 && IntInfo[i][iiZo] != 0.0 && IsPlayerInRangeOfPoint(playerid, MAX_WALKIE_TALKIE_DISTANCE, IntInfo[i][iiXo], IntInfo[i][iiYo], IntInfo[i][iiZo]))
			{
				foreach(new i2 : Player)
				{
					if(i2 != playerid && GetPVarInt(i2, "IntEnter") == i)
					{
						if(CheckInvItem(i2, 402) && GetPVarInt(i2, "WalkieFreq") == freq)
						{
							SendClientMessage(i2, color, string);
							found++;
						}
					}
				}
			}
		}

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		foreach(new i : Player)
		{
			if(i != playerid && IsPlayerInRangeOfPoint(i, MAX_WALKIE_TALKIE_DISTANCE, x, y, z))
			{
				if(CheckInvItem(i, 402) && GetPVarInt(i, "WalkieFreq") == freq)
				{
					SendClientMessage(i, color, string);
					found++;
				}
			}
		}
	}

	SendClientMessage(playerid, color, string);

	if(found == 0)
	{
		SendClientMessage(playerid, color, "*STATIC NOISE*");
	}
    return true;
}
//============================================//
stock ProxRadio(Float:radi, playerid, string[], color)
{
    new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "PlayerLogged") == 1)
        {
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
		        if(IsPlayerInRangeOfPoint(i,radi,posx, posy, posz) && IsPlayerStreamedIn(i, playerid))
		        {
					if(i != playerid)
					{
		                SendClientMessage(i, color, string);
		            }
		        }
		    }
        }
    }
    return 1;
}
//============================================//
stock IsPlayerInWater(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return true;
	return false;
}
//============================================//
stock TogglePlayerSpectatingEx(playerid,toggle)
{
    SetPVarInt(playerid, "PlayerSpectate", toggle);
	return TogglePlayerSpectating(playerid, toggle);
}
//============================================//
stock GetAdminCount(type)
{
	new count = 0;
	switch(type)
	{
		case 1:
		{
	    	foreach(new i : Player)
        	{
            	if(GetPVarInt(i, "Admin") >= 1)
            	{
					if(GetPVarInt(i, "Admin") <= 10)
					{
			    		if(GetPVarInt(i, "AFKTime") <= 120)
			    		{
                    		count++;
                		}
                	}
            	}
        	}
        }
        case 2:
        {
            foreach(new i : Player)
        	{
            	if(GetPVarInt(i, "Admin") >= 1)
            	{
					if(GetPVarInt(i, "Admin") <= 10)
					{
                        count++;
                	}
            	}
        	}
        }
        case 3:
        {
            foreach(new i : Player)
        	{
            	if(GetPVarInt(i, "Admin") >= 1)
            	{
					if(GetPVarInt(i, "AHide") <= 1)
					{
                        count++;
                	}
            	}
        	}
        }
    }
	return count;
}

stock GetHelperCount()
{
	new count = 0;

	foreach(new i : Player)
	{
		if(GetPVarInt(i, "Helper") > 0)
		{
			count++;
		}
	}

	return count;
}
//============================================//
stock SendLeadMessage(color, string[]) {
	foreach(new i : Player) {
        if(GetPVarInt(i, "Admin") > 10) {
            SendClientMessageEx(i, color, string);
        }
    }
	return 1;
}
//============================================//
stock SendRegMessage(color, string[]) {
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Reg") > 0)
		{
		    SendClientMessageEx(i,color,string);
		}
    }
    return 1;
}
//============================================//
stock SendHelperMessage(color, string[]) {
    foreach(new i : Player) {
        if(GetPVarInt(i, "Helper") > 0) {
            SendClientMessageEx(i, color, string);
        }
    }
    return 1;
}
//============================================//
stock SendAdminMessage(color, string[], type = 0) {
	foreach(new i : Player) {
	    if(GetPVarInt(i, "Admin") > 0)
	    {
	    	if(type == 0)
	    	{
	    		SendClientMessageEx(i, color, string);
	    	}
	        else if(type == 1)
	        {
	        	if(PlayerInfo[i][pTogAdminChat] == 0)
	        	{
	        		SendClientMessageEx(i, color, string);
	        	}
	        }
	    }
	}
	return 1;
}

stock SendManagementMessage(color, string[], type = 0) {
	foreach(new i : Player) {
	    if(GetPVarInt(i, "Admin") >= 4)
	    {
	    	if(type == 0)
	    	{
	    		SendClientMessageEx(i, color, string);
	    	}
	        else if(type == 1)
	        {
	        	if(PlayerInfo[i][pTogAdminChat] == 0)
	        	{
	        		SendClientMessageEx(i, color, string);
	        	}
	        }
	    }
	}
	return 1;
}
stock SendDeveloperMessage(color, string[]) {
	foreach(new i : Player) {
	    if(GetPVarInt(i, "Developer") > 0) {
	        SendClientMessageEx(i, color, string);
	    }
	}
	return 1;
}
//============================================//
stock SendStaffMessage(color,string[]) {
    foreach(new i : Player) {
        if((GetPVarInt(i, "Admin") > 0 || GetPVarInt(i, "Helper") > 0 || GetPVarInt(i, "RegTeam") > 0) && GetPVarInt(i, "TogHa") == 0) {
            SendClientMessageEx(i, color, string);
        }
    }
    return 1;
}
//============================================//
stock ReturnSpeedHack(playerid, Float:speed)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(veh)
		{
			case 402: // Buffalo
			{
			    if(speed >= 300.0) return true;
			}
			case 411, 415, 429: // Infernus & Cheetah & Banshee
			{
			    if(speed >= 330.0) return true;
			}
			case 430, 446: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
		    case 451: // Turismo
		    {
			    if(speed >= 340.0) return true;
			}
			case 452 ,453, 454: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
			case 460: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 472, 473: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
			case 476: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 481: // Bike
			{
			    if(speed >= 500.0) return true;
			}
			case 484, 493: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
			case 494, 502: // Hotrings
			{
			    if(speed >= 350.0) return true;
			}
			case 506: // Super GT
			{
			    if(speed >= 300.0) return true;
			}
			case 509, 510: // Bike
			{
			    if(speed >= 500.0) return true;
			}
			case 511, 512, 513, 519, 520: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 522: // NRG 500
			{
			    if(speed >= 300.0) return true;
			}
			case 541: // Bullet
			{
			    if(speed >= 310.0) return true;
			}
			case 553: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 559: // Jester
			{
			    if(speed >= 310.0) return true;
			}
			case 577, 592, 593: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 602: // Aplha
			{
			    if(speed >= 310.0) return true;
			}
			default:
			{
			    if(speed >= 275.0) return true;
			}
		}
    }
    else
    {
        if(speed >= 220.0) return true;
    }
    return false;
}
//============================================//
stock IsRunnies(weaponID)
{
	switch(weaponID)
	{
		case 22,26,28,32: return true;
	}
	return false;
}
//============================================//
stock DisabledWeapon(time,weaponID,faction)
{
	if(time < 8)
	{
	    switch(weaponID)
	    {
		    case 8 .. 9, 16, 18 .. 40, 44 .. 45: return true;
	    }
	}
	else
	{
	    switch(weaponID)
	    {
		    case 8 .. 9: return true;
		    case 16 .. 18: {
			if(faction != 1) return true; }
		    case 35 .. 40, 44 .. 45: return true;
	    }
	}
	return false;
}
//============================================//
stock LearnFightstyle(playerid,cost,type,name[])
{
	if(GetPlayerMoneyEx(playerid) >= cost)
	{
		new string[128];
		PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		GivePlayerMoneyEx(playerid,-cost);
		format(string, sizeof(string),"~r~-%s", FormatMoney(cost));
		GameTextForPlayer(playerid, string, 5000, 1);
		format(string, sizeof(string),"You've learned %s for %s!", name, FormatMoney(cost));
		SendClientMessage(playerid, COLOR_WHITE, string);
		SetPlayerFightingStyle(playerid,type);
		switch(type)
		{
		    case FIGHT_STYLE_NORMAL: return SetPVarInt(playerid, "FightStyle", 0);
		    case FIGHT_STYLE_BOXING: return SetPVarInt(playerid, "FightStyle", 1);
		    case FIGHT_STYLE_KUNGFU: return SetPVarInt(playerid, "FightStyle", 2);
		    case FIGHT_STYLE_KNEEHEAD: return SetPVarInt(playerid, "FightStyle", 3);
		    case FIGHT_STYLE_GRABKICK: return SetPVarInt(playerid, "FightStyle", 4);
		    case FIGHT_STYLE_ELBOW: return SetPVarInt(playerid, "FightStyle", 5);
		}
		BizProduct(GetPVarInt(playerid, "BizEnter"));
		BizTill(GetPVarInt(playerid, "BizEnter"), cost/2);
	}
	else SendClientMessage(playerid, COLOR_ERROR, "Insufficient funds!");
	return 1;
}
//============================================//
stock IsHelmetCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 462 || pveh == 448 || pveh == 581 || pveh == 522 || pveh == 461
	|| pveh == 521 || pveh == 523 || pveh == 463 || pveh == 586 || pveh == 468
	|| pveh == 471 || pveh == 481 || pveh == 510 || pveh == 509)
    {
        return true;
    }
	return false;
}
//============================================//
public CarLights(idcar)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(VehicleInfo[idcar][vLights]) {
		case 1: {
			SetVehicleParamsEx(idcar,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
			VehicleInfo[idcar][vLights] = 0;
		}
		default: {
			SetVehicleParamsEx(idcar,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			VehicleInfo[idcar][vLights] = 1;
		}
	}
	
	return 1;
}
//============================================//
stock SendFactionMessage(factionid, color, string[]) {
	if(strlen(string) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, string, 140, strlen(string), MAX_MSG_LENGTH);
	    strdel(string, 140, strlen(string));
	    strins(string, " ...", 140, strlen(string));
	    strins(buffer, "... ", 0, MAX_MSG_LENGTH);
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "Member") == factionid) {
	            SendClientMessage(i, color, string);
	            SendClientMessage(i, color, buffer);
	        }
	    }
	} else {
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "Member") == factionid) {
	            SendClientMessage(i, color, string);
	        }
	    }
	}
    
    return 1;
}
//============================================//
stock SendFactionMessageEx(factionid, color, string[]) {
	if(strlen(string) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, string, 140, strlen(string), MAX_MSG_LENGTH);
	    strdel(string, 140, strlen(string));
	    strins(string, " ...", 140, strlen(string));
	    strins(buffer, "... ", 0, MAX_MSG_LENGTH);
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "Member") == factionid && GetPVarInt(i, "TogF") == 0) {
	            SendClientMessage(i, color, string);
	            SendClientMessage(i, color, buffer);
	        }
	    }
	} else {
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "Member") == factionid && GetPVarInt(i, "TogF") == 0) {
	            SendClientMessage(i, color, string);
	        }
	    }
	}

    return 1;
}
//============================================//
stock MaxRank(id)
{
	new amount = 0;

	for(new i = 1; i < MAX_FACTION_RANKS; i++)
	{
		if(strlen(FactionRankInfo[id][i][fRank]) > 0)
		{
			amount++;
		}
	}

	return amount;
}
//============================================//
static CheckSpeed(playerid)
{
    new Keys,ud,lr;
    GetPlayerKeys(playerid,Keys,ud,lr);

    if(ud == KEY_UP && lr != KEY_LEFT && lr != KEY_RIGHT)
    {
        new Float:Velocity[3];
        GetPlayerVelocity(playerid, Velocity[0], Velocity[1], Velocity[2]);
        Velocity[0] = floatsqroot( (Velocity[0]*Velocity[0])+(Velocity[1]*Velocity[1])+(Velocity[2]*Velocity[2]));
        if(Velocity[0] >= 0.11 && Velocity[0] <= 0.13) return 1;
    }
    return 0;
}
//============================================//
stock PayLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/pay.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock KillLog(string[])
{
	new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/kill.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock WepLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/weapon.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock SafeLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/safe.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock CMDLog(name[],string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s: %s\n",day, mtext, hour, minuite, second, name, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/command/CommandLog_%s_%d.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
stock ADMLog(string[])
{
	new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/admin/AdminLog_%s_%d.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
stock MiscLog(string[])
{
	new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "PR-RP/logs/misc/MiscLog_%s_%d.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock AdminName(playerid)
{
    new name[64];
    GetPVarString(playerid, "ForumName", name, sizeof(name));

	if(GetPVarInt(playerid, "AHide") == 1 || GetPVarInt(playerid, "Admin") >= 11)
	{
		format(name, sizeof(name), "Hidden");
	}
    
    return name;
}
//============================================//
stock GetVehicleType(vehicleid)
{
	new m = GetVehicleModel(vehicleid);
	if(m == 592|| m == 577|| m == 511|| m == 512|| m == 593|| m == 520|| m == 553|| m == 476|| m == 519|| m == 460|| m == 513) return Model_Plane;
	else if(m == 548|| m == 425|| m == 417|| m == 487|| m == 488|| m == 497|| m == 563|| m == 447|| m == 469) return Model_Heli;
	else if(m == 472|| m == 473|| m == 493|| m == 595|| m == 484|| m == 430|| m == 453|| m == 452|| m == 446|| m == 454) return Model_Boat;
	else if(m == 509|| m == 481|| m == 510) return Model_Bicycle;
	else if(m == 462|| m == 448|| m == 581|| m == 522|| m == 461|| m == 521|| m == 523|| m == 463|| m == 586|| m == 468|| m == 471) return Model_Bike;
	else if(m == 406|| m == 435|| m == 411|| m == 449|| m == 450|| m == 464|| m == 465|| m == 501|| m == 537|| m == 538|| m == 539|| m == 564|| m == 569|| m == 570|| m == 584|| m == 590|| m == 591|| m == 594|| m == 606|| m == 607|| m == 608|| m == 610|| m == 611) return Model_Unique;
	else return Model_Car;
}
//============================================//
stock IsVehicleSUV(vehicleid)
{
	new m = GetVehicleModel(vehicleid);
	if(IsVehicleIndustrial(vehicleid)||m == 579||m == 400||m == 500||m == 470||m == 489||m == 505||m == 495||m == 499||m == 422||m == 482||m == 414||m == 413||m == 543||m == 478||m == 554||m == 600||m == 498||m == 609) return true;
	else return false;
}

stock IsVehicleIndustrial(vehicleid)
{
	new m = GetVehicleModel(vehicleid);
	if(m == 414 || m == 423 || m == 456 || m == 498 || m == 499 || m == 524 || m == 552 || m == 578 || m == 588) return true;
	else return false;
}
//============================================//
stock CreateEMSVehicle(playerid, modelid, color1, color2)
{
	new Float:fdsX, Float:fdsY, Float:fdsZ, Float:fdsA;

	switch(modelid)
	{
		case 487, 497, 563:
		{
			new spawn = random(2);

			if(spawn == 0)
			{
				fdsX = 1103.9261;
				fdsY = -1335.3379;
				fdsZ = 21.1138;
				fdsA = 0.0;
			}
			else if(spawn == 1)
			{
		    	fdsX = 1121.7324;
				fdsY = -1336.4891;
				fdsZ = 21.0406;
				fdsA = 0.0;
			}
		}

		default:
		{
			new spawn = random(4);

			if(spawn == 0)
			{
		    	fdsX = 1131.6357;
				fdsY = -1296.1152;
				fdsZ = 13.7948;
				fdsA = 0.0;
			}
			else if(spawn == 1)
			{
		    	fdsX = 1125.4208;
				fdsY = -1296.2874;
				fdsZ = 13.7987;
				fdsA = 0.0;
			}
			else if(spawn == 2)
			{
		    	fdsX = 1119.2919;
				fdsY = -1296.3585;
				fdsZ = 13.7965;
				fdsA = 0.0;
			}
			else if(spawn == 3)
			{
		    	fdsX = 1113.2335;
				fdsY = -1296.1274;
				fdsZ = 13.7971;
				fdsA = 0.0;
			}
		}
	}

    new carid;
    carid = CreateVehicle(modelid, fdsX, fdsY, fdsZ, fdsA, color1, color2, -1, 1);
    SetVehicleNumberPlate(carid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    Iter_Add(VehicleIterator, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_LSFD;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;
	VehicleInfo[carid][vEngineStats][1] = 1;
	VehicleInfo[carid][vEngineStats][2] = 1;
	VehicleInfo[carid][vBattery][1] = 1;
	VehicleInfo[carid][vBattery][2] = 1;
	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid,COLOR_WHITE,"Faction vehicle created. (/despawngovcar)");
}
//============================================//
stock CreateRLSVehicle(playerid)
{
    new carid;
    carid = CreateVehicle(482,853.9370,-1380.9442,13.4033,179.8037,174,174, -1);
    SetVehicleNumberPlate(carid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    Iter_Add(VehicleIterator, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_RLS;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;
	VehicleInfo[carid][vEngineStats][1] = 1;
	VehicleInfo[carid][vEngineStats][2] = 1;
	VehicleInfo[carid][vBattery][1] = 1;
	VehicleInfo[carid][vBattery][2] = 1;
	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid, COLOR_WHITE, "Faction vehicle created. (/despawnfcar)");
}
//============================================//
stock CreateNewsVehicle(playerid, modelid, color1, color2)
{
    new carid;
    if(modelid == 488)
    {
    	carid = CreateVehicle(modelid, 1820.4408, -1304.1475, 131.9229, 224.9362, color1, color2, -1);
    }
    else
    {
    	carid = CreateVehicle(modelid, 1814.2765, -1277.3834, 13.7223, 5.1730, color1, color2, -1);
    }
    SetVehicleNumberPlate(carid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    Iter_Add(VehicleIterator, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_SAN;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;
	VehicleInfo[carid][vEngineStats][1] = 1;
	VehicleInfo[carid][vEngineStats][2] = 1;
	VehicleInfo[carid][vBattery][1] = 1;
	VehicleInfo[carid][vBattery][2] = 1;
	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid,COLOR_WHITE,"Faction vehicle created. (/despawnfcar)");
}
//============================================//
stock CreateGovVehicle(playerid,modelid,color1,color2)
{
    new carid;
    carid = CreateVehicle(modelid,1463.0500,-1840.4990,13.4200,91.3614,color1,color2, -1);
    SetVehicleNumberPlate(carid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    Iter_Add(VehicleIterator, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_GOV;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;
	VehicleInfo[carid][vEngineStats][1] = 1;
	VehicleInfo[carid][vEngineStats][2] = 1;
	VehicleInfo[carid][vBattery][1] = 1;
	VehicleInfo[carid][vBattery][2] = 1;
	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid,COLOR_WHITE,"Faction vehicle created. (/despawngovcar)");
}
//============================================//
stock CreateLSPDVehicle(playerid,modelid,color1,color2)
{
    new carid;

    if(IsCopCar(modelid))
    {
    	carid = CreateVehicle(modelid, 1569.3889, -1701.2551, 5.8906, 181.5051, color1, color2, -1);
    }
    else
    {
    	carid = CreateVehicle(modelid, 1569.3889, -1701.2551, 5.8906, 181.5051, color1, color2, -1, 1);
    }

    SetVehicleNumberPlate(carid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    Iter_Add(VehicleIterator, carid);
    CopInfo[carid][Created] = 1;
    VehicleInfo[carid][vTrunk] = 1;
    VehicleInfo[carid][vType] = VEHICLE_LSPD;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;
	VehicleInfo[carid][vEngineStats][1] = 1;
	VehicleInfo[carid][vEngineStats][2] = 1;
	VehicleInfo[carid][vBattery][1] = 1;
	VehicleInfo[carid][vBattery][2] = 1;
	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
	switch(modelid)
	{
	    case 427: SetVehicleHealth(carid, 50000.0);
	    case 430:
	    {
	        SetVehiclePosEx(carid, 2719.8423, -2303.6052, -0.4827);
		    SetVehicleZAngle(carid, 90.8563);
	    }
	    case 490: SetVehicleHealth(carid, 2000.0);
		case 497:
		{
		    SetVehiclePosEx(carid, 1564.9601,-1654.4288,28.5723);
		    SetVehicleZAngle(carid, 90.8563);
		}
		case 528:
		{
			SetVehicleHealth(carid, 50000.0);
		}
	}
    return SendClientMessage(playerid, COLOR_WHITE, "Faction vehicle created. (/despawngovcar)");
}

stock CreateDOCVehicle(playerid,modelid,color1,color2)
{
    new carid;

    if(IsCopCar(modelid))
    {
    	carid = CreateVehicle(modelid, 264.0445,1371.0801,10.2908,180.2013, color1, color2, -1);
    }
    else
    {
    	carid = CreateVehicle(modelid, 264.0445,1371.0801,10.2908,180.2013, color1, color2, -1, 1);
    }

    SetVehicleNumberPlate(carid, PrintVehiclePlate(GenerateRandomVehiclePlate()));
    Iter_Add(VehicleIterator, carid);
    CopInfo[carid][Created] = 1;
    VehicleInfo[carid][vTrunk] = 1;
    VehicleInfo[carid][vType] = VEHICLE_LSPD;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;
	VehicleInfo[carid][vEngineStats][1] = 1;
	VehicleInfo[carid][vEngineStats][2] = 1;
	VehicleInfo[carid][vBattery][1] = 1;
	VehicleInfo[carid][vBattery][2] = 1;
	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid, COLOR_WHITE, "Faction vehicle created. (/despawngovcar)");
}
//============================================//
stock DonateCars(id)
{

	//if(id == 522 && GetPVarInt(playerid, "ConnectTime") >= 1000) return true;
	if(id == 400 || id == 401 || id == 402 || id == 403
	|| id == 404 || id == 405 || id == 409 || id == 410
	|| id == 411 || id == 412 || id == 415 || id == 418
	|| id == 419 || id == 421 || id == 422 || id == 424
	|| id == 426 || id == 429 || id == 434 || id == 436
	|| id == 439 || id == 442 || id == 445 || id == 446
	|| id == 451 || id == 452 || id == 453 || id == 454
	|| id == 458 || id == 461 || id == 462 || id == 463
	|| id == 467 || id == 468 || id == 470 || id == 471
	|| id == 473 || id == 474 || id == 475 || id == 477
	|| id == 479 || id == 480 || id == 481 || id == 482
	|| id == 483 || id == 489 || id == 492 || id == 493
	|| id == 494 || id == 495 || id == 496 || id == 498 || id == 500
	|| id == 504 || id == 506 || id == 507 || id == 508 || id == 509
	|| id == 510 || id == 514 || id == 517 || id == 518
	|| id == 521 || id == 525 || id == 533 || id == 534
	|| id == 535 || id == 536 || id == 540 || id == 541
	|| id == 543 || id == 545 || id == 550 || id == 551
	|| id == 554 || id == 555 || id == 558 || id == 559
	|| id == 560 || id == 561 || id == 562 || id == 565
	|| id == 566 || id == 567 || id == 571 || id == 572
	|| id == 575 || id == 576 || id == 579 || id == 580
	|| id == 581 || id == 586 || id == 587 || id == 589
	|| id == 600 || id == 602 || id == 603)
	{
	    return true;
	}
	return false;
}
//============================================//
stock PlaySoundInArea(soundid, Float:x, Float:y, Float:z, Float:radius)
{
    foreach(new i : Player)
	{
        if(GetPVarInt(i, "PlayerLogged") == 1)
	    {
	        if(IsPlayerInRangeOfPoint(i, radius, x, y, z))
	        {
                PlayerPlaySound(i, soundid, x, y, z);
	        }
	    }
	}
	return 1;
}
//============================================//
stock PlaySoundPlyRadius(playerid, soundid, Float:radi)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
    foreach(new i : Player)
	{
        if(GetPVarInt(i, "PlayerLogged") == 1)
	    {
	        if(IsPlayerInRangeOfPoint(i,radi,x,y,z))
	        {
				if(i != playerid)
				{
                    PlayerPlaySound(i, soundid, x, y, z);
                }
	        }
	    }
	}
	return 1;
}
//============================================//
public OnPaintSpray(playerid)
{
	new carid = GetPlayerVehicleID(playerid);

	SetVehiclePosEx(GetPlayerVehicleID(playerid),PaintSprays[GetPVarInt(playerid, "PaintID")][0],PaintSprays[GetPVarInt(playerid, "PaintID")][1],PaintSprays[GetPVarInt(playerid, "PaintID")][2] + 0.5);
	SetVehicleZAngle(GetPlayerVehicleID(playerid),PaintSprays[GetPVarInt(playerid, "PaintID")][7]);
	
	foreach(new i : Player)
	{
	    if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == carid)
	    {
	        SetPlayerVirtualWorld(i, 0);
	    }
	}

	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	TogglePlayerControllableEx(playerid,true);
	SetPVarInt(playerid, "PaintID", 0);
	SendClientMessage(playerid,COLOR_WHITE,"Vehicle repaired.");
	RepairVehicle(GetPlayerVehicleID(playerid));
	DeletePVar(playerid,"ColorUse");

	SetPlayerMoneyEx(playerid, GetPlayerMoneyEx(playerid));
	return 1;
}
//============================================//
public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
        new pip[16];
        foreach(new i : Player)
    	{
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
            {
                if(GetPVarInt(i, "Admin") <= 9)
                {
                    if(GetPVarInt(i, "BeingBanned") != 0) return true;
					new string[128];
                    format(string, sizeof(string), "AdmCmd: %s was banned by the server. (Reason: Invalid RCON Login)", PlayerInfo[i][pName]);
		            SendClientMessageToAll(COLOR_PUBLIC_ADMIN, string);
                    BanPlayer(i,"INVALID-RCON-LOGIN", "Server");
                }
            }
        }
    }
    return 1;
}
//============================================//
public OnVehicleMod(playerid, vehicleid, componentid)
{
	new string[128], modok = islegalcarmod(GetVehicleModel(vehicleid), componentid);
	if (!modok)
	{
	    RemoveVehicleComponent(vehicleid, componentid);
        if(GetPVarInt(playerid,"Admin") != 0) return true;
        if(GetPVarInt(playerid, "BeingBanned") != 0) return true;
        format(string, sizeof(string), "AdmCmd: %s was banned by the server. (Reason: Vehicle Mod Hacks)", PlayerInfo[playerid][pName]);
		SendClientMessageToAll(COLOR_PUBLIC_ADMIN, string);
        BanPlayer(playerid,"Vehicle Mod Hacks", "Server");
        RemoveVehicleComponent(vehicleid, componentid);
        return 0;
    }
    if(IsNotAEngineCar(vehicleid) || IsHelmetCar(vehicleid) || VehicleInfo[vehicleid][vType] != VEHICLE_PERSONAL)
    {
		if(GetPVarInt(playerid,"Admin") != 0) return true;
		if(GetPVarInt(playerid, "BeingBanned") != 0) return true;
		RemoveVehicleComponent(vehicleid, componentid);
		format(string, sizeof(string), "AdmCmd: %s was banned by the server. (Reason: Vehicle Mod Hacks)", PlayerInfo[playerid][pName]);
		SendClientMessageToAll(COLOR_PUBLIC_ADMIN, string);
	    BanPlayer(playerid,"Vehicle Mod Hacks", "Server");
        RemoveVehicleComponent(vehicleid, componentid);
	}
    return true;
}
//============================================//
stock iswheelmodel(modelid)
{
    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for (new I = 0; I != sizeof (wheelmodels); ++I)
	{
        if (modelid == wheelmodels[I])
        {
            return true;
        }
    }
    return false;
}
//============================================//
stock IllegalCarNitroIde(carmodel)
{
    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
    for (new I = 0; I != sizeof (illegalvehs); ++I)
	{
        if (carmodel == illegalvehs[I])
        {
		    return true;
		}
    }
    return false;
}
//============================================//
stock illegal_nos_vehicle(PlayerID)
{
    new carid = GetPlayerVehicleID(PlayerID), playercarmodel = GetVehicleModel(carid);
    return IllegalCarNitroIde(playercarmodel);
}
//============================================//
stock islegalcarmod(vehicleide, componentid)
{
    new modok = false;
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
        new nosblocker = IllegalCarNitroIde(vehicleide);
        if (!nosblocker) modok = true;
    }
	else
	{
        for (new I = 0; I != sizeof (legalmods); ++I)
		{
            if (legalmods[I][0] == vehicleide)
			{
                for(new J = 1; J < 22; J++)
				{
                    if (legalmods[I][J] == componentid)
                    {
					    modok = true;
					}
                }
            }
        }
    }
    return modok;
}
//============================================//
forward ResetScriptWiseWeapon(playerid);
public ResetScriptWiseWeapon(playerid)
{
	SetTimerEx("ResetScriptWiseWeapon2", 1000, false, "i", playerid);
    return 1;
}
//============================================//
forward ResetScriptWiseWeapon2(playerid);
public ResetScriptWiseWeapon2(playerid)
{
	PlayerInfo[playerid][pPlayerWeapon]=0, PlayerInfo[playerid][pPlayerAmmo]=0, PlayerInfo[playerid][pAmmoType]=0, PlayerInfo[playerid][pPlayerSerial]=0;
	RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
	SetPVarInt(playerid, "JustChosen", 0);
	CallRemoteFunction("LoadHolsters","i",playerid);
	return 1;
}
//============================================//
public PrintSpeedo(playerid, Float:speed)
{
	if(GetPVarInt(playerid, "TogHud") == 1) return true;
	new ftext[50], stext[50], sspeed = floatround(speed);

	switch(sspeed)
	{
	    case 100 .. 5000: format(stext, 50, "  ~w~%d", sspeed);
	    case 10 .. 99: format(stext, 50, "   ~w~%d", sspeed);
	    case 0 .. 9: format(stext, 50, "    ~w~%d", sspeed);
	}
	PlayerTextDrawSetString(playerid, VehicleIDraw[1][playerid], stext);
	switch(VehicleInfo[GetPlayerVehicleID(playerid)][vFuel])
	{
	    case 100 .. 200: ftext="~w~IIIIIIIIII";
	    case 90 .. 99: ftext="~w~IIIIIIIII~r~I";
	    case 80 .. 89: ftext="~w~IIIIIIII~r~II";
	    case 70 .. 79: ftext="~w~IIIIIII~r~III";
	    case 60 .. 69: ftext="~w~IIIIII~r~IIII";
	    case 50 .. 59: ftext="~w~IIIII~r~IIIII";
	    case 40 .. 49: ftext="~w~III~r~IIIIIII";
	    case 30 .. 39: ftext="~w~II~r~IIIIIIII";
	    case 10 .. 29: ftext="~w~I~r~IIIIIIIII";
	    case 0 .. 9: ftext="~r~IIIIIIIIII";
	}
	PlayerTextDrawSetString(playerid, VehicleIDraw[0][playerid], ftext);
	return true;
}
//============================================//
stock CellphoneState(playerid, toggle)
{
	switch(toggle)
	{
	    case 1:
	    {
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	        if(GetPVarInt(playerid, "CellCol") == 0) SetPlayerAttachedObject(playerid, HOLDOBJECT_PHONE, 18868, 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.000000, 1.000000, 1.000000);
	        else SetPlayerAttachedObject(playerid, HOLDOBJECT_PHONE, GetPVarInt(playerid, "CellCol"), 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.000000, 1.000000, 1.000000);
	    }
	    case 2:
	    {
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject(playerid, HOLDOBJECT_PHONE);
	    }
	}
	return true;
}
//============================================//
stock SendJobMessage(factionid,color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Job") == factionid)
        {
        	SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendJobMessageEx(factionid,color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Job") == factionid)
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendPhoneMessage(playerid) return SendClientMessage(playerid, COLOR_ERROR, "*BEEP* The number you dialed is currently un-available *BEEP*");
//============================================//
stock ResetPlayerWeaponsEx(playerid)
{
    SetPVarInt(playerid, "GUNHCKWARN", 0);
    ResetScriptWiseWeapon(playerid);
    ResetPlayerWeapons(playerid);
    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN3)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN3);
    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN2)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN2);
    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN1)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN1);
    CallRemoteFunction("LoadHolsters","i",playerid);
	return true;
}
//============================================//
forward SmsNumber(playerid, number[], text[]);
public SmsNumber(playerid, number[], text[])
{
	new string[256], string2[256], giveplayer[25], sendername[25];
    if(!strlen(number))
    {
        ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
		return 1;
    }
    if(strlen(number) >= 125)
    {
	    SendClientMessage(playerid, COLOR_WHITE, "Number is too long (125 Chars max).");
	    ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	    return 1;
	}

	new found = 0;
	foreach(new i : Player)
	{
		if(i == playerid) continue;

		new inumber[64];
		format(inumber, sizeof(inumber), "%i", GetPVarInt(i, "PhoneNum"));
		if(!strcmp(number, inumber))
		{
			if(!CheckInvItem(i , 405)) return SendClientMessage(playerid, COLOR_ERROR, "Player doesn't have a cellphone."), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
		    if(GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
			if(GetPVarInt(i, "Cuffed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
			if(GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
			if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
			if(IsPlayerInWater(i)) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
			if(GetPVarInt(i, "PlayerSpectate") != 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
		    
		    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(i));
		    GiveNameSpace(giveplayer);
		    format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
		    
		    new pnumber[50];
			format(pnumber, sizeof(pnumber), "%d", GetPVarInt(playerid, "PhoneNum"));
		    
		    if(GetPVarInt(playerid, "HidePhone") == 1)
		    {
		    	sendername = "Unknown Caller ID";
		    }

			format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
			for(new i2 = 0; i2 < MAX_PLAYER_CONTACTS; i2++)
			{
				if(strlen(PlayerContacts[i][i2][pContactNumber]) != 0 && !strcmp(PlayerContacts[i][i2][pContactNumber], pnumber))
				{
					format(sendername, sizeof(sendername), "%s", PlayerContacts[i][i2][pContactName]);
					break;
				}
			}

			new recievername[64];
			format(recievername, sizeof(recievername), "%d", GetPVarInt(i, "PhoneNum"));
			for(new i2 = 0; i2 < MAX_PLAYER_CONTACTS; i2++)
			{
				if(strlen(PlayerContacts[playerid][i2][pContactNumber]) != 0 && strval(PlayerContacts[playerid][i2][pContactNumber]) == GetPVarInt(i, "PhoneNum"))
				{
					format(recievername, sizeof(recievername), "%s", PlayerContacts[playerid][i2][pContactName]);
					break;
				}
			}

	        format(string, sizeof(string), "TXT: %s (From: %s)", text, sendername);
	        format(string2, sizeof(string2), "TXT: %s (To: %s)", text, recievername);

	        SendClientMessage(i, COLOR_PHONE, string);
	        SendClientMessage(playerid, COLOR_PHONE, string2);

	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
	        format(string, sizeof(string), "*** %s's phone beeps.", giveplayer);
	        ProxDetector(30.0, i, string, COLOR_PURPLE);
	        CellphoneState(playerid,2);
	        DeletePVar(playerid, "CellMenu");
	        foreach(new i2 : Player)
	        {
    	        if(GetPVarInt(i2, "Mobile") == playerid)
    	        {
        	        SetPVarInt(i2, "RingTone", 0);
        	        SetPVarInt(i2, "RingPhone", 0);
       	            SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
        	        if(GetPVarInt(i2, "CellMenu") == 0)
        	        {
					    CellphoneState(i2,2);
					}
    	        }
	        }
		    return 1;
		}
	}

	if(found == 0)
	{
	    SendClientMessage(playerid, COLOR_ERROR, "Could not find anyone with that number.");
		ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	}
	return 1;
}

forward SmsNumberCMD(playerid, number[], text[]);
public SmsNumberCMD(playerid, number[], text[])
{
	new string[256], string2[256], giveplayer[25], sendername[25];
    if(!strlen(number) || strlen(number) >= 125)
    {
        return SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
	}

	new found = 0;
	foreach(new i : Player)
	{
		if(i == playerid) continue;

		new inumber[64];
		format(inumber, sizeof(inumber), "%i", GetPVarInt(i, "PhoneNum"));
		if(!strcmp(number, inumber))
		{
			if(!CheckInvItem(i , 405)) return SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
		    if(GetPVarInt(i, "TogPhone") == 1) return SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
			if(GetPVarInt(i, "Dead") > 0) return SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
			if(GetPVarInt(i, "Jailed") > 0) return SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
			if(IsPlayerInWater(i)) return SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
			if(GetPVarInt(i, "PlayerSpectate") != 0) SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
		    
		    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(i));
		    GiveNameSpace(giveplayer);
		    format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
		    
		    new pnumber[50];
			format(pnumber, sizeof(pnumber), "%d", GetPVarInt(playerid, "PhoneNum"));
		    
		    if(GetPVarInt(playerid, "HidePhone") == 1)
		    {
		    	sendername = "Unknown Caller ID";
		    }

			format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
			for(new i2 = 0; i2 < MAX_PLAYER_CONTACTS; i2++)
			{
				if(strlen(PlayerContacts[i][i2][pContactNumber]) != 0 && !strcmp(PlayerContacts[i][i2][pContactNumber], pnumber))
				{
					format(sendername, sizeof(sendername), "%s", PlayerContacts[i][i2][pContactName]);
					break;
				}
			}

			new recievername[64];
			format(recievername, sizeof(recievername), "%d", GetPVarInt(i, "PhoneNum"));
			for(new i2 = 0; i2 < MAX_PLAYER_CONTACTS; i2++)
			{
				if(strlen(PlayerContacts[playerid][i2][pContactNumber]) != 0 && strval(PlayerContacts[playerid][i2][pContactNumber]) == GetPVarInt(i, "PhoneNum"))
				{
					format(recievername, sizeof(recievername), "%s", PlayerContacts[playerid][i2][pContactName]);
					break;
				}
			}

	        format(string, sizeof(string), "TXT: %s (From: %s)", text, sendername);
	        format(string2, sizeof(string2), "TXT: %s (To: %s)", text, recievername);

	        SendClientMessage(i, COLOR_PHONE, string);
	        SendClientMessage(playerid, COLOR_PHONE, string2);

	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
	        format(string, sizeof(string), "*** %s's phone beeps.", giveplayer);
	        ProxDetector(30.0, i, string, COLOR_PURPLE);
	        CellphoneState(playerid,2);
	        DeletePVar(playerid, "CellMenu");
	        foreach(new i2 : Player)
	        {
    	        if(GetPVarInt(i2, "Mobile") == playerid)
    	        {
        	        SetPVarInt(i2, "RingTone", 0);
        	        SetPVarInt(i2, "RingPhone", 0);
       	            SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
        	        if(GetPVarInt(i2, "CellMenu") == 0)
        	        {
					    CellphoneState(i2,2);
					}
    	        }
	        }
		    return 1;
		}
	}

	if(found == 0)
	{
	    SendClientMessage(playerid, COLOR_ERROR, "The message was sent but wasn't received.");
	}
	return 1;
}
//============================================//
forward CallNumber(playerid, pnumber[]);
public CallNumber(playerid, pnumber[])
{
	new sendername[25], string[516];
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    GiveNameSpace(sendername);
    if(!strlen(pnumber))
    {
        ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
		return 1;
    }
    if(strlen(pnumber) >= 15)
    {
	    SendClientMessage(playerid, COLOR_WHITE, "Number is too long (15 Chars max).");
	    ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	    return 1;
	}
	new found = 0;
	if(strcmp(pnumber, "911", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
	    SetPVarInt(playerid, "Mobile", 911);
	    SendClientMessage(playerid,COLOR_BLUE,"DISPATCH: Which service do you require Police or LSFD?");
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
	    return true;
	}
	if(strcmp(pnumber, "411", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
	    SendClientMessage(playerid,COLOR_WHITE,"You informed any Taxi Drivers online with your location.");
	    TaxiCall = playerid;
	    format(string, sizeof(string), "%s is requesting a taxi (/accept taxi), Location:[%s].", sendername, GetPlayerArea(playerid));
	    SendJobMessage(5,COLOR_WHITE,string);
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    DeletePVar(playerid, "CellMenu");
	    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
    	foreach(new i2 : Player)
    	{
            if(GetPVarInt(i2, "Mobile") == playerid)
        	{
                SetPVarInt(i2, "RingTone", 0);
            	SetPVarInt(i2, "RingPhone", 0);
           	    SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
            	if(GetPVarInt(i2, "CellMenu") == 0)
            	{
				    CellphoneState(i2,2);
				}
            }
    	}
	    return true;
	}
	if(strcmp(pnumber, "311", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
	    SendClientMessage(playerid, COLOR_WHITE, "You informed all online Mechanics with your location.");
	    PlayerInfo[playerid][pMechCall] = 1;
	    format(string, sizeof(string), "MECHANIC: %s (Ph: %i) is requesting a mechanic! Location:[%s]", sendername, GetPVarInt(playerid, "PhoneNum"), GetPlayerArea(playerid));
	    SendJobMessage(JOB_MECHANIC, COLOR_JOB, string);
	    format(string, sizeof(string), "MECHANIC: Use /accept mech %i to respond.", playerid);
	    SendJobMessage(JOB_MECHANIC, COLOR_JOB, string);
	    SetPVarInt(playerid, "CmdDelay", GetCount()+30000);
	    DeletePVar(playerid, "CellMenu");
	    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
    	foreach(new i2 : Player)
    	{
            if(GetPVarInt(i2, "Mobile") == playerid)
        	{
                SetPVarInt(i2, "RingTone", 0);
            	SetPVarInt(i2, "RingPhone", 0);
           	    SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
            	if(GetPVarInt(i2, "CellMenu") == 0)
            	{
				    CellphoneState(i2,2);
				}
            }
    	}
	    return true;
	}
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		{
			format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
			if(strcmp(string, pnumber, true) == 0)
			{
    			if (!CheckInvItem(i , 405))return SendClientMessage(playerid, COLOR_ERROR, "Player doesn't have a cellphone."), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
    			if (i == playerid) return SendClientMessage(playerid, COLOR_ERROR, "Can't call yourself."), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if (GetPVarInt(i, "Mobile") != INVALID_MAXPL)
				{
	    			format(string, sizeof(string), "Missed call: %d.", GetPVarInt(playerid, "PhoneNum"));
	    			SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    			SendPhoneMessage(playerid);
	    			ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	    			return true;
				}
				if (GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if (GetPVarInt(i, "Cuffed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if (GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if(IsPlayerInWater(i)) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
    			if(GetPVarInt(i, "PlayerSpectate") != 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				found = 1;
				format(string, sizeof(string),"Calling %d.", GetPVarInt(i, "PhoneNum"));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "Mobile", i);
				SetPVarInt(i, "RingTone", 1);
				format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
				if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown";
				new cname[50], foundi = 0;
               	
				for(new i2 = 0; i2 < MAX_PLAYER_CONTACTS; i2++)
				{
					if(strlen(PlayerContacts[i][i2][pContactNumber]) != 0 && strval(PlayerContacts[i][i2][pContactNumber]) == GetPVarInt(playerid, "PhoneNum"))
					{
						format(cname, sizeof(cname), "%s", PlayerContacts[i][i2][pContactName]);
						foundi++;
						break;
					}
				}

				if(foundi == 0) format(string, sizeof(string), "Your mobile is ringing (Caller: %d)", GetPVarInt(playerid, "PhoneNum"));
				else format(string, sizeof(string), "Your mobile is ringing (Caller: %s)", cname);
				SendClientMessage(i, COLOR_PHONE, string);
				SetPVarInt(playerid, "RingPhone", 1);
				DeletePVar(playerid, "CellMenu");
				PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
			}
		}
	}
	if(found == 0) SendClientMessage(playerid, COLOR_ERROR, "Could not find anyone with that number."), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	return 1;
}

forward CallNumberCMD(playerid, pnumber[]);
public CallNumberCMD(playerid, pnumber[])
{
	new sendername[25], string[516];
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    GiveNameSpace(sendername);
    if(!strlen(pnumber) || strlen(pnumber) >= 15)
    {
        SendPhoneMessage(playerid);
        return 1;
	}

	new found = 0;
	if(strcmp(pnumber, "911", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
	    SetPVarInt(playerid, "Mobile", 911);
	    SendClientMessage(playerid,COLOR_BLUE,"DISPATCH: Which service do you require Police or LSFD?");
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
	    return true;
	}
	if(strcmp(pnumber, "411", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
	    SendClientMessage(playerid,COLOR_WHITE,"You informed any Taxi Drivers online with your location.");
	    TaxiCall = playerid;
	    format(string, sizeof(string), "%s is requesting a taxi (/accept taxi), Location:[%s].", sendername, GetPlayerArea(playerid));
	    SendJobMessage(5,COLOR_WHITE,string);
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    DeletePVar(playerid, "CellMenu");
	    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
    	foreach(new i2 : Player)
    	{
            if(GetPVarInt(i2, "Mobile") == playerid)
        	{
                SetPVarInt(i2, "RingTone", 0);
            	SetPVarInt(i2, "RingPhone", 0);
           	    SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
            	if(GetPVarInt(i2, "CellMenu") == 0)
            	{
				    CellphoneState(i2,2);
				}
            }
    	}
	    return true;
	}
	if(strcmp(pnumber, "311", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) return SendClientMessage(playerid,COLOR_ERROR,"You must wait atleast a minute before calling this service again.");
	    SendClientMessage(playerid, COLOR_WHITE, "You informed all online Mechanics with your location.");
	    PlayerInfo[playerid][pMechCall] = 1;
	    format(string, sizeof(string), "MECHANIC: %s (Ph: %i) is requesting a mechanic! Location:[%s]", sendername, GetPVarInt(playerid, "PhoneNum"), GetPlayerArea(playerid));
	    SendJobMessage(JOB_MECHANIC, COLOR_JOB, string);
	    format(string, sizeof(string), "MECHANIC: Use /accept mech %i to respond.", playerid);
	    SendJobMessage(JOB_MECHANIC, COLOR_JOB, string);
	    SetPVarInt(playerid, "CmdDelay", GetCount()+30000);
	    DeletePVar(playerid, "CellMenu");
	    PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
    	foreach(new i2 : Player)
    	{
            if(GetPVarInt(i2, "Mobile") == playerid)
        	{
                SetPVarInt(i2, "RingTone", 0);
            	SetPVarInt(i2, "RingPhone", 0);
           	    SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
            	if(GetPVarInt(i2, "CellMenu") == 0)
            	{
				    CellphoneState(i2,2);
				}
            }
    	}
	    return true;
	}
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		{
			format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
			if(strcmp(string, pnumber, true) == 0)
			{
    			if (!CheckInvItem(i , 405)) return SendPhoneMessage(playerid);
    			if (i == playerid) return SendPhoneMessage(playerid);

				if(GetPVarInt(i, "Mobile") != INVALID_MAXPL)
				{
	    			format(string, sizeof(string), "Missed call: %d.", GetPVarInt(playerid, "PhoneNum"));
	    			SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    			SendPhoneMessage(playerid);
	    			//ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	    			return true;
				}
				if (GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid);
				//if (GetPVarInt(i, "Cuffed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if (GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid);
				if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid);
				if(IsPlayerInWater(i)) return SendPhoneMessage(playerid);
    			if(GetPVarInt(i, "PlayerSpectate") != 0) return SendPhoneMessage(playerid);
				found = 1;
				format(string, sizeof(string),"Calling %d.", GetPVarInt(i, "PhoneNum"));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "Mobile", i);
				SetPVarInt(i, "RingTone", 1);
				format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
				if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown Caller ID";
				new cname[50], foundi = 0;
               	
				for(new i2 = 0; i2 < MAX_PLAYER_CONTACTS; i2++)
				{
					if(strlen(PlayerContacts[i][i2][pContactNumber]) != 0 && strval(PlayerContacts[i][i2][pContactNumber]) == GetPVarInt(playerid, "PhoneNum"))
					{
						format(cname, sizeof(cname), "%s", PlayerContacts[i][i2][pContactName]);
						foundi++;
						break;
					}
				}

				if(foundi == 0) format(string, sizeof(string), "Your mobile is ringing (Caller: %d)", GetPVarInt(playerid, "PhoneNum"));
				else format(string, sizeof(string), "Your mobile is ringing (Caller: %s)", cname);
				SendClientMessage(i, COLOR_PHONE, string);
				SetPVarInt(playerid, "RingPhone", 1);
				DeletePVar(playerid, "CellMenu");
				PlayerPlaySound(playerid,3600, 0.0, 0.0, 0.0);
			}
		}
	}
	if(found == 0) SendPhoneMessage(playerid);
	return 1;
}
//============================================//
stock PlayRadioURL(vehicleid, url[])
{
	/*if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL)
	{*/
	foreach(new i : Player)
	{
	    if(GetPlayerVehicleID(i) == vehicleid)
	    {
	        PlayAudioStreamForPlayerEx(i, url);
	        strmid(VehicleInfo[vehicleid][vRadio], url, 0, strlen(url), 255);
	    }
	}
	//}
	return true;
}
//============================================//
stock PlayBizRadio(id, url[])
{
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "BizEnter") == id)
		{
		    PlayAudioStreamForPlayerEx(i, url);
		    strmid(BizInfo[id][bRadio], url, 0, strlen(url), 255);
	    }
	}
	return true;
}
//============================================//
stock PlayHouseRadio(id, url[])
{
	foreach(new i : Player)
	{
	    if(GetPVarInt(i, "HouseEnter") == id)
		{
		    PlayAudioStreamForPlayerEx(i, url);
		    strmid(HouseInfo[id][hRadioU], url, 0, strlen(url), 255);
	    }
	}
	return true;
}

stock PlayHouseRadioForPlayer(playerid, houseid)
{
    if(GetPVarInt(playerid, "HouseEnter") == houseid)
	{
	    PlayAudioStreamForPlayerEx(playerid, HouseInfo[houseid][hRadioU]);
    }
	return true;
}
//============================================//
stock SetPlayerToFacePlayer(playerid, targetid)
{
    new Float:pX,Float:pY,Float:pZ, Float:X,Float:Y,Float:Z, Float:ang;
    if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;
    GetPlayerPos(targetid, X, Y, Z);
    GetPlayerPos(playerid, pX, pY, pZ);
    if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
    else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
    else ang = (floatabs(ang) - 180.0);
    return SetPlayerFacingAngle(playerid, ang);
}
//============================================//
stock PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    SetPVarInt(playerid, "EnterVehicle" , GetCount()+10000); // Avoid anti-cheat punishments.
	return PutPlayerInVehicle(playerid, vehicleid, seatid);
}
//============================================//
public RemoveIdle(playerid)
{
    for(new i = 0; i < 3; i++) {
	PlayerInfo[playerid][pPosI][i]=0.0; }
    PlayerInfo[playerid][pIdleTime] = 0;
	return 1;
}
//============================================//
forward CheckSkinSQL(playerid);
public CheckSkinSQL(playerid)
{
    new fetch[128];
    cache_get_field_content(0, "Model", fetch);
	if(GetPlayerSkin(playerid) != strval(fetch))
	{
	    cache_get_field_content(0, "Model", fetch);
		SetPVarInt(playerid, "Model", strval(fetch));
		SetPlayerSkinEx(playerid, strval(fetch));
		SCM(playerid, -1, "Skin has been updated from the User Control Panel.");
	}
	return 1;
}
//============================================//
forward CheckAppsSQL(playerid);
public CheckAppsSQL(playerid)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
        new count = 0;
        foreach(new i : Player)
        {
            if(GetPVarInt(i, "Helper") > 0) count++;
        }
		if(GetPVarInt(playerid, "Helper") > 0 || (GetPVarInt(playerid, "Admin") > 0 && count < 2))
		{
			new msg[128];
			format(msg, sizeof(msg), "HELPER: There are (%d) pending applications.", rows);
			SCM(playerid, COLOR_LIGHTBLUE, msg);
		}
    }
	return 1;
}
//============================================//
stock IsPlayerFalling(playerid)
{
    new animlib[32],tmp[32], Float:speed = GetPlayerSpeed(playerid, false);
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, sizeof(animlib), tmp, sizeof(tmp));
    if(!strcmp(tmp, "FALL_FALL") && GetPVarInt(playerid, "Control") == 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !IsPlayerInAnyVehicle(playerid) && speed >= 7.0) return true;
    return false;
}
//============================================//
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(!response)
	{
		switch(extraid)
		{
			case 10:
			{
				TogglePlayerControllable(playerid, 1);
			}

			case 14:
			{
				SetPlayerSkinEx(playerid, 26);
    			LoadAccEx(playerid);
			}

			case 21:
			{
				SetPVarInt(playerid, "LOADDEAL", 0);
        		SetPVarInt(playerid, "VEHID", 0);
        		TogglePlayerControllableEx(playerid, true);
			}

			default:
			{
				SCM(playerid, COLOR_ERROR, "Menu cancelled.");
			}
		}
		return 1;
	}
    if(extraid == 1) //Clothing items
    {
		if(modelid == 18636 || modelid == 19161 || modelid == 19162 || modelid == 19141 ||
		modelid == 19142 || modelid == 19347 || modelid == 19774 || modelid == 19775 ||
		modelid == 19942 || modelid == 19773 || modelid == 19783 || modelid == 19784 ||
		modelid == 19785 || modelid == 19781 || modelid == 19782 || modelid == 19778 ||
		modelid == 19779 || modelid == 19780)
		{
		    if(GetPVarInt(playerid, "Member") != FACTION_LSPD)
		    {
				SendClientMessage(playerid, COLOR_ERROR, "This attachment object can only be used by LSPD.");
		        return 1;
		    }
		}
        SetPVarInt(playerid, "ToyModelC", modelid);
		ShowPlayerDialogEx(playerid, 294, DIALOG_STYLE_LIST, "Select bone", "Spine\nHead\nLeft Upper Arm\nRight Upper Arm\nLeft Hand\nRight Hand\nLeft Thigh\nRight Thigh\nLeft foot\nRight Foot\nRight Calf\nLeft Calf\nLeftForearm\nRight Forearm\nLeft Shoulder\nRight Shoulder\nNeck\nJaw", "Select","Cancel");
    }
    if(extraid == 2) //FURNITURE
    {
        new listitem=0, found = 0, objectid = 0;

        for(new xe = 0; xe < sizeof(FurnObjs); xe++)
        {
            if(modelid == FurnObjs[xe])
            {
                if(found == 0)
                {
                    listitem=xe;
                    found++;
                    objectid=FurnObjs[listitem];
	                break;
                }
		    }
        }

        if(found == 0)
        {
	        for(new xe = 0; xe < sizeof(OutdoorFurnObjs); xe++)
	        {
	            if(modelid == OutdoorFurnObjs[xe])
	            {
	                if(found == 0)
	                {
	                    listitem=xe;
	                    found++;
	                    objectid=OutdoorFurnObjs[listitem];
	                    break;
	                }
			    }
	        }
	    }
        if(found == 0) return true;
        new Float:X, Float:Y, Float:Z, obj = 0, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 1);
		SetPVarInt(playerid, "Mute", 1);
		PlayerInfo[playerid][pFurnID]=objectid;
		EditPlayerObject(playerid, obj);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", objectid);
		SendClientMessage(playerid, COLOR_WHITE, string);
		AddPlayerTag(playerid, "(planting furniture)");
    }
    if(extraid == 3)
    {
        new key = FurnRight(playerid, 1);
        if(key <= 0) return 1;
	   	new found = 0;
	    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	    {
	        if(HouseInfo[key][hObject][h] != 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
			    {
                	if(HouseInfo[key][hoID][h] == modelid)
                	{
                	    if(found == 0)
                	    {
		            		SetPVarInt(playerid, "FurnEditKey", key);
		            		SetPVarInt(playerid, "FurnEditH", h);
				    		ShowPlayerDialogEx(playerid, 76, DIALOG_STYLE_LIST, "Editting object", "Edit Object\nSelect Material\nReset Material\nCopy Object\nRemove Object", "Select", "Close");
							found++;
						}
		        	}
			    }
	        }
	    }
    }
    if(extraid == 4)
    {
		new i = GetLSPDSkin(modelid);
		if(i == -1) return 1;
	    new text[128];
	    format(text, sizeof(text), "LSPD: You took skin '%s'", LSPDskin[i][Name]);
	    if(GetPVarInt(playerid, "Rank") < LSPDskin[i][Rank]) return error(playerid, "You are not allowed to wear this skin.");
    	SetPlayerSkinEx(playerid, LSPDskin[i][SkinID]);
    	SCM(playerid, -1, text);
    }
    if(extraid == 5)
    {
        if(GetPVarInt(playerid, "Cash") < 100) return error(playerid, "Insufficienf funds ($100 needed)");
        GivePlayerMoneyEx(playerid, -100);
        SetPlayerSkinEx(playerid, modelid);
    }
    if(extraid == 6)
    {
		new text[128];
		new i = GetGovSkin(modelid);
		if(i == -1) return 1;
		format(text, sizeof(text), "Government: You took skin '%s'", Govskin[i][Name]);
	    SetPlayerSkinEx(playerid, Govskin[i][SkinID]);
	    SCM(playerid, -1, text);
    }
    if(extraid == 7)
    {
		new text[128];
		new i = GetLSFDSkin(modelid);
		if(i == -1) return 1;
		format(text, sizeof(text), "LSFD: You took skin '%s'", LSFDskin[i][Name]);
	    SetPlayerSkinEx(playerid, LSFDskin[i][SkinID]);
	    SCM(playerid, -1, text);
    }
    if(extraid == 8)
    {
        new listitem=0, found = 0, objectid = 0;
        for(new xe;xe<sizeof(FurnObjs);xe++)
        {
            if(modelid == FurnObjs[xe])
            {
                if(found == 0)
                {
                    listitem=xe;
                    found++;
                    objectid=FurnObjs[listitem];
                    break;
                }
		    }
        }

        if(found == 0)
        {
	        for(new xe = 0;xe<sizeof(OutdoorFurnObjs);xe++)
	        {
	            if(modelid == OutdoorFurnObjs[xe])
	            {
	                if(found == 0)
	                {
	                    listitem=xe;
	                    found++;
	                    objectid=OutdoorFurnObjs[listitem];
	                    break;
	                }
			    }
	        }
	    }
        if(found == 0) return true;
        new Float:X, Float:Y, Float:Z, obj = 0, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 3);
		SetPVarInt(playerid, "Mute", 1);
		PlayerInfo[playerid][pFurnID]=objectid;
		EditPlayerObject(playerid, obj);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", objectid);
		SendClientMessage(playerid, COLOR_WHITE, string);
		AddPlayerTag(playerid, "(planting furniture)");
    }
    if(extraid == 9)
    {
        new key = FurnRight(playerid, 2);
        if(key <= 0) return 1;
	   	new found = 0;
	    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	    {
	        if(BizInfo[key][bObject][h] != 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
			    {
                	if(BizInfo[key][boID][h] == modelid)
                	{
                	    if(found == 0)
                	    {
							SetPVarInt(playerid, "FurnEditKey", key);
							SetPVarInt(playerid, "FurnEditH", h);
				    		ShowPlayerDialogEx(playerid, 103, DIALOG_STYLE_LIST, "Editting object", "Edit Object\nSelect Material\nReset Material\nCopy Object\nRemove Object", "Select", "Close");
							found++;
						}
		        	}
			    }
	        }
	    }
    }
    if(extraid == 10) // /el edit
    {
    	new Float:x, Float:y, Float:z, Float:a;
    	GetPlayerPos(playerid, x, y, z);
    	GetVehicleZAngle(GetPlayerVehicleID(playerid), a);

    	new obj = CreatePlayerObject(playerid, modelid, x, y, z, 0.0, 0.0, a, 100.0);
    	SetPVarInt(playerid, "SirenModel", modelid);
	    SetPVarInt(playerid, "FurnObject", obj);
	    SetPVarInt(playerid, "EditorMode", 10);
	    SetPVarInt(playerid, "Mute", 1);
	    EditPlayerObject(playerid, obj);

	    CarEngine(GetPlayerVehicleID(playerid), 0);
	    SendClientMessage(playerid, COLOR_WHITE, "Navigate the object and press the save icon when done. (hold 'W' to move the camera)");
    }
    if(extraid == 11)
    {
    	SetPlayerSkinEx(playerid, modelid);

    	SendClientMessage(playerid, COLOR_WHITE, "You have put on the event clothing!");
    }
    if(extraid == 12)
    {
    	new Float:x, Float:y, Float:z;
    	GetPlayerPos(playerid, x, y, z);
    	GetXYInFrontOfPlayer(playerid, x, y, 3.0);

    	new obj = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, 0.0);
    	EditDynamicObject(playerid, obj);

	    SetPVarInt(playerid, "EditorMode", 15);
	    SetPVarInt(playerid, "EditorModel", modelid);

	    SendClientMessage(playerid, COLOR_WHITE, "Navigate the object and press the save icon when done. (hold 'SPACE' to move the camera)");
	    return 1;
    }
    if(extraid == 13)
    {
    	new Float:x, Float:y, Float:z;
    	GetPlayerPos(playerid, x, y, z);
    	GetXYInFrontOfPlayer(playerid, x, y, 3.0);

    	new obj = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, 0.0);
    	EditDynamicObject(playerid, obj);

	    SetPVarInt(playerid, "EditorMode", 16);
	    SetPVarInt(playerid, "EditorModel", modelid);

	    SendClientMessage(playerid, COLOR_WHITE, "Navigate the object and press the save icon when done. (hold 'SPACE' to move the camera)");
	    return 1;
    }
    if(extraid == 14)
    {
    	PlayerInfo[playerid][pRegisterSkin] = modelid;
    	LoadAccEx(playerid);
    }
	if(extraid == 15) // Mapping script
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		GetXYInFrontOfPlayer(playerid, x, y, 3.0);

		new obj = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, 0.0);
		EditDynamicObject(playerid, obj);

		SetPVarInt(playerid, "EditorMode", 17);
		SetPVarInt(playerid, "EditorModel", modelid);

		SendClientMessage(playerid, COLOR_WHITE, "Navigate the object and press the save icon when done. (hold 'SPACE' to move the camera)");

		AddPlayerTag(playerid, "(mapping)");
	}
    if(extraid == 20)
    {
        new listitem=0, found = 0;
        for(new xe;xe<sizeof(RbObjs);xe++)
        {
            if(modelid == RbObjs[xe])
            {
                if(found == 0)
                {
                    listitem=xe;
                    found++;
                }
		    }
        }
        if(found == 0) return true;
        new objectid=RbObjs[listitem], Float:X, Float:Y, Float:Z, obj = 0, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 5);
		SetPVarInt(playerid, "Mute", 1);
		PlayerInfo[playerid][pFurnID]=objectid;
		EditPlayerObject(playerid, obj);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", objectid);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    return 1;
}
//============================================//
stock GetLSPDSkin(objectid)
{
	new found = -1;
	for(new i = 0; i < sizeof(LSPDskin); i++)
	{
        if(LSPDskin[i][SkinID] == objectid)
        {
        	found = i;
        }
	}
	return found;
}
//============================================//
stock GetGovSkin(objectid)
{
	new found = -1;
	for(new i = 0; i < sizeof(Govskin); i++)
	{
	    if(Govskin[i][SkinID] == objectid)
	    {
	    	found = i;
	    }
	}
	return found;
}
//============================================//
stock GetLSFDSkin(objectid)
{
	new found = -1;
	for(new i = 0; i < sizeof(LSFDskin); i++)
	{
	    if(LSFDskin[i][SkinID] == objectid)
	    {
	    	found = i;
	    }
	}
	return found;
}
//============================================//
forward RetrieveMask(mask, playerid);
public RetrieveMask(mask, playerid)
{
    new fields, rows, string[128];
    cache_get_data(rows, fields);
    if(rows)
    {
		new fetch[128];
    	cache_get_field_content(0, "Name", fetch);
    	format(string, sizeof(string), "Mask ID %d = (%s)", mask, fetch);
    	SCM(playerid, -1, string);
	}
	else
	{
	    SCM(playerid, COLOR_ERROR, "This mask ID is not in use.");
	}
	return 1;
}
//============================================//
stock LoadAdText(text[])
{
	new AdT2[8][256];
    for(new i = 0; i < 7; i++)
    {
		if(Ad[i] == 0)
		{
		    Ad[i]=1;
		    format(AdT[i], 128,"%s", text);
		    return 1;
		}
    }
    for(new i = 0; i < 7; i++) format(AdT2[i], 128,"%s", AdT[i]);
    for(new i = 0; i < 7; i++)
    {

		if(Ad[i] == 1)
		{
		    if(i != 0)
		    {
		        format(AdT[i], 128,"%s", AdT2[i-1]);
		    }
		}
    }
    Ad[0]=1;
    format(AdT[0], 128,"%s", text);
	return 1;
}
//============================================//
stock IsValidFurniture(objectid)
{
	if(objectid >= 320 || objectid <= 19512) return true;
	return false;
}
//============================================//
stock IsValidClothing(objectid)
{
	new count = 0;
	for(new x;x<sizeof(AttachmentObjects);x++)
    {
        if(objectid == AttachmentObjects[x][attachmodel])
        {
            count=1;
		}
    }
	return count;
}
//============================================//
stock GetAttachmentName(objectid)
{
	new string[128];
	string="N/A";
	for(new x;x<sizeof(AttachmentObjects);x++)
    {
        if(objectid == AttachmentObjects[x][attachmodel])
        {
            format(string, sizeof(string), "%s", AttachmentObjects[x][attachname]);
		}
    }
	return string;
}
//============================================//
stock PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarInt(playerid, "AudioT") == 0 && strlen(url) > 5)
	{
	    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	    strmid(PlayerInfo[playerid][pAudioUrl], url, 0, strlen(url), 255);
	}
    return true;
}
//============================================//
stock StopAudioStreamForPlayerEx(playerid) {
    strmid(PlayerInfo[playerid][pAudioUrl], "NULL", 0, strlen("NULL"), 255);
    StopAudioStreamForPlayer(playerid);
    return true;
}
//============================================//
stock PrintArea(playerid, type, num)
{
    new string[128];
    switch(type)
    {
        case 0: format(string, 128, "~w~%s", GetPlayerArea(playerid));
        case 1: string="Property";
        case 2: format(string, 128, "~w~%s", IntInfo[num][iiName]);
        case 3: format(string, 128, "~w~%s", BizInfo[num][Name]);
        case 4: string="Interior";
    }
    return string;
}
//============================================//
stock PrintPlayerArea(playerid)
{
    new string[128];
    format(string, 128, "%s", GetPlayerArea(playerid));
    if(GetPVarInt(playerid, "HouseEnter") != 0) format(string, 128, "Property %d", GetPVarInt(playerid, "HouseEnter"));
    if(GetPVarInt(playerid, "IntEnter") != 0) format(string, 128, "%s", IntInfo[GetPVarInt(playerid, "IntEnter")][iiName]);
    if(GetPVarInt(playerid, "BizEnter") != 0) format(string, 128, "%s [%i]", BizInfo[GetPVarInt(playerid, "BizEnter")][Name], GetPVarInt(playerid, "BizEnter"));
    return string;
}
//============================================//
forward CheckSub();
public CheckSub()
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i <= rows; i++)
        {
			new fetch[256], dont, don, pid, query[256];
	    	cache_get_field_content(i, "MonthDonT", fetch);
			dont = strval(fetch);
	    	cache_get_field_content(i, "MonthDon", fetch);
			don = strval(fetch);
	    	cache_get_field_content(i, "ID", fetch);
			pid = strval(fetch);
	        if(don > 0)
	        {
				dont = dont - 1;
				if(dont == 0)
				{
				    don = 0;
				    printf("User ID (%d) has been offline set to subscription status (0)", pid);
				}
	        }
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET MonthDon=%d, MonthDonT=%d WHERE ID=%d",
			don, dont, pid);
			mysql_pquery(handlesql, query, "SendQuery", "");
        }
    }
	return 1;
}
//============================================//
forward nal(playerid);
public nal(playerid)
{
	SCM(playerid, COLOR_ERROR, "{FFFFFF}[{6B6B6B}ERROR{FFFFFF}] You do not have permission for this command.");
	return 1;
}
//============================================//
forward error(playerid, message[]);
public error(playerid, message[])
{
	new stringz[256];
	format(stringz, sizeof(stringz), "{FFFFFF}[{6B6B6B}ERROR{FFFFFF}] %s", message);
	SCM(playerid, COLOR_ERROR, stringz);
	return 1;
}
//============================================//
forward usage(playerid, message[]);
public usage(playerid, message[])
{
	new string[128];
	format(string, sizeof(string), "{FFFFFF}[{6B6B6B}USAGE{FFFFFF}] %s", message);
	SCM(playerid, COLOR_ERROR, string);
	return 1;
}
//============================================//
stock BanPlayer(playerid,reason[],admin[], temp = 0)
{
	ResetPlayerWeapons(playerid);
    //if(IsPlayerNPC(playerid)) return true;
   	if(GetPVarInt(playerid, "BeingBanned") == 1) return true;
   	if(!IsPlayerConnected(playerid)) return 1;
    SetPVarInt(playerid, "BeingBanned", 1);
	new string[MAX_MSG_LENGTH],hour,minute,second,year, month, day, mtext[128], query[550];
	getdate(year, month, day);
	gettime(hour, minute, second);
    TogglePlayerSpectating(playerid,1);
	if(month == 1) mtext = "January";
	else if(month == 2)  mtext = "February";
	else if(month == 3)  mtext = "March";
	else if(month == 4)  mtext = "April";
	else if(month == 5)  mtext = "May";
	else if(month == 6)  mtext = "June";
	else if(month == 7)  mtext = "July";
	else if(month == 8)  mtext = "August";
	else if(month == 9)  mtext = "September";
	else if(month == 10)  mtext = "October";
	else if(month == 11)  mtext = "November";
	else if(month == 12)  mtext = "December";
	ClearChatbox(playerid, 20);
	SendClientMessage(playerid, COLOR_ERROR, "______________________________________________________________________");
	format(string, sizeof(string), "You have been banned from PR-RP by %s", admin);
	SendClientMessage(playerid, COLOR_ERROR, string);
	format(string, sizeof(string), "Reason: %s", reason);
	SendClientMessage(playerid, COLOR_ERROR, string);
	format(string, sizeof(string), "Date & Time: %d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);
    SendClientMessage(playerid, COLOR_ERROR, string);
    //====================================================
 	new playersip[64], datum[64];
 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
 	GetPlayerIp(playerid,playersip,sizeof(playersip));

 	if(temp != 0)
 	{
 		if(day + temp > MonthDays[month - 1])
 		{
 			month++;
 			if(month > 12)
 			{
 				year++;
 				month = 1;
 			}

 			day = (day + temp) - MonthDays[month - 1];
 		}
 		else
 		{
 			day += temp;
 		}

 		new date[32];
 		format(date, sizeof(date), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);

 		getdate(year, month, day);
		gettime(hour, minute, second);

 		new date_current[32];
 		format(date_current, sizeof(date_current), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);

 		mysql_format(handlesql, query, sizeof(query),"INSERT INTO bans (Date, BannedUntil, bUsername, bReason, bIP, BannedBy, bForum) VALUES ('%e', '%e', '%e', '%e', '%e', '%e', '%e')", 
 			date_current, date, PlayerInfo[playerid][pUsername], reason, playersip, admin, AdminName(playerid));
		mysql_pquery(handlesql, query);

		mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_bans (Date, BannedUntil, bUsername, bReason, bIP, BannedBy, bForum) VALUES ('%e', '%e', '%e', '%e', '%e', '%e', '%e')", 
			date_current, date, PlayerInfo[playerid][pUsername], reason, playersip, admin, AdminName(playerid));
		mysql_pquery(handlesql, query);

		format(string, sizeof(string), "Banned Until: %s", date);
		SendClientMessage(playerid, COLOR_ERROR, string);
 	}
 	else
 	{
 		getdate(year, month, day);
		gettime(hour, minute, second);

 		new date_current[32];
 		format(date_current, sizeof(date_current), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);
 		
 		mysql_format(handlesql, query, sizeof(query),"INSERT INTO bans (Date, BannedUntil, bUsername, bReason, bIP, BannedBy, bForum) VALUES ('%e', 'Permanent', '%e', '%e', '%e', '%e', '%e')", 
 			date_current, PlayerInfo[playerid][pUsername], reason, playersip, admin, AdminName(playerid));
		mysql_pquery(handlesql, query);

		mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_bans (Date, BannedUntil, bUsername, bReason, bIP, BannedBy, bForum) VALUES ('%e', 'Permanent', '%e', '%e', '%e', '%e', '%e')", 
			date_current, PlayerInfo[playerid][pUsername], reason, playersip, admin, AdminName(playerid));
		mysql_pquery(handlesql, query);
 	}

 	SendClientMessage(playerid, COLOR_ERROR, "To appeal this ban, head to forum.pr-rp.com");
 	SendClientMessage(playerid, COLOR_ERROR, "______________________________________________________________________");

	KickPlayer(playerid, "You have been banned from the server.");
	return 1;
}
//============================================//
forward GetBanInfo(playerid);
public GetBanInfo(playerid)
{
	new fields, rows;
	cache_get_data(rows, fields);
	if(rows)
	{
		new reason[256], adminname[64], banneduntil[64], banneddate[64];
		cache_get_field_content(0, "bReason", reason);
		cache_get_field_content(0, "BannedBy", adminname);
		cache_get_field_content(0, "BannedUntil", banneduntil);
		cache_get_field_content(0, "Date", banneddate);

		new string[256];
		format(string, sizeof(string), "______________________________________________________________________");
		SCM(playerid, COLOR_ERROR, string);
	    format(string, sizeof(string), "You are banned from PR-RP.");
	    SendClientMessage(playerid, COLOR_ERROR, string);
	    format(string, sizeof(string), "Reason: %s", reason);
	    SendClientMessage(playerid, COLOR_ERROR, string);
	    format(string, sizeof(string), "Banned By: %s", adminname);
	    SendClientMessage(playerid, COLOR_ERROR, string);
	    format(string, sizeof(string), "Date & Time: %s", banneddate);
	    SendClientMessage(playerid, COLOR_ERROR, string);
	    if(strcmp(banneduntil, "Permanent"))
	    {
	    	format(string, sizeof(string), "Banned Until: %s", banneduntil);
	    	SendClientMessage(playerid, COLOR_ERROR, string);
	    }
	    format(string, sizeof(string), "To appeal this ban, go to forum.pr-rp.com");
	    SendClientMessage(playerid, COLOR_ERROR, string);
		format(string, sizeof(string), "______________________________________________________________________");
		SCM(playerid, COLOR_ERROR, string);
		SetPVarInt(playerid, "Banned", 1);
	 	KickPlayer(playerid, " ");
	}
	return 1;
}
//============================================//
forward CheckIfBanned(playerid);
public CheckIfBanned(playerid)
{
	new ip[32], query[256];
	GetPlayerIp(playerid, ip, sizeof(ip));

	mysql_format(handlesql, query, sizeof(query),"SELECT * FROM bans WHERE (bIP='%e' OR bUsername='%e')", ip, PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "GetBanInfo", "i", playerid);
	return 1;
}
//============================================//
forward CheckPhone(playerid, number);
public CheckPhone(playerid, number)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows) return error(playerid, "This phone number is already taken.");
    
    new sendername[MAX_PLAYER_NAME], string[256];
    format(sendername, sizeof(sendername), "%s", PlayerInfo[playerid][pUsername]);
    GiveNameSpace(sendername);
	format(string, 256, "%s[%d] is requesting a phonenumber change, [%d], /acp.", sendername, playerid, number);
	SendAdminMessage(0xFF0000FF,string);
	SetPVarInt(playerid, "ReqNum", number);
	SCM(playerid, -1, "Your phone-change request has been submitted and is being reviewed by the administrators.");
	return 1;
}
//============================================//
forward BanPlayerO(name[], pip[], reason[], admin[]);
public BanPlayerO(name[], pip[], reason[], admin[])
{
	new hour,minute,second,year,month,day,mtext[128];
	getdate(year, month, day);
	gettime(hour,minute,second);
	if(month == 1) mtext = "January";
	else if(month == 2)  mtext = "February";
	else if(month == 3)  mtext = "March";
	else if(month == 4)  mtext = "April";
	else if(month == 5)  mtext = "May";
	else if(month == 6)  mtext = "June";
	else if(month == 7)  mtext = "July";
	else if(month == 8)  mtext = "August";
	else if(month == 9)  mtext = "September";
	else if(month == 10)  mtext = "October";
	else if(month == 11)  mtext = "November";
	else if(month == 12)  mtext = "December";
    //====================================================//
 	new datum[64], query[500];
 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);

	mysql_format(handlesql, query, sizeof(query),"INSERT INTO bans (Date, BannedUntil, bUsername, bReason, bIP, BannedBy) VALUES ('%e', 'Permanent', '%e', '%e', '%e', '%e')",
	datum, name, reason, pip, admin);
	mysql_pquery(handlesql, query);

	mysql_format(handlesql, query, sizeof(query),"SELECT `ForumName` FROM `accounts` WHERE `Name`='%s'", name);
	mysql_pquery(handlesql, query, "AddForumNameToBan", "s", name);

	mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_bans (Date, BannedUntil, bUsername, bReason, bIP, BannedBy) VALUES ('%e','Permanent', '%e', '%e', '%e', '%e')",
	datum, name, reason, pip, admin);
	mysql_pquery(handlesql, query);
	return 1;
}

forward AddForumNameToBan(name[]);
public AddForumNameToBan(name[])
{
	if(cache_get_row_count() > 0)
	{
		new forumname[32];
		cache_get_field_content(0, "ForumName", forumname);

		new query[256];
		mysql_format(handlesql, query, sizeof(query),"UPDATE `bans` SET `bForum`='%s' WHERE `bUsername`='%s'", forumname, name);
		mysql_pquery(handlesql, query);

		mysql_format(handlesql, query, sizeof(query),"UPDATE `logs_bans` SET `bForum`='%s' WHERE `bUsername`='%s'", forumname, name);
		mysql_pquery(handlesql, query);
	}
}
//============================================//
forward MDCPlayer(playerid);
public MDCPlayer(playerid)
{
    new fields, rows, id, Float:x, Float:y, Float:z;
    cache_get_data(rows, fields);
    if(!rows) return ShowPlayerDialogEx(playerid, 282, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the name.\n{BD0000}(Person not found)", "Continue","Back");
    new fetch[50], diatxt[1024], temptxt[64],temptxt2[64], tmpid;
    
    cache_get_field_content(0, "PhoneNum", fetch);
    tmpid = strval(fetch);
    cache_get_field_content(0, "Name", fetch);
    format(diatxt, sizeof(diatxt), "{FF3333}BASIC INFORMATION\n\n");
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s | {33FF66}Phone: {FFFFFF}%d\n",diatxt, fetch,tmpid);
	cache_get_field_content(0, "Sex", fetch);
	if(strval(fetch) == 1) format(temptxt, 20, "Male");
	if(strval(fetch) == 2) format(temptxt, 20, "Female");
    cache_get_field_content(0, "Age", fetch);
    tmpid = strval(fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Gender: {FFFFFF}%s | {33FF66}Age: {FFFFFF}%d\n", diatxt, temptxt, tmpid);
	cache_get_field_content(0, "DriveLic", fetch);
	if(strval(fetch) == 0) format(temptxt, 20, "Not passed");
	if(strval(fetch) == 1) format(temptxt, 20, "Passed");
	cache_get_field_content(0, "GunLic", fetch);
	if(strval(fetch) == 0) format(temptxt2, 20, "Not passed");
	if(strval(fetch) == 1) format(temptxt2, 20, "Passed");
    format(diatxt, sizeof(diatxt), "%s{33FF66}Drivers License: {FFFFFF}%s | {33FF66}Weapon License: {FFFFFF}%s\n", diatxt, temptxt, temptxt2);
    format(diatxt, sizeof(diatxt), "%s{FF3333}POSSESIONS INFORMATION\n\n",diatxt);
	new plate[VEHICLE_PLATE_MAX_LENGTH];
	for(new i = 0; i < cache_get_row_count(); i++) {
	    cache_get_field_content(i, "Plate", plate);
        format(diatxt, sizeof(diatxt), "%s{33FF66}Model: {FFFFFF}%s | {33FF66}Plate: {FFFFFF}%s {CCCCCC}(Click for more information)\n", diatxt, VehicleName[cache_get_field_content_int(i, "Model") - 400], plate);
        MDCinfo[playerid][i][mVID] = cache_get_field_content_int(i, "ID");
	}
	//House information
	cache_get_field_content(0, "HouseKey", fetch);
	id = strval(fetch);
	if(id != 0)
	{
		x = HouseInfo[id][hXo];
		y = HouseInfo[id][hYo];
		z = HouseInfo[id][hZo];
		format(diatxt, sizeof(diatxt), "%s{33FF66}Property Area: {FFFFFF}%s | {33FF66}Number: {FFFFFF}%d {CCCCCC}(Click for more information)\n", diatxt, GetZone(x, y, z), id);
	}
	if(id == 0) format(diatxt, sizeof(diatxt), "%s{33FF66}Business Area: {FFFFFF}None | {33FF66}Number: {FFFFFF}None\n", diatxt);
	//Business information
	cache_get_field_content(0, "BizKey", fetch);
	id = strval(fetch);
	if(id != 0)
	{
		x = BizInfo[id][Xo];
		y = BizInfo[id][Yo];
		z = BizInfo[id][Zo];
		format(diatxt, sizeof(diatxt), "%s{33FF66}Area: {FFFFFF}%s | {33FF66}Name: {FFFFFF}%s\n", diatxt, GetZone(x, y, z), BizInfo[id][Name]);
	}
	if(id == 0) format(diatxt, sizeof(diatxt), "%s{33FF66}Area: {FFFFFF}None | {33FF66}Name: {FFFFFF}None\n", diatxt);
	//Criminal record
	format(diatxt, sizeof(diatxt), "%s{FF3333}CRIMINAL RECORD\n{CCCCCC}(Click for criminal record)\n{CCCCCC}(Click for outstanding tickets)",diatxt);
	ShowPlayerDialogEx(playerid, 283, DIALOG_STYLE_LIST, "Mobile data computer", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward MDCPlayer2(playerid);
public MDCPlayer2(playerid)
{
    new fields, rows, fetch[128], diatxt[1024];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "crime", fetch);
	        if(strlen(fetch) > 0)
	        {
		        format(diatxt, sizeof(diatxt), "%s{33FF66}Charge: {FFFFFF}%s {CCCCCC}(Click for more information)\n",diatxt, fetch);
		        //Seting info for player to view on dialog.
		        cache_get_field_content(i, "time", fetch);
	            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

	            cache_get_field_content(i, "player", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

	            cache_get_field_content(i, "officer", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
			}
		}
    }
    else
    {
        format(diatxt, sizeof(diatxt), "%s{FFFFFF}No criminal record\n", diatxt);
        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
	}
	ShowPlayerDialogEx(playerid, 284, DIALOG_STYLE_LIST, "Mobile data computer", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward MDCPlayer3(playerid);
public MDCPlayer3(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid crime selected.");
    
	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "crime", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Criminal charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 900;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Case ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialogEx(playerid, 285, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
forward MDCPlayer4(playerid);
public MDCPlayer4(playerid)
{
    new fields, rows, fetch[128], diatxt[512], temptxt[50];
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid vehicle selected.");
    
 	cache_get_field_content(0, "Model", fetch);
 	format(temptxt, 64, "%s", VehicleName[strval(fetch) - 400]);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Model: {FFFFFF}%s\n",diatxt, temptxt);
 	cache_get_field_content(0, "Owner", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Registered owner: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Plate", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Plate: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Value", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Value: {FFFFFF}%s\n",diatxt, FormatMoney(strval(fetch)));
    ShowPlayerDialogEx(playerid, 286, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
stock SetPlayerSkinEx(playerid, skinid)
{
	if(GetPVarInt(playerid, "HouseKey") != 0)
	{
		new houseid = GetPVarInt(playerid, "HouseKey");

		new found = -1;
		for(new i = 0; i < MAX_HOUSE_SKINS; i++)
		{
			if(HouseInfo[houseid][hSkin][i] == GetPVarInt(playerid, "Model"))
			{
				found = i;
			}
		}

		if(found == -1)
		{
			for(new i = MAX_HOUSE_SKINS - 1; i > 0; i--)
			{
				HouseInfo[houseid][hSkin][i] = HouseInfo[houseid][hSkin][i - 1];
			}
		}

		HouseInfo[houseid][hSkin][0] = GetPVarInt(playerid, "Model");
		SaveHouseID(houseid, 0);
	}

    new vehicle, seat = GetPlayerVehicleSeat(playerid);
    if(seat != -1)
    {
        vehicle = GetPlayerVehicleID(playerid);
        ClearAnimationsEx(playerid);
        SetPlayerSkin(playerid, skinid);
        SetPVarInt(playerid, "Model", skinid);
        PutPlayerInVehicleEx(playerid, vehicle, seat);
    }
    else
	{
		SetPlayerSkin(playerid, skinid);
		SetPVarInt(playerid, "Model", skinid);
	}
	return 1;
}
//============================================//
forward MDCPlayer5(playerid);
public MDCPlayer5(playerid)
{
    new fields, rows, fetch[128], diatxt[1024];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "amount", fetch);
	        if(strlen(fetch) > 0 && strval(fetch) != 0)
	        {
		        format(diatxt, sizeof(diatxt), "%s{33FF66}Amount: {FFFFFF}%s {CCCCCC}(Click for more information)\n",diatxt, FormatMoney(strval(fetch)));
		        //Seting info for player to view on dialog.
		        cache_get_field_content(i, "time", fetch);
	            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

	            cache_get_field_content(i, "player", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

	            cache_get_field_content(i, "officer", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
			}
		}
    }
    else
    {
        format(diatxt, sizeof(diatxt), "%s{FFFFFF}No pending tickets\n", diatxt);
        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
	}
	ShowPlayerDialogEx(playerid, 291, DIALOG_STYLE_LIST, "Mobile data computer", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward MDCPlayer6(playerid);
public MDCPlayer6(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid crime selected.");

	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "reason", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 100;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialogEx(playerid, 292, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
 //============================================//
forward MDCVehicle(playerid);
public MDCVehicle(playerid)
{
    new fields, rows, fetch[128], diatxt[512], temptxt[50];
    cache_get_data(rows, fields);
    if(!rows) return ShowPlayerDialogEx(playerid, 287, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the vehicle plate.\n{BD0000}(Vehicle not found)", "Continue","Back");
    
 	cache_get_field_content(0, "Model", fetch);
 	format(temptxt, 64, "%s", VehicleName[strval(fetch) - 400]);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Model: {FFFFFF}%s\n",diatxt, temptxt);
 	cache_get_field_content(0, "Owner", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Registered owner: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Plate", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Plate: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Value", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Value: {FFFFFF}%s\n",diatxt, FormatMoney(strval(fetch)));
    ShowPlayerDialogEx(playerid, 288, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
	return 1;
}
//============================================//
forward MDCCase(playerid);
public MDCCase(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return ShowPlayerDialogEx(playerid, 289, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the Case ID.\n{BD0000}(Case not found)", "Continue","Back");

	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "crime", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Criminal charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 900;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Case ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialogEx(playerid, 290, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
forward GetTicketsP(playerid);
public GetTicketsP(playerid)
{
    new fields, rows, fetch[128], diatxt[2048];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "amount", fetch);
	        if(strlen(fetch) > 0 && strval(fetch) != 0)
	        {
		        format(diatxt, sizeof(diatxt), "%s{33FF66}Amount: {FFFFFF}%s {CCCCCC}\n",diatxt, FormatMoney(strval(fetch)));
		        //Seting info for player to view on dialog.
		        cache_get_field_content(i, "time", fetch);
	            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

	            cache_get_field_content(i, "player", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

	            cache_get_field_content(i, "officer", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
			}
		}
    }
    else
    {
        format(diatxt, sizeof(diatxt), "%s{FFFFFF}No pending tickets\n", diatxt);
        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
	}
	ShowPlayerDialogEx(playerid, 293, DIALOG_STYLE_LIST, "Tickets (click a ticket for more information)", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward GetTicketsP2(playerid);
public GetTicketsP2(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid ticket selected.");

	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "reason", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 100;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialogEx(playerid, DIALOG_CLOSE, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Close", "");
    return 1;
}
//============================================//
forward PayTicketsP(playerid);
public PayTicketsP(playerid)
{
	if(cache_get_row_count() == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have no unpaid tickets.");

	new total = 0;
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		new amount;
		amount = cache_get_field_content_int(i, "amount");

		total += amount;
	}

	if(GetPlayerMoneyEx(playerid) < total) return SendClientMessage(playerid, COLOR_ERROR, "You don't have enough money to pay off all of your tickets.");

	GivePlayerMoneyEx(playerid, -total);

	new query[512];
	mysql_format(handlesql, query, sizeof(query), "UPDATE tickets SET paid=1 WHERE player='%s'", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query);

	SendClientMessage(playerid, COLOR_WHITE, "All tickets have been paid off!");
	return 1;
}
//============================================//
forward PayImpoundSQL(playerid);
public PayImpoundSQL(playerid)
{
    new fields, rows, fetch[128], total, temp, query[256], string[128], mdl, found = 0;
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "Impound", fetch);
	        if(strval(fetch) > 0)
	        {
				if(found == 0) {
				total = strval(fetch);
				cache_get_field_content(i, "ID", fetch);
				temp = strval(fetch);
				cache_get_field_content(i, "Model", fetch);
				mdl = strval(fetch);
				found++; }
			}
		}
		if(found > 0) {
        	if(GetPlayerMoneyEx(playerid) >= total)
			{
				GivePlayerMoneyEx(playerid, -total);
				format(string, 128, "Impound charge of %s was paid for the %s!", FormatMoney(total), VehicleName[mdl-400]);
				SCM(playerid, -1, string);
				format(query, sizeof(query), "UPDATE vehicles SET Impound=0 WHERE ID = %d", temp);
				mysql_function_query(handlesql, query, false, "SendQuery", "");
			}
			else error(playerid, "Insufficient funds.");
		}
    }
    if(found == 0)
	SCM(playerid, COLOR_ERROR, "You have no pending impounds.");
	return 1;
}
//============================================//
forward OnFactionsLoaded();
public OnFactionsLoaded()
{
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		new fetch[2048];

		new id = cache_get_field_content_int(i, "ID");

		FactionInfo[id][fDBID] = cache_get_field_content_int(i, "ID");

		cache_get_field_content(i, "Name", fetch);
		format(FactionInfo[id][fName], 128, fetch);

		cache_get_field_content(i, "MOTD", fetch);
		format(FactionInfo[id][fMOTD], 128, fetch);

		FactionInfo[id][fRights] = cache_get_field_content_int(i, "Rights");
		FactionInfo[id][fTagRights] = cache_get_field_content_int(i, "TagRights");
		FactionInfo[id][fFactionChat] = cache_get_field_content_int(i, "FactionChat");

		new RankName[MAX_FACTION_RANKS][64];
		new RankBonus[MAX_FACTION_RANKS][32];

		cache_get_field_content(i, "RankNames", fetch);
		split(fetch, RankName, ',');

		cache_get_field_content(i, "RankBonuses", fetch);
		split(fetch, RankBonus, ',');

		for(new i2 = 1; i2 < MAX_FACTION_RANKS; i2++)
		{
			format(FactionRankInfo[id][i2][fRank], 64, RankName[i2 - 1]);
			FactionRankInfo[id][i2][fRankBonus] = strval(RankBonus[i2 - 1]);
		}

		FactionInfo[id][fWarehouseX] = cache_get_field_content_float(i, "WarehouseX");
		FactionInfo[id][fWarehouseY] = cache_get_field_content_float(i, "WarehouseY");
		FactionInfo[id][fWarehouseZ] = cache_get_field_content_float(i, "WarehouseZ");
		FactionInfo[id][fWarehouseInterior] = cache_get_field_content_int(i, "WarehouseInterior");
		FactionInfo[id][fWarehouseVirtualWorld] = cache_get_field_content_int(i, "WarehouseVirtualWorld");

		FactionInfo[id][fDailyPackages] = cache_get_field_content_int(i, "DailyPackages");
		FactionInfo[id][fAvailablePackages] = cache_get_field_content_int(i, "AvailablePackages");

		if(FactionInfo[id][fWarehouseX] != 0 || FactionInfo[id][fWarehouseY] != 0 || FactionInfo[id][fWarehouseZ] != 0)
		{
			FactionCP[id] = CreateDynamicCP(FactionInfo[id][fWarehouseX], FactionInfo[id][fWarehouseY], FactionInfo[id][fWarehouseZ], 
				1.0, FactionInfo[id][fWarehouseVirtualWorld], FactionInfo[id][fWarehouseInterior]);
		}

		printf("Faction %i loaded! (Name: %s)", id, FactionInfo[id][fName]);
	}
	return 1;
}
//============================================//
public LoadRadios(playerid)
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return 1;

    new id = 0;

	if(GetPlayerInterior(playerid) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
            if(strcmp(VehicleInfo[GetPlayerVehicleID(playerid)][vRadio], "None", true) != 0)
	        {
                if(strcmp(VehicleInfo[GetPlayerVehicleID(playerid)][vRadio], PlayerInfo[playerid][pAudioUrl], true) != 0)
                {
	                PlayAudioStreamForPlayerEx(playerid, VehicleInfo[GetPlayerVehicleID(playerid)][vRadio]);
                }
            }
  		}
  		else
  		{
  			/*
  			foreach(new i : Player)
    		{
		    	for(new i2 = 0; i2 < MAX_BOOM_BOXES; i2++)
		    	{
		    		if(IsPlayerInRangeOfPoint(i, MAX_BOOM_BOX_RANGE, RadioInfo[i2][rX], RadioInfo[i2][rY], RadioInfo[i2][rZ]))
		    		{
		    			PlayAudioStreamForPlayerEx(i, RadioInfo[i2][rURL], RadioInfo[i2][rX], RadioInfo[i2][rY], RadioInfo[i2][rZ], MAX_BOOM_BOX_RANGE, 1);
		    		}
		    	}
		    }
		    */
  		}
	}
	else
	{
	    if(GetPVarInt(playerid, "HouseEnter") != 0 || GetPVarInt(playerid, "GarageEnter") != 0)
	    {
	    	id = GetPVarInt(playerid, "HouseEnter");
	    	if(strcmp(HouseInfo[id][hRadioU], "None", true) == 0){}
	    	else
	    	{
	        	if(strcmp(HouseInfo[id][hRadioU], PlayerInfo[playerid][pAudioUrl], true) == 0){}
	        	else { PlayAudioStreamForPlayerEx(playerid, HouseInfo[id][hRadioU]); }
	    	}
	    	return true;
	    }
	    else if(GetPVarInt(playerid, "BizEnter") != 0)
	    {
	    	id = GetPVarInt(playerid, "BizEnter");
	    	if(strcmp(BizInfo[id][bRadio], "None", true) == 0){}
	    	else
	    	{
	        	if(strcmp(BizInfo[id][bRadio], PlayerInfo[playerid][pAudioUrl], true) == 0){}
	        	else { PlayAudioStreamForPlayerEx(playerid, BizInfo[id][bRadio]); }
	    	}
	    }
	}
	return true;
}
//============================================//
forward TempFreeze(playerid);
public TempFreeze(playerid)
{
	TogglePlayerControllableEx(playerid,false);
    SetTimerEx("TempUnfreeze", 1000, false, "i", playerid);
	return 1;
}
//============================================//
forward TempUnreeze(playerid);
public TempUnreeze(playerid)
{
	TogglePlayerControllableEx(playerid,true);
	return 1;
}
//============================================//
forward ReloadWeapon(playerid);
public ReloadWeapon(playerid)
{
	cmd_reload(playerid, "");
	return 1;
}
//============================================//
stock SPCM(playerid, color, text[], minlen = 110, maxlen = 120)
{
    new str[256];
    if(strlen(text) > maxlen)
    {
        new pos = maxlen;
        while(text[--pos] > ' ') {}
        if(pos < minlen) pos = maxlen;
        format(str, sizeof(str), "%.*s ...", pos, text);
        SendClientMessage(playerid,color,str);
        format(str, sizeof(str), "... %s", text[pos+1]);
        SendClientMessage(playerid,color,str);
    }
    else format(str, sizeof(str), "%s", text), SendClientMessage(playerid,color,str);
    return true;
}
//============================================//
public SetPlayerWalkStyle(playerid,style)
{
	SendClientMessage(playerid,COLOR_WHITE,"Walkstyle changed.");
	return SetPVarInt(playerid, "WalkStyle", style);
}
//============================================//
public GetPlayerWalkStyle(playerid)
{
	return GetPVarInt(playerid, "WalkStyle");
}
//============================================//
public RemovePlayerWalkStyle(playerid)
{
    SendClientMessage(playerid,COLOR_WHITE,"Walkstyle removed.");
	return SetPVarInt(playerid, "WalkStyle", 0);
}
//============================================//
stock IsTrunkCar(id)
{
	if(id == 480 || id == 533 || id == 439 || id == 555 || id == 536 ||
	id == 575 || id == 534 || id == 567 || id == 566 || id == 576 ||
	id == 412 || id == 579 || id == 400 || id == 500 || id == 489 ||
	id == 505 || id == 495 || id == 602 || id == 429 || id == 496 ||
	id == 402 || id == 589 || id == 587 || id == 565 || id == 559 || id == 603 || id == 475 ||
	id == 506 || id == 558 || id == 418 || id == 404 || id == 479 || id == 458 || id == 561 ||
	id == 445 || id == 401 || id == 518 || id == 527 || id == 542 || id == 507 || id == 562 ||
	id == 585 || id == 419 || id == 526 || id == 604 || id == 466 || id == 492 || id == 474 ||
    id == 546 || id == 517 || id == 410 || id == 551 || id == 516 || id == 467 || id == 426 ||
    id == 436 || id == 547 || id == 405 || id == 580 || id == 560 || id == 550 || id == 549 ||
    id == 540 || id == 491 || id == 529 || id == 421)
	{
	    return true;
	}
    return false;
}
//============================================//
forward Float:TrunkOffset(id, type);
public Float:TrunkOffset(id, type) // 1 - Y | 2 - Z
{
	new Float:offset = 0.0;
	if(id == 480 || id == 533 || id == 439 || id == 555 || id == 575 ||
	id == 602 || id == 429 || id == 496 || id == 402 || id == 589 ||
	id == 587 || id == 565 || id == 559 || id == 603 || id == 475 ||
	id == 506 || id == 558 || id == 401 || id == 518 || id == 527 ||
	id == 542 || id == 562 || id == 526 || id == 474 ||
	id == 410 || id == 436 || id == 491)
	{
	    switch(type)
	    {
	        case 1: offset=0.6;
	        case 2: offset=0.2;
	    }
	}
	if(id == 536 || id == 534 || id == 567 || id == 566 || id == 576 || id == 412 ||
	id == 404 || id == 479 || id == 458 || id == 561 || id == 445 || id == 507 ||
	id == 585 || id == 419 || id == 604 || id == 466 || id == 492 || id == 546 ||
	id == 551 || id == 516 || id == 467 || id == 426 || id == 547 || id == 405 ||
	id == 580 || id == 560 || id == 550 || id == 549 || id == 540 || id == 529 ||
	id == 421 || 517)
	{
	    switch(type)
	    {
	        case 1: offset=0.8;
	        case 2: offset=0.2;
	    }
	}
	if(id == 579 || id == 400 || id == 418)
	{
	    switch(type)
	    {
	        case 1: offset=0.6;
	        case 2: offset=0.5;
	    }
	}
	if(id == 500)
	{
	    switch(type)
	    {
	        case 1: offset=0.6;
	        case 2: offset=0.4;
	    }
	}
	
    return offset;
}
//============================================//
stock TrunkObject(itemid, type) // 1 == true && 2 == objectid
{
	new result = 0;
	if(itemid > 21 && itemid < 35)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=PrintIid(itemid);
            case 3: result = 90;
        }
    }
    if(itemid >= 100 && itemid <= 150)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=2037;
            case 3: result = 0;
        }
    }
    if(itemid == 403)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=1650;
            case 3: result = 90;
        }
    }
    if(itemid == 406)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=1210;
            case 3: result = 0;
        }
    }
    if(itemid >= 500 && itemid <= 550)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=1575;
            case 3: result = 0;
        }
    }
	return result;
}
//============================================//
forward RemoveFurnitureForPlayer(playerid);
public RemoveFurnitureForPlayer(playerid)
{
	RemoveBuildingForPlayer(playerid, 2254, 1232.5859, -839.1250, 1085.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 1243.0781, -838.6875, 1084.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2256, 1232.6875, -835.2656, 1085.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1235.2188, -826.3594, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1237.1875, -826.3594, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1236.2031, -826.3594, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1232.7578, -826.3672, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1234.2422, -826.3594, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1237.6719, -826.3672, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1232.7656, -825.8828, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 1224.5625, -824.8828, 1086.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1232.7656, -824.8984, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1232.7578, -823.4219, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 1248.0234, -831.2500, 1086.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1252.1719, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1251.2656, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1250.3984, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1249.4844, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2029, 1249.0234, -824.2422, 1083.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2029, 1252.0156, -824.2344, 1083.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1249.4531, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1250.3672, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1251.2734, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1252.2422, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 1254.2500, -838.6797, 1084.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1254.0625, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1253.0938, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1253.1563, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1254.0703, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2029, 1252.9844, -824.2422, 1083.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1254.9688, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1254.9375, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1255.8516, -823.2578, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2124, 1255.8828, -825.2734, 1083.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2029, 1255.9766, -824.2344, 1083.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2258, 1224.5781, -817.6016, 1086.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 2256, 1229.9141, -814.3203, 1085.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2296, 1237.2656, -819.2422, 1082.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 14457, 1230.1953, -810.1328, 1085.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 14458, 1231.3047, -810.0938, 1083.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1828, 1226.4609, -809.5234, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1827, 1237.4766, -808.7422, 1082.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 1260.5781, -808.5078, 1085.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2332, 1230.6953, -806.4063, 1083.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 1274.4766, -820.8516, 1088.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 1272.4844, -818.7344, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 1274.4766, -817.6250, 1088.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2307, 1272.4844, -814.8438, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2307, 1272.4844, -812.8438, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 1274.5078, -806.6250, 1088.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 1284.7344, -818.0313, 1091.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 2230, 1288.9375, -823.4375, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 1284.2969, -806.1719, 1090.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 14456, 1282.2500, -805.2266, 1093.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1713, 1290.0234, -828.6797, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1762, 1289.9531, -820.3281, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 1291.1016, -823.9766, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1762, 1291.6484, -820.3281, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1827, 1292.3516, -827.5859, 1084.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 1290.1172, -816.3281, 1088.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2307, 1291.2188, -810.3672, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2307, 1289.1875, -810.3672, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2094, 1292.1094, -808.9688, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1708, 1292.5859, -836.3672, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1708, 1292.5859, -837.7891, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 14461, 1294.2422, -832.7734, 1086.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1708, 1294.0234, -829.0859, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2230, 1293.1406, -823.8750, 1088.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1708, 1293.9922, -826.1094, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2230, 1296.0781, -838.6719, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2230, 1296.0781, -835.1875, 1084.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 1296.1016, -836.8359, 1084.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1517, 1254.4922, -796.4766, 1084.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 1254.4219, -792.1484, 1084.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 1253.6563, -792.1484, 1084.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1487, 1255.0234, -792.1484, 1084.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 2293, 1255.5469, -788.3125, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2293, 1264.6250, -788.3125, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2293, 1260.1094, -788.3125, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2258, 1247.6719, -787.2656, 1085.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2290, 1254.5469, -786.4375, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 1251.1406, -786.2422, 1085.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 2290, 1259.0156, -786.4375, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2290, 1263.4609, -786.4375, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 14401, 1264.6016, -781.0078, 1083.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 1251.5938, -779.2422, 1085.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 1248.1328, -775.4063, 1084.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 14468, 1255.3125, -773.6328, 1083.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2629, 1233.6641, -770.2578, 1083.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2630, 1242.0625, -767.1953, 1083.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 1252.8750, -766.7734, 1083.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 1260.4609, -764.7266, 1083.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2627, 1226.5078, -764.1094, 1083.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 14486, 1233.9766, -763.3047, 1084.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1985, 1243.5938, -759.6484, 1085.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1985, 1241.3047, -759.6406, 1085.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1985, 1240.7891, -756.4531, 1085.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2631, 1226.6172, -754.9844, 1083.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1985, 1240.7891, -754.1719, 1085.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 1272.4922, -804.4688, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2307, 1273.0625, -800.8984, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1268.7813, -796.3672, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 1274.5078, -803.3359, 1088.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 2307, 1275.1094, -800.8984, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1268.7891, -795.8828, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2104, 1273.2891, -795.0000, 1083.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 1272.2266, -794.5313, 1083.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1268.7891, -794.9063, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2296, 1277.2813, -794.6875, 1083.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1788, 1278.1172, -794.8281, 1083.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1788, 1278.1172, -794.8281, 1083.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 1279.8359, -794.9453, 1083.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1268.7891, -793.9219, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, 1276.2266, -793.5313, 1083.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1268.7891, -792.9453, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 1274.5078, -792.6250, 1088.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1275.2266, -791.4766, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1274.2500, -791.4766, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1273.7656, -791.4766, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1278.1719, -791.4766, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1277.1875, -791.4766, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1276.2109, -791.4766, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1279.6484, -791.4688, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1268.7813, -791.4609, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1269.2656, -791.4609, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 1270.2500, -791.4609, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2292, 1271.7266, -791.4609, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1762, 1272.9766, -788.6172, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1762, 1274.6719, -788.6172, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2230, 1275.6875, -785.5078, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 1273.5234, -784.9688, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 1267.4531, -764.7266, 1083.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 1289.6172, -804.6250, 1088.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 2094, 1292.1094, -802.0156, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1762, 1288.9531, -795.2422, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2293, 1292.0703, -795.4219, 1088.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1761, 1288.5000, -793.0938, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1762, 1288.6016, -789.8828, 1088.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 1284.2891, -788.5547, 1091.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 14483, 1292.4297, -784.6719, 1088.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1788, 1293.5078, -795.9531, 1089.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1788, 1293.5078, -795.9531, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2231, 1293.2422, -794.5625, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 1295.6641, -793.8047, 1083.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2231, 1293.5781, -793.8125, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 1293.5859, -792.3516, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 14462, 1293.5703, -791.5703, 1090.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 1295.0781, -791.0000, 1085.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2231, 1293.5781, -791.0859, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2231, 1293.4922, -790.2813, 1088.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 14402, 1297.0078, -786.3906, 1083.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2256, 1297.7500, -783.6172, 1085.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2118, 1304.3281, -785.6563, 1082.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1759, 443.9375, 507.3359, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1763, 448.4063, 507.5625, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2236, 450.1094, 508.6250, 1000.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1743, 443.8828, 513.7813, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 446.5391, 513.7500, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1794, 447.4141, 512.6719, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 449.3281, 513.7344, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1759, 451.5391, 507.5313, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 452.9609, 511.7813, 1001.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1738, 454.0313, 511.8047, 1001.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1786, 452.5469, 515.0313, 1001.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 14480, 456.1719, 514.1250, 1001.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 14481, 457.1484, 515.0156, 1002.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1743, 451.3281, 515.8438, 1000.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2046, 2806.2266, -1174.5703, 1026.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2049, 2805.2109, -1173.4922, 1026.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2805.6875, -1173.5156, 1025.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1025.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1025.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1024.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.3047, -1172.8516, 1024.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1024.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1024.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1025.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2811.6016, -1172.8516, 1025.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2048, 2805.2109, -1172.0547, 1026.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2055, 2805.1953, -1170.5391, 1026.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2060, 2810.0234, -1171.2266, 1024.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2064, 2810.8359, -1171.8984, 1025.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2068, 2809.2031, -1169.3672, 1027.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2806.3906, -1166.8203, 1024.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2808.6563, -1166.9531, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2805.5078, -1165.5625, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2276, 2809.2109, -1165.2734, 1026.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1821, 2810.5938, -1167.6172, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2053, 2810.6094, -1167.5781, 1024.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 2058, 2809.6406, -1165.3359, 1024.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2811.3438, -1165.2734, 1026.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2811.0234, -1165.0625, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1765, 2811.4766, -1168.4063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2811.6875, -1168.5078, 1028.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2059, 2814.8359, -1173.4766, 1025.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2116, 2814.3047, -1173.4219, 1024.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 2050, 2813.1250, -1173.3359, 1026.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1736, 2812.8281, -1172.2969, 1027.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2051, 2813.1250, -1171.2891, 1026.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2813.9531, -1172.4609, 1025.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2815.3828, -1172.4844, 1025.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2275, 2812.6094, -1168.1094, 1026.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2156, 2813.6484, -1167.0000, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2814.5703, -1169.2891, 1029.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2047, 2817.3125, -1170.9688, 1031.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2160, 2815.8984, -1164.9063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2159, 2817.2656, -1164.9063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2157, 2818.7109, -1173.9531, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2157, 2818.6406, -1164.9063, 1024.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2300, 2818.6484, -1166.5078, 1028.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2046, 2819.4453, -1174.0000, 1026.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2091, 2819.8047, -1165.6641, 1028.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2157, 2820.6328, -1167.3125, 1024.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2171.5078, 647.1172, 1054.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1738, -2171.4766, 643.6875, 1057.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 2074, -2170.4453, 638.5859, 1059.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2233, -2167.4219, 640.7500, 1056.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2296, -2168.4219, 643.7344, 1056.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, -2167.5859, 644.6875, 1056.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, -2168.3125, 646.7656, 1056.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2168.3125, 647.1172, 1054.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2233, -2165.4531, 640.7500, 1056.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, -2166.2344, 640.9297, 1056.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 14544, -2164.7734, 641.1172, 1053.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 14554, -2164.5469, 641.1016, 1056.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1819, -2167.2422, 643.7031, 1056.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2165.0156, 645.0781, 1054.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2288, -2166.7344, 646.7734, 1058.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2165.0156, 647.1172, 1054.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2162.8203, 636.9063, 1058.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2161.6172, 636.9063, 1058.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2159.1797, 636.9063, 1058.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2157.6094, 636.9063, 1058.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2162.8203, 638.8594, 1058.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2707, -2157.6094, 638.9297, 1058.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 14535, -2160.2031, 640.8516, 1058.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 14545, -2160.1172, 639.5625, 1053.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 14543, -2163.6563, 644.9063, 1058.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, -2161.9609, 646.7422, 1058.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, -2158.4141, 646.7656, 1058.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, -2163.8438, 646.9844, 1056.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1742, -2160.3906, 647.3906, 1056.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1738, -2158.3906, 647.0859, 1057.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 14720, 216.5547, 1292.2188, 1081.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 14719, 218.7422, 1290.8203, 1082.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2524, 219.6719, 1072.9922, 1083.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2525, 219.6250, 1074.4844, 1083.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 219.5859, 1076.3750, 1083.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2524, 225.1563, 1085.5313, 1086.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 227.4766, 1087.1875, 1086.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2525, 225.1563, 1087.2734, 1086.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 237.8828, 1038.8359, 1087.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 237.8828, 1040.6016, 1087.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 238.4219, 1042.5469, 1087.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 232.6328, 1110.5938, 1079.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 232.6563, 1108.8281, 1079.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 234.6016, 1109.3828, 1079.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 235.6016, 1112.2422, 1079.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 234.7188, 1117.4609, 1083.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 234.6172, 1119.2266, 1083.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 237.3438, 1119.1641, 1083.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 234.6953, 1120.1563, 1083.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 14728, 238.7344, 1036.9688, 1085.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 241.0703, 1041.5547, 1087.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 14721, 240.4609, 1114.3906, 1083.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 252.0234, 1032.6328, 1083.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 254.7344, 1033.0703, 1083.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 254.8125, 1034.4141, 1083.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 254.7656, 1036.1328, 1083.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2524, 252.3594, 1247.9922, 1083.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2525, 252.5703, 1249.2109, 1083.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 253.7656, 1249.1797, 1083.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 284.5078, 1480.5156, 1079.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 284.4063, 1482.2813, 1079.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 284.4844, 1484.4219, 1079.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 287.1328, 1483.4297, 1079.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 14704, 450.9844, 1406.5781, 1084.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 14705, 451.7734, 1409.4141, 1084.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 445.3125, 1410.6328, 1083.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 444.2188, 1413.0391, 1083.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 444.3203, 1414.0000, 1083.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 447.9766, 1414.2656, 1083.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 488.3281, 1419.7734, 1079.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 488.2266, 1421.5391, 1079.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 490.3906, 1420.0859, 1079.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 491.3750, 1418.6328, 1079.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2527, -64.8281, 1355.4609, 1079.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, -64.1875, 1353.5781, 1079.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2525, -62.7734, 1356.4844, 1079.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 75.2734, 1337.7188, 1089.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2287, 77.3203, 1343.8281, 1089.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 81.5547, 1324.5547, 1084.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 81.5625, 1345.9531, 1087.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2078, 83.5000, 1331.4688, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2287, 85.2969, 1341.8203, 1089.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1735, 84.0469, 1341.1016, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 84.1094, 1345.9453, 1087.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2261, 87.7031, 1333.6406, 1084.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 89.5547, 1331.2734, 1084.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 89.8359, 1335.9063, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 89.8359, 1337.1250, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 90.9922, 1334.2031, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 92.5547, 1331.2734, 1084.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 92.1563, 1335.9063, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 91.0078, 1336.4531, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 92.1641, 1337.0391, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 89.8359, 1338.2031, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 91.9141, 1338.1328, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 91.0078, 1338.4531, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 91.0156, 1339.5469, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 88.3516, 1344.8984, 1087.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 86.7031, 1345.9453, 1087.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2516, -37.8047, 1410.5156, 1083.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2517, -37.3828, 1408.5781, 1083.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 2739, -34.8203, 1409.3359, 1083.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2514, -34.8125, 1409.6250, 1083.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2243, 21.3828, 1409.2656, 1083.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 149.2266, 1381.5234, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 149.2266, 1380.5469, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 151.5469, 1380.5469, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 151.5469, 1381.5234, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 150.4297, 1381.6016, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 149.2266, 1382.7422, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 151.5469, 1382.6563, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 150.4297, 1383.5938, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 151.5469, 1383.7500, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 149.2266, 1383.8203, 1083.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 26.1563, 1412.9922, 1084.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, -301.0625, 1470.6484, 1087.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, -298.1953, 1469.7109, 1087.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, -301.1641, 1472.4141, 1087.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, -301.0859, 1473.4688, 1087.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2158, 305.2188, 1120.2109, 1082.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2330, 308.6953, 1120.8203, 1082.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1802, 307.1875, 1121.8281, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2846, 309.9844, 1121.4063, 1082.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2840, 309.8125, 1123.4766, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 309.0391, 1124.5547, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 309.8594, 1124.5938, 1082.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1750, 315.6797, 1116.6563, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2867, 318.0703, 1122.9844, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2858, 321.4141, 1122.4063, 1082.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.2578, 1124.5469, 1083.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.3359, 1124.5547, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.4688, 1125.0313, 1083.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.4688, 1125.0313, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.7266, 1124.5547, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2855, 316.7266, 1124.5547, 1083.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2852, 316.5469, 1124.7031, 1083.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1728, 319.0469, 1124.3047, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2262, 317.7266, 1124.8047, 1084.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2844, 321.6406, 1127.9375, 1082.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1793, 321.3828, 1128.4453, 1082.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2859, 324.4453, 1118.9844, 1082.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2860, 324.6094, 1120.7969, 1082.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 327.0391, 1116.9766, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1710, 326.2109, 1121.2656, 1082.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 2147, 331.9922, 1118.8672, 1082.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2338, 334.3906, 1118.8203, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2337, 334.3906, 1119.8125, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2170, 334.4531, 1121.8281, 1082.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2116, 331.4922, 1122.5469, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 322.2422, 1123.7109, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 326.8438, 1124.4844, 1082.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2336, 334.2500, 1123.8672, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2335, 334.2422, 1124.8672, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2334, 334.2422, 1125.8672, 1082.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2852, 321.6719, 1130.3516, 1083.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1728, 325.5078, 1130.8516, 1082.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2819, 323.4453, 1131.1250, 1082.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1725, 732.6250, 1437.2656, 1101.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1725, 739.9375, 1436.2500, 1101.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2577, 743.5625, 1438.3750, 1102.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2595, 743.4219, 1438.3906, 1103.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2581, 742.7031, 1439.9531, 1102.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2586, 744.2578, 1439.9766, 1102.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 14739, 752.3984, 1439.9453, 1104.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2425, 756.6406, 1441.5391, 1102.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 14737, 754.3594, 1443.6094, 1102.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2452, 761.1172, 1443.6719, 1101.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 14826, 618.6016, -79.0938, 997.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 14796, 611.2734, -76.5234, 1000.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 14770, 940.9922, -5.6797, 1000.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 14862, 245.5547, 300.8594, 998.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 243.8828, 301.9766, 998.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 14861, 245.7578, 302.2344, 998.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 14860, 246.5156, 301.5859, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 14864, 246.1875, 303.1094, 998.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1734, 246.7109, 303.8750, 1002.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 14863, 246.9844, 303.5781, 998.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 248.4063, 300.5625, 999.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 248.4922, 304.3516, 998.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 248.4844, 306.1250, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 248.8672, 301.9609, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 250.1016, 301.9609, 999.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 250.1016, 301.9609, 1000.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2338, 299.9375, 300.5078, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2334, 299.9375, 301.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2336, 301.9297, 300.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2334, 299.9375, 302.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2170, 299.9141, 303.3906, 1002.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 2334, 299.9375, 304.2734, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2334, 302.9219, 301.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2338, 302.9219, 300.5078, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2226, 303.1797, 302.4219, 1003.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2335, 302.9219, 302.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2337, 302.9219, 303.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2335, 302.9219, 304.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 304.1641, 300.3594, 1002.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1768, 306.3906, 302.4219, 1002.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1782, 304.0156, 302.8281, 1002.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1752, 303.9063, 304.2109, 1002.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 304.6641, 303.6797, 1002.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2158, 299.9297, 305.3516, 1002.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2158, 299.9297, 306.3516, 1002.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2147, 299.9141, 307.3906, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2335, 302.9219, 305.5000, 1002.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1768, 307.0313, 305.4375, 1002.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 14878, 302.2422, 312.7578, 998.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 14880, 309.1484, 301.7266, 1002.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 310.5547, 300.3594, 1002.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 14879, 308.3203, 305.9141, 1002.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 14888, 345.4766, 302.0313, 998.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 14891, 346.1484, 303.5703, 1000.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1226.4844, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2191.8750, -1225.3594, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2191.8750, -1223.5938, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1221.7969, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2194.6953, -1223.1172, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2194.6406, -1221.5859, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2186.2109, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2186.2500, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2189.5000, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2189.6250, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2196.8828, -1219.9688, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2199.1875, -1219.0078, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2188.4453, -1217.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2188.4688, -1213.0234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2196.1484, -1214.6797, 1050.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2197.2734, -1216.6250, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2197.2500, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2198.5859, -1213.1484, 1050.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2198.5391, -1212.8359, 1048.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2199.9375, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2261.6953, -1223.0781, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2258.1406, -1220.5859, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2258.5938, -1221.5469, 1048.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2251.3594, -1218.1797, 1048.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2254.4063, -1218.2734, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2247.5547, -1213.9219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2247.5547, -1212.9375, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1213.9375, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2252.4297, -1215.4531, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2254.1953, -1215.4531, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2255.4219, -1213.5313, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2262.3906, -1215.5469, 1048.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1816, 2261.4141, -1213.4531, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2181.5000, -1206.5234, 1049.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1207.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2181.6328, -1205.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1206.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2184.6250, -1207.8594, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.5625, -1204.2344, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2184.6641, -1204.1719, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2299, 2187.6250, -1212.1563, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2186.4531, -1210.5625, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2185.7109, -1209.4063, 1048.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2185.3984, -1209.9609, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2186.4375, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.1563, -1209.1406, 1050.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1205.2656, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2187.8516, -1207.1250, 1050.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2188.2109, -1207.5703, 1048.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2189.4531, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2189.8984, -1207.8438, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2190.2188, -1209.3828, 1049.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2190.5781, -1204.4297, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2191.5781, -1206.9375, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 2193.0938, -1204.2813, 1048.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2193.1250, -1205.1328, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2196.1484, -1205.3828, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2196.7188, -1206.4922, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1212.1641, 1049.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1208.8594, 1049.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2247.5625, -1211.9531, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2247.5469, -1210.9688, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2247.5469, -1208.9844, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2247.5547, -1207.9766, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2247.5547, -1206.9922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2109, 2250.2813, -1212.2500, 1048.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2249.2344, -1211.4531, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1210.8984, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2248.5234, -1206.9922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2319, 2250.3438, -1206.9609, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2261.4609, -1212.0625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2258.1094, -1210.3750, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15044, 2255.0938, -1209.7813, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2258.4766, -1209.7891, 1048.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2099, 2262.8047, -1208.4922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2254.1172, -1206.5000, 1050.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2254.6328, -1207.2734, 1048.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 2256.2188, -1206.8594, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2257.6172, -1207.7266, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 2261.4297, -1206.2031, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2262.1172, -1206.1016, 1048.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2181.5625, -1203.5000, 1049.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1203.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2181.6250, -1201.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1202.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2184.6016, -1203.8906, 1048.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1202.6094, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.3281, -1202.3750, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2183.3750, -1200.8672, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15043, 2189.1641, -1203.6484, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2190.5469, -1201.5625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2188.0000, -1200.8516, 1048.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.2656, -1200.8438, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2192.4063, -1200.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2192.8359, -1200.0391, 1048.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15040, 2193.2031, -1199.1094, 1050.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2195.2500, -1200.4844, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 15025, 2249.6641, -1138.1250, 1051.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 15027, 2250.1016, -1132.5078, 1049.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 15026, 2264.9063, -1137.7656, 1051.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 15032, 2278.5547, -1136.6250, 1051.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 15036, 2278.5859, -1135.2266, 1051.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 15051, 2279.9375, -1135.8203, 1049.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 2023, 2305.5547, -1212.6406, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1768, 2305.8281, -1210.3750, 1048.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2076, 2308.7578, -1209.7188, 1051.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2308.8438, -1208.9141, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2305.7813, -1207.8125, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2310.9844, -1209.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2311.5547, -1206.6719, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 15052, 2313.8438, -1212.7344, 1049.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 15056, 2313.8438, -1212.7344, 1049.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1567, 2331.8438, -1144.8594, 1053.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2286.1250, -1138.4766, 1049.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15037, 2280.5703, -1137.7422, 1050.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2099, 2281.1953, -1136.0156, 1049.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1134.1875, 1050.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2361.2969, -1134.1484, 1049.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2367.5625, -1135.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2367.5625, -1134.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2367.5625, -1133.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1131.5234, 1050.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2357.8594, -1132.8828, 1051.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2087, 2360.2969, -1129.9766, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 2360.8281, -1130.1406, 1051.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2279, 2369.8125, -1135.4375, 1052.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1134.0313, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1133.5938, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2372.1875, -1135.4297, 1052.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2030, 2371.2266, -1132.9219, 1050.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2812, 2371.2969, -1133.0156, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2288, 2373.3828, -1130.4531, 1051.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2374.5000, -1135.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2374.5000, -1131.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1134.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2374.5078, -1133.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1130.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 2369.1797, -1125.8047, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2367.3672, -1123.1563, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2302, 2364.5547, -1122.9688, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2368.6094, -1122.5078, 1052.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2367.5703, -1122.1484, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2361.5703, -1122.1484, 1052.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2372.7031, -1128.9141, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 15061, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 15062, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2370.1250, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2370.3906, -1124.4375, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2372.0938, -1124.2188, 1049.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2374.2578, -1129.2578, 1050.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2084, 2374.4688, -1129.2109, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2374.6797, -1122.5313, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2374.9766, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1567, 2231.2969, -1111.4609, 1049.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 15039, 2232.3438, -1106.7422, 1049.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 15038, 2235.2891, -1108.1328, 1051.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2235.8281, -1081.6484, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2239.2266, -1081.6484, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 2242.0469, -1078.4297, 1048.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1798, 2244.5469, -1078.4297, 1048.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 15035, 2205.9375, -1073.9922, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2235.8281, -1070.2188, 1048.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2236.0391, -1068.9063, 1048.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2236.1406, -1064.1953, 1048.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 15057, 2240.6016, -1072.7031, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2238.9063, -1068.9844, 1050.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2240.3203, -1070.8906, 1050.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2240.7344, -1069.5156, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2237.2500, -1066.5391, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2237.9063, -1064.2891, 1047.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2238.8516, -1068.1563, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2238.9531, -1064.8125, 1050.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2269, 2240.3203, -1068.4453, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2240.7734, -1066.3047, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2241.3125, -1072.4688, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2242.1719, -1066.2266, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2243.3281, -1067.8281, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2243.8203, -1073.1875, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2245.3203, -1068.4453, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2245.0313, -1067.6094, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2244.7969, -1066.2734, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2316.3125, -1024.5156, 1051.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2242, 2321.4609, -1019.7500, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2078, 2318.2578, -1017.6016, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 15063, 2321.6172, -1018.1016, 1053.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 2203, 2312.1641, -1014.5547, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1014.5547, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2312.1406, -1013.6719, 1050.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1013.5625, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2322.4453, -1026.4453, 1050.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2322.3594, -1019.8906, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 2322.6563, -1026.4219, 1049.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2105, 2323.0156, -1026.8594, 1050.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2224, 2322.6953, -1019.0859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2324.3125, -1017.7969, 1051.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 2323.3750, -1015.8984, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 2323.7500, -1014.8594, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1755, 2325.2734, -1025.0625, 1049.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2325.6406, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2107, 2326.0703, -1016.6719, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2325.5313, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 15060, 2326.6641, -1022.1953, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2327.3125, -1017.7969, 1051.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2104, 2327.1719, -1017.2109, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2327.4766, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1012.5703, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2312.3594, -1011.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1011.5781, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1012.6797, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2314.9922, -1011.4063, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2315.0547, -1011.2813, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1011.5859, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2312.1875, -1010.6563, 1050.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2312.3594, -1010.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1010.5391, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1010.5469, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1009.5938, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1009.2969, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2324.3359, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2323.4922, -1009.7266, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2323.7891, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2324.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2323.4453, -1009.2813, 1053.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2325.0625, -1010.7188, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2325.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2326.6250, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2326.7734, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2312.3672, -1008.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2314.3281, -1007.6328, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2312.3672, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2313.3359, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1008.6016, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1735, 2318.8047, -1007.9688, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1007.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2287, 2320.0547, -1007.2500, 1055.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 2322.3594, -1008.4453, 1054.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2325.0391, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2321.2656, -1006.0313, 1053.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2323.0156, -1005.8828, 1054.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2318.3750, -1003.0703, 1053.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2322.2500, -1003.0703, 1053.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2099, 2331.2031, -1069.2578, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2330.6875, -1068.8047, 1050.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 2335.7188, -1068.4609, 1048.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2335.7656, -1068.2109, 1048.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 2336.7422, -1067.9219, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 2335.7734, -1067.7578, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 2337.3359, -1069.4609, 1050.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 2337.3359, -1069.4609, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2338.4141, -1068.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2866, 2338.5938, -1068.6094, 1049.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1709, 2330.6172, -1067.3359, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1815, 2334.7500, -1065.9922, 1048.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1747, 2335.4297, -1065.7422, 1048.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2338.4063, -1066.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15047, 2337.1172, -1065.3047, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2338.6406, -1066.6953, 1049.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 2339.0781, -1066.9375, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 2339.0781, -1066.9375, 1050.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1728, 2333.2969, -1061.8125, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2266, 2336.2969, -1061.8125, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2338.4219, -1061.8594, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2268, 2338.3047, -1061.8047, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2084, 2340.0313, -1061.5234, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2370.2344, -1120.5859, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1742, 2366.6953, -1119.2500, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2371.6016, -1121.5078, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2375.5859, -1120.9922, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2813, 2342.1563, -1067.9766, 1048.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2302, 2342.6484, -1065.8047, 1048.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2845, 2344.0313, -1068.0703, 1048.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 2344.3125, -1065.4844, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2327.8047, -1021.0313, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2328.7891, -1015.8281, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2328.8359, -1023.6016, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2329.0469, -1022.6953, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2329.0703, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2329.2578, -1015.8281, 1053.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2327.7578, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2327.7266, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.0078, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.9922, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1010.0234, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2869, 2329.2891, -1025.8672, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2829, 2329.4688, -1023.6250, 1050.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2329.7656, -1023.0156, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 2329.6953, -1022.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1023.5156, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1022.6875, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2243, 2329.2969, -1018.0313, 1049.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1012.9688, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2330.7422, -1010.7813, 1054.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1009.1875, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2865, 2499.5000, -1712.2188, 1014.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2821, 2500.9297, -1710.3516, 1014.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1710.6953, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2277, 2494.7578, -1705.3281, 1018.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2500.8906, -1706.5703, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2501.1172, -1705.4766, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1706.8594, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.2344, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.3594, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2274, 2490.4531, -1704.9141, 1019.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2491.8359, -1702.9375, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2491.8359, -1701.2813, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1794, 2492.9688, -1701.8516, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2275, 2493.4297, -1699.8594, 1019.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2494.0156, -1701.3125, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2494.1172, -1700.3359, 1018.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 14478, 2494.4297, -1698.3359, 1014.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 2495.2891, -1704.4922, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2816, 2494.8047, -1702.5156, 1018.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2496.2188, -1702.5234, 1018.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 14477, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14490, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14491, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2493.0469, -1697.1875, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2827, 2497.6563, -1697.0703, 1014.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 14489, 2490.4453, -1694.8672, 1015.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, 2491.3438, -1694.7656, 1013.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 14720, 216.5547, 1292.2188, 1081.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 14719, 218.7422, 1290.8203, 1082.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 237.8828, 1038.8359, 1087.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 237.8828, 1040.6016, 1087.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 238.4219, 1042.5469, 1087.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 236.9844, 1206.6406, 1079.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 236.7500, 1208.1797, 1079.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 234.5781, 1209.2344, 1079.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 232.4375, 1209.2656, 1079.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 14728, 238.7344, 1036.9688, 1085.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 241.0703, 1041.5547, 1087.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 252.0234, 1032.6328, 1083.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 254.7344, 1033.0703, 1083.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 254.8125, 1034.4141, 1083.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 254.7656, 1036.1328, 1083.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 14742, 2451.9063, -1701.1875, 1014.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 14741, 2447.4219, -1693.4531, 1012.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 14761, 2449.9609, -1690.8438, 1014.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2459.3828, -1691.4766, 1013.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 14745, 2460.2422, -1695.1016, 1012.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2516, -37.8047, 1410.5156, 1083.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2517, -37.3828, 1408.5781, 1083.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 2739, -34.8203, 1409.3359, 1083.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2514, -34.8125, 1409.6250, 1083.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 14720, 216.5547, 1292.2188, 1081.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 14719, 218.7422, 1290.8203, 1082.8672, 0.25);
	return 1;
}
//============================================//
stock CartoCloseCar(playerid,type,Float:distance)
{
    new Float:x, Float:y, Float:z;
	foreach(new c : VehicleIterator)
	{
        if(IsVehicleStreamedIn(c, playerid) && c != GetPlayerVehicleID(playerid))
        {
            GetVehiclePos(c,x,y,z);
            if(IsVehicleInRangeOfPoint(GetPlayerVehicleID(playerid),distance,x,y,z))
            {
			    switch(type)
			    {
			        case 1: return true;
			        case 2: return c;
			    }
            }
        }
    }
    if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}

stock GetPlayerCloseVehicle(playerid, Float:distance)
{
	foreach(new i : VehicleIterator)
	{
		new Float:x, Float:y, Float:z;
		GetVehiclePos(i, x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, distance, x, y, z))
		{
			return i;
		}
	}
	return 0;
}
//============================================//
stock IsVehicleInRangeOfPoint(vehicleid, Float:radi, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz,Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return true;
    return false;
}
//============================================//
forward BuildHouseObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz);
public BuildHouseObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz)
{
	if(!IsValidFurniture(objectid)) return SendClientMessage(playerid, COLOR_ERROR, "Invalid furniture object ID.");

	new houseid = FurnRight(playerid, 1);

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(HouseInfo[houseid][hoID][i] == 0)
		{
			HouseInfo[houseid][hObject][i] = CreateDynamicObject(objectid, X, Y, Z, rotx, roty, rotz, GetPlayerVirtualWorld(playerid), -1, -1, 100);
			HouseInfo[houseid][hoID][i] = objectid;
		    HouseInfo[houseid][hoX][i] = X;
	        HouseInfo[houseid][hoY][i] = Y;
		    HouseInfo[houseid][hoZ][i] = Z;
		    HouseInfo[houseid][horX][i] = rotx;
	        HouseInfo[houseid][horY][i] = roty;
		    HouseInfo[houseid][horZ][i] = rotz;

	        new query[1024];
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO housefurn (HID, Model, PosX, PosY, PosZ, AngX, AngY, AngZ) VALUES (%i, %i, %f, %f, %f, %f, %f, %f)", 
				houseid, 
				HouseInfo[houseid][hoID][i], 
				HouseInfo[houseid][hoX][i], 
				HouseInfo[houseid][hoY][i],
				HouseInfo[houseid][hoZ][i], 
				HouseInfo[houseid][horX][i], 
				HouseInfo[houseid][horY][i], 
				HouseInfo[houseid][horZ][i]);
			mysql_pquery(handlesql, query, "OnBuildHouseObject", "ii", houseid, i);

			new string[128];
	        format(string, sizeof(string),"Object %i has been planted.", objectid, houseid);
	        SendClientMessage(playerid, COLOR_WHITE, string);

	        Streamer_Update(playerid);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_ERROR, "All furniture slots have been used!");
	return 1;
}

forward OnBuildHouseObject(houseid, objectid);
public OnBuildHouseObject(houseid, objectid)
{
	HouseInfo[houseid][hoDBID][objectid] = cache_insert_id();
	return 1;
}
//============================================//
stock RemoveHouseObjects(houseid, outside = 1)
{
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM housefurn WHERE HID=%i", houseid);
	mysql_pquery(handlesql, query);

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(outside != 1)
		{
			if(IsHouseOutdoorObject(houseid, i))
			{
				continue;
			}
		}

		if(IsValidDynamicObject(HouseInfo[houseid][hObject][i]))
		{
			DestroyDynamicObject(HouseInfo[houseid][hObject][i]);
		}

		HouseInfo[houseid][hObject][i] = 0;
		HouseInfo[houseid][hoID][i] = 0;
		HouseInfo[houseid][hoX][i] = 0.0;
		HouseInfo[houseid][hoY][i] = 0.0;
		HouseInfo[houseid][hoZ][i] = 0.0;
		HouseInfo[houseid][horX][i] = 0.0;
		HouseInfo[houseid][horY][i] = 0.0;
		HouseInfo[houseid][horZ][i] = 0.0;
	}
    return 1;
}

forward RemoveHouseObject(houseid, objectid);
public RemoveHouseObject(houseid, objectid)
{
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM housefurn WHERE ID=%i", HouseInfo[houseid][hoDBID][objectid]);
	mysql_pquery(handlesql, query);

	if(IsValidDynamicObject(HouseInfo[houseid][hObject][objectid]))
	{
		DestroyDynamicObject(HouseInfo[houseid][hObject][objectid]);
	}

	HouseInfo[houseid][hObject][objectid] = 0;
	HouseInfo[houseid][hoID][objectid] = 0;
	HouseInfo[houseid][hoX][objectid] = 0.0;
	HouseInfo[houseid][hoY][objectid] = 0.0;
	HouseInfo[houseid][hoZ][objectid] = 0.0;
	HouseInfo[houseid][horX][objectid] = 0.0;
	HouseInfo[houseid][horY][objectid] = 0.0;
	HouseInfo[houseid][horZ][objectid] = 0.0;
	return 1;
}
//============================================//
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if(response == 2) return true; // Moved object, nothing more.
	switch(GetPVarInt(playerid, "EditorMode"))
	{
	    case 1: // House furniture
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
	            new key = FurnRight(playerid, 1), string[500];
                if(key <= 0) return true;
	            PlayerInfo[playerid][pFurn][0]=fX;
	            PlayerInfo[playerid][pFurn][1]=fY;
	            PlayerInfo[playerid][pFurn][2]=fZ;
	            PlayerInfo[playerid][pFurnR][0]=fRotX;
	            PlayerInfo[playerid][pFurnR][1]=fRotY;
	            PlayerInfo[playerid][pFurnR][2]=fRotZ;
	            format(string, 500, "Would you like to purchase this item?\n%s: - ID: %d\nPrice: $250", GetObjName(PlayerInfo[playerid][pFurnID]), PlayerInfo[playerid][pFurnID]);
	            ShowPlayerDialogEx(playerid, 75, DIALOG_STYLE_MSGBOX,"Furniture Agreement", string, "Yes", "No");
	            RemovePlayerTag(playerid);
	        }
	    }
	    case 2: // House furniture
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
	            new key = FurnRight(playerid, 1), h = GetPVarInt(playerid, "FurnEditH");
                if(key <= 0) return true;
	            MoveDynamicObject(HouseInfo[key][hObject][h], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
	            HouseInfo[key][hoX][h]=fX;
				HouseInfo[key][hoY][h]=fY;
				HouseInfo[key][hoZ][h]=fZ;
				HouseInfo[key][horX][h]=fRotX;
				HouseInfo[key][horY][h]=fRotY;
				HouseInfo[key][horZ][h]=fRotZ;
				SaveFurn(key);
				RemovePlayerTag(playerid);
	        }
	    }
	    case 3: // Biz furniture
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
	            new key = FurnRight(playerid, 2), string[500];
                if(key <= 0) return true;
	            PlayerInfo[playerid][pFurn][0]=fX;
	            PlayerInfo[playerid][pFurn][1]=fY;
	            PlayerInfo[playerid][pFurn][2]=fZ;
	            PlayerInfo[playerid][pFurnR][0]=fRotX;
	            PlayerInfo[playerid][pFurnR][1]=fRotY;
	            PlayerInfo[playerid][pFurnR][2]=fRotZ;
	            format(string, 500, "Would you like to purchase this item?\n%s: - ID: %d\nPrice: $250", GetObjName(PlayerInfo[playerid][pFurnID]), PlayerInfo[playerid][pFurnID]);
	            ShowPlayerDialogEx(playerid, 102, DIALOG_STYLE_MSGBOX,"Furniture Agreement", string, "Yes", "No");
	        }
	        RemovePlayerTag(playerid);
	    }
	    case 4: // Biz furniture
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
	            new key = FurnRight(playerid, 2), h = GetPVarInt(playerid, "FurnEditH");
                if(key <= 0) return true;
	            MoveDynamicObject(BizInfo[key][bObject][h], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
	            BizInfo[key][boX][h]=fX;
				BizInfo[key][boY][h]=fY;
				BizInfo[key][boZ][h]=fZ;
				BizInfo[key][borX][h]=fRotX;
				BizInfo[key][borY][h]=fRotY;
				BizInfo[key][borZ][h]=fRotZ;
				SaveBizFurn(key);
	        }
	        RemovePlayerTag(playerid);
	    }
	    case 5: // Roadblock
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
	            new found = 0, foundid = 0;
	            for(new o = 0; o < sizeof(BlockInfo); o++)
	            {
				    if(BlockInfo[o][bUsed] == 0 && found == 0)
				    {
				        found++;
				        foundid=o;
                    }
                }
                if(found == 0) return scm(playerid, COLOR_ERROR, "Can't find any roadblock slots available!");
                BlockInfo[foundid][bUsed]=1;
                BlockInfo[foundid][bFact]=GetPVarInt(playerid, "Member");
                BlockInfo[foundid][bID]=CreateDynamicObject(PlayerInfo[playerid][pFurnID], fX, fY, fZ, fRotX, fRotY, fRotZ, 0);
                BlockInfo[foundid][bX]=fX;
                BlockInfo[foundid][bY]=fY;
                BlockInfo[foundid][bZ]=fZ;
                scm(playerid, -1, "Roadblock object created!");
                scm(playerid, -1, "Available commands: /rblock, /rblockall and /rblockedit.");
	        }
	    }
	    case 6: // Tag Script
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
	            SetPVarFloat(playerid, "fX", fX);
	            SetPVarFloat(playerid, "fY", fY);
	            SetPVarFloat(playerid, "fZ", fZ);
	            SetPVarFloat(playerid, "fRotX", fRotX);
	            SetPVarFloat(playerid, "fRotY", fRotY);
	            SetPVarFloat(playerid, "fRotZ", fRotZ);
	            ShowPlayerDialogEx(playerid,431,DIALOG_STYLE_INPUT, "Tagging", "Insert the text you would like the tag to display.","Insert", "");
	        }
	    }
	    case 8: // ADMIN
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
	        TogglePlayerControllableEx(playerid, true);
	        if(response == 1)
	        {
                CreateDynamicObject(PlayerInfo[playerid][pFurnID], fX, fY, fZ, fRotX, fRotY, fRotZ, GetPlayerVirtualWorld(playerid));
                scm(playerid, -1, "ADMIN object created!");
                new string[128];
                format(string, 128, "%.1f - %.1f - %.1f - %.1f", fX, fY, fZ, fRotZ);
                scm(playerid, -1, string);
	        }
	    }
	    case 10: // Police Siren
	    {
	        if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));

	        if(response == 1)
	        {
				if(!IsPlayerInAnyVehicle(playerid)) return 1;
				new vehicleid = GetPlayerVehicleID(playerid);

	            new Float:ofx, Float:ofy, Float:ofz, Float:ofaz,
			    Float:finalx, Float:finaly,
			    Float:px, Float:py, Float:pz, Float:roz;
			    GetVehiclePos(GetPlayerVehicleID(playerid), px, py, pz);
			    GetVehicleZAngle(GetPlayerVehicleID(playerid), roz);

			    ofx = fX-px;
			    ofy = fY-py;
			    ofz = fZ-pz;
			    ofaz = fRotZ-roz;
			    finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
			    finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

			    for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
			    {
			    	if(VehicleInfo[vehicleid][vSirenObject][i] == 0)
			    	{
			    		VehicleInfo[vehicleid][vSirenObject][i] = GetPVarInt(playerid, "SirenModel");
			    		VehicleInfo[vehicleid][vSirenObjectID][i] = CreateDynamicObject(GetPVarInt(playerid, "SirenModel"), 0, 0, 0, 0.0, 0.0, 0.0);

			    		VehicleInfo[vehicleid][vSirenX][i] = finalx;
					    VehicleInfo[vehicleid][vSirenY][i] = finaly;
					    VehicleInfo[vehicleid][vSirenZ][i] = ofz;
					    VehicleInfo[vehicleid][vSirenXr][i] = fRotX;
					    VehicleInfo[vehicleid][vSirenYr][i] = fRotY;
					    VehicleInfo[vehicleid][vSirenZr][i] = ofaz;

					    AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObjectID][i], vehicleid, 
					    	VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
					    	VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);

					    SendClientMessage(playerid, COLOR_WHITE, "Siren added.");

					    ShowPlayerDialogEx(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");

					    new Float:X, Float:Y, Float:Z;
						GetVehicleVelocity(vehicleid, X, Y, Z);
						if(X == 0 && Y == 0 && Z == 0)
						{
							SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
						}

						CarEngine(GetPlayerVehicleID(playerid), 1);
			    		break;
			    	}
			    }
	        }
	    }
	}

    DeletePVar(playerid,"EditorMode");
	SetPVarInt(playerid, "Mute", 0);
	return true;
}
//============================================//
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(response == 2)
    {
    	switch(GetPVarInt(playerid, "EditorMode"))
		{
			default: return 1;
		}
    }
    switch(GetPVarInt(playerid, "EditorMode"))
	{
	    case 6:
	    {
	        if(response == 1)
	        {
				new id = GetPVarInt(playerid, "EditID");
				BlockInfo[id][bX]=x;
                BlockInfo[id][bY]=y;
                BlockInfo[id][bZ]=z;
	            scm(playerid, -1, "Roadblock object moved!");
	        }
	    }
	    case 11: // Door System
	    {
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][doX] = x;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][doY] = y;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][doZ] = z;

	    	DoorInfo[GetPVarInt(playerid, "DoorID")][doXr] = rx;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][doYr] = ry;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][doZr] = rz;

	    	MoveDynamicObject(objectid, 
	    		DoorInfo[GetPVarInt(playerid, "DoorID")][dX], DoorInfo[GetPVarInt(playerid, "DoorID")][dY], DoorInfo[GetPVarInt(playerid, "DoorID")][dZ],
	    		5.0,
	    		DoorInfo[GetPVarInt(playerid, "DoorID")][dXr], DoorInfo[GetPVarInt(playerid, "DoorID")][dYr], DoorInfo[GetPVarInt(playerid, "DoorID")][dZr]);

			SendClientMessage(playerid, COLOR_WHITE, "Door's open state has been set.");

			DoorSave(GetPVarInt(playerid, "DoorID"));
	    }
	    case 12: // Door System
	    {
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][dX] = x;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][dY] = y;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][dZ] = z;

	    	DoorInfo[GetPVarInt(playerid, "DoorID")][dXr] = rx;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][dYr] = ry;
	    	DoorInfo[GetPVarInt(playerid, "DoorID")][dZr] = rz;

	    	MoveDynamicObject(objectid, 
	    		DoorInfo[GetPVarInt(playerid, "DoorID")][dX], DoorInfo[GetPVarInt(playerid, "DoorID")][dY], DoorInfo[GetPVarInt(playerid, "DoorID")][dZ],
	    		5.0,
	    		DoorInfo[GetPVarInt(playerid, "DoorID")][dXr], DoorInfo[GetPVarInt(playerid, "DoorID")][dYr], DoorInfo[GetPVarInt(playerid, "DoorID")][dZr]);

	    	SendClientMessage(playerid, COLOR_WHITE, "Door moved.");

	    	DoorSave(GetPVarInt(playerid, "DoorID"));
	    }
	    case 13: // Gate System
	    {
	    	GateInfo[GetPVarInt(playerid, "GateID")][goX] = x;
	    	GateInfo[GetPVarInt(playerid, "GateID")][goY] = y;
	    	GateInfo[GetPVarInt(playerid, "GateID")][goZ] = z;

	    	GateInfo[GetPVarInt(playerid, "GateID")][goXr] = rx;
	    	GateInfo[GetPVarInt(playerid, "GateID")][goYr] = ry;
	    	GateInfo[GetPVarInt(playerid, "GateID")][goZr] = rz;

	    	MoveDynamicObject(objectid, 
	    		GateInfo[GetPVarInt(playerid, "GateID")][gX], GateInfo[GetPVarInt(playerid, "GateID")][gY], GateInfo[GetPVarInt(playerid, "GateID")][gZ],
	    		5.0,
	    		GateInfo[GetPVarInt(playerid, "GateID")][gXr], GateInfo[GetPVarInt(playerid, "GateID")][gYr], GateInfo[GetPVarInt(playerid, "GateID")][gZr]);

	    	SendClientMessage(playerid, COLOR_WHITE, "Gate's open state has been set.");

	    	GateSave(GetPVarInt(playerid, "GateID"));
	    }
	    case 14: // Gate System
	    {
	    	GateInfo[GetPVarInt(playerid, "GateID")][gX] = x;
	    	GateInfo[GetPVarInt(playerid, "GateID")][gY] = y;
	    	GateInfo[GetPVarInt(playerid, "GateID")][gZ] = z;

	    	GateInfo[GetPVarInt(playerid, "GateID")][gXr] = rx;
	    	GateInfo[GetPVarInt(playerid, "GateID")][gYr] = ry;
	    	GateInfo[GetPVarInt(playerid, "GateID")][gZr] = rz;

	    	MoveDynamicObject(objectid, 
	    		GateInfo[GetPVarInt(playerid, "GateID")][gX], GateInfo[GetPVarInt(playerid, "GateID")][gY], GateInfo[GetPVarInt(playerid, "GateID")][gZ],
	    		5.0,
	    		GateInfo[GetPVarInt(playerid, "GateID")][gXr], GateInfo[GetPVarInt(playerid, "GateID")][gYr], GateInfo[GetPVarInt(playerid, "GateID")][gZr]);

	    	SendClientMessage(playerid, COLOR_WHITE, "Gate moved.");

	    	GateSave(GetPVarInt(playerid, "GateID"));
	    }
	    case 15: // Door System
	    {
			if(response == EDIT_RESPONSE_CANCEL)
			{
				DestroyDynamicObject(objectid);
				return 1;
			}

	        for(new i = 0; i < MAX_DOORS; i++)
	        {
	        	if(DoorInfo[i][dModel] == 0)
	        	{
	        		DoorInfo[i][dModel] = GetPVarInt(playerid, "EditorModel");
	        		DoorInfo[i][dX] = x;
	        		DoorInfo[i][dY] = y;
	        		DoorInfo[i][dZ] = z;
	        		DoorInfo[i][dXr] = rx;
	        		DoorInfo[i][dYr] = ry;
	        		DoorInfo[i][dZr] = rz;

	        		DoorInfo[i][dInterior] = GetPlayerInterior(playerid);
	        		DoorInfo[i][dVirtualWorld] = GetPlayerVirtualWorld(playerid);
	        		DoorInfo[i][dSpeed] = 5.0;
	        		DoorInfo[i][dOperateRange] = 5.0;

	        		new string[128];
	        		format(string, sizeof(string), "Door has been created. (ID: %i)", i);
	        		SendClientMessage(playerid, COLOR_WHITE, string);

	        		DestroyDynamicObject(objectid);

	        		DoorInfo[i][dID] = CreateDynamicObject(DoorInfo[i][dModel], 
	        			DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ],
	        			DoorInfo[i][dXr], DoorInfo[i][dYr], DoorInfo[i][dZr],
	        			DoorInfo[i][dVirtualWorld], DoorInfo[i][dInterior]);

	        		Streamer_Update(playerid);

	        		new query[1024];
	        		mysql_format(handlesql, query, sizeof(query), "INSERT INTO doors (Model, X, Y, Z, Xr, Yr, Zr, Interior, VirtualWorld, Speed, Faction, OperateRange) \
	        			VALUES (%i, %f, %f, %f, %f, %f, %f, %i, %i, %f, %i, %f)",
						DoorInfo[i][dModel], 
						DoorInfo[i][dX], 
						DoorInfo[i][dY], 
						DoorInfo[i][dZ], 
						DoorInfo[i][dXr], 
						DoorInfo[i][dYr], 
						DoorInfo[i][dZr], 
						DoorInfo[i][dInterior], DoorInfo[i][dVirtualWorld], 
						DoorInfo[i][dSpeed], 
						DoorInfo[i][dFaction],
						DoorInfo[i][dOperateRange]);
					mysql_pquery(handlesql, query, "OnDoorSaved", "i", i);
	        		return 1;
	        	}
	        }
	    }
	    case 16: // Gate System
	    {
	    	if(response == EDIT_RESPONSE_CANCEL)
			{
				DestroyDynamicObject(objectid);
				return 1;
			}

	        for(new i = 0; i < MAX_GATES; i++)
	        {
	        	if(GateInfo[i][gModel] == 0)
	        	{
	        		GateInfo[i][gModel] = GetPVarInt(playerid, "EditorModel");
	        		GateInfo[i][gX] = x;
	        		GateInfo[i][gY] = y;
	        		GateInfo[i][gZ] = z;
	        		GateInfo[i][gXr] = rx;
	        		GateInfo[i][gYr] = ry;
	        		GateInfo[i][gZr] = rz;

	        		GateInfo[i][gInterior] = GetPlayerInterior(playerid);
	        		GateInfo[i][gVirtualWorld] = GetPlayerVirtualWorld(playerid);
	        		GateInfo[i][gSpeed] = 5.0;
	        		GateInfo[i][gOperateRange] = 5.0;

	        		new string[128];
	        		format(string, sizeof(string), "Gate has been created. (ID: %i)", i);
	        		SendClientMessage(playerid, COLOR_WHITE, string);

	        		DestroyDynamicObject(objectid);

	        		GateInfo[i][gID] = CreateDynamicObject(GateInfo[i][gModel], 
	        			GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ],
	        			GateInfo[i][gXr], GateInfo[i][gYr], GateInfo[i][gZr],
	        			GateInfo[i][gVirtualWorld], GateInfo[i][gInterior]);

	        		Streamer_Update(playerid);

	        		new query[1024];
	        		mysql_format(handlesql, query, sizeof(query), "INSERT INTO gates (Model, X, Y, Z, Xr, Yr, Zr, Interior, VirtualWorld, Speed, Faction, OperateRange) \
	        			VALUES (%i, %f, %f, %f, %f, %f, %f, %i, %i, %f, %i, %f)",
						GateInfo[i][gModel], 
						GateInfo[i][gX], 
						GateInfo[i][gY], 
						GateInfo[i][gZ], 
						GateInfo[i][gXr], 
						GateInfo[i][gYr], 
						GateInfo[i][gZr], 
						GateInfo[i][gInterior], GateInfo[i][gVirtualWorld], 
						GateInfo[i][gSpeed], 
						GateInfo[i][gFaction],
						GateInfo[i][gOperateRange]);
					mysql_pquery(handlesql, query, "OnGateSaved", "i", i);
	        		return 1;
	        	}
	        }
	    }
	   	case 17: // Mapping script, creating object
	    {
	    	DestroyDynamicObject(objectid);
	        TogglePlayerControllableEx(playerid, true);

	        if(response == 1)
	        {
	        	for(new i = 0; i < MAX_MAP_OBJECTS; i++)
	        	{
	        		if(MapInfo[i][mObjectModel] == 0)
	        		{
	        			MapInfo[i][mObjectModel] = GetPVarInt(playerid, "EditorModel");
	        			MapInfo[i][mX] = x;
						MapInfo[i][mY] = y;
						MapInfo[i][mZ] = z;
						MapInfo[i][mrX] = rx;
						MapInfo[i][mrY] = ry;
						MapInfo[i][mrZ] = rz;

						format(MapInfo[i][mTag], 16, "%s", PlayerInfo[playerid][pMapTag]);

						MapInfo[i][mObjectID] = CreateDynamicObject(MapInfo[i][mObjectModel], 
							MapInfo[i][mX], 
							MapInfo[i][mY], 
							MapInfo[i][mZ], 
							MapInfo[i][mrX], 
							MapInfo[i][mrY], 
							MapInfo[i][mrZ], 
							GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

						MapInfo[i][mInt] = GetPlayerInterior(playerid);
						MapInfo[i][mVw] = GetPlayerVirtualWorld(playerid);

						new query[256];
						mysql_format(handlesql, query, sizeof(query), "INSERT INTO `maps` (`Tag`, `ObjectModel`, `X`, `Y`, `Z`, `rX`, `rY`, `rZ`, `Interior`, `VirtualWorld`) VALUES ('%e', '%i', '%f', '%f', '%f', '%f', '%f', '%f', '%i', '%i');", 
							PlayerInfo[playerid][pMapTag], 
							MapInfo[i][mObjectModel], 
							MapInfo[i][mX], 
							MapInfo[i][mY], 
							MapInfo[i][mZ], 
							MapInfo[i][mrX], 
							MapInfo[i][mrY], 
							MapInfo[i][mrZ], 
							MapInfo[i][mInt], 
							MapInfo[i][mVw]);
						mysql_pquery(handlesql, query, "OnMappingObjectCreated", "i", i);

						Streamer_Update(playerid);
	        			break;
	        		}
	        	}
	        }
	        RemovePlayerTag(playerid);
	    }

	    case 18: // Mapping script, moving object
	    {
	        TogglePlayerControllableEx(playerid, true);

	        if(response == 1)
	        {
	        	for(new i = 0; i < MAX_MAP_OBJECTS; i++)
	        	{
	        		if(MapInfo[i][mObjectID] == objectid)
	        		{
	        			MapInfo[i][mX] = x;
						MapInfo[i][mY] = y;
						MapInfo[i][mZ] = z;
						MapInfo[i][mrX] = rx;
						MapInfo[i][mrY] = ry;
						MapInfo[i][mrZ] = rz;

						format(MapInfo[i][mTag], 16, "%s", PlayerInfo[playerid][pMapTag]);

						MoveDynamicObject(MapInfo[i][mObjectID], 
							MapInfo[i][mX], 
							MapInfo[i][mY], 
							MapInfo[i][mZ], 
							50.0, 
							MapInfo[i][mrX], 
							MapInfo[i][mrY], 
							MapInfo[i][mrZ]);

						new query[256];
						mysql_format(handlesql, query, sizeof(query), "UPDATE `maps` SET Tag=%e, ObjectModel=%i, X=%f, Y=%f, Z=%f, rX=%f, rY=%f, rZ=%f, Interior=%i, VirtualWorld=%i WHERE ID=%i",
							PlayerInfo[playerid][pMapTag], 
							MapInfo[i][mObjectModel], 
							MapInfo[i][mX], 
							MapInfo[i][mY], 
							MapInfo[i][mZ], 
							MapInfo[i][mrX], 
							MapInfo[i][mrY], 
							MapInfo[i][mrZ],
							MapInfo[i][mInt],
							MapInfo[i][mVw],
							MapInfo[i][mID]);
						mysql_pquery(handlesql, query);

						Streamer_Update(playerid);
	        			break;
	        		}
	        	}
	        }
	        RemovePlayerTag(playerid);
	    }
	}
    DeletePVar(playerid,"EditorMode");
	SetPVarInt(playerid, "Mute", 0);
	return 1;
}

forward OnMappingObjectCreated(id);
public OnMappingObjectCreated(id)
{
	MapInfo[id][mID] = cache_insert_id();
	return 1;
}
//============================================//
stock EditCloseHouseObject(playerid, key)
{
	new string[128], furnitname[50], found = 0;
	furnitname="N/A";
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
		        if(found == 0)
		        {
            		SetPVarInt(playerid, "FurnEditKey", key);
            		SetPVarInt(playerid, "FurnEditH", h);
            		format(string, 128, "Edit Object: %s", GetObjName(HouseInfo[key][hoID][h]));
		    		ShowPlayerDialogEx(playerid, 76, DIALOG_STYLE_LIST, "Editting object", "Edit Object\nSelect Material\nReset Material\nCopy Object\nRemove Object", "Select", "Close");
					found++;
				}
		    }
        }
    }
	if(found == 0) SCM(playerid, COLOR_ERROR, "ERROR: Can't find any object!");
    return 1;
}
//============================================//
stock GetCloseHouseObject(playerid,key)
{
	new furnitob[50], found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
                furnitob[found] = HouseInfo[key][hoID][h];
				found++;
		    }
        }
    }

	if(found != 0)
	{
		ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 3, 16.0, 0.0, -55.0);
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "ERROR: Can't find any object!");
	}

    return 1;
}
//============================================//
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(GetPVarInt(playerid, "EditorMode") != 15)
	{
	    if(ToyInfo[playerid][index][tModel] == 0) //Is previewing it
	    {
		    ShowPlayerDialogEx(playerid, 295, DIALOG_STYLE_MSGBOX, "Buying item", "Would you like to buy this item?", "Buy","Cancel");
		    
		    SetPVarFloat(playerid, "ToyoX", fOffsetX);
		    SetPVarFloat(playerid, "ToyoY", fOffsetY);
		    SetPVarFloat(playerid, "ToyoZ", fOffsetZ);
		    SetPVarFloat(playerid, "ToyrX", fRotX);
		    SetPVarFloat(playerid, "ToyrY", fRotY);
		    SetPVarFloat(playerid, "ToyrZ", fRotZ);
		    SetPVarFloat(playerid, "ToysX", fScaleX);
		    SetPVarFloat(playerid, "ToysY", fScaleY);
		    SetPVarFloat(playerid, "ToysZ", fScaleZ);

	     	ToyInfo[playerid][index][toX] = fOffsetX;
	     	ToyInfo[playerid][index][toY] = fOffsetY;
	     	ToyInfo[playerid][index][toZ] = fOffsetZ;

	     	ToyInfo[playerid][index][trX] = fRotX;
	     	ToyInfo[playerid][index][trY] = fRotY;
	        ToyInfo[playerid][index][trZ] = fRotZ;

	        ToyInfo[playerid][index][tsX] = fScaleX;
	        ToyInfo[playerid][index][tsY] = fScaleY;
	        ToyInfo[playerid][index][tsZ] = fScaleZ;
	    }
	    else //Already bought it and is editting it.
	    {
			RemovePlayerAttachedObject(playerid, index);

		    SetPVarFloat(playerid, "ToyoX", fOffsetX);
		    SetPVarFloat(playerid, "ToyoY", fOffsetY);
		    SetPVarFloat(playerid, "ToyoZ", fOffsetZ);
		    SetPVarFloat(playerid, "ToyrX", fRotX);
		    SetPVarFloat(playerid, "ToyrY", fRotY);
		    SetPVarFloat(playerid, "ToyrZ", fRotZ);
		    SetPVarFloat(playerid, "ToysX", fScaleX);
		    SetPVarFloat(playerid, "ToysY", fScaleY);
		    SetPVarFloat(playerid, "ToysZ", fScaleZ);
		    
	     	ToyInfo[playerid][index][toX] = fOffsetX;
	     	ToyInfo[playerid][index][toY] = fOffsetY;
	     	ToyInfo[playerid][index][toZ] = fOffsetZ;
	     	
	     	ToyInfo[playerid][index][trX] = fRotX;
	     	ToyInfo[playerid][index][trY] = fRotY;
	        ToyInfo[playerid][index][trZ] = fRotZ;
	        
	        ToyInfo[playerid][index][tsX] = fScaleX;
	        ToyInfo[playerid][index][tsY] = fScaleY;
	        ToyInfo[playerid][index][tsZ] = fScaleZ;
		    
		    SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
	    }
	}
	else
	{
	    RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN2);
	    RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN1);

		new wpnid = PlayerInfo[playerid][pPlayerWeapon];
		SetTimerEx("LoadHolsters", 2000, false, "i", playerid);
		if(wpnid == 0) return scm(playerid, COLOR_ERROR, "You need the weapon equiped!");

		scm(playerid, -1, "Holster set.");
		if(HolsterInfo[playerid][wpnid][hBone] == 0)
		{
		    HolsterInfo[playerid][wpnid][hBone] = 1;
		}
	    HolsterInfo[playerid][wpnid][hoX] = fOffsetX;
     	HolsterInfo[playerid][wpnid][hoY] = fOffsetY;
     	HolsterInfo[playerid][wpnid][hoZ] = fOffsetZ;
     	HolsterInfo[playerid][wpnid][hrX] = fRotX;
     	HolsterInfo[playerid][wpnid][hrY] = fRotY;
        HolsterInfo[playerid][wpnid][hrZ] = fRotZ;
        DeletePVar(playerid, "EditorMode");
        SaveHolster(playerid);
	}
	return 1;
}
//============================================//
forward ReloadPlayerToys(playerid);
public ReloadPlayerToys(playerid)
{
	for(new i = 0; i < MAX_PLAYER_TOYS; i++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
		{
			RemovePlayerAttachedObject(playerid, i);
		}

		if(ToyInfo[playerid][i][tEquipped] != 0)
		{
			SetPlayerAttachedObject(playerid, i, ToyInfo[playerid][i][tModel],ToyInfo[playerid][i][tBone],
				ToyInfo[playerid][i][toX], ToyInfo[playerid][i][toY], ToyInfo[playerid][i][toZ],
				ToyInfo[playerid][i][trX], ToyInfo[playerid][i][trY], ToyInfo[playerid][i][trZ],
				ToyInfo[playerid][i][tsX], ToyInfo[playerid][i][tsY], ToyInfo[playerid][i][tsZ]);
	    }
	}
	return 1;
}

forward LoadPlayerToys(playerid);
public LoadPlayerToys(playerid)
{
	new query[256];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM toys WHERE PlayerName='%e'", PlayerInfo[playerid][pUsername]);
	mysql_pquery(handlesql, query, "OnToysLoaded", "i", playerid);
	return 1;
}

forward OnToysLoaded(playerid);
public OnToysLoaded(playerid)
{
	for(new i = 0; i < MAX_PLAYER_TOYS; i++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
		{
			RemovePlayerAttachedObject(playerid, i);
		}

		if(i < cache_get_row_count())
		{
	        ToyInfo[playerid][i][tDBID] = cache_get_field_content_int(i, "ID");
	        ToyInfo[playerid][i][tBone] = cache_get_field_content_int(i, "bone");
	        ToyInfo[playerid][i][tModel] = cache_get_field_content_int(i, "modelid");

			ToyInfo[playerid][i][toX] = cache_get_field_content_float(i, "OffSetX");
			ToyInfo[playerid][i][toY] = cache_get_field_content_float(i, "OffSetY");
			ToyInfo[playerid][i][toZ] = cache_get_field_content_float(i, "OffSetZ");
			
			ToyInfo[playerid][i][trX] = cache_get_field_content_float(i, "RotX");
			ToyInfo[playerid][i][trY] = cache_get_field_content_float(i, "RotY");
			ToyInfo[playerid][i][trZ] = cache_get_field_content_float(i, "RotZ");
			
			ToyInfo[playerid][i][tsX] = cache_get_field_content_float(i, "ScaleX");
			ToyInfo[playerid][i][tsY] = cache_get_field_content_float(i, "ScaleY");
			ToyInfo[playerid][i][tsZ] = cache_get_field_content_float(i, "ScaleZ");

			ToyInfo[playerid][i][tEquipped] = cache_get_field_content_int(i, "Equipped");

			if(ToyInfo[playerid][i][tEquipped] != 0)
			{
		    	SetPlayerAttachedObject(playerid, i, ToyInfo[playerid][i][tModel],ToyInfo[playerid][i][tBone],
					ToyInfo[playerid][i][toX], ToyInfo[playerid][i][toY], ToyInfo[playerid][i][toZ],
					ToyInfo[playerid][i][trX], ToyInfo[playerid][i][trY], ToyInfo[playerid][i][trZ],
				 	ToyInfo[playerid][i][tsX], ToyInfo[playerid][i][tsY], ToyInfo[playerid][i][tsZ]);
		    }
		}
	}
	return 1;
}
//============================================//
forward SaveToys(playerid);
public SaveToys(playerid)
{
	new query[1024];
	for(new i = 0; i < MAX_PLAYER_TOYS; i++)
	{
        if(ToyInfo[playerid][i][tModel] != 0)
        {
	        mysql_format(handlesql, query, sizeof(query), "UPDATE toys SET bone=%d, modelid=%d, OffSetX=%f, OffSetY=%f, OffSetZ=%f, RotX=%f, RotY=%f, RotZ=%f, ScaleX=%f, ScaleY=%f, ScaleZ=%f, Equipped=%i WHERE PlayerName='%e' AND ID=%i",
			ToyInfo[playerid][i][tBone], ToyInfo[playerid][i][tModel],
			ToyInfo[playerid][i][toX], ToyInfo[playerid][i][toY], ToyInfo[playerid][i][toZ],
			ToyInfo[playerid][i][trX], ToyInfo[playerid][i][trY], ToyInfo[playerid][i][trZ],
			ToyInfo[playerid][i][tsX], ToyInfo[playerid][i][tsY], ToyInfo[playerid][i][tsZ],
			ToyInfo[playerid][i][tEquipped], PlayerInfo[playerid][pUsername], ToyInfo[playerid][i][tDBID]);
		 	mysql_pquery(handlesql, query);
		}
	}
	return 1;
}

forward OnPlayerToyCreated(playerid, id);
public OnPlayerToyCreated(playerid, id)
{
	ToyInfo[playerid][id][tDBID] = cache_insert_id();
	return 1;
}
//============================================//
forward EndBlackScreen(playerid);
public EndBlackScreen(playerid)
{
    if(GetPVarInt(playerid, "Blinded") == 0) TextDrawHideForPlayer(playerid,BlindDraw), DeletePVar(playerid, "BlackScreen");
	return true;
}
//============================================//
forward LoadHolsters(playerid);
public LoadHolsters(playerid)
{
	new found = 0, weaponid = 0;
	for(new p = 0; p < MAX_INV_SLOTS; p++)
	{
	    if(found == 0)
	    {
		    if(PlayerInfo[playerid][pInvItem][p] >= 25 && PlayerInfo[playerid][pInvItem][p] <= 34)
		    {
		        found = 1;
		        weaponid = PlayerInfo[playerid][pInvItem][p];
	        }
	    }
	}
	if(found == 1)
	{
	    if(HolsterInfo[playerid][weaponid][hoX] != 0.0)
	    {
	        SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
			HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
	    }
	    else
	    {
	    	HolsterInfo[playerid][weaponid][hBone] = 1;
	    	HolsterInfo[playerid][weaponid][hoX] = 0.139415;
	    	HolsterInfo[playerid][weaponid][hoY] = -0.167970;
	    	HolsterInfo[playerid][weaponid][hoZ] = 0.120848;
	    	HolsterInfo[playerid][weaponid][hrX] = 0.000000;
	    	HolsterInfo[playerid][weaponid][hrY] = 152.342666;
	    	HolsterInfo[playerid][weaponid][hrZ] = 0.000000;

	        SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
			HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
	    }

	    if(HolsterInfo[playerid][weaponid][hBone] == -1)
	    {
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN2)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN2);
	    }
	}
	if(found == 0)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN2)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN2);
	}
	//==========//
	// SECONDARY WEAPON //
	found = 0;
	for(new p = 0; p < MAX_INV_SLOTS; p++)
	{
	    if(found == 0)
	    {
		    if(PlayerInfo[playerid][pInvItem][p] >= 22 && PlayerInfo[playerid][pInvItem][p] <= 24)
		    {
		        found=1;
		        weaponid=PlayerInfo[playerid][pInvItem][p];
	        }
	    }
	}
	if(found == 1)
	{
	    if(HolsterInfo[playerid][weaponid][hHide] == 0) {
        	if(HolsterInfo[playerid][weaponid][hoX] != 0.0) {
        		SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN1, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
	    		HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
	    	} else {
	    		HolsterInfo[playerid][weaponid][hBone] = 8;
	    		HolsterInfo[playerid][weaponid][hoX] = -0.044177;
	    		HolsterInfo[playerid][weaponid][hoY] = 0.000000;
	    		HolsterInfo[playerid][weaponid][hoZ] = 0.092454;
	    		HolsterInfo[playerid][weaponid][hrX] = 246.994583;
	    		HolsterInfo[playerid][weaponid][hrY] = 0.000000;
	    		HolsterInfo[playerid][weaponid][hrZ] = 0.000000;
	    		SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN1, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ],
	    		HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
			}
		} else {
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN1)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN1);
	    }
	}
	if(found == 0)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN1)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN1);
	}
	//==========//
	return true;
}
//============================================//
stock GetAreaZone(Float:x,Float:y,Float:z)
{
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		return i;
	}
	return false;
}
//============================================//
stock GetZoneArea(Float:x,Float:y,Float:z)
{
	new str[130];
	format(str,sizeof(str),"%s",Zones[GetAreaZone(x,y,z)][zone_name]);
	return str;
}
//============================================//
stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)
{
    PlayerInfo[playerid][pPos][0]=x;
    PlayerInfo[playerid][pPos][1]=y;
    PlayerInfo[playerid][pPos][2]=z;
    SetPlayerPos(playerid, x, y, z);
    UpdateSpectator(playerid);
    return 1;
}
//============================================//
stock SetVehiclePosEx(vehicleid, Float:x,Float:y,Float:z)
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                PlayerInfo[i][pPos][0]=x;
                PlayerInfo[i][pPos][1]=y;
                PlayerInfo[i][pPos][2]=z;
            }
        }
    }
    return SetVehiclePos(vehicleid, x, y, z);
}
//============================================//
forward GiveMoneyPlayer(playerid, amount);
public GiveMoneyPlayer(playerid, amount)
{
	GivePlayerMoneyEx(playerid, amount);
	return true;
}
//============================================//
forward GetHouseClass(Float:x, Float:y, Float:z);
public GetHouseClass(Float:x, Float:y, Float:z)
{
	new count = 0;
	for(new i = 0; i < sizeof(HouseCoordinates); i++)
	{
	    if(count == 0)
	    {
			if(HouseCoordinates[i][mbX] == x && HouseCoordinates[i][mbY] == y && HouseCoordinates[i][mbZ] == z)
			{
			    count = HouseCoordinates[i][Class];
			}
	    }
	}
	if(count == 0) count = 2;
	return count;
}
//============================================//
stock GetHouseClassName(classid)
{
	new text[30];
	if(classid == 0) format(text, sizeof(text), "%s","No class");
	if(classid == 1) format(text, sizeof(text), "%s","Small");
	if(classid == 2) format(text, sizeof(text), "%s","Medium");
	if(classid == 3) format(text, sizeof(text), "%s","Big");
	return text;
}
//============================================//
forward LotteryCheck(playerid, type, number);
public LotteryCheck(playerid, type, number)
{
    new fields, rows, fetch[64], query[128];
	new text[128];
    if(type == 1) //buying tickets
    {
	    cache_get_data(rows, fields);
	    if(!rows)
	    {
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO lottery (`Name`, `Number`, `Active`) VALUES ('%e',%d, 1)", PlayerInfo[playerid][pUsername], number);
			mysql_pquery(handlesql, query);
			SCM(playerid, -1, "Lottery ticket has been bought! Good luck!");
	    }
	    else
	    {
	        error(playerid, "This number is already taken for the current lottery.");
	        ShowPlayerDialogEx(playerid, 418, DIALOG_STYLE_INPUT, "Lottery Ticket", "What number would you like your ticket to be? \nInsert any number between 1-100", "Submit","");
	    }
	}
	if(type == 2) //Selecting winner at midnight.
	{
		cache_get_data(rows, fields);
	    if(rows)
	    {
	    	new connected = 0;
	    	new id = 0;
	    	cache_get_field_content(0, "Name", fetch);

	    	foreach(new i : Player)
	    	{
	    		new playername[MAX_PLAYER_NAME];
				GetPlayerName(i, playername, MAX_PLAYER_NAME);

				if(!strcmp(playername, fetch))
				{
					connected = 1;
					id = i;
					break;
				}
	    	}

	    	if(connected == 1)
	    	{
	    		SetPVarInt(id, "Bank", GetPVarInt(id, "Bank") + LOTTERY_BASE_WINNING);
	    		OnPlayerDataSave(id);

	    		format(text, sizeof(text), "* [Lottery] The winning number is %d, %s is the winner with a jackpot of %s! *", number, GiveNameSpaceEx(fetch), FormatMoney(LOTTERY_BASE_WINNING));
				SendClientMessageToAll(0x458E1DAA, text);
				mysql_format(handlesql, query, sizeof(query), "DELETE FROM lottery WHERE 1=1");
				mysql_pquery(handlesql, query);
	    	}
	    	else
	    	{
	    		format(text, sizeof(text), "* [Lottery] The winning number is %d, nobody has won this draw. *", number);
				SendClientMessageToAll(0x458E1DAA, text);
				mysql_format(handlesql, query, sizeof(query), "DELETE FROM lottery WHERE 1=1");
				mysql_pquery(handlesql, query);
	    	}
	    }
		else //No winner
		{
			format(text, sizeof(text), "* [Lottery] The winning number is %d, nobody has won this draw. *", number);
			SendClientMessageToAll(0x458E1DAA, text);
			mysql_format(handlesql, query, sizeof(query), "DELETE FROM lottery WHERE 1=1");
			mysql_pquery(handlesql, query);
		}
	}
	return 1;
}
//============================================//
forward PCRPlayer(playerid,type);
public PCRPlayer(playerid,type)
{
    new fields, rows, str[128], fetch[500], diatxt[2056];
	new temptxt[64], tmpid;
    if(type == 1)
    {
	    cache_get_data(rows, fields);
	    if(rows)
	    {
	        format(diatxt, sizeof(diatxt), "%s{CCCCCC}(Click to add new medical file)\n",diatxt);
	        for(new i = 0; i < rows; i++)
	        {
		        cache_get_field_content(i, "title", fetch);
		        if(strlen(fetch) > 0)
		        {
		            cache_get_field_content(i, "critic", fetch);
		            tmpid = strval(fetch);
		            //{33A0FF}Check-up{33FF66}Casual\n{FFCC33}Normal\n{FF0000}Severe
		            switch(tmpid)
		            {
		                case 0: //Checkup
		                {
		                    format(temptxt, sizeof(temptxt), "{33A0FF}Check-up");
		                }
		                case 1: //Casual
		                {
		                    format(temptxt, sizeof(temptxt), "{33FF66}Casual");
		                }
		                case 2: //Normal
		                {
		                    format(temptxt, sizeof(temptxt), "{FFCC33}Normal");
		                }
		                case 3: //Severe
		                {
		                    format(temptxt, sizeof(temptxt), "{FF0000}Severe");
		                }
		            }
		            cache_get_field_content(i, "title", fetch);
			        format(diatxt, sizeof(diatxt), "%s{33FF66}File: {FFFFFF}%s [%s]{CCCCCC}(Click for more information)\n",diatxt, fetch,temptxt);
			        //Seting info for player to view on dialog.
			        cache_get_field_content(i, "time", fetch);
		            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

		            cache_get_field_content(i, "player", fetch);
		            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

		            cache_get_field_content(i, "medic", fetch);
		            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
				}
			}
	    }
	    else
	    {
			format(diatxt, sizeof(diatxt), "%s{CCCCCC}(Click to add new medical file)\n",diatxt);
	        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
		}
	 	ShowPlayerDialogEx(playerid, 413, DIALOG_STYLE_LIST, "Patient Care Report", diatxt, "Select", "Back");
	}
	if(type == 2)
	{
	    cache_get_data(rows, fields);
	    if(!rows) return error(playerid, "Invalid record selected.");
		cache_get_field_content(0, "player", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
		cache_get_field_content(0, "medic", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Person in charge: {FFFFFF}%s\n",diatxt, fetch);
	   	cache_get_field_content(0, "date", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
	   	cache_get_field_content(0, "time", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
        cache_get_field_content(0, "critic", fetch);
        tmpid = strval(fetch);
        //{33A0FF}Check-up{33FF66}Casual\n{FFCC33}Normal\n{FF0000}Severe
        switch(tmpid)
        {
            case 0: //Checkup
            {
                format(temptxt, sizeof(temptxt), "{33A0FF}Check-up");
            }
            case 1: //Casual
            {
                format(temptxt, sizeof(temptxt), "{33FF66}Casual");
            }
            case 2: //Normal
            {
                format(temptxt, sizeof(temptxt), "{FFCC33}Normal");
            }
            case 3: //Severe
            {
                format(temptxt, sizeof(temptxt), "{FF0000}Severe");
            }
        }
        format(diatxt, sizeof(diatxt), "%s{33FF66}Severity: {FFFFFF}%s\n",diatxt, temptxt);
	 	cache_get_field_content(0, "text", fetch);
		if(strlen(fetch) < 400)
		{
			format(diatxt, sizeof(diatxt), "%s{33FF66}Text: {FFFFFF}%s\n",diatxt, fetch);
		}
		else
		{
			new len = strlen(fetch);
			new found = 0;
			for(new i = 1; i < 5; i++)
			{
			    if(found == 0)
			    {
				    len = len - 40;
				    if(len < 0)
					{
						found = i;
					}
				}
			}
			format(diatxt, sizeof(diatxt), "%s{33FF66}Text: ",diatxt);
			for(new i = 1; i < found; i++)
			{
				new maxl = 40 * i;
				new minl = (40 * 1) - 40;
		        new pos = maxl;
		        while(fetch[--pos] > ' ') {}
		        if(pos < minl) pos = maxl;
		        format(str, sizeof(str), "%.*s\n", pos, fetch[minl]);
				format(diatxt, sizeof(diatxt), "%s{FFFFFF}%s",diatxt, str);
			}
		}
		cache_get_field_content(0, "title", fetch);
	    format(temptxt, 64, "{33FF66}Summary: {FFFFFF}%s",fetch);
		ShowPlayerDialogEx(playerid, 417, DIALOG_STYLE_MSGBOX, temptxt, diatxt, "Back", "");
	}
	return 1;
}
//============================================//
forward SelectSpawnpoint(playerid);
public SelectSpawnpoint(playerid)
{
    new option[5], listitem = GetPVarInt(playerid,"SSP"), key;
    option[0]=1;
    if(GetPVarInt(playerid,"HouseKey") != 0) option[1]=1;
	if(GetPVarInt(playerid,"BizKey") != 0) option[2]=1;
	if(GetPVarInt(playerid,"Member") == FACTION_LSPD || GetPVarInt(playerid,"Member") == FACTION_LSFD || GetPVarInt(playerid,"Member") == FACTION_RLS || GetPVarInt(playerid,"Member") == FACTION_FOX_ENTERPRISE || GetPVarInt(playerid,"Member") == FACTION_LSG) option[3]=1;
	for(new i = 0; i < 4; i++)
	{
	    if(i != 0)
		{
		    if(listitem == i && option[i] == 0)
			{
		        listitem=i+1;
		    }
	    }
	}
	if(listitem > 3) listitem=0;
	switch(listitem)
	{
	    case 0: // Last Location
		{
		    TextDrawShowForPlayer(playerid, SpawnDraw[0]);
            TextDrawHideForPlayer(playerid, SpawnDraw[1]);
            TextDrawHideForPlayer(playerid, SpawnDraw[2]);
            TextDrawHideForPlayer(playerid, SpawnDraw[3]);
		    SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ") + 25.0);
		    SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ"));
            SetPlayerInterior(playerid, GetPVarInt(playerid, "Interior"));
	        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "World"));
		    SetPVarInt(playerid, "SSP", listitem+1);

		    Streamer_Update(playerid);
		}
		case 1: // Property
		{
		    TextDrawHideForPlayer(playerid, SpawnDraw[0]);
            TextDrawShowForPlayer(playerid, SpawnDraw[1]);
            TextDrawHideForPlayer(playerid, SpawnDraw[2]);
            TextDrawHideForPlayer(playerid, SpawnDraw[3]);
		    key = GetPVarInt(playerid,"HouseKey");
			SetPlayerCameraPos(playerid, HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo]+50.0);
		    SetPlayerCameraLookAt(playerid,HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo]);
			SetPlayerInterior(playerid, HouseInfo[key][hIntOut]);
	        SetPlayerVirtualWorld(playerid, HouseInfo[key][hVwOut]);
			SetPVarInt(playerid, "SSP", listitem+1);

			Streamer_Update(playerid);
		}
		case 2: // Business
		{
		    TextDrawHideForPlayer(playerid, SpawnDraw[0]);
            TextDrawHideForPlayer(playerid, SpawnDraw[1]);
            TextDrawShowForPlayer(playerid, SpawnDraw[2]);
            TextDrawHideForPlayer(playerid, SpawnDraw[3]);
		    key = GetPVarInt(playerid,"BizKey");
            SetPlayerCameraPos(playerid, BizInfo[key][Xo], BizInfo[key][Yo], BizInfo[key][Zo]+50.0);
		    SetPlayerCameraLookAt(playerid,BizInfo[key][Xo], BizInfo[key][Yo], BizInfo[key][Zo]);
			SetPlayerInterior(playerid, BizInfo[key][IntOut]);
	        SetPlayerVirtualWorld(playerid, BizInfo[key][VwOut]);
			SetPVarInt(playerid, "SSP", listitem+1);

			Streamer_Update(playerid);
		}
		case 3:
		{
		    SetPVarInt(playerid, "SSP", listitem+1);
		    switch(GetPVarInt(playerid,"Member"))
			{
			    case FACTION_LSPD: // LSPD
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1513.6908,-1676.3589,31.4003);
		            SetPlayerCameraLookAt(playerid, 1553.6469,-1675.6169,16.1953);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);

	                Streamer_Update(playerid);
			    }
			    case FACTION_LSFD: // LSFD
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1219.1266,-1322.5055,27.7507);
		            SetPlayerCameraLookAt(playerid, 1175.9971,-1324.2395,19.4422);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);

	                Streamer_Update(playerid);
			    }
			    case FACTION_RLS: // RLS
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 832.0953,-1415.9773,25.8617);
		            SetPlayerCameraLookAt(playerid, 816.2530,-1386.0800,13.5965);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);

	                Streamer_Update(playerid);
			    }
			    case FACTION_FOX_ENTERPRISE: // SAN Network
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1790.9956,-1252.6631,19.9453);
		            SetPlayerCameraLookAt(playerid, 1788.7100,-1298.6400,13.3750);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);

	                Streamer_Update(playerid);
			    }
			    case FACTION_LSG: // GOV
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1481.8411,-1719.9417,32.7127);
		            SetPlayerCameraLookAt(playerid, 1481.1187,-1770.7849,18.7958);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);

	                Streamer_Update(playerid);
			    }
		    }
	    }
	}
	return 1;
}
//============================================//
forward LoadFurn(houseid);
public LoadFurn(houseid)
{
    for(new i = 0; i < MAX_HOUSE_OBJ; i++)
    {
    	if(i < cache_get_row_count())
    	{
    		HouseInfo[houseid][hoDBID][i] = cache_get_field_content_int(i, "ID");
			HouseInfo[houseid][hoID][i] = cache_get_field_content_int(i, "Model");
			HouseInfo[houseid][hoX][i] = cache_get_field_content_float(i, "PosX");
			HouseInfo[houseid][hoY][i] = cache_get_field_content_float(i, "PosY");
			HouseInfo[houseid][hoZ][i] = cache_get_field_content_float(i, "PosZ");
			HouseInfo[houseid][horX][i] = cache_get_field_content_float(i, "AngX");
			HouseInfo[houseid][horY][i] = cache_get_field_content_float(i, "AngY");
			HouseInfo[houseid][horZ][i] = cache_get_field_content_float(i, "AngZ");
			HouseInfo[houseid][Locked][i] = cache_get_field_content_int(i, "Locked");

			new MaterialFetch[128];
			new Materials[HOUSE_OBJECT_MATERIALS][8];

			cache_get_field_content(i, "Materials", MaterialFetch);
			split(MaterialFetch, Materials, ',');

			for(new i2 = 0; i2 < HOUSE_OBJECT_MATERIALS; i2++)
			{
				if(strval(Materials[i2]) != 0)
				{
					HouseMaterialInfo[houseid][i][i2] = strval(Materials[i2]);
				}
			}

			if(IsHouseOutdoorObject(houseid, i))
			{
				if(outdoor_furn == 0)
				{
					continue;
				}

				HouseInfo[houseid][hObject][i] = CreateDynamicObject(HouseInfo[houseid][hoID][i], 
					HouseInfo[houseid][hoX][i], HouseInfo[houseid][hoY][i], HouseInfo[houseid][hoZ][i], 
					HouseInfo[houseid][horX][i], HouseInfo[houseid][horY][i], HouseInfo[houseid][horZ][i], 
					HouseInfo[houseid][hVwOut], -1, -1, 100);
			}
			else
			{
				HouseInfo[houseid][hObject][i] = CreateDynamicObject(HouseInfo[houseid][hoID][i], 
					HouseInfo[houseid][hoX][i], HouseInfo[houseid][hoY][i], HouseInfo[houseid][hoZ][i], 
					HouseInfo[houseid][horX][i], HouseInfo[houseid][horY][i], HouseInfo[houseid][horZ][i], 
					HouseInfo[houseid][hVwIn], -1, -1, 100);
			}

			for(new i2 = 0; i2 < HOUSE_OBJECT_MATERIALS; i2++)
			{
				if(HouseMaterialInfo[houseid][i][i2] != 0)
				{
					ChangeDynamicObjectMaterial(HouseInfo[houseid][hObject][i], i2, HouseMaterialInfo[houseid][i][i2]);
				}
			}
    	}
    }
	return 1;
}
//============================================//
forward SaveFurn(houseid);
public SaveFurn(houseid)
{
    new query[1024];
    for(new i = 0; i < MAX_HOUSE_OBJ; i++)
    {
    	if(HouseInfo[houseid][hoID][i] != 0)
    	{
    		new Materials[128];

    		for(new i2 = 0; i2 < HOUSE_OBJECT_MATERIALS; i2++)
			{
				if(i2 == 0)
				{
					format(Materials, sizeof(Materials), "%i", HouseMaterialInfo[houseid][i][i2]);
				}
				else
				{
					format(Materials, sizeof(Materials), "%s,%i", Materials, HouseMaterialInfo[houseid][i][i2]);
				}
			}

			mysql_format(handlesql, query, sizeof(query), "UPDATE housefurn SET Model=%i, PosX=%f, PosY=%f, PosZ=%f, AngX=%f, AngY=%f, AngZ=%f, Materials='%e', Locked=%i WHERE ID=%i",
				HouseInfo[houseid][hoID][i],
				HouseInfo[houseid][hoX][i],
				HouseInfo[houseid][hoY][i],
				HouseInfo[houseid][hoZ][i],
				HouseInfo[houseid][horX][i],
				HouseInfo[houseid][horY][i],
				HouseInfo[houseid][horZ][i],
				Materials,
				HouseInfo[houseid][Locked][i],
				HouseInfo[houseid][hoDBID][i]);
			mysql_pquery(handlesql, query);
    	}
    }
    return 1;
}
//============================================//
forward LoadBizFurn(businessid);
public LoadBizFurn(businessid)
{
    for(new i = 0; i < MAX_HOUSE_OBJ; i++)
    {
    	if(i < cache_get_row_count())
    	{
    		BizInfo[businessid][boDBID][i] = cache_get_field_content_int(i, "ID");
			BizInfo[businessid][boID][i] = cache_get_field_content_int(i, "Model");
			BizInfo[businessid][boX][i] = cache_get_field_content_float(i, "PosX");
			BizInfo[businessid][boY][i] = cache_get_field_content_float(i, "PosY");
			BizInfo[businessid][boZ][i] = cache_get_field_content_float(i, "PosZ");
			BizInfo[businessid][borX][i] = cache_get_field_content_float(i, "AngX");
			BizInfo[businessid][borY][i] = cache_get_field_content_float(i, "AngY");
			BizInfo[businessid][borZ][i] = cache_get_field_content_float(i, "AngZ");
			BizInfo[businessid][bLocked][i] = cache_get_field_content_int(i, "Locked");

			new MaterialFetch[128];
			new Materials[BUSINESS_OBJECT_MATERIALS][8];

			cache_get_field_content(i, "Materials", MaterialFetch);
			split(MaterialFetch, Materials, ',');

			for(new i2 = 0; i2 < BUSINESS_OBJECT_MATERIALS; i2++)
			{
				if(strval(Materials[i2]) != 0)
				{
					BizMaterialInfo[businessid][i][i2] = strval(Materials[i2]);
				}
			}

			if(IsBizOutdoorObject(businessid, i))
			{
				if(outdoor_furn == 0)
				{
					continue;
				}
				BizInfo[businessid][bObject][i] = CreateDynamicObject(BizInfo[businessid][boID][i], 
					BizInfo[businessid][boX][i], BizInfo[businessid][boY][i], BizInfo[businessid][boZ][i], 
					BizInfo[businessid][borX][i], BizInfo[businessid][borY][i], BizInfo[businessid][borZ][i], 
					BizInfo[businessid][VwOut], -1, -1, 100);
			}
			else
			{
				BizInfo[businessid][bObject][i] = CreateDynamicObject(BizInfo[businessid][boID][i], 
					BizInfo[businessid][boX][i], BizInfo[businessid][boY][i], BizInfo[businessid][boZ][i], 
					BizInfo[businessid][borX][i], BizInfo[businessid][borY][i], BizInfo[businessid][borZ][i], 
					BizInfo[businessid][VwIn], -1, -1, 100);
			}

			for(new i2 = 0; i2 < BUSINESS_OBJECT_MATERIALS; i2++)
			{
				if(BizMaterialInfo[businessid][i][i2] != 0)
				{
					ChangeDynamicObjectMaterial(BizInfo[businessid][bObject][i], i2, BizMaterialInfo[businessid][i][i2]);
				}
			}
    	}
    }
    return 1;
}
//============================================//
forward SaveBizFurn(businessid);
public SaveBizFurn(businessid)
{
    new query[1024];
    for(new i = 0; i < MAX_HOUSE_OBJ; i++)
    {
    	if(BizInfo[businessid][boID][i] != 0)
    	{
    		new Materials[128];

    		for(new i2 = 0; i2 < BUSINESS_OBJECT_MATERIALS; i2++)
			{
				if(i2 == 0)
				{
					format(Materials, sizeof(Materials), "%i", BizMaterialInfo[businessid][i][i2]);
				}
				else
				{
					format(Materials, sizeof(Materials), "%s,%i", Materials, BizMaterialInfo[businessid][i][i2]);
				}
			}

			mysql_format(handlesql, query, sizeof(query), "UPDATE bizzfurn SET Model=%i, PosX=%f, PosY=%f, PosZ=%f, AngX=%f, AngY=%f, AngZ=%f, Materials='%e', Locked=%i WHERE ID=%i",
				BizInfo[businessid][boID][i],
				BizInfo[businessid][boX][i],
				BizInfo[businessid][boY][i],
				BizInfo[businessid][boZ][i],
				BizInfo[businessid][borX][i],
				BizInfo[businessid][borY][i],
				BizInfo[businessid][borZ][i],
				Materials,
				BizInfo[businessid][bLocked][i],
				BizInfo[businessid][boDBID][i]);
			mysql_pquery(handlesql, query);
    	}
    }
	return 1;
}
//============================================//
stock GetItemPrice(itemid)
{
	new price = 0;
	switch(itemid)
	{
	    case 22: price = 500;
	    case 24: price = 1000;
	    case 25: price = 600;
	    case 26: price = 550;
	    case 28: price = 750;
	    case 30: price = 2000;
	    case 32: price = 750;
	    case 100: price = 20;
	    case 101: price = 40;
	    case 106: price = 40;
	    case 107: price = 20;
	    case 110: price = 30;
	    case 111: price = 30;
	    case 112: price = 30;
	    case 115: price = 40;
	    case 116: price = 40;
	    case 120: price = 50;
	    case 122: price = 50;
	    case 125: price = 20;
	    case 126: price = 50;
	    case 409: price = 100;
	    case 500: price = 10;
	    case 501: price = 20;
	    case 502: price = 15;
	    case 503: price = 10;
	    case 504: price = 15;
	    case 505: price = 20;
	    case 506: price = 10;
	    case 507: price = 25;
	}
	return price;
}
//============================================//
stock IsHeavyCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 499 || pveh == 422 || pveh == 482 || pveh == 498 || pveh == 414 || pveh == 413
	|| pveh == 440 || pveh == 478 || pveh == 456 || pveh == 554)
    {
        return true;
    }
	return false;
}
//============================================//
stock BizProduct(biz)
{
    if(biz >= 1 && biz <= MAX_BUSINESSES+1)
    {
	    BizInfo[biz][bProd]--;
	    if(BizInfo[biz][bProd] <= 0) BizInfo[biz][bProd]=0;
	}
    return true;
}
//============================================//
stock BizProductC(biz)
{
    if(biz >= 1 && biz <= MAX_BUSINESSES+1)
    {
	    if(BizInfo[biz][bProd] <= 0) return true;
	}
    return false;
}
//============================================//
stock BizTill(biz, price)
{
    if(biz >= 1 && biz <= MAX_BUSINESSES+1)
    {
	    BizInfo[biz][Bank]+=price;
	}
    return true;
}
//============================================//
stock ReturnEnum(interger)
{
	new enume;
	enume=interger;
	return enume;
}
//============================================//
stock CreateFireEx(Float:X, Float:Y, Float:Z, World, Interior)
{
    for(new i=0;i<sizeof(FireInfo);i++)
    {
		if(FireInfo[i][fiObject] == 0)
		{
		    FireInfo[i][fiObject] = CreateDynamicObject(18691, X, Y, Z-2.0, 0.0, 0.0, 0.0, World, Interior);
		    FireInfo[i][fiX]= X;
		    FireInfo[i][fiY]= Y;
		    FireInfo[i][fiZ]= Z;
		    FireInfo[i][fiWorld] = World;
		    FireInfo[i][fiInt] = Interior;
		    FireInfo[i][fiTime] = 1800;
		    FireInfo[i][fiHealth] = 30;
		    return true;
		}
    }
    return true;
}
//============================================//
stock CreateFire(Float:X, Float:Y, Float:Z, World, Interior, Float:spread)
{
    new rand = random(5);
    new Float:adjustment[2];
    
    switch(rand)
    {
        case 0: adjustment[0] = 0 * spread;
        case 1: adjustment[0] = 0.25 * spread;
        case 2: adjustment[0] = 0.50 * spread;
        case 3: adjustment[0] = 0.75 * spread;
        case 4: adjustment[0] = 1.0 * spread;
    }

    rand = random(5);

    switch(rand)
    {
        case 0: adjustment[1] = 0 * spread;
        case 1: adjustment[1] = 0.25 * spread;
        case 2: adjustment[1] = 0.50 * spread;
        case 3: adjustment[1] = 0.75 * spread;
        case 4: adjustment[1] = 1.0 * spread;
    }

    CreateFireEx(X, Y, Z - 0.5, World, Interior);
    CreateFireEx(X + adjustment[0], Y - adjustment[1], Z - 0.5, World, Interior);
    CreateFireEx(X + adjustment[0], Y + adjustment[1], Z - 0.5, World, Interior);
    CreateFireEx(X - adjustment[0], Y + adjustment[1], Z - 0.5, World, Interior);
    CreateFireEx(X - adjustment[0], Y - adjustment[1], Z - 0.5, World, Interior);
    return true;
}
//============================================//
stock IsAroundFire(playerid, type, Float:distance)
{
    for(new i=0;i<sizeof(FireInfo);i++)
    {
		if(FireInfo[i][fiObject] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid,distance,FireInfo[i][fiX],FireInfo[i][fiY],FireInfo[i][fiZ]))
		    {
				if(GetPlayerInterior(playerid) == FireInfo[i][fiInt])
				{
					if(GetPlayerVirtualWorld(playerid) == FireInfo[i][fiWorld])
					{
		        		switch(type)
						{
				    		case 1:
				    		{
				        		return true;
				    		}
				    		case 2:
				    		{
				       			return i;
				    		}
						}
					}
				}
		    }
		}
	}
	return false;
}
//============================================//
stock IsPlayerAimObjectID(playerid, objectid, Float:range)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetDynamicObjectPos(objectid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	new Float:A;
	GetPlayerFacingAngle(playerid, A);
    X1 += (Distance * floatsin(-A, degrees));
    Y1 += (Distance * floatcos(-A, degrees));
	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	
	if(Distance < range)
	{
		return true;
	}
	return false;
}
//============================================//
stock PlayerInWater(playerid)
{
    new animlib[32],tmp[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, sizeof(animlib), tmp, sizeof(tmp));
    if(!strcmp(animlib, "SWIM") && !IsPlayerInAnyVehicle(playerid)) return true;
    return false;
}
//============================================//
stock EditCloseBizObject(playerid, key)
{
	new string[128], furnitname[50], found = 0;
	furnitname="N/A";
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(BizInfo[key][bObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
		    {
		        if(found == 0)
		        {
            		SetPVarInt(playerid, "FurnEditKey", key);
            		SetPVarInt(playerid, "FurnEditH", h);
            		format(string, 128, "Edit Object: %s", GetObjName(BizInfo[key][boID][h]));
		    		ShowPlayerDialogEx(playerid, 103, DIALOG_STYLE_LIST, "Editting object", "Edit Object\nSelect Material\nReset Material\nCopy Object\nRemove Object", "Select", "Close");
					found++;
				}
		    }
        }
    }
	if(found == 0) SCM(playerid, COLOR_ERROR, "ERROR: Can't find any object!");
    return 1;
}
//============================================//
stock GetCloseBizObject(playerid, key)
{
	new furnitob[50], found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(BizInfo[key][bObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
		    {
        		furnitob[found] = BizInfo[key][boID][h];
				found++;
        		//scm(playerid, -1, "Select object to edit.");
        		ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 9, 16.0, 0.0, -55.0);
		    }
        }
    }
	if(found == 0) SCM(playerid, COLOR_ERROR, "ERROR: Can't find any object!");
    return 1;
}
//============================================//
forward BuildBizObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz);
public BuildBizObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz)
{
	if(!IsValidFurniture(objectid)) return SendClientMessage(playerid, COLOR_ERROR, "Invalid furniture object ID.");

	new businessid = FurnRight(playerid, 2);

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(BizInfo[businessid][boID][i] == 0)
		{
			BizInfo[businessid][bObject][i] = CreateDynamicObject(objectid, X, Y, Z, rotx, roty, rotz, GetPlayerVirtualWorld(playerid), -1, -1, 100);
			BizInfo[businessid][boID][i] = objectid;
		    BizInfo[businessid][boX][i] = X;
	        BizInfo[businessid][boY][i] = Y;
		    BizInfo[businessid][boZ][i] = Z;
		    BizInfo[businessid][borX][i] = rotx;
	        BizInfo[businessid][borY][i] = roty;
		    BizInfo[businessid][borZ][i] = rotz;

	        new query[1024];
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO bizzfurn (BID, Model, PosX, PosY, PosZ, AngX, AngY, AngZ) VALUES (%i, %i, %f, %f, %f, %f, %f, %f)", 
				businessid, 
				BizInfo[businessid][boID][i], 
				BizInfo[businessid][boX][i], 
				BizInfo[businessid][boY][i], 
				BizInfo[businessid][boZ][i], 
				BizInfo[businessid][borX][i], 
				BizInfo[businessid][borY][i], 
				BizInfo[businessid][borZ][i]);
			mysql_pquery(handlesql, query, "OnBuildBizObject", "ii", businessid, i);

			new string[128];
	        format(string, sizeof(string),"Object %i has been planted.", objectid, businessid);
	        SendClientMessage(playerid, COLOR_WHITE, string);

	        Streamer_Update(playerid);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_ERROR, "All furniture slots have been used!");
	return 1;
}

forward OnBuildBizObject(businessid, objectid);
public OnBuildBizObject(businessid, objectid)
{
	BizInfo[businessid][boDBID][objectid] = cache_insert_id();
	return 1;
}
//============================================//
forward RemoveBizObjects(businessid);
public RemoveBizObjects(businessid)
{
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM bizzfurn WHERE BID=%i", businessid);
	mysql_pquery(handlesql, query);

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(IsValidDynamicObject(BizInfo[businessid][bObject][i]))
		{
			DestroyDynamicObject(BizInfo[businessid][bObject][i]);
		}

		BizInfo[businessid][bObject][i] = 0;
		BizInfo[businessid][boID][i] = 0;
		BizInfo[businessid][boX][i] = 0.0;
		BizInfo[businessid][boY][i] = 0.0;
		BizInfo[businessid][boZ][i] = 0.0;
		BizInfo[businessid][borX][i] = 0.0;
		BizInfo[businessid][borY][i] = 0.0;
		BizInfo[businessid][borZ][i] = 0.0;
	}
    return 1;
}

forward RemoveBizObject(businessid, objectid);
public RemoveBizObject(businessid, objectid)
{
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM bizzfurn WHERE ID=%i", BizInfo[businessid][boDBID][objectid]);
	mysql_pquery(handlesql, query);

	if(IsValidDynamicObject(BizInfo[businessid][bObject][objectid]))
	{
		DestroyDynamicObject(BizInfo[businessid][bObject][objectid]);
	}

	BizInfo[businessid][bObject][objectid] = 0;
	BizInfo[businessid][boID][objectid] = 0;
	BizInfo[businessid][boX][objectid] = 0.0;
	BizInfo[businessid][boY][objectid] = 0.0;
	BizInfo[businessid][boZ][objectid] = 0.0;
	BizInfo[businessid][borX][objectid] = 0.0;
	BizInfo[businessid][borY][objectid] = 0.0;
	BizInfo[businessid][borZ][objectid] = 0.0;
	return 1;
}
//============================================//
stock NotAbleToPlant(playerid)
{
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    if(GetPVarInt(playerid, "HouseEnter") == 0)
		{
		    return false;
		}
	    if(GetPVarInt(playerid, "BizEnter") == 0)
	    {
		    return false;
		}
    }
	return true;
}
//============================================//
stock PlayerWound(playerid, type, give)
{
	if(give == 0) // REMOVE ALL
	{
	    SetPVarInt(playerid, "Wound_T", 0);
    	SetPVarInt(playerid, "Wound_A", 0);
    	SetPVarInt(playerid, "Wound_L", 0);
    	for(new i = 0; i < 6; i++)
    	{
    	    TextDrawHideForPlayer(playerid, WoundDraw[i]);
    	}
    	SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL_SILENCED,9999);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_DESERT_EAGLE,9999);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_SHOTGUN,9999);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_MP5,9999);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_AK47,9999);
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_M4,9999);
	    SetPlayerDrunkLevel(playerid, 0);
		return true;
	}
	switch(type)
	{
	    case 1:
	    {
			new Float:ar;
			GetPlayerArmourEx(playerid, ar);
			if(ar <= 0.0)
			{
		        TextDrawShowForPlayer(playerid, WoundDraw[0]);
		        TextDrawShowForPlayer(playerid, WoundDraw[1]);
		        SetPVarInt(playerid, "Wound_T", 1);

				if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					SetPlayerDrunkLevel(playerid, 4500);

					if(IsBike(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
					{
						ClearAnimationsEx(playerid);
						new Float:x, Float:y, Float:z;
						GetPlayerPos(playerid, x, y, z);
						SetPlayerPosEx(playerid, x, y, z);
						ApplyAnimationEx(playerid,"PED","getup",4.0,0,0,0,0,0);
					}
				}
	    	}
	    }
	    case 2:
	    {
	        TextDrawShowForPlayer(playerid, WoundDraw[2]);
	        TextDrawShowForPlayer(playerid, WoundDraw[3]);
	        SetPVarInt(playerid, "Wound_A", 1);
	        SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL_SILENCED,200);
	        SetPlayerSkillLevel(playerid,WEAPONSKILL_DESERT_EAGLE,200);
	        SetPlayerSkillLevel(playerid,WEAPONSKILL_SHOTGUN,200);
	        SetPlayerSkillLevel(playerid,WEAPONSKILL_MP5,200);
	        SetPlayerSkillLevel(playerid,WEAPONSKILL_AK47,200);
	        SetPlayerSkillLevel(playerid,WEAPONSKILL_M4,200);

	        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				SetPlayerDrunkLevel(playerid, 4500);

				if(IsBike(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
				{
					ClearAnimationsEx(playerid);
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					SetPlayerPosEx(playerid, x, y, z);
					ApplyAnimationEx(playerid,"PED","getup",4.0,0,0,0,0,0);
				}
			}
	    }
	    case 3:
	    {
	        TextDrawShowForPlayer(playerid, WoundDraw[4]);
	        TextDrawShowForPlayer(playerid, WoundDraw[5]);
	        SetPVarInt(playerid, "Wound_L", 1);

			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				SetPlayerDrunkLevel(playerid, 4500);

				if(IsBike(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
				{
					ClearAnimationsEx(playerid);
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					SetPlayerPosEx(playerid, x, y, z);
					ApplyAnimationEx(playerid,"PED","getup",4.0,0,0,0,0,0);
				}
			}
	    }
	}
	return true;
}
//============================================//
stock DeathPlayer(playerid, msg[])
{
	new time = 60;
	//if(GetPVarInt(playerid,"Wound_T") > 0) time +=60;
	//if(GetPVarInt(playerid,"Wound_A") > 0) time +=25;
	//if(GetPVarInt(playerid,"Wound_L") > 0) time +=50;
	ResetPlayerWeaponsEx(playerid);
    SetPVarInt(playerid, "Mute", 1);
    SetPVarInt(playerid, "DeadT", time);
    SetPVarInt(playerid, "Dead", 3);
    TogglePlayerControllableEx(playerid,false);
    ResetPlayerWeaponsEx(playerid);
    SetPlayerHealthEx(playerid,1.0);
    SetPlayerInterior(playerid,0);
    SetPlayerPosEx(playerid, 269.4417,1861.8927,8.7578);
    SetPlayerCameraPos(playerid, 275.2712,1859.6465,9.8133);
	SetPlayerCameraLookAt(playerid, 275.2712,1859.6465,16.6257, 0);
    if(playerid == 0) SetPlayerVirtualWorld(playerid,INVALID_MAXPL);
    else SetPlayerVirtualWorld(playerid,playerid);
    SendClientMessage(playerid, COLOR_PINK, msg);
    PlayerWound(playerid, 0, 0);
    return 1;
}
//============================================//
public ProgressBar(playerid, title[], time, number)
{
	new string[128];
	switch(GetPVarInt(playerid, "PBUse"))
	{
	    case 0:
	    {
	        SetPVarInt(playerid, "PBUse", 1);
	        PGBar[0][playerid] = CreatePlayerTextDraw(playerid,262.000000, 295.000000, "I");
	        PlayerTextDrawBackgroundColor(playerid, PGBar[0][playerid], 0);
	        PlayerTextDrawFont(playerid, PGBar[0][playerid], 1);
	        PlayerTextDrawLetterSize(playerid, PGBar[0][playerid], 0.500000, 1.199999);
	        PlayerTextDrawColor(playerid, PGBar[0][playerid], 150994944);
	        PlayerTextDrawSetOutline(playerid, PGBar[0][playerid], 0);
	        PlayerTextDrawSetProportional(playerid, PGBar[0][playerid], 1);
	        PlayerTextDrawSetShadow(playerid, PGBar[0][playerid], 1);
	        PlayerTextDrawUseBox(playerid, PGBar[0][playerid], 1);
	        PlayerTextDrawBoxColor(playerid, PGBar[0][playerid], 255);
	        PlayerTextDrawTextSize(playerid, PGBar[0][playerid], 364.000000, 0.000000);
	        PGBar[1][playerid] = CreatePlayerTextDraw(playerid,266.000000, 298.000000, "I");
	        PlayerTextDrawBackgroundColor(playerid, PGBar[1][playerid], 0);
	        PlayerTextDrawFont(playerid, PGBar[1][playerid], 1);
	        PlayerTextDrawLetterSize(playerid, PGBar[1][playerid], 0.500000, 0.599999);
	        PlayerTextDrawColor(playerid, PGBar[1][playerid], 0);
	        PlayerTextDrawSetOutline(playerid, PGBar[1][playerid], 0);
	        PlayerTextDrawSetProportional(playerid, PGBar[1][playerid], 1);
	        PlayerTextDrawSetShadow(playerid, PGBar[1][playerid], 1);
	        PlayerTextDrawUseBox(playerid, PGBar[1][playerid], 1);
	        PlayerTextDrawBoxColor(playerid, PGBar[1][playerid], 2038004223);
	        PlayerTextDrawTextSize(playerid, PGBar[1][playerid], 360.000000, 0.000000);
	        PGBar[2][playerid] = CreatePlayerTextDraw(playerid,266.000000, 298.000000, "I");
	        PlayerTextDrawBackgroundColor(playerid, PGBar[2][playerid], 0);
	        PlayerTextDrawFont(playerid, PGBar[2][playerid], 1);
	        PlayerTextDrawLetterSize(playerid, PGBar[2][playerid], 0.500000, 0.599999);
	        PlayerTextDrawColor(playerid, PGBar[2][playerid], 0);
	        PlayerTextDrawSetOutline(playerid, PGBar[2][playerid], 0);
	        PlayerTextDrawSetProportional(playerid, PGBar[2][playerid], 1);
	        PlayerTextDrawSetShadow(playerid, PGBar[2][playerid], 1);
	        PlayerTextDrawUseBox(playerid, PGBar[2][playerid], 1);
	        PlayerTextDrawBoxColor(playerid, PGBar[2][playerid], -1);
	        PlayerTextDrawTextSize(playerid, PGBar[2][playerid], 261.000000, 0.000000);
	        PGBar[3][playerid] = CreatePlayerTextDraw(playerid,261.000000, 280.000000, " ");
	        PlayerTextDrawBackgroundColor(playerid, PGBar[3][playerid], 255);
	        PlayerTextDrawFont(playerid, PGBar[3][playerid], 2);
	        PlayerTextDrawLetterSize(playerid, PGBar[3][playerid], 0.240000, 1.399999);
	        PlayerTextDrawColor(playerid, PGBar[3][playerid], -1);
	        PlayerTextDrawSetOutline(playerid, PGBar[3][playerid], 0);
	        PlayerTextDrawSetProportional(playerid, PGBar[3][playerid], 1);
	        PlayerTextDrawSetShadow(playerid, PGBar[3][playerid], 1);
	        for(new o = 0; o < 4; o++)
	        {
	            PlayerTextDrawShow(playerid, PGBar[o][playerid]);
	        }
	        format(string, 128, "~w~%s", title);
	        PlayerTextDrawSetString(playerid, PGBar[3][playerid], string);
	        SetPVarFloat(playerid, "PBNum", 261.0);
	        CallRemoteFunction("ProgressBarEx","iii", playerid, time, number);
	    }
	}
    return true;
}
//============================================//
public ProgressBarEx(playerid, time, number)
{
	new Float:amount;
	switch(GetPVarInt(playerid, "PBUse"))
	{
	    case 1:
	    {
			if(GetPVarFloat(playerid,"PBNum") < 360.0)
			{
				new Float:timeex = float(time);
			    amount = 100.0 / timeex;
			    amount = amount / 2.0;
			    SetPVarFloat(playerid, "PBNum", GetPVarFloat(playerid,"PBNum")+amount);
			    PlayerTextDrawTextSize(playerid, PGBar[2][playerid], 0.0+GetPVarFloat(playerid,"PBNum"), 0.0);
			    //==========//
			    PlayerTextDrawHide(playerid, PGBar[2][playerid]);
			    PlayerTextDrawShow(playerid, PGBar[2][playerid]);
			    //==========//
			    SetTimerEx("ProgressBarEx", 500, false, "iii", playerid, time, number);
			}
			else
			{
			    for(new o = 0; o < 4; o++)
	            {
	                PlayerTextDrawHide(playerid, PGBar[o][playerid]);
	                PlayerTextDrawDestroy(playerid, PGBar[o][playerid]);
	            }
			    SetPVarInt(playerid, "PBUse", 0);
			    CallRemoteFunction("OnProgressEnd","ii", playerid, number);
			}
	    }
	}
    return true;
}
//============================================//
public OnProgressEnd(playerid, number)
{
	new string[128];
    RemovePlayerTag(playerid);
	switch(number)
	{
	    case 0:
	    {
	        TogglePlayerControllable(playerid, true);
	    }
	    case 3:
	    {
			if(IsPlayerInAnyVehicle(playerid))
			{
				new amount = GetPVarInt(playerid, "RefillAM"), price = GetPVarInt(playerid, "RefillPR");
				if(amount == 0) return true;
			    VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] += amount;
                format(string, sizeof(string), "Your vehicle has been filled up with %d liters of fuel for %s.", amount, FormatMoney(price));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		        format(string, sizeof(string),"~r~-%s", FormatMoney(price));
		        GameTextForPlayer(playerid, string, 5000, 1);
		        GivePlayerMoneyEx(playerid,-price);
		        DeletePVar(playerid, "RefillAM"), DeletePVar(playerid, "RefillPR");
		        TogglePlayerControllable(playerid, true);
			}
	    }
	    case 5:
	    {
	        TogglePlayerControllable(playerid, true);
	        new vehicleID = IsPlayerVehicleSpawned(playerid);
            if(vehicleID == -1) return SendClientMessage(playerid, COLOR_ERROR, "You don't have a vehicle spawned.");
            switch(GetPVarInt(playerid, "RepairType"))
		    {
		        case 1:
		        {
		            format(string, sizeof(string), "%s's engine has been replaced!", VehicleName[GetVehicleModel(vehicleID) - 400]);
             	    scm(playerid, -1, string);
		        }
		        case 2:
		        {
		            format(string, sizeof(string), "%s's battery has been replaced!", VehicleName[GetVehicleModel(vehicleID) - 400]);
             	    scm(playerid, -1, string);
		        }
		        case 3:
		        {
		            format(string, sizeof(string), "%s's tires have been replaced!", VehicleName[GetVehicleModel(vehicleID) - 400]);
             	    scm(playerid, -1, string);
		        }
		    }
		    DeletePVar(playerid, "RepairType");
	    }
	    case 6: // FISHING RESULT
	    {
	    	TogglePlayerControllable(playerid, true);
	    	RemovePlayerTag(playerid);
	    	new rodbreak = random(100);
	    	switch(rodbreak)
	    	{
	    		case 0: // ROD BREAKS
	    		{
	    			RemoveFishingRod(playerid);
	    			RemoveFishingHook(playerid);
	    			SendClientMessage(playerid, COLOR_GREY, "Your fishing rod broke! You didn't catch anything as the fish escaped.");
	    		}
	    		case 1 .. 99: // ROD DOESN'T BREAK
	    		{
	    			new hookbreak = random(30);
	    			switch(hookbreak)
	    			{
	    				case 0: //  HOOK GETS RIPPED
	    				{
	    					RemoveFishingHook(playerid);
	    					SendClientMessage(playerid, COLOR_GREY, "Your fishing hook got ripped off! You didn't catch anything as the fish escaped.");
	    				}
	    				case 1 .. 29:
	    				{
	    					GivePlayerFish(playerid, 1);
	    				}
	    			}
	    		}
	    	}
	    }
	    case 7: // FISHING RESULT PIER
	    {
	    	TogglePlayerControllable(playerid, true);
	    	RemovePlayerTag(playerid);
	    	RemovePlayerAttachedObject(playerid, 9);
	    	ClearAnimationsEx(playerid);

	    	new rodbreak = random(100);
	    	switch(rodbreak)
	    	{
	    		case 0: // ROD BREAKS
	    		{
	    			RemoveFishingRod(playerid);
	    			RemoveFishingHook(playerid);
	    			SendClientMessage(playerid, COLOR_GREY, "Your fishing rod broke! You didn't catch anything as the fish escaped.");
	    		}
	    		case 1 .. 99: // ROD DOESN'T BREAK
	    		{
	    			new hookbreak = random(30);
	    			switch(hookbreak)
	    			{
	    				case 0: //  HOOK GETS RIPPED
	    				{
	    					RemoveFishingHook(playerid);
	    					SendClientMessage(playerid, COLOR_GREY, "Your fishing hook got ripped off! You didn't catch anything as the fish escaped.");
	    				}
	    				case 1 .. 29:
	    				{
	    					GivePlayerFish(playerid, 2);
	    				}
	    			}
	    		}
	    	}
	    }
	    case 8: // unloading goods
	    {
	    	new Float:x, Float:y, Float:z;
	    	GetPlayerPos(playerid, x, y, z);

	    	PlayerInfo[playerid][pJobProgress] += floatround(GetDistanceFromPointToPoint(2472.1895, -2099.2656, 13.5469, x, y, z));

	    	ProgressBar(playerid, "Loading Goods...", 15, 9);
	    }
	    case 9:
	    {
    		new TruckingCP = random(11);

    		for(new i = 0; i < 11; i++) // avoid showing the same cp that the goods were just delivered to
    		{
    			if(IsPlayerInRangeOfPoint(playerid, 30.0, TruckerRoute[TruckingCP][0], TruckerRoute[TruckingCP][1], TruckerRoute[TruckingCP][2]))
    			{
    				if(TruckingCP == 10)
    				{
    					TruckingCP--;
    				}

    				if(TruckingCP == 0)
    				{
    					TruckingCP++;
    				}
    				break;
    			}
    		}

			PlayerInfo[playerid][pJobCP] = CreateDynamicRaceCP(2, 
				TruckerRoute[TruckingCP][0],
				TruckerRoute[TruckingCP][1],
				TruckerRoute[TruckingCP][2],
				0.0,0.0,0.0, 3, -1, -1, playerid, -1);

			format(string, sizeof(string), "Deliver the goods to {FFFFFF}%s{B5B56A} or head back to the station and exit the vehicle to finish the route.", GetZone(
				TruckerRoute[TruckingCP][0],
				TruckerRoute[TruckingCP][1],
				TruckerRoute[TruckingCP][2]));
			SendClientMessage(playerid, COLOR_JOB, string);
			SetPVarInt(playerid, "TruckerJobStops", GetPVarInt(playerid, "TruckerJobStops")+1);

			// anticheat check for TP hacks.
			if(GetPVarInt(playerid, "OnRouteTime") > (GetPVarInt(playerid, "TruckerJobStops") * 30))
			{
				BanPlayer(playerid, "Teleport Hacks as Trucker", "Server");
			}

			TogglePlayerControllable(playerid, true);
	    }
	}
	return true;
}
//============================================//
stock StopProgress(playerid)
{
    if(GetPVarInt(playerid, "PBUse") > 0)
    {
        for(new o = 0; o < 4; o++)
	    {
	        PlayerTextDrawHide(playerid, PGBar[o][playerid]);
	        PlayerTextDrawDestroy(playerid, PGBar[o][playerid]);
	    }
		SetPVarInt(playerid, "PBUse", 0);
    }
    RemovePlayerTag(playerid);
	return true;
}
//============================================//
stock IsInProgress(playerid)
{
	if(GetPVarInt(playerid, "PBUse") > 0)
	{
	    return true;
	}
	return false;
}
//============================================//
stock SendRadioMessage(color, string[]) {
    if(strlen(string) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, string, 140, strlen(string), MAX_MSG_LENGTH);
	    strdel(string, 140, strlen(string));
	    strins(string, " ...", 140, strlen(string));
	    strins(buffer, "... ", 0, MAX_MSG_LENGTH);
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "TogRadio") == 0) {
	            SendClientMessage(i, color, string);
	            SendClientMessage(i, color, buffer);
	        }
	    }
	} else {
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "TogRadio") == 0) {
	            SendClientMessage(i,color,string);
	        }
	    }
	}

    return 1;
}
//============================================//
stock SendNewsMessage(color, string[]) {
    if(strlen(string) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, string, 140, strlen(string), MAX_MSG_LENGTH);
	    strdel(string, 140, strlen(string));
	    strins(string, " ...", 140, strlen(string));
	    strins(buffer, "... ", 0, MAX_MSG_LENGTH);
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "TogNews") == 0) {
	            SendClientMessage(i, color, string);
	            SendClientMessage(i, color, buffer);
	        }
	    }
	} else {
	    foreach(new i : Player) {
	        if(GetPVarInt(i, "TogNews") == 0) {
	            SendClientMessage(i,color,string);
	        }
	    }
	}
	
    return 1;
}
//============================================//
stock SendOOCMessage(Float:radi, playerid, string[])
{
    new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "PlayerLogged") == 1 && GetPVarInt(i, "TogB") == 0)
        {
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
		        if(IsPlayerInRangeOfPoint(i,radi,posx, posy, posz))
		        {
				    new Float:radius, feet;
					radius = GetPlayerDistanceFromPoint(i,posx, posy, posz);
		            feet = floatround(radius);
		            switch(feet)
		            {
		                case 0 .. 10: SendClientMessageEx(i,0xF0F0F096,string);
			            case 11 .. 15: SendClientMessageEx(i,0xC9C9C996,string);
			            case 16 .. 20: SendClientMessageEx(i,0xB5B5B596,string);
			            case 21 .. 25: SendClientMessageEx(i,0xA3A3A396,string);
			            case 26 .. 31: SendClientMessageEx(i,0x79797996,string);
			        }
		        }
		    }
        }
    }
    return 1;
}
//============================================//
stock RemoveBuildings(playerid)
{
	//==========================================================================//
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1778.4531, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1774.3125, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1771.3438, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 0.25);

    // MR187 //
    RemoveBuildingForPlayer(playerid, 17757, 2450.8750, -1757.3984, 16.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 17519, 2450.8750, -1757.3984, 16.0000, 0.25);

    // RAYNE //
    RemoveBuildingForPlayer(playerid, 717, 1120.2188, -1155.3750, 23.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 1223, 1123.0938, -1135.6641, 22.8125, 0.25);

    // LSFD //
    RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);

    // Mechanic Job //
    RemoveBuildingForPlayer(playerid, 5208, 2115.0000, -1921.5234, 15.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 3567, 2142.9141, -1947.4219, 13.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2118.2891, -1939.3984, 16.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2114.5547, -1928.1875, 5.0313, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2113.3984, -1925.0391, 10.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2115.6719, -1922.7656, 10.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2123.3594, -1928.0703, 6.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 5182, 2115.0000, -1921.5234, 15.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2122.6563, -1916.7891, 10.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2116.9297, -1916.0781, 10.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2121.5078, -1909.5313, 10.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2110.2734, -1906.5859, 5.0313, 0.25);

	// PUMPS AT DILLIMORE //
	RemoveBuildingForPlayer(playerid, 1686, 655.6641, -571.2109, 15.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1686, 655.6641, -569.6016, 15.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1686, 655.6641, -558.9297, 15.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1686, 655.6641, -560.5469, 15.3594, 0.25);

	// LSPD TRAINING CENTER !
	RemoveBuildingForPlayer(playerid, 17349, -542.0078, -522.8438, 29.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 17019, -606.0313, -528.8203, 30.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -541.4297, -561.2266, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 17012, -542.0078, -522.8438, 29.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -513.7578, -561.0078, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -503.6172, -540.5313, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -502.6094, -528.6484, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -502.1172, -521.0313, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -502.4063, -513.0156, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -620.4141, -490.5078, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -619.6250, -473.4531, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 17018, -565.7656, -489.1406, 29.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -553.6875, -481.6328, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -554.4531, -496.1797, 25.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -537.0391, -469.1172, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -516.9453, -496.6484, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -503.1250, -509.0000, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 17020, -475.9766, -544.8516, 28.1172, 0.25);

	// JEFFERSON JUNGLES //
	RemoveBuildingForPlayer(playerid, 3562, 2232.3984, -1464.7969, 25.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 2275.3906, -1438.6641, 22.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2229.0234, -1411.6406, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2265.6172, -1410.3359, 21.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2253.2188, -1409.8906, 23.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2232.3984, -1464.7969, 25.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2241.8906, -1458.9297, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1307, 2272.6797, -1459.1875, 22.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 3593, 2265.0781, -1424.4766, 23.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2247.5313, -1464.7969, 25.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2263.7188, -1464.7969, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2243.7109, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2230.6094, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2256.6641, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2230.6094, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2243.7109, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2256.6641, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2247.5313, -1464.7969, 25.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2263.7188, -1464.7969, 25.4375, 0.25);

    RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25); // houses across road from motel in idle
    RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25); // ^

	RemoveBuildingForPlayer(playerid, 5527, 2056.9844, -1830.5156, 20.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 5532, 2056.9844, -1830.5156, 20.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);

    // CITY HALL //
    RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);

    // BOXES IN JEFFERSON //
    RemoveBuildingForPlayer(playerid, 1221, 2180.4766, -1247.6797, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1224, 2180.6484, -1245.7109, 23.4922, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2181.2344, -1243.1953, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2183.0078, -1243.1953, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2182.5938, -1246.8672, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1224, 2224.8438, -1229.5938, 23.5625, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2227.3594, -1230.1797, 23.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2225.4688, -1231.1406, 23.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2222.8750, -1229.4219, 23.4063, 0.25);

    // LS Business Network //
    RemoveBuildingForPlayer(playerid, 759, 962.8125, -1559.9063, 20.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 967.0625, -1559.9063, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 971.3047, -1559.9063, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 975.5469, -1559.9063, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 979.7891, -1559.9063, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 984.0391, -1559.9063, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 962.8125, -1547.9688, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 967.0625, -1547.9688, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 971.3047, -1547.9688, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 975.5469, -1547.9688, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 979.7891, -1547.9688, 20.8359, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 984.0391, -1547.9688, 20.8359, 0.25);
	
    // GANTON GARAGE //
    RemoveBuildingForPlayer(playerid, 1308, 2276.5469, -1674.5625, 14.3203, 0.25);

    // LSFD Garage
	RemoveBuildingForPlayer(playerid, 5935, 1120.1563, -1303.4531, 18.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 5737, 1120.1563, -1303.4531, 18.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1115.0781, -1285.3672, 17.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);

	// Jefferson housing projects
	RemoveBuildingForPlayer(playerid, 3562, 2232.3984, -1464.7969, 25.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2247.5313, -1464.7969, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2263.7188, -1464.7969, 25.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2243.7109, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2230.6094, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2256.6641, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2229.0234, -1411.6406, 22.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1264, 2224.9844, -1408.9063, 23.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2265.6172, -1410.3359, 21.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2253.2188, -1409.8906, 23.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1264, 2224.1250, -1408.8359, 23.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2226.8516, -1404.7422, 23.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2225.8516, -1394.6328, 23.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2224.8594, -1393.9609, 23.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2222.8750, -1396.1250, 23.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2223.8750, -1396.7969, 23.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2223.4688, -1396.0938, 23.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2230.6094, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 2225.9844, -1396.6797, 23.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2227.9531, -1396.8516, 23.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2243.7109, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2237.5313, -1395.4844, 23.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2256.6641, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2274.5781, -1398.4922, 22.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2201.2656, -1377.8438, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2200.2656, -1377.1719, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 2200.1328, -1375.1328, 23.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2198.1719, -1374.9531, 23.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2203.2422, -1375.6797, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2202.2500, -1375.0078, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2202.6484, -1375.7109, 23.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 2224.8438, -1229.5938, 23.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2227.3594, -1230.1797, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2225.4688, -1231.1406, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2222.8750, -1229.4219, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2222.9609, -1469.7422, 23.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2223.6328, -1468.7500, 23.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2225.1328, -1471.7266, 23.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2225.0938, -1471.1328, 23.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 2203.4688, -1428.0391, 23.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2204.0156, -1424.9297, 23.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2203.3516, -1425.9219, 23.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2204.0547, -1425.5234, 23.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2203.5391, -1429.7422, 23.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2206.1875, -1426.9063, 23.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2205.5156, -1427.9063, 23.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1224, 2225.6797, -1468.6172, 23.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2225.7969, -1470.7266, 23.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2225.8516, -1466.6484, 23.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2239.5703, -1468.8047, 22.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2232.3984, -1464.7969, 25.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2241.8906, -1458.9297, 22.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 2228.6094, -1454.4219, 26.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2247.5313, -1464.7969, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2267.4688, -1470.1953, 21.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 3582, 2263.7188, -1464.7969, 25.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 2251.2891, -1461.8281, 23.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 2253.7813, -1454.4219, 26.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 2256.6563, -1456.8984, 22.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 2255.9844, -1457.9063, 22.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2227.2031, -1444.5000, 22.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2226.5156, -1426.7656, 23.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2243.5703, -1423.6094, 22.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2256.4063, -1444.5078, 23.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2261.7734, -1441.1016, 23.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2265.0781, -1424.4766, 23.5000, 0.25);

	// RLS trash and dumpsters
	RemoveBuildingForPlayer(playerid, 1462, 826.8516, -1385.6719, 12.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 857.3750, -1381.1641, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1365, 861.9844, -1380.4609, 13.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, 853.1953, -1359.7266, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, 886.3438, -1357.3047, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 872.2656, -1346.4141, 12.5313, 0.25);

	// New Prison Exterior
	RemoveBuildingForPlayer(playerid, 16273, 422.9141, 1513.4141, 10.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 16275, 375.0391, 1335.0547, 10.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 16277, 487.1016, 1528.2266, 0.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3428, 353.7031, 1302.0391, 11.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 3428, 419.4453, 1411.8750, 6.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3428, 534.6875, 1471.1094, 3.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 3428, 433.9688, 1565.9688, 10.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3428, 405.5938, 1463.8359, 6.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3426, 353.7031, 1302.0391, 11.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 3427, 375.0391, 1335.0547, 10.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1392.1563, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1390.5703, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1387.8516, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 203.9531, 1409.9141, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 199.3828, 1407.1172, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 204.6406, 1409.8516, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1404.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1400.6563, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1409.0000, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 16086, 232.2891, 1434.4844, 13.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 183.0391, 1455.7500, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 198.0000, 1462.0156, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.2422, 1460.3203, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.3047, 1461.0078, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 199.5859, 1463.7266, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 181.1563, 1463.7266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 185.9219, 1462.8750, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 202.3047, 1462.8750, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 189.5000, 1462.8750, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1451.8281, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1454.5469, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1456.1328, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1468.2109, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1464.6328, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 247.5547, 1471.0938, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1472.9766, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.8125, 1473.8281, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.1250, 1473.8906, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 16089, 342.1250, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16090, 315.7734, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16091, 289.7422, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16087, 358.6797, 1430.4531, 11.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 16088, 368.4297, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16535, 409.6250, 1320.5000, 12.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 16092, 394.1563, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 3426, 419.4453, 1411.8750, 6.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3426, 405.5938, 1463.8359, 6.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 16766, 498.0391, 1428.0781, 7.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 16530, 414.2891, 1496.2266, 11.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 3427, 422.9141, 1513.4141, 10.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 16532, 497.5000, 1507.6016, 5.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3427, 487.1016, 1528.2266, 0.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 16531, 465.4922, 1552.0938, 9.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 3426, 433.9688, 1565.9688, 10.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3426, 534.6875, 1471.1094, 3.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 16533, 588.6406, 1483.9375, 8.9375, 0.25);

	// LSPD Interior
	RemoveBuildingForPlayer(playerid, 2172, 217.1875, 169.9688, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 215.5625, 170.2266, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 170.2266, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 170.1641, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 217.8516, 170.6016, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 223.2031, 170.2422, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2166, 198.8672, 170.8672, 1002.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 210.2813, 171.3047, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 171.5469, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 216.1953, 170.9453, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 217.1875, 171.9844, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 171.4922, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 211.3203, 173.4453, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 211.3828, 174.2344, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 215.2188, 172.3125, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 215.5625, 174.2266, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 216.1953, 172.9609, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 217.1875, 174.0234, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 217.8516, 172.6172, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 222.2188, 172.2656, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 174.3047, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 223.2266, 174.4063, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1771, 190.6406, 174.7422, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1771, 194.8750, 174.7422, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1771, 199.1328, 174.7422, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 210.3203, 175.4688, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 175.5938, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 213.2891, 182.4219, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2185, 213.7578, 181.7813, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 216.1953, 175.0000, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 218.1484, 174.5781, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 222.2109, 176.4297, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 175.6250, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 209.2500, 183.5156, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 209.2500, 185.0391, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 213.2891, 185.1563, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 209.2500, 188.1875, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 209.2500, 186.6016, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 213.2891, 187.5547, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2185, 213.7578, 184.3359, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2185, 213.7578, 186.9297, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 214.7813, 187.7969, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 215.5000, 187.7969, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 216.6406, 185.7891, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 216.2266, 187.7969, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 216.7813, 186.9531, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 216.9453, 186.6328, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 218.4922, 185.7891, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 218.9063, 186.6328, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 219.2734, 187.6875, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 188.7813, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 187.1953, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 185.6016, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2191, 221.4609, 183.9922, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 243.4766, 184.2578, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 244.1094, 184.8359, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 243.4766, 186.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 244.1094, 187.0156, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2162, 242.9766, 189.5703, 1007.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2162, 242.9766, 191.7266, 1007.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 244.4297, 188.2813, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 247.8594, 187.2578, 1007.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 248.0781, 188.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 248.1953, 184.8281, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 249.0313, 185.3047, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 249.0313, 187.3672, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 250.1172, 184.2578, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 250.1172, 186.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 251.0703, 188.2813, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 250.7109, 187.0156, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 250.7109, 184.8359, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 252.0234, 192.8906, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 252.7109, 192.2344, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 253.2266, 185.1953, 1007.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 253.5469, 188.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 253.6719, 187.0078, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 254.5000, 185.3047, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 254.5000, 187.3672, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 255.5938, 184.2578, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 255.5938, 186.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 254.6094, 192.8906, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 255.2656, 192.2344, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 256.2813, 187.0156, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 256.5469, 188.2813, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 256.7266, 184.3828, 1007.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 257.1797, 192.8906, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 257.5391, 191.8672, 1007.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 258.8203, 188.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 259.0391, 187.0078, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 259.0391, 184.8281, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2161, 259.3828, 193.3750, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 259.7734, 185.3047, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 259.7734, 187.3672, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2161, 260.7734, 193.3750, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 260.8594, 184.2578, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 260.8594, 186.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 261.8125, 188.2813, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 261.4375, 184.8359, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 261.4375, 187.0156, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2161, 262.1719, 193.3750, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 263.3438, 188.3203, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 263.5938, 187.0078, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 263.5938, 184.8281, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 264.2969, 187.3672, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2198, 264.2969, 185.3047, 1007.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 246.5469, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 247.1953, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 247.8594, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1808, 249.6563, 197.2969, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 254.5703, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 255.2188, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 255.8828, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 262.5391, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 263.1875, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 263.8516, 197.6406, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 270.5703, 185.4453, 1007.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 301.0703, 180.3672, 1007.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 2208, 296.2500, 185.1172, 1006.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 296.4922, 185.9141, 1006.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 298.4609, 185.9141, 1006.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 283.4297, 188.7344, 1006.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 284.4688, 188.7344, 1006.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 285.5234, 188.7344, 1006.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 286.5625, 188.7344, 1006.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 287.5625, 188.7344, 1006.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 291.6563, 187.9844, 1007.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 2186, 300.2969, 188.7344, 1006.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2204, 208.1719, 149.8672, 1002.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 208.4453, 145.8594, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2197, 209.2109, 145.8594, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1771, 188.4922, 162.0234, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1771, 192.7266, 162.0234, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1771, 196.9844, 162.0234, 1002.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 199.3047, 166.8828, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2166, 199.8594, 166.9375, 1002.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 14856, 198.4688, 168.6797, 1003.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 198.7813, 169.0313, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 199.8594, 168.8984, 1002.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2199, 212.5078, 144.4297, 1002.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 210.1875, 148.1094, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 211.4688, 148.1094, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 215.0078, 147.3125, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 216.6328, 147.2578, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 216.6719, 148.2031, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 215.1094, 148.2422, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 211.0313, 150.0156, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2211, 211.4453, 152.2891, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2206, 211.8438, 149.1094, 1002.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 212.4375, 151.7969, 1002.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 215.0859, 149.2500, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 216.6563, 149.2578, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2029, 215.9844, 149.9531, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 215.8594, 150.8047, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 210.2969, 162.9531, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 210.3203, 167.1172, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 211.3203, 160.9297, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 161.6875, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 163.0156, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 211.3125, 165.0938, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 165.8281, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 211.3047, 169.2813, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 210.9844, 167.1484, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 215.5625, 162.5078, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 216.1953, 163.2813, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 215.5625, 164.5547, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 216.1953, 165.2969, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 215.2188, 166.8516, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 216.1953, 167.3359, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1722, 228.8203, 144.1953, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2204, 219.9375, 152.2969, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 220.1797, 147.2969, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1715, 221.4531, 147.2031, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 222.0078, 148.1406, 1003.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 221.1094, 149.2969, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 217.1875, 164.3203, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 217.1875, 162.3047, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2172, 217.1875, 166.3594, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 217.8516, 162.9375, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 217.8516, 164.9609, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 217.8516, 166.9375, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 161.7266, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 223.2031, 161.8906, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 163.0547, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 222.2031, 163.9219, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 222.6250, 165.7656, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 223.2422, 166.0547, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2356, 222.2031, 167.2188, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2193, 222.2188, 168.0781, 1002.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 231.5781, 158.7891, 1003.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 2186, 228.8125, 162.3828, 1002.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 230.5234, 164.1641, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 230.5234, 166.0000, 1002.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2208, 231.3984, 166.4609, 1002.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 14887, 228.3594, 167.5156, 1004.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 233.9453, 168.5000, 1003.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 14885, 244.6875, 166.6953, 1005.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 287.2422, 166.5234, 1006.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 290.2578, 166.5234, 1006.1641, 0.25);

	// News Interior
	RemoveBuildingForPlayer(playerid, 12914, -75.1797, 12.1719, 3.7188, 0.25);

	// Bank
	RemoveBuildingForPlayer(playerid, 1294, 1492.0859, -1030.0703, 27.3516, 0.25);

	// Farmer Job Fences
	RemoveBuildingForPlayer(playerid, 3276, -378.7734, -1459.0234, 25.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -384.2344, -1455.8281, 25.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -368.7813, -1454.3672, 25.4766, 0.25);

	// Bugged Los Colinas C-1 house
	RemoveBuildingForPlayer(playerid, 3298, 2530.0313, -960.0391, 81.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3241, 2530.0313, -960.0391, 81.2891, 0.25);
    return true;
}
//============================================//
stock CreateDynamicObjectFix(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0, Float:drawdistance = 0.0)
{
	if(modelid == 0 || modelid == 368 || modelid == 405 || modelid == 422 || modelid == 515 || modelid == 625 || modelid == 19387)
	{
	    return true; // INVALID OBJECT ID !
	}
    return CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance, drawdistance);
}
//============================================//
public AddMileage(veh, amount)
{
    if(VehicleInfo[veh][vType] != VEHICLE_PERSONAL) return 1;
	VehicleInfo[veh][vMileage][2]++;
	if(VehicleInfo[veh][vMileage][2] > 10)
	{
	    VehicleInfo[veh][vMileage][1]+=amount;
	    VehicleInfo[veh][vMileage][2]=0;
	}
	return true;
}
//============================================//
public AddBattery(veh)
{
    if(VehicleInfo[veh][vType] != VEHICLE_PERSONAL) return 1;
	VehicleInfo[veh][vBattery][2]++;
	if(VehicleInfo[veh][vBattery][2] > 20)
	{
	    VehicleInfo[veh][vBattery][1]--;
	    VehicleInfo[veh][vBattery][2]=0;
	}
	if(VehicleInfo[veh][vBattery][1] <= 0)
	{
	    VehicleInfo[veh][vEngine]=0, CarEngine(veh, 0);
	    foreach(new i : Player)
	    {
	        if(GetPlayerVehicleID(i) == veh)
	        {
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
				{
				    SCM(i, COLOR_ERROR, "Your vehicle has been shut down, Reason:[battery failure].");
				}
	        }
	    }
	}
	return true;
}
//============================================//
public AddEngine(veh)
{
    if(VehicleInfo[veh][vType] != VEHICLE_PERSONAL) return 1;
	VehicleInfo[veh][vEngineStats][2]++;
	if(VehicleInfo[veh][vEngineStats][2] > 10)
	{
	    VehicleInfo[veh][vEngineStats][1]--;
	    VehicleInfo[veh][vEngineStats][2]=0;
	}
	if(VehicleInfo[veh][vEngineStats][1] <= 0)
	{
	    VehicleInfo[veh][vEngineStats]=0, CarEngine(veh, 0);
	    foreach(new i : Player)
	    {
	        if(GetPlayerVehicleID(i) == veh)
	        {
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
				{
				    SCM(i, COLOR_ERROR, "Your vehicle has been shut down, Reason:[engine failure].");
				}
	        }
	    }
	}
	return true;
}
//============================================//
stock GetPerkMax(vehicleid, type)
{
	new am;

	switch(type)
	{
	    case 1:
	    {
	    	am = 50;
	    	if(VehicleInfo[vehicleid][vEngLvl] > 0)
	    	{
	    		am += 20;
	    	}
	    }
	    case 2:
	    {
	    	am = 30;
	    	if(VehicleInfo[vehicleid][vBatLvl] > 0)
	    	{
	    		am += 20;
	    	}
	    }
	}
	return am;
}
//============================================//
stock GetPerkMaxEx(id, type)
{
	new am = 75;
	if(id == 0) am = 0;
	switch(type)
	{
	    case 1:
	    {
	        if(id == 462 || id == 448 || id == 581 || id == 522 || id == 461 || id == 521 || id == 513
	        || id == 463 || id == 586 || id == 468 || id == 418 || id == 457 || id == 571 || id == 572) am = 50;
	        else if(id == 499 || id == 498 || id == 609 || id == 403 || id == 414 || id == 514 || id == 554
	        || id == 470) am = 100;
	    }
	    case 2:
	    {
	        if(id == 462 || id == 448 || id == 581 || id == 522 || id == 461 || id == 521 || id == 513
	        || id == 463 || id == 586 || id == 468 || id == 418 || id == 457 || id == 571 || id == 572) am = 25;
	        else if(id == 499 || id == 498 || id == 609 || id == 403 || id == 414 || id == 514 || id == 554
	        || id == 470) am = 50;
	        if(am == 75) am = 45;
	    }
	}
	return am;
}
//============================================//
forward OnDealershipVehicleBought(playerid, carmdl, id3, col, price);
public OnDealershipVehicleBought(playerid, carmdl, id3, col, price) 
{
	if(cache_get_row_count() < VEHICLE_MAX_AMOUNT)
	{

		if(GetPVarInt(playerid, "MonthDon") != 0 || GetPVarInt(playerid, "DonateRank") > 2)
		{
			if(cache_get_row_count() >= VEHICLE_DONATOR_MAX_AMOUNT)
			{
				SendClientMessage(playerid, COLOR_ERROR, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
				return 1;
			}
		}
		else
		{
			if(cache_get_row_count() >= VEHICLE_REGULAR_MAX_AMOUNT)
			{
				SendClientMessage(playerid, COLOR_ERROR, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
				return 1;
			}
		}

     	new query[516], plate[VEHICLE_PLATE_MAX_LENGTH];
      	format(plate, VEHICLE_PLATE_MAX_LENGTH, "%s", GenerateRandomVehiclePlate());

		mysql_format(handlesql, query, sizeof(query),"INSERT INTO `vehicles`(`Model`, `X`, `Y`, `Z`, `Angle`, `ColorOne`, `ColorTwo`, `Owner`, `Value`, `Fuel`, `Plate`,`Health`, `Engine1`, `Engine2`, `Battery1`, `Battery2`) \
			VALUES (%d, %f, %f, %f, %f, %d, %d, '%e', %d, %d, '%e', %f, %d, %d, %d, %d)", carmdl, Dealerships[id3][3], Dealerships[id3][4],
			Dealerships[id3][5], Dealerships[id3][6], col, col, PlayerInfo[playerid][pUsername], price, 100, plate, 1000.0, GetPerkMaxEx(carmdl, 1), 0, GetPerkMaxEx(carmdl, 2), 0);
	    mysql_pquery(handlesql, query);

        if(GetPVarInt(playerid, "CTU") == 1) {
			SetPVarInt(playerid, "CarTicket", GetPVarInt(playerid, "CarTicket")-1);
			DeletePVar(playerid, "CTU");
			SendClientMessage(playerid, COLOR_WHITE, "Carticket used!");
		}
		
		if(GetPVarInt(playerid, "CTU") == 2) {
			SetPVarInt(playerid, "CarTicket", GetPVarInt(playerid, "CarTicket")-1);
			DeletePVar(playerid, "CTU");
			format(query, sizeof(query), "Carticket used, paid the remainder of %s!", FormatMoney(price));
			SendClientMessage(playerid, COLOR_WHITE, query);
			GivePlayerMoneyEx(playerid, -price);
		} else {
			format(query, sizeof(query), "%s purchased for %s!", VehicleName[carmdl-400], FormatMoney(price));
			SendClientMessage(playerid, COLOR_WHITE, query);
			GivePlayerMoneyEx(playerid, -price);
		}
		
		GiveAchievement(playerid, 7);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
	}
	return 1;
}
//============================================//
forward OnPlayerEntersDealership(playerid);
public OnPlayerEntersDealership(playerid) {
	if(cache_get_row_count() < VEHICLE_MAX_AMOUNT)
	{

		if(GetPVarInt(playerid, "MonthDon") != 0 || GetPVarInt(playerid, "DonateRank") > 2)
		{
			if(cache_get_row_count() >= VEHICLE_DONATOR_MAX_AMOUNT)
			{
				SendClientMessage(playerid, COLOR_ERROR, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
				return 1;
			}
		}
		else
		{
			if(cache_get_row_count() >= VEHICLE_REGULAR_MAX_AMOUNT)
			{
				SendClientMessage(playerid, COLOR_ERROR, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
				return 1;
			}
		}

        SetPVarInt(playerid, "LOADDEAL", 1);
        SetPVarInt(playerid, "VEHID", 0);
        TogglePlayerControllableEx(playerid, false);
     	CallRemoteFunction("VehCreation", "i", playerid);
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
	}
	return 1;
}
//============================================//
forward OnPlayerPayDayInsurancePay(playerid);
public OnPlayerPayDayInsurancePay(playerid) {
	new query[90],
		insurance = 150, count = 0, string[128];
		
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		if(cache_get_field_content_int(i, "Insurance") > 0)
		{
			if(GetPVarInt(playerid, "Bank") >= insurance)
			{
				SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - insurance);
				count++;
				if(cache_get_field_content_int(i, "InsuranceC") > 0)
				{
					mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `InsuranceC` = `InsuranceC` - %i WHERE `ID` = %i;", insurance, cache_get_field_content_int(i, "ID"));
					mysql_pquery(handlesql, query);
				}
			}
			else
			{
				mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `InsuranceC` = `InsuranceC` + %i WHERE `ID` = %i;", insurance, cache_get_field_content_int(i, "ID"));
				mysql_pquery(handlesql, query);
			}
		}
	}
	if(count > 0)
	{
	    format(string, sizeof(string), "Vehicle Insurance(%d): -%s", count, FormatMoney(insurance*count));
		SendClientMessage(playerid, COLOR_GREEN, string);
	}
}
//============================================//
public LoadVehicleMeter(playerid)
{
    if(GetPVarInt(playerid, "TogHud") == 1) return true; // less resource usage.
    if(GetPVarInt(playerid, "VD") == 0)
	{
	    for(new i = 0; i < 5; i++)
		{
	        TextDrawShowForPlayer(playerid,VehicleDraw[0]);
	        TextDrawShowForPlayer(playerid,VehicleDraw[1]);
            TextDrawShowForPlayer(playerid,VehicleDraw[2]);
	        TextDrawShowForPlayer(playerid,VehicleDraw[3]);
            TextDrawShowForPlayer(playerid,VehicleDraw[4]);
        }
        VehicleIDraw[0][playerid] = CreatePlayerTextDraw(playerid, 513.000000, 386.000000, "IIIIIIIIII");
		PlayerTextDrawBackgroundColor(playerid, VehicleIDraw[0][playerid], 255);
		PlayerTextDrawFont(playerid, VehicleIDraw[0][playerid], 2);
		PlayerTextDrawLetterSize(playerid, VehicleIDraw[0][playerid], 0.500000, 1.500000);
		PlayerTextDrawColor(playerid, VehicleIDraw[0][playerid], -1);
		PlayerTextDrawSetOutline(playerid, VehicleIDraw[0][playerid], 0);
		PlayerTextDrawSetProportional(playerid, VehicleIDraw[0][playerid], 1);
		PlayerTextDrawSetShadow(playerid, VehicleIDraw[0][playerid], 1);
		VehicleIDraw[1][playerid] = CreatePlayerTextDraw(playerid, 513.000000, 351.000000, "IIIIIIIIII");
		PlayerTextDrawBackgroundColor(playerid, VehicleIDraw[1][playerid], 255);
		PlayerTextDrawFont(playerid, VehicleIDraw[1][playerid], 2);
		PlayerTextDrawLetterSize(playerid, VehicleIDraw[1][playerid], 0.500000, 1.500000);
		PlayerTextDrawColor(playerid, VehicleIDraw[1][playerid], -1);
		PlayerTextDrawSetOutline(playerid, VehicleIDraw[1][playerid], 0);
		PlayerTextDrawSetProportional(playerid, VehicleIDraw[1][playerid], 1);
		PlayerTextDrawSetShadow(playerid, VehicleIDraw[1][playerid], 1);
	    for(new i = 0; i < 2; i++)
		{
		    PlayerTextDrawShow(playerid,VehicleIDraw[i][playerid]);
		}
	    SetPVarInt(playerid, "VD", 1);
	}
	return true;
}
//============================================//
stock InitiateFare(playerid)
{
	new string[128], sendername[MAX_PLAYER_NAME];
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
    {
        if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] == VEHICLE_JOB ||
		VehicleInfo[GetPlayerVehicleID(playerid)][vType] == VEHICLE_PERSONAL)
		{
		   new driver = -1;
		   foreach(new i : Player)
	       {
	           if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	           {
	               if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
	               {
	                   driver = i;
	               }
	           }
	       }
	       if(driver == -1) return true; // Block any leaks due to no driver inside vehicle.
	       if(!IsJobVehicle(driver)) return true; // Isn't using a taxi.
	       if(GetPVarInt(driver, "TaxiFare") == 0) return true; // Block any leaks due to taxi-fare fee.
	       if(GetPVarInt(driver, "OnRoute") == 0) return true; // Driver is not on route.
	       if(GetPVarInt(driver, "Job") != 5)  return true; // Driver is not a Taxi Driver.
	       if(GetPlayerMoneyEx(playerid) >= GetPVarInt(driver, "TaxiFare"))
	       {
	           SetPVarInt(playerid, "TaxiBoss", driver);
	           SetPVarInt(playerid, "TaxiCost", GetPVarInt(driver, "TaxiFare"));
	           SetPVarInt(playerid, "TaxiStep", 0);
	           SetPVarInt(playerid, "TaxiAm", GetPVarInt(driver, "TaxiFare"));
		       format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		       GiveNameSpace(sendername);
		       format(string, 128, "%s has entered your taxi and initiated the fare.", sendername);
	           SCM(driver, -1, string);
	       }
	       else
	       {
	           SCM(playerid, COLOR_ERROR, "You can't afford the taxi fare.");
	           RemovePlayerFromVehicle(playerid);
	       }
        }
    }
    return true;
}
//============================================//
stock TaxiPayment(playerid)
{
	new string[128], vehicleid = GetPlayerVehicleID(playerid);
    if(VehicleInfo[vehicleid][vType] == VEHICLE_JOB || VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL)
	{
	    if(IsPlayerConnected(GetPVarInt(playerid, "TaxiBoss")))
	    {
	        if(GetPVarInt(playerid, "TaxiAm") > 0)
	        {
	            format(string, sizeof(string), "You gave the taxi driver %s!", FormatMoney(GetPVarInt(playerid, "TaxiAm")));
	            SCM(playerid, -1, string);
	            format(string, sizeof(string), "%s gave you %s from the taxi ride!", PlayerNameEx(playerid), FormatMoney(GetPVarInt(playerid, "TaxiAm")));
	            SCM(GetPVarInt(playerid, "TaxiBoss"), -1, string);
	            GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "TaxiAm"));
	            GivePlayerMoneyEx(GetPVarInt(playerid, "TaxiBoss"), GetPVarInt(playerid, "TaxiAm"));
	            DeletePVar(playerid, "TaxiBoss"), DeletePVar(playerid, "TaxiCost");
	            DeletePVar(playerid, "TaxiStep"), DeletePVar(playerid, "TaxiAm");
	        }
	    }
	}
	return true;
}
//============================================//
stock ClearInvWeapons(playerid)
{
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
	    if(PlayerInfo[playerid][pInvItem][i] > 0)
	    {
		    if(PlayerInfo[playerid][pInvItem][i] < 200)
		    {
				RemoveInvItem(playerid, i);
	        }
	    }
	}
	return true;
}
//============================================//
stock GetInvSlotFromID(playerid, itemid)
{
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == itemid)
		{
			return i;
		}
	}

	return -1;
}

stock RemoveInvItem(playerid, slot, amount = 0)
{
	if(slot == -1) return 1;
	if(amount == 0)
	{
		PlayerInfo[playerid][pInvItem][slot] = 0;
		PlayerInfo[playerid][pInvQ][slot] = 0;
		PlayerInfo[playerid][pInvEx][slot] = 0;
		PlayerInfo[playerid][pInvS][slot] = 0;
	}
	else
	{
		if(PlayerInfo[playerid][pInvQ][slot] > 1)
		{
			if(PlayerInfo[playerid][pInvQ][slot] - amount < 1)
			{
				PlayerInfo[playerid][pInvItem][slot] = 0;
				PlayerInfo[playerid][pInvQ][slot] = 0;
				PlayerInfo[playerid][pInvEx][slot] = 0;
				PlayerInfo[playerid][pInvS][slot] = 0;
			}
			else
			{
				PlayerInfo[playerid][pInvQ][slot] -= amount;
			}
		}
		else
		{
			PlayerInfo[playerid][pInvItem][slot] = 0;
			PlayerInfo[playerid][pInvQ][slot] = 0;
			PlayerInfo[playerid][pInvEx][slot] = 0;
			PlayerInfo[playerid][pInvS][slot] = 0;
		}
	}

	FixInv(playerid);
	LoadHolsters(playerid);
	OnPlayerDataSave(playerid);
	return 1;
}
//============================================//
stock AbleToUsePNS(playerid)
{
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD) return true;
	if(GetPVarInt(playerid, "Member") == FACTION_LSFD) return true;
	if(GetPVarInt(playerid, "Member") == FACTION_LSG) return true;
	if(GetPVarInt(playerid, "MonthDon") > 0) return true;
	if(GetPVarInt(playerid, "PaintUse") == 0) return true;
	return false;
}
//============================================//
stock CheckVehItem(vehicleid, itemid)
{
	new found = 0;
	new p = DEFAULT_VEHICLE_SLOTS;
	if(IsHelmetCar(vehicleid)) {
	    p = SMALL_VEHICLE_SLOTS; }
	if(IsVehicleSUV(vehicleid)) {
	    p = MAX_VEH_SLOTS; }
	for(new i = 0; i < p; i++)
	{
	    if(VehicleInfo[vehicleid][vInvID][i] > 0)
		{
			if(VehicleInfo[vehicleid][vInvID][i] == itemid)
			{
			    found++;
			}
		}
	}
	if(found != 0) return true;
	return false;
}
//============================================//
stock RemoveVehItem(vehicleid, itemid)
{
	new found = 0, foundid = 0;
	new p = DEFAULT_VEHICLE_SLOTS;
	if(IsHelmetCar(vehicleid)) {
	    p = SMALL_VEHICLE_SLOTS; }
	if(IsVehicleSUV(vehicleid)) {
	    p = MAX_VEH_SLOTS; }
	for(new i = 0; i < p; i++)
	{
	    if(VehicleInfo[vehicleid][vInvID][i] > 0)
		{
			if(VehicleInfo[vehicleid][vInvID][i] == itemid && found == 0)
			{
			    found++;
			    foundid=i;
			}
		}
	}
	if(found != 0)
	{
	    VehicleInfo[vehicleid][vInvID][foundid]=0;
	    VehicleInfo[vehicleid][vInvQ][foundid]=0;
	    VehicleInfo[vehicleid][vInvE][foundid]=0;
	}
	return true;
}
//============================================//
stock AddVehItem(vehicleid, itemid)
{
	new foundid = 0, found = 0;
	for(new i = 0; i < MAX_VEH_SLOTS; i++)
	{
        if(found == 0)
        {
            if(VehicleInfo[vehicleid][vInvID][i] == 0)
            {
                foundid = i;
				found++;
            }
        }
	}
	if(foundid != 0)
	{
	    VehicleInfo[vehicleid][vInvID][foundid]=itemid;
	    VehicleInfo[vehicleid][vInvQ][foundid]=1;
	    VehicleInfo[vehicleid][vInvE][foundid]=0;
	}
	return true;
}
//============================================//
stock CheckVehFull(vehicleid)
{
	new found = 0;
    new p = DEFAULT_VEHICLE_SLOTS;
	if(IsHelmetCar(vehicleid)) {
	p = SMALL_VEHICLE_SLOTS; }
	if(IsVehicleSUV(vehicleid)) {
	p = MAX_VEH_SLOTS; }
	for(new i = 0; i < p; i++)
	{
	    if(VehicleInfo[vehicleid][vInvID][i] == 0)
		{
		    found++;
		}
	}
	if(found != 0) return false;
	return true;
}
//============================================//
stock AddPlayerTag(playerid, msg[])
{
    strmid(PlayerInfo[playerid][pTagMsg], msg, 0, strlen(msg), 255);
    SetPVarInt(playerid, "TagUse", 1);
	return true;
}
//============================================//
stock RemovePlayerTag(playerid)
{
	DeletePVar(playerid, "TagUse");
	return 1;
}
//============================================//
stock CheckHackedGun(playerid)
{
    new sweapon, sammo, found = 0;
	for (new i=0; i<9; i++)
	{
		GetPlayerWeaponData(playerid, i, sweapon, sammo);
	    if(sweapon != 0 && sammo >= 1)
		{
		    if(PlayerInfo[playerid][pPlayerWeapon] == sweapon)
		    {
		        found++;
		    }
		}
	}
	if(found != 0) return false;
    return true;
}
//============================================//
stock IsInvalidVeh(vehicleid)
{
	new id = GetVehicleModel(vehicleid);
	if(id == 509 || id == 481 || id == 510 || id == 571 || id == 572) return true;
	return false;
}
//============================================//
stock SendPlayerSMS(playerid, text[], sender[])
{
    if (!CheckInvItem(playerid, 405)) return true;
    new string[128],sendername[MAX_PLAYER_NAME];
    format(string, sizeof(string), "TXT: %s, Sender: '%s'.", text, sender);
    SendClientMessage(playerid, COLOR_YELLOW, string);
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
    format(string, sizeof(string), "*** %s's phone beeps.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    return true;
}
//============================================//
stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 1)
{
    #pragma unused forcesync
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);
    if(time > 0 || loop > 0 || freeze > 0){
	SetPVarInt(playerid, "AnimLoop", 1); }
    else {
	DeletePVar(playerid, "AnimLoop"); }
	return true;
}
//============================================//
stock ClearAnimationsEx(playerid, forcesync = 1)
{
    #pragma unused forcesync
    DeletePVar(playerid, "AnimLoop");
    ClearAnimations(playerid, 1);
    return 1;
}
//============================================//
stock IsPoliceCar(playerid)
{
    if(GetPVarInt(playerid, "Member") != FACTION_LSPD) return false;
    new Float:x,Float:y,Float:z;
	foreach(new car : VehicleIterator)
	{
	    if(CopInfo[car][Created] == 1)
	    {
		    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			{
			    GetVehiclePos(car,x,y,z);
			    if(IsPlayerInRangeOfPoint(playerid,4.0,x,y,z))
			    {
			        return true;
			    }
		    }
	    }
	}
    return false;
}
//============================================//
stock GetPoliceCarID(playerid)
{
	foreach(new car : VehicleIterator)
	{
	    if(CopInfo[car][Created] == 1)
	    {
		    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			{
			    return car;
		    }
	    }
	}
    return 0;
}
//============================================//
stock PrintVehName(vehicleid)
{
	new str[50]="N/A";
	format(str, 50,"%s", VehicleName[GetVehicleModel(vehicleid) - 400]);
	return str;
}
//============================================//
stock ShowPMs(string[])
{
    foreach (Player,i)
    {
        if (GetPVarInt(i, "PlayerLogged") == 1)
        {
            if(GetPVarInt(i, "Admin") >= 1)
            {
                if(GetPVarInt(i, "ShowPMs") != 0)
                {
                    SendClientMessage(i, COLOR_LIGHTBLUE, string);
                }
            }
        }
    }
	return true;
}
//============================================//
stock SeePM(playerid, string[])
{
    foreach (Player,i)
    {
		if(playerid != i)
		{
            if(GetPVarInt(i, "PlayerLogged") == 1)
            {
                if(GetPVarInt(i, "Admin") >= 1)
                {
                    if(GetPVarInt(i, "SeePM") == playerid)
                    {
                        if(GetPVarInt(i, "ShowPMs") == 0)
                        {
                            SendClientMessage(i, COLOR_LIGHTBLUE, string);
                        }
                    }
                }
            }
        }
    }
	return true;
}
//============================================//
forward RentListSQL(playerid, key);
public RentListSQL(playerid, key)
{
	new name[25], h, str[1024], result[1024], found = 0;
    for(new i = 0; i < cache_get_row_count(); i++)
	{
	    cache_get_row(i, 1, name);
	    h = cache_get_row_int(i, 0);
	    if(h == key)
	    {
	        format(str, 1024, "%s\n{3366FF}%s", str, name);
	        found++;
	    }
	}
	if(found == 0) return scm(playerid, COLOR_ERROR, "No one rents at your property.");
	format(result, 1024, "{FFFFFF}Users who have a key to your property:\n%s", str);
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Rentlist", result, "Close", "");
	return 1;
}
//============================================//
forward SerialListSQL(playerid, key);
public SerialListSQL(playerid, key)
{
	new name[25], h, str[256], found = 0;
    for(new i = 0; i < cache_get_row_count(); i++)
	{
	    cache_get_row(i, 1, name);
	    h = cache_get_row_int(i, 0);
	    if(h == key && found == 0)
	    {
	        format(str, 256, "Serial Match (%d):\nName: %s.", key, name);
	        found++;
	    }
	}
	if(found == 0) return scm(playerid, COLOR_ERROR, "Could not find anyone with that serial-ID.");
	ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Result", str, "Close", "");
	return 1;
}
//============================================//
stock SendInCarMessage(vehicleID, msg[]) {
    if(strlen(msg) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, msg, 140, strlen(msg), MAX_MSG_LENGTH);
	    strdel(msg, 140, strlen(msg));
	    strins(msg, " ...", 140, strlen(msg));
	    strins(buffer, "... ", 0, MAX_MSG_LENGTH);
	    foreach(new i : Player) {
			if(GetPVarInt(i, "PlayerLogged") == 1 && IsPlayerInAnyVehicle(i)) {
				if(GetPlayerVehicleID(i) == vehicleID) {
					SendClientMessage(i,  0xF0F0F096, msg);
					SendClientMessage(i,  0xF0F0F096, buffer);
				}
			}
		}
	} else {
	    foreach(new i : Player) {
			if(GetPVarInt(i, "PlayerLogged") == 1 && IsPlayerInAnyVehicle(i)) {
				if(GetPlayerVehicleID(i) == vehicleID) {
					SendClientMessage(i,  0xF0F0F096, msg);
				}
			}
		}
	}
}

stock SendClientMessageEx(playerid, color, msg[]) {
    if(strlen(msg) > MAX_MSG_LENGTH - 3)
    {
		new text[MAX_MSG_LENGTH], buffer[MAX_MSG_LENGTH];

		strmid(text, msg, 0, MAX_MSG_LENGTH - 3);
		strmid(buffer, msg, MAX_MSG_LENGTH - 3, MAX_DOUBLE_MSG_LENGTH);
		strins(text, "...", strlen(text));
		strins(buffer, "...", 0);

     	SendClientMessage(playerid, color, text);
      	SendClientMessage(playerid, color, buffer);
	}
	else
	{
		new text[MAX_MSG_LENGTH];
    	format(text, sizeof(text), msg);

	    SendClientMessage(playerid, color, text);
	}
}

stock SendClientMessageToAllEx(color, msg[]) {
    if(strlen(msg) > MAX_MSG_LENGTH - 3)
    {
		new text[MAX_MSG_LENGTH], buffer[MAX_MSG_LENGTH];

		strmid(text, msg, 0, MAX_MSG_LENGTH - 3);
		strmid(buffer, msg, MAX_MSG_LENGTH - 3, MAX_DOUBLE_MSG_LENGTH);
		strins(text, "...", strlen(text));
		strins(buffer, "...", 0);

     	SendClientMessageToAll(color, text);
      	SendClientMessageToAll(color, buffer);
	}
	else
	{
		new text[MAX_MSG_LENGTH];
    	format(text, sizeof(text), msg);
    	
	    SendClientMessageToAll(color, text);
	}
}
//============================================//
stock PayHouseRent(houseid)
{
	new name[25], query[128], found = 0, foundid = 0;
	format(name, 25, "%s", HouseInfo[houseid][hOwner]);
	foreach(new i : Player)
	{
	    if(strcmp(PlayerInfo[i][pUsername], name, true) == 0)
	    {
	        found++;
	        foundid=i;
	    }
	}
	if(found != 0)
	{
	    SetPVarInt(foundid, "Bank", GetPVarInt(foundid, "Bank")+HouseInfo[houseid][hRentFee]);
	}
	else // MYSQL part
	{
	    mysql_format(handlesql, query, sizeof(query), "UPDATE `accounts` SET `Bank` = `Bank` + %i WHERE `Name`='%e'", HouseInfo[houseid][hRentFee], name);
        mysql_pquery(handlesql, query);
	}
	return 1;
}
//============================================//
stock SetPlayerHealthEx(playerid, Float:amount)
{
	if(amount < 0)
	{
		amount = 0;
	}
	else if(amount >= 100 && GetPVarInt(playerid, "AdminDuty") == 0)
	{
		amount=99;
	}

	SetPVarFloat(playerid, "Health", amount);
	SetPlayerHealth(playerid, amount);
	return 1;
}
//============================================//
forward GetPlayerHealthEx(playerid, &Float:amount);
public GetPlayerHealthEx(playerid, &Float:amount)
{
	amount = GetPVarFloat(playerid, "Health");
	return 1;
}
//============================================//
stock SetPlayerArmourEx(playerid, Float:armour)
{
	new Float:tmp_armour = armour;

	if(tmp_armour < 0)
	{
		tmp_armour = 0;
	}
		
	if(tmp_armour > 50)
	{
		if(GetPVarInt(playerid, "Member") != FACTION_LSPD && GetPVarInt(playerid, "Member") != FACTION_LSG && GetPVarInt(playerid, "Member") != FACTION_LSFD)
		{
			tmp_armour = 50;
		}
	}

	SetPVarFloat(playerid, "Armour", tmp_armour);
	SetPlayerArmour(playerid, tmp_armour);
    return 1;
}

forward GetPlayerArmourEx(playerid, &Float:armour);
public GetPlayerArmourEx(playerid, &Float:armour)
{
	armour = GetPVarFloat(playerid, "Armour");
}
//============================================//
stock HouseLights(houseid)
{
    foreach(new i : Player)
	{
	    if(GetPVarInt(i, "PlayerLogged") == 1)
	    {
	        if(GetPVarInt(i, "HouseEnter") == houseid)
	        {
	            if(GetPlayerVirtualWorld(i) == HouseInfo[houseid][hVwIn])
				{
					if(HouseInfo[houseid][hBasic] == 0)
					{
					    TextDrawHideForPlayer(i, BlindDraw2);
					    TextDrawShowForPlayer(i, BlindDraw2);
					}
					else
					{
					    if(HouseInfo[houseid][hLights] == 0)
					    {
					        TextDrawHideForPlayer(i, BlindDraw2);
					    }
					    else
					    {
					        TextDrawHideForPlayer(i, BlindDraw2);
					        TextDrawShowForPlayer(i, BlindDraw2);
					    }
					}
				}
	        }
		}
	}
	return 1;
}
//============================================//
stock HouseAlarm(houseid, toggle)
{
	switch(toggle)
	{
	    case 0:
	    {
	        if(HouseInfo[houseid][hAlarmA] == 1)
	        {
	            HouseInfo[houseid][hAlarmA]=0;
	            DestroyDynamic3DTextLabel(HouseInfo[houseid][hAText]);
	            PlaySoundInArea(1154, HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], 20.0);
	        }
	    }
	    case 1:
	    {
	        if(HouseInfo[houseid][hAlarmA] == 0)
	        {
	            HouseInfo[houseid][hAlarmA]=1;
	            HouseInfo[houseid][hAText]=CreateDynamic3DTextLabel("*RING* HOUSE ALARM *RING*", 0xC2A2DAFF, HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo]+0.50, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);
	            foreach(new p : Player)
			    {
                    if(IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[houseid][hXi], HouseInfo[houseid][hYi], HouseInfo[houseid][hZi]))
                    {
                        if(GetPlayerVirtualWorld(p) == HouseInfo[houseid][hVwIn])
					    {
				            SendClientMessage(p, COLOR_PURPLE, "*** The house alarm begins to ring.");
				        }
				    }
		        }
	        }
	    }
	}
	return 1;
}
//============================================//
public PlayerGetup(playerid) return ApplyAnimation(playerid,"PED","getup",4.0,0,0,0,0,0);
//============================================//
stock GMTime()
{
	new GM_DAY_AMOUNT = 1; // Amount of days within twenty four hours inrl.
    GMSec += GM_DAY_AMOUNT;
	if(GMSec >= 60)
	{
	    GMSec=0, GMMin++;
	}
	if(GMMin >= 60)
	{
	    GMSec=0, GMMin=0, GMHour++;
	    new string[128];
        format(string, sizeof(string), "The time is now %d:00.", GMHour);
		SendClientMessageToAll(COLOR_WHITE,string);

		if(GMHour == 12 || GMHour == 24)
		{
			new lottery = random(50)+1, query[128];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM lottery WHERE Number=%d AND Active=1", lottery);
			mysql_pquery(handlesql, query, "LotteryCheck", "iii", -1, 2, lottery);
		}
	}

	if(GMHour >= 24)
	{
	    GMSec=0, GMMin=0, GMHour=0;
	    new weather = random(17);
	    switch(weather)
	    {
	        case 0,1: Weather=1;
		    case 2: Weather=2;
		    case 3: Weather=3;
		    case 4: Weather=4;
		    case 5: Weather=5;
		    case 6: Weather=6;
		    case 7,8,9: Weather=7;
		    case 10: Weather=10;
		    case 11: Weather=11;
		    case 12: Weather=12;
		    case 13: Weather=13;
		    case 14: Weather=18;
		    case 15: Weather=8;
		    case 16: Weather=9;
	    }
        SetWeatherEx(Weather);

		for(new f = 0; f < MAX_FACTIONS; f++)
		{
			if(FactionInfo[f][fRights] != 0)
			{
				FactionInfo[f][fAvailablePackages] += FactionInfo[f][fDailyPackages];
				SendFactionMessage(f, COLOR_WHITE, "Your faction's packages have been re-set.");
			}
		}

		new query[256];
		foreach(new i : HouseIterator)
		{
			if(HouseInfo[i][hOwned] == 1)
			{
				mysql_format(handlesql, query, sizeof(query),"SELECT UNIX_TIMESTAMP(LastOnDate) AS unix_LastOnDate FROM `accounts` WHERE HouseKey=%i",
				i);
				mysql_pquery(handlesql, query, "OnHouseActivityCheck", "i", i);
			}
		}

		foreach(new i : BizIterator)
		{
			if(BizInfo[i][Owned] == 1)
			{
				mysql_format(handlesql, query, sizeof(query),"SELECT UNIX_TIMESTAMP(LastOnDate) AS unix_LastOnDate FROM `accounts` WHERE BizKey=%i",
				i);
				mysql_pquery(handlesql, query, "OnBizActivityCheck", "i", i);
			}
		}

        new time = gettime();
		mysql_format(handlesql, query, sizeof(query),"DELETE FROM `logs` WHERE UNIX_TIMESTAMP(Timestamp) < %i",
		time - (86400 * LOG_CLEAR_DAYS));
		mysql_pquery(handlesql, query);
    }
	return 1;
}
//============================================//
stock FixHour(hour)
{
	if (hour < 0) hour = hour+24;
	else if (hour > 23) hour = hour-24;
	return hour;
}
//============================================//
stock SetWorldTimeEx()
{
    foreach(new i : Player)
	{
		if(GetPVarInt(i, "DrugTime") == 0)
		{
			SetPlayerTime(i, GMHour, GMMin);
		}

		/*if(GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
		{
			if(GetPVarInt(i, "DrugTime") == 0)
			{
				SetPlayerTime(i, GMHour, GMMin);
			}
		}
		else
		{
			if(GetPVarInt(i, "DrugTime") == 0)
			{
				SetPlayerTime(i, 12, 0);
			}
		}*/
	}
	return 1;
}
//============================================//
stock PoliceWarnArea(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    if(X > 46.7115 && Y > -2755.979 && X < 2931.147 && Y < -548.8602) return true;
    if(GetPVarInt(playerid, "HouseEnter") != 0) return true;
    if(GetPVarInt(playerid, "IntEnter") != 0) return true;
    if(GetPVarInt(playerid, "BizEnter") != 0) return true;
	return false;
}
//============================================//
stock ShotFired(playerid)
{
	new string[256];
    if(GetPVarInt(playerid, "Member") == FACTION_LSPD) return 1;
    if(GetPVarInt(playerid, "FireDelay") > GetCount()) return 1;
    SetPVarInt(playerid, "FireDelay", GetCount()+300000);
    if(PlayerInfo[playerid][pPlayerWeapon] == 22 || (PlayerInfo[playerid][pPlayerWeapon] >= 24 && PlayerInfo[playerid][pPlayerWeapon] <= 34))
    {
		if(PoliceWarnArea(playerid))
	    {
		    format(string, sizeof(string), "HQ: All Units - HQ: Shots fired | Location: %s.", PrintPlayerArea(playerid));
		    SendFactionMessage(1, COLOR_BLUE, string);
	    }
	}
	return 1;
}
//============================================//
stock CreateCorpse(playerid, skinid)
{
    new found = 0, foundid = 0, Float:x, Float:y, Float:z, Float:a, sex[25];
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
	for(new o = 0; o < sizeof(CorpInfo); o++)
	{
		if(o != 0)
		{
	        if(CorpInfo[o][cUsed] == 0 && found == 0)
		    {
		        found++;
			    foundid=o;
            }
        }
    }
    if(found == 0) return 1;
    CorpInfo[foundid][cUsed]=1;
    CorpInfo[foundid][cVeh]=0;
    format(CorpInfo[foundid][cName], 25, "%s", PlayerInfo[playerid][pUsername]);
    CorpInfo[foundid][cTime]=15;
    CorpInfo[foundid][cX]=x;
    CorpInfo[foundid][cY]=y;
    CorpInfo[foundid][cZ]=z;
    CorpInfo[foundid][cSkin]=skinid;
    
    switch(GetPVarInt(playerid, "Sex")) {
        case 2: sex = "Female";
        default: sex = "Male";
    }
    
    format(CorpInfo[foundid][cNote1], 256, "Name: %s | Age: %d | Sex: %s", PlayerInfo[playerid][pUsername], GetPVarInt(playerid, "Age"), sex);
    if(GetPVarInt(playerid, "DR") == 0) {
        format(CorpInfo[foundid][cNote2], 256, "Death Reason: Killed in a unknown way.", sex);
	} else {
        switch(GetPVarInt(playerid, "DR"))
        {
            case 0: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Killed in a unknown way.", sex);
            case 1 .. 15: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Beaten to death with a blunt object.", sex);
            case 22 .. 34: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Shot with a %s.", DeathNames[GetPVarInt(playerid, "DR")]);
            case 49: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Killed by a vehicle.", sex);
            case 53: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Drowned in the water.", sex);
            case 54: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Fell from a high height or committed suicide.", sex);
        }
    }
    CorpInfo[foundid][cText]=CreateDynamic3DTextLabel("| Corpse |\nPress'~k~~CONVERSATION_YES~' to examine!", 0x33CCFFFF, x, y, z-0.8, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);
    //CorpInfo[foundid][cObj]=CreateDynamicObject(19944, x, y, z-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    CorpInfo[foundid][cActor]=CreateActor(skinid, x, y, z, a);
    SetActorVirtualWorld(CorpInfo[foundid][cActor], GetPlayerVirtualWorld(playerid));
    ApplyActorAnimation(CorpInfo[foundid][cActor], "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
	return 1;
}
//============================================//
stock RemoveCorpse(id)
{
	if(id == 0) return 1;
	if(CorpInfo[id][cUsed] == 1)
	{
	    CorpInfo[id][cUsed]=0;
	    CorpInfo[id][cX]=0;
        CorpInfo[id][cY]=0;
        CorpInfo[id][cZ]=0;
        if(CorpInfo[id][cVeh] > 0 && GetVehicleModel(CorpInfo[id][cVeh]) > 0) {
		    VehicleInfo[CorpInfo[id][cVeh]][vCorp]=0;
		} else {
		DestroyDynamic3DTextLabel(CorpInfo[id][cText]);
		//DestroyDynamicObject(CorpInfo[id][cObj]);
		DestroyActorEx(CorpInfo[id][cActor]); }
	}
	return 1;
}
//============================================//
forward CloseTrunk(vehicleid);
public CloseTrunk(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,false,objective);
	return 1;
}
//============================================//
stock GetOccupation(jobID) {
	new job[20];
	switch(jobID) {
        case 1: job = "Mechanic";
        case 2: job = "Garbage Man";
        case 3: job = "Street Sweeper";
        case 4: job = "Pizza Boy";
        case 5: job = "Taxi Driver";
        case 6: job = "Trucker";
        case 7: job = "Farmer";
        default: job = "Unemployed";
    }
    
    return job;
}
//============================================//
stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }
    
    return sex;
}
//============================================//
stock GetDriveLicStatus(driveLicStatus) {
	new driveLic[15];
    switch(driveLicStatus) {
        case 1: driveLic = "Passed";
        default: driveLic = "Not Passed";
    }

    return driveLic;
}
//============================================//
stock GetWeaponLicStatus(weaponLicStatus) {
	new weapLic[20];
    switch(weaponLicStatus) {
        case 1: weapLic = "Passed";
        case 2: weapLic = "Passed (CCW)";
        case 3: weapLic = "Passed (PERMANENT)";
        default: weapLic = "Not Passed";
    }
    
    return weapLic;
}
//============================================//
stock GetMedLicStatus(medLicStatus) {
	new medLic[20];
	switch(medLicStatus) {
		case 1: medLic = "BLS Passed";
		case 2: medLic = "ILS Passed";
		case 3: medLic = "ALS Passed";
		case 4: medLic = "M.D Passed";
		default: medLic = "Not Passed";
	}
	return medLic;
}
//============================================//
IsNumeric(const string[]) {
	for(new i = 0, j = strlen(string); i < j; i++) {
 		if(string[i] > '9' || string[i] < '0') return 0;
	}

	return 1;
}
//============================================//
stock GetNameWithSpace(nameWithUnderscore[]) {
	new name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", nameWithUnderscore);
	for(new i = 0; i < strlen(name); i++) {
		if(name[i] == '_') {
			name[i] = ' ';
		}
	}
	
	return name;
}
//============================================//
stock GetPlayerID(username[]) {
	if(!isnull(username)) {
		foreach(new i : Player) {
			if(strcmp(PlayerInfo[i][pUsername], username, false) == 0) {
				return i;
			}
		}
	}

	return -1;
}
//============================================//
forward EngineFailure(vehicleid, playerid);
public EngineFailure(vehicleid, playerid)
{
	new chance, am;
	am = GetPerkMax(vehicleid, 1);
	//if(VehicleInfo[vehicleid][vEngineStats][1] <= am/2) { chance = random(5); }
	if(VehicleInfo[vehicleid][vEngineStats][1] <= am/8) { chance = random(4); }
	if(VehicleInfo[vehicleid][vEngineStats][1] <= am/10) { chance = random(3); }
	if(VehicleInfo[vehicleid][vEngineStats][1] <= am/12) { chance = 3; }
	if(chance > 0) {
	    if(chance == 3) {
	    VehicleInfo[vehicleid][vEngine]=0;
        CarEngine(vehicleid, VehicleInfo[vehicleid][vEngine]);
        scm(playerid, COLOR_ERROR, "Your vehicle randomly turned off due to engine failure.");
	    return 1; }
	    return 1; }
	chance=0;
    am = GetPerkMax(vehicleid, 2);
	//if(VehicleInfo[vehicleid][vBattery][1] <= am/3) { chance = random(5); }
	if(VehicleInfo[vehicleid][vBattery][1] <= am/8) { chance = random(4); }
	if(VehicleInfo[vehicleid][vBattery][1] <= am/10) { chance = random(3); }
	if(VehicleInfo[vehicleid][vBattery][1] <= am/12) { chance = 3; }
	if(chance > 0) {
	    if(chance == 3) {
	    VehicleInfo[vehicleid][vEngine]=0;
        CarEngine(vehicleid, VehicleInfo[vehicleid][vEngine]);
        scm(playerid, COLOR_ERROR, "Your vehicle randomly turned off due to battery failure.");
	    return 1; }
	    return 1; }
    chance=0;
	am = VehicleInfo[vehicleid][vMileage][1] / 1000;
	
	if(am >= 100000 && am < 200000) { chance = random(9); }
	if(am >= 200000 && am < 400000) { chance = random(7); }
	if(am >= 400000 && am < 600000) { chance = random(5); }
	if(am >= 600000 && am < 800000) { chance = random(3); }
	if(am >= 800000 && am < 1000000) { chance = random(2); }
	if(am >= 1000000) { chance = 3; }
	if(chance > 0) {
	    if(chance == 3) {
	    VehicleInfo[vehicleid][vEngine]=0;
        CarEngine(vehicleid, VehicleInfo[vehicleid][vEngine]);
        scm(playerid, COLOR_ERROR, "Your vehicle randomly turned off due to high mileage.");
	    return 1; }
	    return 1; }
	return 1;
}
//============================================//
public FurnRight(playerid, type)
{
	new key = -1;

	switch(type)
	{
	    case 1:
	    {
            key = GetPVarInt(playerid, "HouseEnter");

            if(key == -1)
            {
            	key = GetPVarInt(playerid, "GarageEnter");
            }

            if(key != -1)
            {
		        if(HouseInfo[key][hOwned] == 1)
				{
					if(IsPlayerInRangeOfPoint(playerid, 150.0, HouseInfo[key][hXi], HouseInfo[key][hYi], HouseInfo[key][hZi]) || IsPlayerInRangeOfPoint(playerid, 150.0, HouseInfo[key][hgXi], HouseInfo[key][hgYi], HouseInfo[key][hgZi]))
					{
			            if(GetPlayerVirtualWorld(playerid) == HouseInfo[key][hVwIn])
						{
							if(strlen(HouseInfo[key][hFurnR]) > 0)
							{
								if(strcmp(HouseInfo[key][hFurnR], PlayerInfo[playerid][pUsername], true) == 0)
								{
									return key;
								}
							}

							if(strlen(HouseInfo[key][hOwner]) > 0)
							{
				                if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
								{
							        return key;
								}
							}

							if(DoesPlayerHaveHouseKey(playerid, key))
							{
								return key;
							}
						}
					}
				}
			}
			
			foreach(new h : HouseIterator)
			{
			    if(HouseInfo[h][hOwned] == 1)
				{
				    if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
					{
				        if(strlen(HouseInfo[h][hFurnR]) > 0)
						{
							if(strcmp(HouseInfo[h][hFurnR], PlayerInfo[playerid][pUsername], true) == 0)
							{
								return h;
							}
						}

						if(strlen(HouseInfo[h][hOwner]) > 0)
						{
			                if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0)
							{
						        return h;
							}
						}

						if(DoesPlayerHaveHouseKey(playerid, h))
						{
							return h;
						}
				    }
				}
			}
	    }

	    case 2:
	    {
			key = GetPVarInt(playerid, "BizEnter");

			if(key != -1)
            {
				if(BizInfo[key][Owned] == 1)
				{
				    if(IsPlayerInRangeOfPoint(playerid, 150.0, BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi]))
					{
				        if(GetPlayerVirtualWorld(playerid) == BizInfo[key][VwIn])
						{
							if(strlen(BizInfo[key][FurnR]) > 0)
							{
								if(strcmp(BizInfo[key][FurnR], PlayerInfo[playerid][pUsername], true) == 0)
								{
								    return key;
							    }
							}

							if(strlen(BizInfo[key][Owner]) > 0)
							{
								if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0)
								{
								    return key;
							    }
							}

							if(DoesPlayerHaveBusinessKey(playerid, key))
							{
								return key;
							}
				        }
				    }
				}
			}
			
			foreach(new h : BizIterator)
			{
			    if(BizInfo[h][Owned] == 1)
				{
			        if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
				    {
				    	if(strlen(BizInfo[h][FurnR]) > 0)
						{
							if(strcmp(BizInfo[h][FurnR], PlayerInfo[playerid][pUsername], true) == 0)
							{
							    return h;
						    }
						}

						if(strlen(BizInfo[h][Owner]) > 0)
						{
							if(strcmp(BizInfo[h][Owner], PlayerInfo[playerid][pUsername], true) == 0)
							{
							    return h;
						    }
						}

						if(DoesPlayerHaveBusinessKey(playerid, h))
						{
							return h;
						}
				    }
			    }
			}
	    }
	}
	return 0;
}
//============================================//
stock FurnRightEx(playerid, type)
{
	new key = -1;
	switch(type)
	{
	    case 1:
	    {
            key = GetPVarInt(playerid, "HouseKey");

	        if(HouseInfo[key][hOwned] == 1)
			{
                if(IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[key][hXi], HouseInfo[key][hYi], HouseInfo[key][hZi]) ||
                	IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[key][hgXi], HouseInfo[key][hgYi], HouseInfo[key][hgZi]))
				{
		            if(GetPlayerVirtualWorld(playerid) == HouseInfo[key][hVwIn])
				    {
				        return key;
				    }
				}
			}
            key = GetPVarInt(playerid, "HouseEnter");
	        if(HouseInfo[key][hOwned] == 1)
			{
                if(IsPlayerInRangeOfPoint(playerid,100.0, HouseInfo[key][hXi], HouseInfo[key][hYi], HouseInfo[key][hZi]))
				{
		            if(GetPlayerVirtualWorld(playerid) == HouseInfo[key][hVwIn])
					{
		                if(strcmp(HouseInfo[key][hFurnR], PlayerInfo[playerid][pUsername], true) == 0)
		                {
					        return key;
					    }
					}
				}
			}
	    }
	    case 2:
	    {
	        key = GetPVarInt(playerid, "BizKey");
	        if(BizInfo[key][Owned] == 1)
			{
	            if(strcmp(PlayerInfo[playerid][pUsername], BizInfo[key][Owner], true) == 0)
				{
                    if(IsPlayerInRangeOfPoint(playerid,100.0, BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi]))
					{
		                if(GetPlayerVirtualWorld(playerid) == BizInfo[key][VwIn])
						{
						    return key;
					    }
		            }
			    }
			}
			key = GetPVarInt(playerid, "BizEnter");
			if(BizInfo[key][Owned] == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid,100.0, BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi]))
				{
			        if(GetPlayerVirtualWorld(playerid) == BizInfo[key][VwIn])
					{
			            if(strcmp(BizInfo[key][FurnR], PlayerInfo[playerid][pUsername], true) == 0)
						{
						    return key;
					    }
			        }
			    }
			}
	    }
	}
	return 0;
}
//============================================//
stock IsDoorObject(id)
{
	for(new i = 0; i < sizeof(DoorModels); i++)
	{
		if(DoorModels[i] == id) return true;
	}
	return false;
}
//============================================//
stock GetObjName(objectid)
{
	new string[128];
	new found = 0, foundid;
    for(new i = 0; i < MAX_OBJECT_ARRAY; i++)
    {
	    if(found == 0)
		{
            if(ObjectList[i][oID] == objectid)
            {
                found++;
                foundid=i;
            }
        }
    }
    if(found == 0){
    format(string, 128, "%d", objectid);
	} else {
	format(string, 128, "%s", ObjectList[foundid][oName]);}
	return string;
}
//============================================//
stock SafeObjList(id)
{
	if(id == 1829 || id == 2003 || id == 2332) {
	return true; }
	return false;
}
//============================================//
stock GetCloseHouseSafe(playerid, key)
{
	new found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
				if(SafeObjList(HouseInfo[key][hoID][h]))
				{
					if(HouseInfo[key][hSafe] == 1) {
		                found++;
		            }
		        }
		    }
        }
    }
	if(found == 0) return false;
    return true;
}
//============================================//
stock GetCloseHouseSafeEx(playerid, key)
{
	new found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
				if(SafeObjList(HouseInfo[key][hoID][h]))
				{
		            found++;
		        }
		    }
        }
    }
	if(found == 0) return false;
    return true;
}
//============================================//
stock GetCloseBizSafe(playerid, key)
{
	new found = 0;
    for(new b = 0; b < MAX_HOUSE_OBJ; b++)
    {
        if(BizInfo[key][bObject][b] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][b], BizInfo[key][boY][b], BizInfo[key][boZ][b]))
		    {
				if(SafeObjList(BizInfo[key][boID][b]))
				{
		            if(BizInfo[key][Safe] == 1) {
		                found++;
		            }
		        }
		    }
        }
    }
	if(found == 0) return false;
    return true;
}
//============================================//
stock GetCloseBizSafeEx(playerid, key)
{
	new found = 0;
    for(new b = 0; b < MAX_HOUSE_OBJ; b++)
    {
        if(BizInfo[key][bObject][b] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][b], BizInfo[key][boY][b], BizInfo[key][boZ][b]))
		    {
				if(SafeObjList(BizInfo[key][boID][b]))
				{
		            found++;
		        }
		    }
        }
    }
	if(found == 0) return false;
    return true;
}
//============================================//
stock SendBurg(id, type)
{
	if(type == 1) {
	    foreach(new i : Player) {
		    if(strcmp(HouseInfo[id][hOwner], PlayerInfo[i][pUsername], true) == 0) {
			    SendPlayerSMS(i, "Your house alarm initiated from a burglary attempt.", "LS 411"); } }
	}
	else {
	    foreach(new i : Player) {
		    if(strcmp(VehicleInfo[id][vOwner], PlayerInfo[i][pUsername], true) == 0) {
			    SendPlayerSMS(i, "Your vehicles alarm initiated from a burglary attempt.", "LS 411"); } }
	}
	return 1;
}
//============================================//
stock GiveAchievement(playerid, id)
{
	if(PlayerInfo[playerid][pAch][id] > 0) return 1;
	PlayerInfo[playerid][pAch][id]=1;
	new string[128];
	format(string, 128, "~g~Achievement~n~~w~%s", AchievementTXT[id][aname]);
	GameTextForPlayer(playerid, string, 5000, 1);
	PlayerPlaySound(playerid,1058, 0.0, 0.0, 0.0);
	return 1;
}
//============================================//
stock SendBugMessage(playerid,string2[])
{
	if(GetPVarInt(playerid, "TrackBug") == 1)
	{
		if(IsPlayerConnected(GetPVarInt(playerid, "TrackBugPL")) && GetPVarInt(GetPVarInt(playerid, "TrackBugPL"), "Member") == FACTION_LSPD)
		{
			new string[256];
			format(string, sizeof(string),"** (MOLE) %s **", string2);
			SendClientMessage(GetPVarInt(playerid, "TrackBugPL"),COLOR_LIGHTBLUE,string);
		}
		else DeletePVar(playerid, "TrackBug"), DeletePVar(playerid, "TrackBugPL");
	}
	return true;
}
//============================================//
stock IsValidTCar(veh)
{
    if(VehicleInfo[veh][vID] != 0) {
        if(VehicleInfo[veh][vType] == VEHICLE_PERSONAL) {
	        if(VehicleInfo[veh][vTrunk] == 1) {
	            if(!IsInvalidVeh(veh)) {
				return true; }
			}
		}
	}
	return false;
}
//============================================//
stock ConfigPayment(playerid, type, text[])
{
	switch(type)
	{
	    case 1: {
	        if(PlayerInfo[playerid][pPaymentTD] == 1) {
	            for(new i = 0; i < 6; i++)
			    {
	                TextDrawHideForPlayer(playerid, PayDraw[i]);
	            }
	            PlayerTextDrawDestroy(playerid, PayTDraw[playerid]);
	            PlayerInfo[playerid][pPaymentTD]=0;
	        }
	        for(new i = 0; i < 6; i++)
			{
	            /*if(i >= 3) {
	            TextDrawSetSelectable(PayDraw[i], 1);
	            }*/
	            TextDrawShowForPlayer(playerid, PayDraw[i]);
	        }
	        PayTDraw[playerid] = CreatePlayerTextDraw(playerid, 229.000000, 220.000000, text);
	        PlayerTextDrawBackgroundColor(playerid, PayTDraw[playerid], 255);
	        PlayerTextDrawFont(playerid, PayTDraw[playerid], 2);
	        PlayerTextDrawLetterSize(playerid, PayTDraw[playerid], 0.210000, 0.999999);
	        PlayerTextDrawColor(playerid, PayTDraw[playerid], -1);
	        PlayerTextDrawSetOutline(playerid, PayTDraw[playerid], 0);
	        PlayerTextDrawSetProportional(playerid, PayTDraw[playerid], 1);
	        PlayerTextDrawSetShadow(playerid, PayTDraw[playerid], 1);
	        PlayerTextDrawSetSelectable(playerid, PayTDraw[playerid], false);
	        PlayerTextDrawShow(playerid, PayTDraw[playerid]);
	        SelectTextDraw(playerid, 0xA3B4C5FF);
	        TogglePlayerControllable(playerid, false);
	        PlayerInfo[playerid][pPaymentTD]=1;
	        scm(playerid, -1, "NOTE: If your cursor disappears type /cursor.");
	        PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
	    }
	    case 2: {
	        for(new i = 0; i < 6; i++) {
	        TextDrawHideForPlayer(playerid, PayDraw[i]);
	        }
	        PlayerTextDrawDestroy(playerid, PayTDraw[playerid]);
	        CancelSelectTextDraw(playerid);
	        TogglePlayerControllable(playerid, true);
	        PlayerInfo[playerid][pPaymentTD]=0;
	        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
	    }
	}
	return 1;
}
//============================================//
forward ChangeDynamicObjectMaterial(objectid, index, materialid);
public ChangeDynamicObjectMaterial(objectid, index, materialid)
{
	SetDynamicObjectMaterial(objectid, index, MaterialIDs[materialid][ModelID], MaterialIDs[materialid][TxdName], MaterialIDs[materialid][TextureName], 0);
}
//============================================//
stock TriggerBomb(vehicleID) {
	if(VehicleInfo[vehicleID][vBomb] == 1) {
	    new Float:X, Float:Y, Float:Z, string[128];
	    GetVehiclePos(vehicleID, X, Y, Z);
	    SetVehicleVelocity(vehicleID, 0, 0, 0.2);
	    VehicleInfo[vehicleID][vBomb]=0;
	    CreateFire(X, Y, Z, 0, 0, 3.0);
		CreateExplosion(X, Y, Z, 12, 15.0);
		CreateExplosion(X, Y, Z, 12, 15.0);
	    foreach (Player,i)
		{
		    if(GetPlayerVehicleID(i) == vehicleID) {
                 SetPlayerPosEx(i, X, Y, Z+0.5);
				 SetPlayerHealth(i,1.0);
				 SetPlayerHealth(i,0.0);
		    }
	    }
	    SetVehicleHealth(vehicleID, 15.0);
	    VehicleInfo[vehicleID][vHealth]=15.0;
	    VehicleInfo[vehicleID][vEngineStats][1]-=5;
		VehicleInfo[vehicleID][vBattery][1]-=1;
	    //==========//
	    SendFactionMessage(2, COLOR_PINK, "HQ: All Units - HQ: Vehicle explosion.");
		format(string, sizeof(string), "HQ: Location: %s.", GetZone(X, Y, Z));
		SendFactionMessage(2, COLOR_PINK, string);
	}
	return 1;
}
//============================================//
forward Float:GetDistanceFromPointToPoint(Float:x1,Float:y1,Float:z1,Float:px,Float:py,Float:pz);
public Float:GetDistanceFromPointToPoint(Float:x1,Float:y1,Float:z1,Float:px,Float:py,Float:pz)
{
	new Float:x2, Float:y2, Float:z2;
	x2 = px;
	y2 = py;
	z2 = pz;
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
//============================================//
stock mdc_LoadTextdraws() {
    td_mdc_Box = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Box, 255);
	TextDrawFont(td_mdc_Box, 1);
	TextDrawLetterSize(td_mdc_Box, 0.000000, 6.399999);
	TextDrawColor(td_mdc_Box, -1);
	TextDrawSetOutline(td_mdc_Box, 0);
	TextDrawSetProportional(td_mdc_Box, 1);
	TextDrawSetShadow(td_mdc_Box, 1);
	TextDrawUseBox(td_mdc_Box, 1);
	TextDrawBoxColor(td_mdc_Box, 125);
	TextDrawTextSize(td_mdc_Box, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Box, 0);

    td_mdc_HeaderBox = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_HeaderBox, 255);
	TextDrawFont(td_mdc_HeaderBox, 1);
	TextDrawLetterSize(td_mdc_HeaderBox, 0.000000, 1.799998);
	TextDrawColor(td_mdc_HeaderBox, -1);
	TextDrawSetOutline(td_mdc_HeaderBox, 0);
	TextDrawSetProportional(td_mdc_HeaderBox, 1);
	TextDrawSetShadow(td_mdc_HeaderBox, 1);
	TextDrawUseBox(td_mdc_HeaderBox, 1);
	TextDrawBoxColor(td_mdc_HeaderBox, 100);
	TextDrawTextSize(td_mdc_HeaderBox, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_HeaderBox, 0);

	td_mdc_CitizenBox = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_CitizenBox, 255);
	TextDrawFont(td_mdc_CitizenBox, 1);
	TextDrawLetterSize(td_mdc_CitizenBox, 0.000000, 11.699997);
	TextDrawColor(td_mdc_CitizenBox, -1);
	TextDrawSetOutline(td_mdc_CitizenBox, 0);
	TextDrawSetProportional(td_mdc_CitizenBox, 1);
	TextDrawSetShadow(td_mdc_CitizenBox, 1);
	TextDrawUseBox(td_mdc_CitizenBox, 1);
	TextDrawBoxColor(td_mdc_CitizenBox, 125);
	TextDrawTextSize(td_mdc_CitizenBox, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_CitizenBox, 0);

	td_mdc_DataBox = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_DataBox, 255);
	TextDrawFont(td_mdc_DataBox, 1);
	TextDrawLetterSize(td_mdc_DataBox, 0.000000, 5.199998);
	TextDrawColor(td_mdc_DataBox, -1);
	TextDrawSetOutline(td_mdc_DataBox, 0);
	TextDrawSetProportional(td_mdc_DataBox, 1);
	TextDrawSetShadow(td_mdc_DataBox, 1);
	TextDrawUseBox(td_mdc_DataBox, 1);
	TextDrawBoxColor(td_mdc_DataBox, 125);
	TextDrawTextSize(td_mdc_DataBox, 255.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_DataBox, 0);

	td_mdc_OptionsBox = TextDrawCreate(432.000000, 329.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_OptionsBox, 255);
	TextDrawFont(td_mdc_OptionsBox, 1);
	TextDrawLetterSize(td_mdc_OptionsBox, 0.000000, 2.699999);
	TextDrawColor(td_mdc_OptionsBox, -1);
	TextDrawSetOutline(td_mdc_OptionsBox, 0);
	TextDrawSetProportional(td_mdc_OptionsBox, 1);
	TextDrawSetShadow(td_mdc_OptionsBox, 1);
	TextDrawUseBox(td_mdc_OptionsBox, 1);
	TextDrawBoxColor(td_mdc_OptionsBox, 125);
	TextDrawTextSize(td_mdc_OptionsBox, 208.000000, -70.000000);
	TextDrawSetSelectable(td_mdc_OptionsBox, 0);

	for(new i = 0; i < sizeof(td_mdc_cr_Box); i++) {
		td_mdc_cr_Box[i] = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
		TextDrawBackgroundColor(td_mdc_cr_Box[i], 255);
		TextDrawFont(td_mdc_cr_Box[i], 1);
		TextDrawLetterSize(td_mdc_cr_Box[i], 0.000000, 5.4999 + i * 0.8167);
		TextDrawColor(td_mdc_cr_Box[i], -1);
		TextDrawSetOutline(td_mdc_cr_Box[i], 0);
		TextDrawSetProportional(td_mdc_cr_Box[i], 1);
		TextDrawSetShadow(td_mdc_cr_Box[i], 1);
		TextDrawUseBox(td_mdc_cr_Box[i], 1);
		TextDrawBoxColor(td_mdc_cr_Box[i], 125);
		TextDrawTextSize(td_mdc_cr_Box[i], 198.000000, 0.000000);
		TextDrawSetSelectable(td_mdc_cr_Box[i], 0);
	}

    for(new i = 0; i < sizeof(td_mdc_cr_InnerBox); i++) {
		td_mdc_cr_InnerBox[i] = TextDrawCreate(432.000000, 228.000000, "New Textdraw");
		TextDrawBackgroundColor(td_mdc_cr_InnerBox[i], 255);
		TextDrawFont(td_mdc_cr_InnerBox[i], 1);
		TextDrawLetterSize(td_mdc_cr_InnerBox[i], 0.000000, 2.0999 + i * 0.8167);
		TextDrawColor(td_mdc_cr_InnerBox[i], -1);
		TextDrawSetOutline(td_mdc_cr_InnerBox[i], 0);
		TextDrawSetProportional(td_mdc_cr_InnerBox[i], 1);
		TextDrawSetShadow(td_mdc_cr_InnerBox[i], 1);
		TextDrawUseBox(td_mdc_cr_InnerBox[i], 1);
		TextDrawBoxColor(td_mdc_cr_InnerBox[i], 100);
		TextDrawTextSize(td_mdc_cr_InnerBox[i], 208.000000, 0.000000);
		TextDrawSetSelectable(td_mdc_cr_InnerBox[i], 1);
	}

	td_mdc_veh_Box = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_Box, 255);
	TextDrawFont(td_mdc_veh_Box, 1);
	TextDrawLetterSize(td_mdc_veh_Box, 0.000000, 6.299985);
	TextDrawColor(td_mdc_veh_Box, -1);
	TextDrawSetOutline(td_mdc_veh_Box, 0);
	TextDrawSetProportional(td_mdc_veh_Box, 1);
	TextDrawSetShadow(td_mdc_veh_Box, 1);
	TextDrawUseBox(td_mdc_veh_Box, 1);
	TextDrawBoxColor(td_mdc_veh_Box, 125);
	TextDrawTextSize(td_mdc_veh_Box, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_veh_Box, 0);

	td_mdc_veh_InnerBox = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_InnerBox, 255);
	TextDrawFont(td_mdc_veh_InnerBox, 1);
	TextDrawLetterSize(td_mdc_veh_InnerBox, 0.000000, 3.199998);
	TextDrawColor(td_mdc_veh_InnerBox, -1);
	TextDrawSetOutline(td_mdc_veh_InnerBox, 0);
	TextDrawSetProportional(td_mdc_veh_InnerBox, 1);
	TextDrawSetShadow(td_mdc_veh_InnerBox, 1);
	TextDrawUseBox(td_mdc_veh_InnerBox, 1);
	TextDrawBoxColor(td_mdc_veh_InnerBox, 100);
	TextDrawTextSize(td_mdc_veh_InnerBox, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_veh_InnerBox, 1);

	td_mdc_veh_BoxNoEnt = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_BoxNoEnt, 255);
	TextDrawFont(td_mdc_veh_BoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_veh_BoxNoEnt, 0.000000, 4.199985);
	TextDrawColor(td_mdc_veh_BoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_veh_BoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_veh_BoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_veh_BoxNoEnt, 1);
	TextDrawUseBox(td_mdc_veh_BoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_veh_BoxNoEnt, 125);
	TextDrawTextSize(td_mdc_veh_BoxNoEnt, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_veh_BoxNoEnt, 0);

	td_mdc_veh_InnerBoxNoEnt = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_InnerBoxNoEnt, 255);
	TextDrawFont(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_veh_InnerBoxNoEnt, 0.000000, 1.199998);
	TextDrawColor(td_mdc_veh_InnerBoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_veh_InnerBoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawUseBox(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_veh_InnerBoxNoEnt, 100);
	TextDrawTextSize(td_mdc_veh_InnerBoxNoEnt, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_veh_InnerBoxNoEnt, 1);

	td_mdc_veh_TextNoEnt = TextDrawCreate(267.000000, 228.000000, "No entries could be found.");
	TextDrawBackgroundColor(td_mdc_veh_TextNoEnt, 255);
	TextDrawFont(td_mdc_veh_TextNoEnt, 2);
	TextDrawLetterSize(td_mdc_veh_TextNoEnt, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_TextNoEnt, -1);
	TextDrawSetOutline(td_mdc_veh_TextNoEnt, 0);
	TextDrawSetProportional(td_mdc_veh_TextNoEnt, 1);
	TextDrawSetShadow(td_mdc_veh_TextNoEnt, 1);
	TextDrawSetSelectable(td_mdc_veh_TextNoEnt, 0);

	td_mdc_veh_Model = TextDrawCreate(329.000000, 228.000000, "~b~~h~~h~~h~Model Name:");
	TextDrawAlignment(td_mdc_veh_Model, 3);
	TextDrawBackgroundColor(td_mdc_veh_Model, 255);
	TextDrawFont(td_mdc_veh_Model, 2);
	TextDrawLetterSize(td_mdc_veh_Model, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Model, -524057345);
	TextDrawSetOutline(td_mdc_veh_Model, 0);
	TextDrawSetProportional(td_mdc_veh_Model, 1);
	TextDrawSetShadow(td_mdc_veh_Model, 1);
	TextDrawSetSelectable(td_mdc_veh_Model, 0);

	td_mdc_veh_Owner = TextDrawCreate(329.000000, 240.000000, "~b~~h~~h~~h~Owner:");
	TextDrawAlignment(td_mdc_veh_Owner, 3);
	TextDrawBackgroundColor(td_mdc_veh_Owner, 255);
	TextDrawFont(td_mdc_veh_Owner, 2);
	TextDrawLetterSize(td_mdc_veh_Owner, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Owner, -524057345);
	TextDrawSetOutline(td_mdc_veh_Owner, 0);
	TextDrawSetProportional(td_mdc_veh_Owner, 1);
	TextDrawSetShadow(td_mdc_veh_Owner, 1);
	TextDrawSetSelectable(td_mdc_veh_Owner, 0);

	td_mdc_veh_Plate = TextDrawCreate(329.000000, 252.000000, "~b~~h~~h~~h~License Plate:");
	TextDrawAlignment(td_mdc_veh_Plate, 3);
	TextDrawBackgroundColor(td_mdc_veh_Plate, 255);
	TextDrawFont(td_mdc_veh_Plate, 2);
	TextDrawLetterSize(td_mdc_veh_Plate, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Plate, -524057345);
	TextDrawSetOutline(td_mdc_veh_Plate, 0);
	TextDrawSetProportional(td_mdc_veh_Plate, 1);
	TextDrawSetShadow(td_mdc_veh_Plate, 1);
	TextDrawSetSelectable(td_mdc_veh_Plate, 0);

	td_mdc_veh_Insurance = TextDrawCreate(329.000000, 264.000000, "~b~~h~~h~~h~Insurance:");
	TextDrawAlignment(td_mdc_veh_Insurance, 3);
	TextDrawBackgroundColor(td_mdc_veh_Insurance, 255);
	TextDrawFont(td_mdc_veh_Insurance, 2);
	TextDrawLetterSize(td_mdc_veh_Insurance, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Insurance, -524057345);
	TextDrawSetOutline(td_mdc_veh_Insurance, 0);
	TextDrawSetProportional(td_mdc_veh_Insurance, 1);
	TextDrawSetShadow(td_mdc_veh_Insurance, 1);
	TextDrawSetSelectable(td_mdc_veh_Insurance, 0);

	td_mdc_veh_ArrowRight = TextDrawCreate(425.000000, 276.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(td_mdc_veh_ArrowRight, 255);
	TextDrawFont(td_mdc_veh_ArrowRight, 4);
	TextDrawLetterSize(td_mdc_veh_ArrowRight, 0.500000, 1.000000);
	TextDrawColor(td_mdc_veh_ArrowRight, -1);
	TextDrawSetOutline(td_mdc_veh_ArrowRight, 0);
	TextDrawSetProportional(td_mdc_veh_ArrowRight, 1);
	TextDrawSetShadow(td_mdc_veh_ArrowRight, 1);
	TextDrawUseBox(td_mdc_veh_ArrowRight, 1);
	TextDrawBoxColor(td_mdc_veh_ArrowRight, 255);
	TextDrawTextSize(td_mdc_veh_ArrowRight, 10.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_veh_ArrowRight, 1);

	td_mdc_veh_Next = TextDrawCreate(404.000000, 276.000000, "~b~~h~~h~~h~Next");
	TextDrawBackgroundColor(td_mdc_veh_Next, 255);
	TextDrawFont(td_mdc_veh_Next, 2);
	TextDrawLetterSize(td_mdc_veh_Next, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Next, -1);
	TextDrawSetOutline(td_mdc_veh_Next, 0);
	TextDrawSetProportional(td_mdc_veh_Next, 1);
	TextDrawSetShadow(td_mdc_veh_Next, 1);
	TextDrawTextSize(td_mdc_veh_Next, 423.000000, 152.000000);
	TextDrawSetSelectable(td_mdc_veh_Next, 1);

	td_mdc_veh_Label = TextDrawCreate(254.000000, 217.000000, "~b~Vehicles");
	TextDrawBackgroundColor(td_mdc_veh_Label, 255);
	TextDrawFont(td_mdc_veh_Label, 2);
	TextDrawLetterSize(td_mdc_veh_Label, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Label, -1384438529);
	TextDrawSetOutline(td_mdc_veh_Label, 0);
	TextDrawSetProportional(td_mdc_veh_Label, 1);
	TextDrawSetShadow(td_mdc_veh_Label, 1);
	TextDrawSetPreviewModel(td_mdc_veh_Label, 480);
	TextDrawSetPreviewRot(td_mdc_veh_Label, -16.000000, 0.000000, -55.000000, 1.000000);
	TextDrawSetSelectable(td_mdc_veh_Label, 0);

	//------------------------------------------
	td_mdc_prop_Box = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_prop_Box, 255);
	TextDrawFont(td_mdc_prop_Box, 1);
	TextDrawLetterSize(td_mdc_prop_Box, 0.000000, 6.299985);
	TextDrawColor(td_mdc_prop_Box, -1);
	TextDrawSetOutline(td_mdc_prop_Box, 0);
	TextDrawSetProportional(td_mdc_prop_Box, 1);
	TextDrawSetShadow(td_mdc_prop_Box, 1);
	TextDrawUseBox(td_mdc_prop_Box, 1);
	TextDrawBoxColor(td_mdc_prop_Box, 125);
	TextDrawTextSize(td_mdc_prop_Box, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_prop_Box, 0);

	td_mdc_prop_InnerBox = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_prop_InnerBox, 255);
	TextDrawFont(td_mdc_prop_InnerBox, 1);
	TextDrawLetterSize(td_mdc_prop_InnerBox, 0.000000, 3.199998);
	TextDrawColor(td_mdc_prop_InnerBox, -1);
	TextDrawSetOutline(td_mdc_prop_InnerBox, 0);
	TextDrawSetProportional(td_mdc_prop_InnerBox, 1);
	TextDrawSetShadow(td_mdc_prop_InnerBox, 1);
	TextDrawUseBox(td_mdc_prop_InnerBox, 1);
	TextDrawBoxColor(td_mdc_prop_InnerBox, 100);
	TextDrawTextSize(td_mdc_prop_InnerBox, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_prop_InnerBox, 1);

	td_mdc_prop_BoxNoEnt = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_prop_BoxNoEnt, 255);
	TextDrawFont(td_mdc_prop_BoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_prop_BoxNoEnt, 0.000000, 4.199985);
	TextDrawColor(td_mdc_prop_BoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_prop_BoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_prop_BoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_prop_BoxNoEnt, 1);
	TextDrawUseBox(td_mdc_prop_BoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_prop_BoxNoEnt, 125);
	TextDrawTextSize(td_mdc_prop_BoxNoEnt, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_prop_BoxNoEnt, 0);

	td_mdc_prop_InnerBoxNoEnt = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_prop_InnerBoxNoEnt, 255);
	TextDrawFont(td_mdc_prop_InnerBoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_prop_InnerBoxNoEnt, 0.000000, 1.199998);
	TextDrawColor(td_mdc_prop_InnerBoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_prop_InnerBoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_prop_InnerBoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_prop_InnerBoxNoEnt, 1);
	TextDrawUseBox(td_mdc_prop_InnerBoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_prop_InnerBoxNoEnt, 100);
	TextDrawTextSize(td_mdc_prop_InnerBoxNoEnt, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_prop_InnerBoxNoEnt, 1);

	td_mdc_prop_TextNoEnt = TextDrawCreate(267.000000, 228.000000, "No entries could be found.");
	TextDrawBackgroundColor(td_mdc_prop_TextNoEnt, 255);
	TextDrawFont(td_mdc_prop_TextNoEnt, 2);
	TextDrawLetterSize(td_mdc_prop_TextNoEnt, 0.170000, 1.000000);
	TextDrawColor(td_mdc_prop_TextNoEnt, -1);
	TextDrawSetOutline(td_mdc_prop_TextNoEnt, 0);
	TextDrawSetProportional(td_mdc_prop_TextNoEnt, 1);
	TextDrawSetShadow(td_mdc_prop_TextNoEnt, 1);
	TextDrawSetSelectable(td_mdc_prop_TextNoEnt, 0);

	td_mdc_prop_ID = TextDrawCreate(329.000000, 228.000000, "~b~~h~~h~~h~House ID:");
	TextDrawAlignment(td_mdc_prop_ID, 3);
	TextDrawBackgroundColor(td_mdc_prop_ID, 255);
	TextDrawFont(td_mdc_prop_ID, 2);
	TextDrawLetterSize(td_mdc_prop_ID, 0.170000, 1.000000);
	TextDrawColor(td_mdc_prop_ID, -524057345);
	TextDrawSetOutline(td_mdc_prop_ID, 0);
	TextDrawSetProportional(td_mdc_prop_ID, 1);
	TextDrawSetShadow(td_mdc_prop_ID, 1);
	TextDrawSetSelectable(td_mdc_prop_ID, 0);

	td_mdc_prop_Owner = TextDrawCreate(329.000000, 240.000000, "~b~~h~~h~~h~Owner:");
	TextDrawAlignment(td_mdc_prop_Owner, 3);
	TextDrawBackgroundColor(td_mdc_prop_Owner, 255);
	TextDrawFont(td_mdc_prop_Owner, 2);
	TextDrawLetterSize(td_mdc_prop_Owner, 0.170000, 1.000000);
	TextDrawColor(td_mdc_prop_Owner, -524057345);
	TextDrawSetOutline(td_mdc_prop_Owner, 0);
	TextDrawSetProportional(td_mdc_prop_Owner, 1);
	TextDrawSetShadow(td_mdc_prop_Owner, 1);
	TextDrawSetSelectable(td_mdc_prop_Owner, 0);

	td_mdc_prop_Price = TextDrawCreate(329.000000, 252.000000, "~b~~h~~h~~h~Price:");
	TextDrawAlignment(td_mdc_prop_Price, 3);
	TextDrawBackgroundColor(td_mdc_prop_Price, 255);
	TextDrawFont(td_mdc_prop_Price, 2);
	TextDrawLetterSize(td_mdc_prop_Price, 0.170000, 1.000000);
	TextDrawColor(td_mdc_prop_Price, -524057345);
	TextDrawSetOutline(td_mdc_prop_Price, 0);
	TextDrawSetProportional(td_mdc_prop_Price, 1);
	TextDrawSetShadow(td_mdc_prop_Price, 1);
	TextDrawSetSelectable(td_mdc_prop_Price, 0);

	td_mdc_prop_Location = TextDrawCreate(329.000000, 264.000000, "~b~~h~~h~~h~Location:");
	TextDrawAlignment(td_mdc_prop_Location, 3);
	TextDrawBackgroundColor(td_mdc_prop_Location, 255);
	TextDrawFont(td_mdc_prop_Location, 2);
	TextDrawLetterSize(td_mdc_prop_Location, 0.170000, 1.000000);
	TextDrawColor(td_mdc_prop_Location, -524057345);
	TextDrawSetOutline(td_mdc_prop_Location, 0);
	TextDrawSetProportional(td_mdc_prop_Location, 1);
	TextDrawSetShadow(td_mdc_prop_Location, 1);
	TextDrawSetSelectable(td_mdc_prop_Location, 0);

	td_mdc_prop_Label = TextDrawCreate(254.000000, 217.000000, "~b~Property");
	TextDrawBackgroundColor(td_mdc_prop_Label, 255);
	TextDrawFont(td_mdc_prop_Label, 2);
	TextDrawLetterSize(td_mdc_prop_Label, 0.170000, 1.000000);
	TextDrawColor(td_mdc_prop_Label, -1384438529);
	TextDrawSetOutline(td_mdc_prop_Label, 0);
	TextDrawSetProportional(td_mdc_prop_Label, 1);
	TextDrawSetShadow(td_mdc_prop_Label, 1);
	TextDrawSetSelectable(td_mdc_prop_Label, 0);
	//------------------------------------------
	td_mdc_biz_Box = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_biz_Box, 255);
	TextDrawFont(td_mdc_biz_Box, 1);
	TextDrawLetterSize(td_mdc_biz_Box, 0.000000, 6.299985);
	TextDrawColor(td_mdc_biz_Box, -1);
	TextDrawSetOutline(td_mdc_biz_Box, 0);
	TextDrawSetProportional(td_mdc_biz_Box, 1);
	TextDrawSetShadow(td_mdc_biz_Box, 1);
	TextDrawUseBox(td_mdc_biz_Box, 1);
	TextDrawBoxColor(td_mdc_biz_Box, 125);
	TextDrawTextSize(td_mdc_biz_Box, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_biz_Box, 0);

	td_mdc_biz_InnerBox = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_biz_InnerBox, 255);
	TextDrawFont(td_mdc_biz_InnerBox, 1);
	TextDrawLetterSize(td_mdc_biz_InnerBox, 0.000000, 3.199998);
	TextDrawColor(td_mdc_biz_InnerBox, -1);
	TextDrawSetOutline(td_mdc_biz_InnerBox, 0);
	TextDrawSetProportional(td_mdc_biz_InnerBox, 1);
	TextDrawSetShadow(td_mdc_biz_InnerBox, 1);
	TextDrawUseBox(td_mdc_biz_InnerBox, 1);
	TextDrawBoxColor(td_mdc_biz_InnerBox, 100);
	TextDrawTextSize(td_mdc_biz_InnerBox, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_biz_InnerBox, 1);

	td_mdc_biz_BoxNoEnt = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_biz_BoxNoEnt, 255);
	TextDrawFont(td_mdc_biz_BoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_biz_BoxNoEnt, 0.000000, 4.199985);
	TextDrawColor(td_mdc_biz_BoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_biz_BoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_biz_BoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_biz_BoxNoEnt, 1);
	TextDrawUseBox(td_mdc_biz_BoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_biz_BoxNoEnt, 125);
	TextDrawTextSize(td_mdc_biz_BoxNoEnt, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_biz_BoxNoEnt, 0);

	td_mdc_biz_InnerBoxNoEnt = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_biz_InnerBoxNoEnt, 255);
	TextDrawFont(td_mdc_biz_InnerBoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_biz_InnerBoxNoEnt, 0.000000, 1.199998);
	TextDrawColor(td_mdc_biz_InnerBoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_biz_InnerBoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_biz_InnerBoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_biz_InnerBoxNoEnt, 1);
	TextDrawUseBox(td_mdc_biz_InnerBoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_biz_InnerBoxNoEnt, 100);
	TextDrawTextSize(td_mdc_biz_InnerBoxNoEnt, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_biz_InnerBoxNoEnt, 1);

	td_mdc_biz_TextNoEnt = TextDrawCreate(267.000000, 228.000000, "No entries could be found.");
	TextDrawBackgroundColor(td_mdc_biz_TextNoEnt, 255);
	TextDrawFont(td_mdc_biz_TextNoEnt, 2);
	TextDrawLetterSize(td_mdc_biz_TextNoEnt, 0.170000, 1.000000);
	TextDrawColor(td_mdc_biz_TextNoEnt, -1);
	TextDrawSetOutline(td_mdc_biz_TextNoEnt, 0);
	TextDrawSetProportional(td_mdc_biz_TextNoEnt, 1);
	TextDrawSetShadow(td_mdc_biz_TextNoEnt, 1);
	TextDrawSetSelectable(td_mdc_biz_TextNoEnt, 0);

	td_mdc_biz_ID = TextDrawCreate(329.000000, 228.000000, "~b~~h~~h~~h~Business ID:");
	TextDrawAlignment(td_mdc_biz_ID, 3);
	TextDrawBackgroundColor(td_mdc_biz_ID, 255);
	TextDrawFont(td_mdc_biz_ID, 2);
	TextDrawLetterSize(td_mdc_biz_ID, 0.170000, 1.000000);
	TextDrawColor(td_mdc_biz_ID, -524057345);
	TextDrawSetOutline(td_mdc_biz_ID, 0);
	TextDrawSetProportional(td_mdc_biz_ID, 1);
	TextDrawSetShadow(td_mdc_biz_ID, 1);
	TextDrawSetSelectable(td_mdc_biz_ID, 0);

	td_mdc_biz_Owner = TextDrawCreate(329.000000, 240.000000, "~b~~h~~h~~h~Owner:");
	TextDrawAlignment(td_mdc_biz_Owner, 3);
	TextDrawBackgroundColor(td_mdc_biz_Owner, 255);
	TextDrawFont(td_mdc_biz_Owner, 2);
	TextDrawLetterSize(td_mdc_biz_Owner, 0.170000, 1.000000);
	TextDrawColor(td_mdc_biz_Owner, -524057345);
	TextDrawSetOutline(td_mdc_biz_Owner, 0);
	TextDrawSetProportional(td_mdc_biz_Owner, 1);
	TextDrawSetShadow(td_mdc_biz_Owner, 1);
	TextDrawSetSelectable(td_mdc_biz_Owner, 0);

	td_mdc_biz_Price = TextDrawCreate(329.000000, 252.000000, "~b~~h~~h~~h~Price:");
	TextDrawAlignment(td_mdc_biz_Price, 3);
	TextDrawBackgroundColor(td_mdc_biz_Price, 255);
	TextDrawFont(td_mdc_biz_Price, 2);
	TextDrawLetterSize(td_mdc_biz_Price, 0.170000, 1.000000);
	TextDrawColor(td_mdc_biz_Price, -524057345);
	TextDrawSetOutline(td_mdc_biz_Price, 0);
	TextDrawSetProportional(td_mdc_biz_Price, 1);
	TextDrawSetShadow(td_mdc_biz_Price, 1);
	TextDrawSetSelectable(td_mdc_biz_Price, 0);

	td_mdc_biz_Location = TextDrawCreate(329.000000, 264.000000, "~b~~h~~h~~h~Location:");
	TextDrawAlignment(td_mdc_biz_Location, 3);
	TextDrawBackgroundColor(td_mdc_biz_Location, 255);
	TextDrawFont(td_mdc_biz_Location, 2);
	TextDrawLetterSize(td_mdc_biz_Location, 0.170000, 1.000000);
	TextDrawColor(td_mdc_biz_Location, -524057345);
	TextDrawSetOutline(td_mdc_biz_Location, 0);
	TextDrawSetProportional(td_mdc_biz_Location, 1);
	TextDrawSetShadow(td_mdc_biz_Location, 1);
	TextDrawSetSelectable(td_mdc_biz_Location, 0);

	td_mdc_biz_Label = TextDrawCreate(254.000000, 217.000000, "~b~Business");
	TextDrawBackgroundColor(td_mdc_biz_Label, 255);
	TextDrawFont(td_mdc_biz_Label, 2);
	TextDrawLetterSize(td_mdc_biz_Label, 0.170000, 1.000000);
	TextDrawColor(td_mdc_biz_Label, -1384438529);
	TextDrawSetOutline(td_mdc_biz_Label, 0);
	TextDrawSetProportional(td_mdc_biz_Label, 1);
	TextDrawSetShadow(td_mdc_biz_Label, 1);
	TextDrawSetSelectable(td_mdc_biz_Label, 0);

	td_mdc_HeaderText = TextDrawCreate(209.000000, 189.000000, "~b~~h~Mobile Data Computer");
	TextDrawBackgroundColor(td_mdc_HeaderText, 255);
	TextDrawFont(td_mdc_HeaderText, 2);
	TextDrawLetterSize(td_mdc_HeaderText, 0.219999, 1.200000);
	TextDrawColor(td_mdc_HeaderText, -1384438529);
	TextDrawSetOutline(td_mdc_HeaderText, 0);
	TextDrawSetProportional(td_mdc_HeaderText, 1);
	TextDrawSetShadow(td_mdc_HeaderText, 1);
	TextDrawSetSelectable(td_mdc_HeaderText, 0);

	td_mdc_Exit = TextDrawCreate(420.000000, 189.000000, "LD_BEAT:cross");
	TextDrawBackgroundColor(td_mdc_Exit, 255);
	TextDrawFont(td_mdc_Exit, 4);
	TextDrawLetterSize(td_mdc_Exit, 0.500000, 1.000000);
	TextDrawColor(td_mdc_Exit, -1);
	TextDrawSetOutline(td_mdc_Exit, 0);
	TextDrawSetProportional(td_mdc_Exit, 1);
	TextDrawSetShadow(td_mdc_Exit, 1);
	TextDrawUseBox(td_mdc_Exit, 1);
	TextDrawBoxColor(td_mdc_Exit, 255);
	TextDrawTextSize(td_mdc_Exit, 10.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_Exit, 1);

	td_mdc_Section[0] = TextDrawCreate(316.000000, 228.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[0], 255);
	TextDrawFont(td_mdc_Section[0], 1);
	TextDrawLetterSize(td_mdc_Section[0], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[0], -1);
	TextDrawSetOutline(td_mdc_Section[0], 0);
	TextDrawSetProportional(td_mdc_Section[0], 1);
	TextDrawSetShadow(td_mdc_Section[0], 1);
	TextDrawUseBox(td_mdc_Section[0], 1);
	TextDrawBoxColor(td_mdc_Section[0], 100);
	TextDrawTextSize(td_mdc_Section[0], 208.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[0], 0);

	td_mdc_Section[1] = TextDrawCreate(316.000000, 257.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[1], 255);
	TextDrawFont(td_mdc_Section[1], 1);
	TextDrawLetterSize(td_mdc_Section[1], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[1], -1);
	TextDrawSetOutline(td_mdc_Section[1], 0);
	TextDrawSetProportional(td_mdc_Section[1], 1);
	TextDrawSetShadow(td_mdc_Section[1], 1);
	TextDrawUseBox(td_mdc_Section[1], 1);
	TextDrawBoxColor(td_mdc_Section[1], 100);
	TextDrawTextSize(td_mdc_Section[1], 208.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[1], 0);

	td_mdc_Section[2] = TextDrawCreate(432.000000, 257.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[2], 255);
	TextDrawFont(td_mdc_Section[2], 1);
	TextDrawLetterSize(td_mdc_Section[2], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[2], -1);
	TextDrawSetOutline(td_mdc_Section[2], 0);
	TextDrawSetProportional(td_mdc_Section[2], 1);
	TextDrawSetShadow(td_mdc_Section[2], 1);
	TextDrawUseBox(td_mdc_Section[2], 1);
	TextDrawBoxColor(td_mdc_Section[2], 100);
	TextDrawTextSize(td_mdc_Section[2], 323.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[2], 0);

	td_mdc_Section[3] = TextDrawCreate(432.000000, 228.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[3], 255);
	TextDrawFont(td_mdc_Section[3], 1);
	TextDrawLetterSize(td_mdc_Section[3], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[3], -1);
	TextDrawSetOutline(td_mdc_Section[3], 0);
	TextDrawSetProportional(td_mdc_Section[3], 1);
	TextDrawSetShadow(td_mdc_Section[3], 1);
	TextDrawUseBox(td_mdc_Section[3], 1);
	TextDrawBoxColor(td_mdc_Section[3], 100);
	TextDrawTextSize(td_mdc_Section[3], 323.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[3], 0);

	td_mdc_SectionText[0] = TextDrawCreate(262.000000, 234.000000, "~b~~h~~h~~h~Search Citizen");
	TextDrawAlignment(td_mdc_SectionText[0], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[0], 255);
	TextDrawFont(td_mdc_SectionText[0], 2);
	TextDrawLetterSize(td_mdc_SectionText[0], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[0], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[0], 0);
	TextDrawSetProportional(td_mdc_SectionText[0], 1);
	TextDrawSetShadow(td_mdc_SectionText[0], 1);
	TextDrawTextSize(td_mdc_SectionText[0], 15.000000, 102.000000);
	TextDrawSetSelectable(td_mdc_SectionText[0], 1);

	td_mdc_SectionText[1] = TextDrawCreate(262.000000, 263.000000, "~b~~h~~h~~h~Search Weapon Serial");
	TextDrawAlignment(td_mdc_SectionText[1], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[1], 255);
	TextDrawFont(td_mdc_SectionText[1], 2);
	TextDrawLetterSize(td_mdc_SectionText[1], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[1], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[1], 0);
	TextDrawSetProportional(td_mdc_SectionText[1], 1);
	TextDrawSetShadow(td_mdc_SectionText[1], 1);
	TextDrawTextSize(td_mdc_SectionText[1], 15.000000, 102.000000);
	TextDrawSetSelectable(td_mdc_SectionText[1], 1);

	td_mdc_SectionText[2] = TextDrawCreate(378.000000, 263.000000, "~b~~h~~h~~h~Search Phone Number");
	TextDrawAlignment(td_mdc_SectionText[2], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[2], 255);
	TextDrawFont(td_mdc_SectionText[2], 2);
	TextDrawLetterSize(td_mdc_SectionText[2], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[2], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[2], 0);
	TextDrawSetProportional(td_mdc_SectionText[2], 1);
	TextDrawSetShadow(td_mdc_SectionText[2], 1);
	TextDrawTextSize(td_mdc_SectionText[2], 15.000000, 102.000000);
	TextDrawSetSelectable(td_mdc_SectionText[2], 1);

	td_mdc_SectionText[3] = TextDrawCreate(378.000000, 234.000000, "~b~~h~~h~~h~Search License Plate");
	TextDrawAlignment(td_mdc_SectionText[3], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[3], 255);
	TextDrawFont(td_mdc_SectionText[3], 2);
	TextDrawLetterSize(td_mdc_SectionText[3], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[3], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[3], 0);
	TextDrawSetProportional(td_mdc_SectionText[3], 1);
	TextDrawSetShadow(td_mdc_SectionText[3], 1);
	TextDrawTextSize(td_mdc_SectionText[3], 15.000000, 103.000000);
	TextDrawSetSelectable(td_mdc_SectionText[3], 1);

	td_mdc_SectionHeaderText = TextDrawCreate(207.000000, 220.000000, "~b~Sections");
	TextDrawBackgroundColor(td_mdc_SectionHeaderText, 255);
	TextDrawFont(td_mdc_SectionHeaderText, 2);
	TextDrawLetterSize(td_mdc_SectionHeaderText, 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionHeaderText, -1384438529);
	TextDrawSetOutline(td_mdc_SectionHeaderText, 0);
	TextDrawSetProportional(td_mdc_SectionHeaderText, 1);
	TextDrawSetShadow(td_mdc_SectionHeaderText, 1);
	TextDrawSetSelectable(td_mdc_SectionHeaderText, 0);

	td_mdc_Gender = TextDrawCreate(329.000000, 252.000000, "~b~~h~~h~~h~Gender:");
	TextDrawAlignment(td_mdc_Gender, 3);
	TextDrawBackgroundColor(td_mdc_Gender, 255);
	TextDrawFont(td_mdc_Gender, 2);
	TextDrawLetterSize(td_mdc_Gender, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Gender, -524057345);
	TextDrawSetOutline(td_mdc_Gender, 0);
	TextDrawSetProportional(td_mdc_Gender, 1);
	TextDrawSetShadow(td_mdc_Gender, 1);
	TextDrawSetSelectable(td_mdc_Gender, 0);

	td_mdc_Job = TextDrawCreate(329.000000, 264.000000, "~b~~h~~h~~h~Occupation:");
	TextDrawAlignment(td_mdc_Job, 3);
	TextDrawBackgroundColor(td_mdc_Job, 255);
	TextDrawFont(td_mdc_Job, 2);
	TextDrawLetterSize(td_mdc_Job, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Job, -524057345);
	TextDrawSetOutline(td_mdc_Job, 0);
	TextDrawSetProportional(td_mdc_Job, 1);
	TextDrawSetShadow(td_mdc_Job, 1);
	TextDrawSetSelectable(td_mdc_Job, 0);

	td_mdc_DriveLic = TextDrawCreate(329.000000, 276.000000, "~b~~h~~h~~h~Driver's License:");
	TextDrawAlignment(td_mdc_DriveLic, 3);
	TextDrawBackgroundColor(td_mdc_DriveLic, 255);
	TextDrawFont(td_mdc_DriveLic, 2);
	TextDrawLetterSize(td_mdc_DriveLic, 0.170000, 1.000000);
	TextDrawColor(td_mdc_DriveLic, -524057345);
	TextDrawSetOutline(td_mdc_DriveLic, 0);
	TextDrawSetProportional(td_mdc_DriveLic, 1);
	TextDrawSetShadow(td_mdc_DriveLic, 1);
	TextDrawSetSelectable(td_mdc_DriveLic, 0);

	td_mdc_GunLic = TextDrawCreate(329.000000, 288.000000, "~b~~h~~h~~h~Weapon License:");
	TextDrawAlignment(td_mdc_GunLic, 3);
	TextDrawBackgroundColor(td_mdc_GunLic, 255);
	TextDrawFont(td_mdc_GunLic, 2);
	TextDrawLetterSize(td_mdc_GunLic, 0.170000, 1.000000);
	TextDrawColor(td_mdc_GunLic, -524057345);
	TextDrawSetOutline(td_mdc_GunLic, 0);
	TextDrawSetProportional(td_mdc_GunLic, 1);
	TextDrawSetShadow(td_mdc_GunLic, 1);
	TextDrawSetSelectable(td_mdc_GunLic, 0);

	td_mdc_PhoneNumber = TextDrawCreate(329.000000, 300.000000, "~b~~h~~h~~h~Phone Number:");
	TextDrawAlignment(td_mdc_PhoneNumber, 3);
	TextDrawBackgroundColor(td_mdc_PhoneNumber, 255);
	TextDrawFont(td_mdc_PhoneNumber, 2);
	TextDrawLetterSize(td_mdc_PhoneNumber, 0.170000, 1.000000);
	TextDrawColor(td_mdc_PhoneNumber, -524057345);
	TextDrawSetOutline(td_mdc_PhoneNumber, 0);
	TextDrawSetProportional(td_mdc_PhoneNumber, 1);
	TextDrawSetShadow(td_mdc_PhoneNumber, 1);
	TextDrawSetSelectable(td_mdc_PhoneNumber, 0);

	td_mdc_Name = TextDrawCreate(329.000000, 228.000000, "~b~~h~~h~~h~Full Name:");
	TextDrawAlignment(td_mdc_Name, 3);
	TextDrawBackgroundColor(td_mdc_Name, 255);
	TextDrawFont(td_mdc_Name, 2);
	TextDrawLetterSize(td_mdc_Name, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Name, -524057345);
	TextDrawSetOutline(td_mdc_Name, 0);
	TextDrawSetProportional(td_mdc_Name, 1);
	TextDrawSetShadow(td_mdc_Name, 1);
	TextDrawSetSelectable(td_mdc_Name, 0);

	td_mdc_PropertyArrow = TextDrawCreate(411.000000, 357.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(td_mdc_PropertyArrow, 255);
	TextDrawFont(td_mdc_PropertyArrow, 4);
	TextDrawLetterSize(td_mdc_PropertyArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_PropertyArrow, -1);
	TextDrawSetOutline(td_mdc_PropertyArrow, 0);
	TextDrawSetProportional(td_mdc_PropertyArrow, 1);
	TextDrawSetShadow(td_mdc_PropertyArrow, 1);
	TextDrawUseBox(td_mdc_PropertyArrow, 1);
	TextDrawBoxColor(td_mdc_PropertyArrow, 255);
	TextDrawTextSize(td_mdc_PropertyArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_PropertyArrow, 1);

	td_mdc_VehiclesArrow = TextDrawCreate(411.000000, 337.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(td_mdc_VehiclesArrow, 255);
	TextDrawFont(td_mdc_VehiclesArrow, 4);
	TextDrawLetterSize(td_mdc_VehiclesArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_VehiclesArrow, -1);
	TextDrawSetOutline(td_mdc_VehiclesArrow, 0);
	TextDrawSetProportional(td_mdc_VehiclesArrow, 1);
	TextDrawSetShadow(td_mdc_VehiclesArrow, 1);
	TextDrawUseBox(td_mdc_VehiclesArrow, 1);
	TextDrawBoxColor(td_mdc_VehiclesArrow, 255);
	TextDrawTextSize(td_mdc_VehiclesArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_VehiclesArrow, 1);

	td_mdc_Vehicles = TextDrawCreate(372.000000, 338.000000, "~b~~h~~h~~h~Vehicles");
	TextDrawBackgroundColor(td_mdc_Vehicles, 255);
	TextDrawFont(td_mdc_Vehicles, 2);
	TextDrawLetterSize(td_mdc_Vehicles, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Vehicles, -524057345);
	TextDrawSetOutline(td_mdc_Vehicles, 0);
	TextDrawSetProportional(td_mdc_Vehicles, 1);
	TextDrawSetShadow(td_mdc_Vehicles, 1);
	TextDrawTextSize(td_mdc_Vehicles, 410.0, 20.0);
	TextDrawSetSelectable(td_mdc_Vehicles, 1);

	td_mdc_Property = TextDrawCreate(372.000000, 358.000000, "~b~~h~~h~~h~Property");
	TextDrawBackgroundColor(td_mdc_Property, 255);
	TextDrawFont(td_mdc_Property, 2);
	TextDrawLetterSize(td_mdc_Property, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Property, -524057345);
	TextDrawSetOutline(td_mdc_Property, 0);
	TextDrawSetProportional(td_mdc_Property, 1);
	TextDrawSetShadow(td_mdc_Property, 1);
	TextDrawTextSize(td_mdc_Property, 410.0, 20.0);
	TextDrawSetSelectable(td_mdc_Property, 1);

	td_mdc_Age = TextDrawCreate(329.000000, 240.000000, "~b~~h~~h~~h~Age:");
	TextDrawAlignment(td_mdc_Age, 3);
	TextDrawBackgroundColor(td_mdc_Age, 255);
	TextDrawFont(td_mdc_Age, 2);
	TextDrawLetterSize(td_mdc_Age, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Age, -524057345);
	TextDrawSetOutline(td_mdc_Age, 0);
	TextDrawSetProportional(td_mdc_Age, 1);
	TextDrawSetShadow(td_mdc_Age, 1);
	TextDrawSetSelectable(td_mdc_Age, 0);

	td_mdc_BusinessArrow = TextDrawCreate(219.000000, 357.000000, "LD_BEAT:left");
	TextDrawBackgroundColor(td_mdc_BusinessArrow, 255);
	TextDrawFont(td_mdc_BusinessArrow, 4);
	TextDrawLetterSize(td_mdc_BusinessArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_BusinessArrow, -1);
	TextDrawSetOutline(td_mdc_BusinessArrow, 0);
	TextDrawSetProportional(td_mdc_BusinessArrow, 1);
	TextDrawSetShadow(td_mdc_BusinessArrow, 1);
	TextDrawUseBox(td_mdc_BusinessArrow, 1);
	TextDrawBoxColor(td_mdc_BusinessArrow, 255);
	TextDrawTextSize(td_mdc_BusinessArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_BusinessArrow, 1);

	td_mdc_CriminalRecordArrow = TextDrawCreate(219.000000, 337.000000, "LD_BEAT:left");
	TextDrawBackgroundColor(td_mdc_CriminalRecordArrow, 255);
	TextDrawFont(td_mdc_CriminalRecordArrow, 4);
	TextDrawLetterSize(td_mdc_CriminalRecordArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_CriminalRecordArrow, -1);
	TextDrawSetOutline(td_mdc_CriminalRecordArrow, 0);
	TextDrawSetProportional(td_mdc_CriminalRecordArrow, 1);
	TextDrawSetShadow(td_mdc_CriminalRecordArrow, 1);
	TextDrawUseBox(td_mdc_CriminalRecordArrow, 1);
	TextDrawBoxColor(td_mdc_CriminalRecordArrow, 255);
	TextDrawTextSize(td_mdc_CriminalRecordArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_CriminalRecordArrow, 1);

	td_mdc_CriminalRecord = TextDrawCreate(233.000000, 338.000000, "~b~~h~~h~~h~Criminal Record");
	TextDrawBackgroundColor(td_mdc_CriminalRecord, 255);
	TextDrawFont(td_mdc_CriminalRecord, 2);
	TextDrawLetterSize(td_mdc_CriminalRecord, 0.170000, 1.000000);
	TextDrawColor(td_mdc_CriminalRecord, -524057345);
	TextDrawSetOutline(td_mdc_CriminalRecord, 0);
	TextDrawSetProportional(td_mdc_CriminalRecord, 1);
	TextDrawSetShadow(td_mdc_CriminalRecord, 1);
	TextDrawTextSize(td_mdc_CriminalRecord, 294.0, 20.0);
	TextDrawSetSelectable(td_mdc_CriminalRecord, 1);

	td_mdc_Business = TextDrawCreate(233.000000, 358.000000, "~b~~h~~h~~h~Business");
	TextDrawBackgroundColor(td_mdc_Business, 255);
	TextDrawFont(td_mdc_Business, 2);
	TextDrawLetterSize(td_mdc_Business, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Business, -524057345);
	TextDrawSetOutline(td_mdc_Business, 0);
	TextDrawSetProportional(td_mdc_Business, 1);
	TextDrawSetShadow(td_mdc_Business, 1);
    TextDrawTextSize(td_mdc_Business, 300.0, 20.0);
	TextDrawSetSelectable(td_mdc_Business, 1);

	td_mdc_Browse = TextDrawCreate(207.000000, 321.000000, "~b~Browse");
	TextDrawBackgroundColor(td_mdc_Browse, 255);
	TextDrawFont(td_mdc_Browse, 2);
	TextDrawLetterSize(td_mdc_Browse, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Browse, -1384438529);
	TextDrawSetOutline(td_mdc_Browse, 0);
	TextDrawSetProportional(td_mdc_Browse, 1);
	TextDrawSetShadow(td_mdc_Browse, 1);
	TextDrawSetSelectable(td_mdc_Browse, 0);

	td_mdc_cr_TypeTitle = TextDrawCreate(220.000000, 234.000000, "~b~~h~~h~~h~Type");
	TextDrawBackgroundColor(td_mdc_cr_TypeTitle, 255);
	TextDrawFont(td_mdc_cr_TypeTitle, 2);
	TextDrawLetterSize(td_mdc_cr_TypeTitle, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_TypeTitle, -524057345);
	TextDrawSetOutline(td_mdc_cr_TypeTitle, 0);
	TextDrawSetProportional(td_mdc_cr_TypeTitle, 1);
	TextDrawSetShadow(td_mdc_cr_TypeTitle, 1);
	TextDrawSetSelectable(td_mdc_cr_TypeTitle, 0);

	td_mdc_cr_DescriptionTitle = TextDrawCreate(257.000000, 234.000000, "~b~~h~~h~~h~Description");
	TextDrawBackgroundColor(td_mdc_cr_DescriptionTitle, 255);
	TextDrawFont(td_mdc_cr_DescriptionTitle, 2);
	TextDrawLetterSize(td_mdc_cr_DescriptionTitle, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_DescriptionTitle, -524057345);
	TextDrawSetOutline(td_mdc_cr_DescriptionTitle, 0);
	TextDrawSetProportional(td_mdc_cr_DescriptionTitle, 1);
	TextDrawSetShadow(td_mdc_cr_DescriptionTitle, 1);
	TextDrawSetSelectable(td_mdc_cr_DescriptionTitle, 0);

	td_mdc_cr_DateTitle = TextDrawCreate(375.000000, 234.000000, "~b~~h~~h~~h~Date");
	TextDrawAlignment(td_mdc_cr_DateTitle, 2);
	TextDrawBackgroundColor(td_mdc_cr_DateTitle, 255);
	TextDrawFont(td_mdc_cr_DateTitle, 2);
	TextDrawLetterSize(td_mdc_cr_DateTitle, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_DateTitle, -524057345);
	TextDrawSetOutline(td_mdc_cr_DateTitle, 0);
	TextDrawSetProportional(td_mdc_cr_DateTitle, 1);
	TextDrawSetShadow(td_mdc_cr_DateTitle, 1);
	TextDrawSetSelectable(td_mdc_cr_DateTitle, 0);

	for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		td_mdc_cr_Info[i] = TextDrawCreate(412.000000, 249.000000 + i * 15, "LD_CHAT:badchat");
		TextDrawBackgroundColor(td_mdc_cr_Info[i], 255);
		TextDrawFont(td_mdc_cr_Info[i], 4);
		TextDrawLetterSize(td_mdc_cr_Info[i], 0.500000, 1.000000);
		TextDrawColor(td_mdc_cr_Info[i], -1);
		TextDrawSetOutline(td_mdc_cr_Info[i], 0);
		TextDrawSetProportional(td_mdc_cr_Info[i], 1);
		TextDrawSetShadow(td_mdc_cr_Info[i], 1);
		TextDrawUseBox(td_mdc_cr_Info[i], 1);
		TextDrawBoxColor(td_mdc_cr_Info[i], 255);
		TextDrawTextSize(td_mdc_cr_Info[i], 8.000000, 9.000000);
		TextDrawSetSelectable(td_mdc_cr_Info[i], 1);
	}

	td_mdc_cr_ArrowDown = TextDrawCreate(425.000000, 351.000000, "LD_BEAT:down");
	TextDrawBackgroundColor(td_mdc_cr_ArrowDown, 255);
	TextDrawFont(td_mdc_cr_ArrowDown, 4);
	TextDrawLetterSize(td_mdc_cr_ArrowDown, 0.500000, 1.000000);
	TextDrawColor(td_mdc_cr_ArrowDown, -1);
	TextDrawSetOutline(td_mdc_cr_ArrowDown, 0);
	TextDrawSetProportional(td_mdc_cr_ArrowDown, 1);
	TextDrawSetShadow(td_mdc_cr_ArrowDown, 1);
	TextDrawUseBox(td_mdc_cr_ArrowDown, 1);
	TextDrawBoxColor(td_mdc_cr_ArrowDown, 255);
	TextDrawTextSize(td_mdc_cr_ArrowDown, 11.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_cr_ArrowDown, 1);

	td_mdc_cr_ArrowUp = TextDrawCreate(425.000000, 335.000000, "LD_BEAT:up");
	TextDrawBackgroundColor(td_mdc_cr_ArrowUp, 255);
	TextDrawFont(td_mdc_cr_ArrowUp, 4);
	TextDrawLetterSize(td_mdc_cr_ArrowUp, 0.500000, 1.000000);
	TextDrawColor(td_mdc_cr_ArrowUp, -1);
	TextDrawSetOutline(td_mdc_cr_ArrowUp, 0);
	TextDrawSetProportional(td_mdc_cr_ArrowUp, 1);
	TextDrawSetShadow(td_mdc_cr_ArrowUp, 1);
	TextDrawUseBox(td_mdc_cr_ArrowUp, 1);
	TextDrawBoxColor(td_mdc_cr_ArrowUp, 255);
	TextDrawTextSize(td_mdc_cr_ArrowUp, 11.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_cr_ArrowUp, 1);

	td_mdc_cr_Title = TextDrawCreate(207.000000, 220.000000, "~b~Criminal Record");
	TextDrawBackgroundColor(td_mdc_cr_Title, 255);
	TextDrawFont(td_mdc_cr_Title, 2);
	TextDrawLetterSize(td_mdc_cr_Title, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_Title, -1384438529);
	TextDrawSetOutline(td_mdc_cr_Title, 0);
	TextDrawSetProportional(td_mdc_cr_Title, 1);
	TextDrawSetShadow(td_mdc_cr_Title, 1);
	TextDrawSetSelectable(td_mdc_cr_Title, 0);
}
//============================================//
stock mdc_LoadPlayerTextdraws(playerid) {
    td_mdc_Skin = CreatePlayerTextDraw(playerid, 264.000000, 231.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_Skin, 0);
	PlayerTextDrawFont(playerid, td_mdc_Skin, 5);
	PlayerTextDrawLetterSize(playerid, td_mdc_Skin, 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_Skin, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_Skin, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_Skin, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_Skin, 1);
	PlayerTextDrawUseBox(playerid, td_mdc_Skin, 1);
	PlayerTextDrawBoxColor(playerid, td_mdc_Skin, 0);
	PlayerTextDrawTextSize(playerid, td_mdc_Skin, -70.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_Skin, 107);
	PlayerTextDrawSetPreviewRot(playerid, td_mdc_Skin, -16.000000, 0.000000, -30.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, td_mdc_Skin, 0);

	td_mdc_NameValue = CreatePlayerTextDraw(playerid, 338.000000, 228.000000, "Jayceon Campbell");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_NameValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_NameValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_NameValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_NameValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_NameValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_NameValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_NameValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_NameValue, 0);

	td_mdc_AgeValue = CreatePlayerTextDraw(playerid, 338.000000, 240.000000, "21");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_AgeValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_AgeValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_AgeValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_AgeValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_AgeValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_AgeValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_AgeValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_AgeValue, 0);

	td_mdc_GenderValue = CreatePlayerTextDraw(playerid, 338.000000, 252.000000, "Male");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_GenderValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_GenderValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_GenderValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_GenderValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_GenderValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_GenderValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_GenderValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_GenderValue, 0);

	td_mdc_JobValue = CreatePlayerTextDraw(playerid, 338.000000, 264.000000, "Unemployed");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_JobValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_JobValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_JobValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_JobValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_JobValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_JobValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_JobValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_JobValue, 0);

	td_mdc_DriveLicValue = CreatePlayerTextDraw(playerid, 338.000000, 276.000000, "Passed");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_DriveLicValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_DriveLicValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_DriveLicValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_DriveLicValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_DriveLicValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_DriveLicValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_DriveLicValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_DriveLicValue, 0);

	td_mdc_GunLicValue = CreatePlayerTextDraw(playerid, 338.000000, 288.000000, "Not Passed");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_GunLicValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_GunLicValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_GunLicValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_GunLicValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_GunLicValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_GunLicValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_GunLicValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_GunLicValue, 0);

	td_mdc_PhoneNumberValue = CreatePlayerTextDraw(playerid, 338.000000, 300.000000, "4701958");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_PhoneNumberValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_PhoneNumberValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_PhoneNumberValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_PhoneNumberValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_PhoneNumberValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_PhoneNumberValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_PhoneNumberValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_PhoneNumberValue, 0);

	for(new i = 0; i < sizeof(td_mdc_cr_Date); i++) {
		td_mdc_cr_Date[i] = CreatePlayerTextDraw(playerid, 366.000000, 249.000000 + i * 15, "21.02.2014");
		PlayerTextDrawBackgroundColor(playerid, td_mdc_cr_Date[i], 255);
		PlayerTextDrawFont(playerid, td_mdc_cr_Date[i], 2);
		PlayerTextDrawLetterSize(playerid, td_mdc_cr_Date[i], 0.170000, 1.000000);
		PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], -1);
		PlayerTextDrawSetOutline(playerid, td_mdc_cr_Date[i], 0);
		PlayerTextDrawSetProportional(playerid, td_mdc_cr_Date[i], 1);
		PlayerTextDrawSetShadow(playerid, td_mdc_cr_Date[i], 1);
		PlayerTextDrawSetSelectable(playerid, td_mdc_cr_Date[i], 0);

		td_mdc_cr_Description[i] = CreatePlayerTextDraw(playerid, 257.000000, 249.000000 + i * 15, "Possession of a firearm w...");
		PlayerTextDrawBackgroundColor(playerid, td_mdc_cr_Description[i], 255);
		PlayerTextDrawFont(playerid, td_mdc_cr_Description[i], 2);
		PlayerTextDrawLetterSize(playerid, td_mdc_cr_Description[i], 0.170000, 1.000000);
		PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], -1);
		PlayerTextDrawSetOutline(playerid, td_mdc_cr_Description[i], 0);
		PlayerTextDrawSetProportional(playerid, td_mdc_cr_Description[i], 1);
		PlayerTextDrawSetShadow(playerid, td_mdc_cr_Description[i], 1);
		PlayerTextDrawSetSelectable(playerid, td_mdc_cr_Description[i], 0);

		td_mdc_cr_Type[i] = CreatePlayerTextDraw(playerid, 220.000000, 249.000000 + i * 15, "Ticket");
		PlayerTextDrawBackgroundColor(playerid, td_mdc_cr_Type[i], 255);
		PlayerTextDrawFont(playerid, td_mdc_cr_Type[i], 2);
		PlayerTextDrawLetterSize(playerid, td_mdc_cr_Type[i], 0.170000, 1.000000);
		PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], -1);
		PlayerTextDrawSetOutline(playerid, td_mdc_cr_Type[i], 0);
		PlayerTextDrawSetProportional(playerid, td_mdc_cr_Type[i], 1);
		PlayerTextDrawSetShadow(playerid, td_mdc_cr_Type[i], 1);
		PlayerTextDrawSetSelectable(playerid, td_mdc_cr_Type[i], 0);
	}

	td_mdc_veh_ModelValue = CreatePlayerTextDraw(playerid, 338.000000, 228.000000, "Landstalker");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_ModelValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_ModelValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_ModelValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_ModelValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_ModelValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_ModelValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_ModelValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_ModelValue, 0);

	td_mdc_veh_VehicleModel = CreatePlayerTextDraw(playerid, 191.000000, 200.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_VehicleModel, 0);
	PlayerTextDrawFont(playerid, td_mdc_veh_VehicleModel, 5);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_VehicleModel, 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_VehicleModel, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_VehicleModel, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_VehicleModel, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_VehicleModel, 1);
	PlayerTextDrawUseBox(playerid, td_mdc_veh_VehicleModel, 1);
	PlayerTextDrawBoxColor(playerid, td_mdc_veh_VehicleModel, 0);
	PlayerTextDrawTextSize(playerid, td_mdc_veh_VehicleModel, 68.000000, 94.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_veh_VehicleModel, 400);
	PlayerTextDrawSetPreviewRot(playerid, td_mdc_veh_VehicleModel, -16.000000, 0.000000, 35.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_VehicleModel, 0);

	td_mdc_veh_OwnerValue = CreatePlayerTextDraw(playerid, 338.000000, 240.000000, "Jayceon Campbell");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_OwnerValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_OwnerValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_OwnerValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_OwnerValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_OwnerValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_OwnerValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_OwnerValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_OwnerValue, 0);

	td_mdc_veh_PlateValue = CreatePlayerTextDraw(playerid, 338.000000, 252.000000, "P-205-LS");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_PlateValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_PlateValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_PlateValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_PlateValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_PlateValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_PlateValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_PlateValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_PlateValue, 0);

	td_mdc_veh_InsuranceValue = CreatePlayerTextDraw(playerid, 338.000000, 264.000000, "Yes");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_InsuranceValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_InsuranceValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_InsuranceValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_InsuranceValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_InsuranceValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_InsuranceValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_InsuranceValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_InsuranceValue, 0);

	// property
	td_mdc_prop_IDValue = CreatePlayerTextDraw(playerid, 338.000000, 228.000000, "Landstalker");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_prop_IDValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_prop_IDValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_prop_IDValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_prop_IDValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_prop_IDValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_prop_IDValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_prop_IDValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_prop_IDValue, 0);

	td_mdc_prop_OwnerValue = CreatePlayerTextDraw(playerid, 338.000000, 240.000000, "Jayceon Campbell");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_prop_OwnerValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_prop_OwnerValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_prop_OwnerValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_prop_OwnerValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_prop_OwnerValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_prop_OwnerValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_prop_OwnerValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_prop_OwnerValue, 0);

	td_mdc_prop_PriceValue = CreatePlayerTextDraw(playerid, 338.000000, 252.000000, "P-205-LS");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_prop_PriceValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_prop_PriceValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_prop_PriceValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_prop_PriceValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_prop_PriceValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_prop_PriceValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_prop_PriceValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_prop_PriceValue, 0);

	td_mdc_prop_LocationValue = CreatePlayerTextDraw(playerid, 338.000000, 264.000000, "Yes");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_prop_LocationValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_prop_LocationValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_prop_LocationValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_prop_LocationValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_prop_LocationValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_prop_LocationValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_prop_LocationValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_prop_LocationValue, 0);

	// business
	td_mdc_biz_IDValue = CreatePlayerTextDraw(playerid, 338.000000, 228.000000, "Landstalker");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_biz_IDValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_biz_IDValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_biz_IDValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_biz_IDValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_biz_IDValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_biz_IDValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_biz_IDValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_biz_IDValue, 0);

	td_mdc_biz_OwnerValue = CreatePlayerTextDraw(playerid, 338.000000, 240.000000, "Jayceon Campbell");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_biz_OwnerValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_biz_OwnerValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_biz_OwnerValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_biz_OwnerValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_biz_OwnerValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_biz_OwnerValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_biz_OwnerValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_biz_OwnerValue, 0);

	td_mdc_biz_PriceValue = CreatePlayerTextDraw(playerid, 338.000000, 252.000000, "P-205-LS");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_biz_PriceValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_biz_PriceValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_biz_PriceValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_biz_PriceValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_biz_PriceValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_biz_PriceValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_biz_PriceValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_biz_PriceValue, 0);

	td_mdc_biz_LocationValue = CreatePlayerTextDraw(playerid, 338.000000, 264.000000, "Yes");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_biz_LocationValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_biz_LocationValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_biz_LocationValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_biz_LocationValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_biz_LocationValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_biz_LocationValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_biz_LocationValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_biz_LocationValue, 0);
}
//============================================//
stock mdc_ShowPlayerStartScreen(playerid) {
    TextDrawShowForPlayer(playerid, td_mdc_Box);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
    for(new i = 0; i < sizeof(td_mdc_Section); i++) {
        TextDrawShowForPlayer(playerid, td_mdc_Section[i]);
        TextDrawShowForPlayer(playerid, td_mdc_SectionText[i]);
	}

	TextDrawShowForPlayer(playerid, td_mdc_SectionHeaderText);
	SelectTextDraw(playerid, -1);
}
//============================================//
stock mdc_Hide(playerid, bool:close = false) {
    TextDrawHideForPlayer(playerid, td_mdc_CitizenBox);
    TextDrawHideForPlayer(playerid, td_mdc_Box);
    TextDrawHideForPlayer(playerid, td_mdc_HeaderBox);
    TextDrawHideForPlayer(playerid, td_mdc_DataBox);
	TextDrawHideForPlayer(playerid, td_mdc_OptionsBox);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Box);
	TextDrawHideForPlayer(playerid, td_mdc_veh_InnerBox);
	TextDrawHideForPlayer(playerid, td_mdc_veh_BoxNoEnt);
	TextDrawHideForPlayer(playerid, td_mdc_veh_InnerBoxNoEnt);

	TextDrawHideForPlayer(playerid, td_mdc_prop_Box);
	TextDrawHideForPlayer(playerid, td_mdc_prop_InnerBox);
	TextDrawHideForPlayer(playerid, td_mdc_prop_BoxNoEnt);
	TextDrawHideForPlayer(playerid, td_mdc_prop_InnerBoxNoEnt);

	TextDrawHideForPlayer(playerid, td_mdc_biz_Box);
	TextDrawHideForPlayer(playerid, td_mdc_biz_InnerBox);
	TextDrawHideForPlayer(playerid, td_mdc_biz_BoxNoEnt);
	TextDrawHideForPlayer(playerid, td_mdc_biz_InnerBoxNoEnt);
	for(new i = 0; i < sizeof(td_mdc_cr_Box); i++) {
		TextDrawHideForPlayer(playerid, td_mdc_cr_Box[i]);
	}

	for(new i = 0; i < sizeof(td_mdc_cr_InnerBox); i++) {
		TextDrawHideForPlayer(playerid, td_mdc_cr_InnerBox[i]);
	}

    TextDrawHideForPlayer(playerid, td_mdc_HeaderText);
    TextDrawHideForPlayer(playerid, td_mdc_Exit);
    for(new i = 0; i < sizeof(td_mdc_Section); i++) {
        TextDrawHideForPlayer(playerid, td_mdc_Section[i]);
        TextDrawHideForPlayer(playerid, td_mdc_SectionText[i]);
	}

	TextDrawHideForPlayer(playerid, td_mdc_SectionHeaderText);
	TextDrawHideForPlayer(playerid, td_mdc_Gender);
	TextDrawHideForPlayer(playerid, td_mdc_Job);
	TextDrawHideForPlayer(playerid, td_mdc_DriveLic);
	TextDrawHideForPlayer(playerid, td_mdc_GunLic);
	TextDrawHideForPlayer(playerid, td_mdc_PhoneNumber);
	TextDrawHideForPlayer(playerid, td_mdc_Name);
	TextDrawHideForPlayer(playerid, td_mdc_PropertyArrow);
	TextDrawHideForPlayer(playerid, td_mdc_VehiclesArrow);
	TextDrawHideForPlayer(playerid, td_mdc_Vehicles);
	TextDrawHideForPlayer(playerid, td_mdc_Property);
	TextDrawHideForPlayer(playerid, td_mdc_Age);
	TextDrawHideForPlayer(playerid, td_mdc_CriminalRecordArrow);
	TextDrawHideForPlayer(playerid, td_mdc_BusinessArrow);
	TextDrawHideForPlayer(playerid, td_mdc_CriminalRecord);
	TextDrawHideForPlayer(playerid, td_mdc_Business);
	TextDrawHideForPlayer(playerid, td_mdc_Browse);
	PlayerTextDrawHide(playerid, td_mdc_Skin);
	PlayerTextDrawHide(playerid, td_mdc_NameValue);
	PlayerTextDrawHide(playerid, td_mdc_AgeValue);
	PlayerTextDrawHide(playerid, td_mdc_GenderValue);
	PlayerTextDrawHide(playerid, td_mdc_JobValue);
	PlayerTextDrawHide(playerid, td_mdc_DriveLicValue);
	PlayerTextDrawHide(playerid, td_mdc_GunLicValue);
	PlayerTextDrawHide(playerid, td_mdc_PhoneNumberValue);
	TextDrawHideForPlayer(playerid, td_mdc_cr_Title);
	TextDrawHideForPlayer(playerid, td_mdc_cr_ArrowUp);
	TextDrawHideForPlayer(playerid, td_mdc_cr_ArrowDown);
	TextDrawHideForPlayer(playerid, td_mdc_cr_TypeTitle);
	TextDrawHideForPlayer(playerid, td_mdc_cr_DescriptionTitle);
	TextDrawHideForPlayer(playerid, td_mdc_cr_DateTitle);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Model);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Owner);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Plate);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Insurance);
	TextDrawHideForPlayer(playerid, td_mdc_veh_ArrowRight);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Next);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Label);
	PlayerTextDrawHide(playerid, td_mdc_veh_ModelValue);
	PlayerTextDrawHide(playerid, td_mdc_veh_VehicleModel);
	PlayerTextDrawHide(playerid, td_mdc_veh_OwnerValue);
	PlayerTextDrawHide(playerid, td_mdc_veh_PlateValue);
	PlayerTextDrawHide(playerid, td_mdc_veh_InsuranceValue);
	TextDrawHideForPlayer(playerid, td_mdc_veh_TextNoEnt);

	TextDrawHideForPlayer(playerid, td_mdc_prop_ID);
	TextDrawHideForPlayer(playerid, td_mdc_prop_Owner);
	TextDrawHideForPlayer(playerid, td_mdc_prop_Price);
	TextDrawHideForPlayer(playerid, td_mdc_prop_Location);
	TextDrawHideForPlayer(playerid, td_mdc_prop_Label);
	PlayerTextDrawHide(playerid, td_mdc_prop_IDValue);
	PlayerTextDrawHide(playerid, td_mdc_prop_OwnerValue);
	PlayerTextDrawHide(playerid, td_mdc_prop_PriceValue);
	PlayerTextDrawHide(playerid, td_mdc_prop_LocationValue);
	TextDrawHideForPlayer(playerid, td_mdc_prop_TextNoEnt);

	TextDrawHideForPlayer(playerid, td_mdc_biz_ID);
	TextDrawHideForPlayer(playerid, td_mdc_biz_Owner);
	TextDrawHideForPlayer(playerid, td_mdc_biz_Price);
	TextDrawHideForPlayer(playerid, td_mdc_biz_Location);
	TextDrawHideForPlayer(playerid, td_mdc_biz_Label);
	PlayerTextDrawHide(playerid, td_mdc_biz_IDValue);
	PlayerTextDrawHide(playerid, td_mdc_biz_OwnerValue);
	PlayerTextDrawHide(playerid, td_mdc_biz_PriceValue);
	PlayerTextDrawHide(playerid, td_mdc_biz_LocationValue);
	TextDrawHideForPlayer(playerid, td_mdc_biz_TextNoEnt);

	for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		TextDrawHideForPlayer(playerid, td_mdc_cr_Info[i]);
	}

	for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
		PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
		PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
	}

	if(close != false) {
		DeletePVar(playerid, "mdc_Citizen");
		DeletePVar(playerid, "mdc_VehicleIndex");
		DeletePVar(playerid, "mdc_Shown");
		CancelSelectTextDraw(playerid);
	}
}
//============================================//
stock mdc_SearchCitizen(playerid, name[]) {
	new user;
	for(new i = 0; i < strlen(name); i++) {
	    if(name[i] == ' ') {
			name[i] = '_';
		}
	}

	user = GetPlayerID(name);
	if(user != -1) {
	    SetPVarString(playerid, "mdc_Citizen", name);
	    mdc_ShowCitizen(playerid, PlayerInfo[user][pName], GetPlayerSkin(user), GetPVarInt(user, "Age"), GetPVarInt(user, "Sex"), GetPVarInt(user, "DriveLic"), GetPVarInt(user, "GunLic"),
						GetPVarInt(user, "Job"), GetPVarInt(user, "PhoneNum"));
	} else {
		new query[135];
		mysql_format(handlesql, query, sizeof(query), "SELECT `Model`, `Age`, `Sex`, `DriveLic`, `GunLic`, `JobID`, `PhoneNum` FROM `accounts` WHERE `Name` = '%e';", name);
		mysql_pquery(handlesql, query, "mdc_SearchCitizenResult", "is", playerid, name);
	}
}
//============================================//
stock mdc_ShowCitizen(playerid, name[], skin, age, sex, driveLic, weaponLic, jobID, phoneNumber) {
	new value[20];
    mdc_Hide(playerid, false);

	// Skin
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_Skin, skin);
	PlayerTextDrawShow(playerid, td_mdc_Skin);

	// Name
	PlayerTextDrawSetString(playerid, td_mdc_NameValue, name);
	PlayerTextDrawShow(playerid, td_mdc_NameValue);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, td_mdc_AgeValue, value);
	PlayerTextDrawShow(playerid, td_mdc_AgeValue);

	// Gender
	PlayerTextDrawSetString(playerid, td_mdc_GenderValue, GetGenderString(sex));
	PlayerTextDrawShow(playerid, td_mdc_GenderValue);

	// Job
	PlayerTextDrawSetString(playerid, td_mdc_JobValue, GetOccupation(jobID));
	PlayerTextDrawShow(playerid, td_mdc_JobValue);

	// Driver's License
	PlayerTextDrawSetString(playerid, td_mdc_DriveLicValue, GetDriveLicStatus(driveLic));
	PlayerTextDrawShow(playerid, td_mdc_DriveLicValue);

	// Weapon License
	PlayerTextDrawSetString(playerid, td_mdc_GunLicValue, GetWeaponLicStatus(weaponLic));
	PlayerTextDrawShow(playerid, td_mdc_GunLicValue);

	// Phone Number
	format(value, sizeof(value), "%i", phoneNumber);
	PlayerTextDrawSetString(playerid, td_mdc_PhoneNumberValue, value);
	PlayerTextDrawShow(playerid, td_mdc_PhoneNumberValue);

	// Other
	TextDrawShowForPlayer(playerid, td_mdc_CitizenBox);
	TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
	TextDrawShowForPlayer(playerid, td_mdc_DataBox);
	TextDrawShowForPlayer(playerid, td_mdc_OptionsBox);
	TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
	TextDrawShowForPlayer(playerid, td_mdc_Exit);
	TextDrawShowForPlayer(playerid, td_mdc_Gender);
	TextDrawShowForPlayer(playerid, td_mdc_Job);
	TextDrawShowForPlayer(playerid, td_mdc_DriveLic);
	TextDrawShowForPlayer(playerid, td_mdc_GunLic);
	TextDrawShowForPlayer(playerid, td_mdc_PhoneNumber);
	TextDrawShowForPlayer(playerid, td_mdc_Name);
	TextDrawShowForPlayer(playerid, td_mdc_PropertyArrow);
	TextDrawShowForPlayer(playerid, td_mdc_VehiclesArrow);
	TextDrawShowForPlayer(playerid, td_mdc_Vehicles);
	TextDrawShowForPlayer(playerid, td_mdc_Property);
	TextDrawShowForPlayer(playerid, td_mdc_Age);
	TextDrawShowForPlayer(playerid, td_mdc_CriminalRecordArrow);
	TextDrawShowForPlayer(playerid, td_mdc_BusinessArrow);
	TextDrawShowForPlayer(playerid, td_mdc_CriminalRecord);
	TextDrawShowForPlayer(playerid, td_mdc_Business);
	TextDrawShowForPlayer(playerid, td_mdc_Browse);
	SelectTextDraw(playerid, -1);
}
//============================================//
stock mdc_ShowCriminalRecord(playerid, name[]) {
	new query[130];
	mysql_format(handlesql, query, sizeof(query), "SELECT `officer`, `time`, `date`, `amount`, `reason`, `paid` FROM `tickets` WHERE `player` = '%e';", name);
	mysql_pquery(handlesql, query, "mdc_FetchTickets", "is", playerid, name);
}
//============================================//
stock mdc_ShowCriminalRecordDetails(playerid, idx) {
	new dialogMsg[600];
	if(CriminalRecordData[playerid][idx][mdc_cr_type] == RECORD_TICKET) {
	    if(CriminalRecordData[playerid][idx][mdc_cr_paid] == 0) {
	    	format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Ticket Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\
												  \n{ffffff}Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Price:\t\t{a9c4e4}%s\n{ffffff}Offence:\t{a9c4e4}%s\n\n\
												  {ffffff}Information:\t{a9c4e4}The offender has {3D62A8}NOT {a9c4e4}yet paid the ticket.",
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]), GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]),
												  CriminalRecordData[playerid][idx][mdc_cr_date], CriminalRecordData[playerid][idx][mdc_cr_time],
												  FormatMoney(CriminalRecordData[playerid][idx][mdc_cr_price]), CriminalRecordData[playerid][idx][mdc_cr_description]);
		} else {
			format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Ticket Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\n\
												  {ffffff}Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Price:\t\t{a9c4e4}%s\n{ffffff}Offence:\t{a9c4e4}%s\n\n{ffffff}\
												  Information:\t{a9c4e4}The offender has paid the ticket.", GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]),
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]), CriminalRecordData[playerid][idx][mdc_cr_date],
												  CriminalRecordData[playerid][idx][mdc_cr_time], FormatMoney(CriminalRecordData[playerid][idx][mdc_cr_price]),
												  CriminalRecordData[playerid][idx][mdc_cr_description]);
		}
	} else {
        if(CriminalRecordData[playerid][idx][mdc_cr_served] == 0) {
	    	format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Charge Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\n\
												  {ffffff}Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Felony:\t\t{a9c4e4}%s\n\n{ffffff}Information:\t{a9c4e4}The offender \
												  is presently {3D62A8}WANTED {a9c4e4}due to this charge.", GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]),
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]), CriminalRecordData[playerid][idx][mdc_cr_date],
												  CriminalRecordData[playerid][idx][mdc_cr_time], CriminalRecordData[playerid][idx][mdc_cr_description]);
		} else {
			format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Charge Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\n{ffffff}\
												  Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Felony:\t\t{a9c4e4}%s\n\n{ffffff}Information:\t{a9c4e4}The offender has \
												  already served according time in prison.", GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]),
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]), CriminalRecordData[playerid][idx][mdc_cr_date],
												  CriminalRecordData[playerid][idx][mdc_cr_time], CriminalRecordData[playerid][idx][mdc_cr_description]);
		}
	}

	ShowPlayerDialogEx(playerid, DIALOG_CLOSE, DIALOG_STYLE_MSGBOX, "{3D62A8}Detailed Record Information", dialogMsg, "Close", "");
}
//============================================//
stock mdc_ResetCriminalRecordData(playerid) {
	for(new i = 0; i < MAX_CRIMINAL_RECORDS; i++) {
        for(new j = 0; j < sizeof(CriminalRecordData[][]); j++) {
	    	CriminalRecordData[playerid][i][CriminalRecordEnum:j] = 0;
		}
	}

	Iter_Clear(CriminalRecordIterator[playerid]);
}
//============================================//
stock mdc_ShowVehicles(playerid, name[]) {
	new query[140];
	mysql_format(handlesql, query, sizeof(query), "SELECT `Model`, `ColorOne`, `ColorTwo`, `Plate`, `Insurance` FROM `vehicles` WHERE `owner` = '%e';", name);
	mysql_pquery(handlesql, query, "mdc_FetchVehicle", "is", playerid, name);
}
//============================================//
stock mdc_ShowVehicle(playerid, owner[], model, color1, color2, insurance, plate[], bool:nextBtn = false) {
    mdc_Hide(playerid, false);

    // Model
    PlayerTextDrawSetString(playerid, td_mdc_veh_ModelValue, VehicleName[model - 400]);
	PlayerTextDrawShow(playerid, td_mdc_veh_ModelValue);

	// Model Preview
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_veh_VehicleModel, model);
	PlayerTextDrawSetPreviewVehCol(playerid, td_mdc_veh_VehicleModel, color1, color2);
	PlayerTextDrawShow(playerid, td_mdc_veh_VehicleModel);

	// Owner
	PlayerTextDrawSetString(playerid, td_mdc_veh_OwnerValue, owner);
	PlayerTextDrawShow(playerid, td_mdc_veh_OwnerValue);

	// License Plate Number
	PlayerTextDrawSetString(playerid, td_mdc_veh_PlateValue, plate);
	PlayerTextDrawShow(playerid, td_mdc_veh_PlateValue);

	// Insurance
	if(insurance) {
	    PlayerTextDrawSetString(playerid, td_mdc_veh_InsuranceValue, "Yes");
	} else {
		PlayerTextDrawSetString(playerid, td_mdc_veh_InsuranceValue, "No");
	}

	PlayerTextDrawShow(playerid, td_mdc_veh_InsuranceValue);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Box);
    TextDrawShowForPlayer(playerid, td_mdc_veh_InnerBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Model);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Owner);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Plate);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Insurance);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Label);
	if(nextBtn != false) {
        TextDrawShowForPlayer(playerid, td_mdc_veh_ArrowRight);
		TextDrawShowForPlayer(playerid, td_mdc_veh_Next);
	}

	SelectTextDraw(playerid, -1);
}

stock mdc_ShowProperty(playerid, owner[])
{
	mdc_Hide(playerid, false);

	new houseid = -1;
	foreach(new i : HouseIterator)
	{
		if(!strcmp(HouseInfo[i][hOwner], owner, true))
		{
			houseid = i;
			break;
		}
	}

	if(houseid != -1)
	{
		// ID
		new string[32];
		format(string, sizeof(string), "%i", houseid);
		PlayerTextDrawSetString(playerid, td_mdc_prop_IDValue, string);
		PlayerTextDrawShow(playerid, td_mdc_prop_IDValue);

		// Owner
		PlayerTextDrawSetString(playerid, td_mdc_prop_OwnerValue, owner);
		PlayerTextDrawShow(playerid, td_mdc_prop_OwnerValue);

		// Price
		format(string, sizeof(string), "%s", FormatMoney(HouseInfo[houseid][hValue]));
		PlayerTextDrawSetString(playerid, td_mdc_prop_PriceValue, string);
		PlayerTextDrawShow(playerid, td_mdc_prop_PriceValue);

		// Location
		PlayerTextDrawSetString(playerid, td_mdc_prop_LocationValue, GetZone(HouseInfo[houseid][hXo],
											HouseInfo[houseid][hYo],
											HouseInfo[houseid][hZo]));
		PlayerTextDrawShow(playerid, td_mdc_prop_LocationValue);

		TextDrawShowForPlayer(playerid, td_mdc_prop_Box);
		TextDrawShowForPlayer(playerid, td_mdc_prop_InnerBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
		TextDrawShowForPlayer(playerid, td_mdc_Exit);
		TextDrawShowForPlayer(playerid, td_mdc_prop_ID);
		TextDrawShowForPlayer(playerid, td_mdc_prop_Owner);
		TextDrawShowForPlayer(playerid, td_mdc_prop_Price);
		TextDrawShowForPlayer(playerid, td_mdc_prop_Location);
		TextDrawShowForPlayer(playerid, td_mdc_prop_Label);
		SelectTextDraw(playerid, -1);
	}
	else
	{
		TextDrawShowForPlayer(playerid, td_mdc_prop_BoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_prop_InnerBoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
		TextDrawShowForPlayer(playerid, td_mdc_Exit);
		TextDrawShowForPlayer(playerid, td_mdc_prop_TextNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_prop_Label);
	}
}

stock mdc_ShowBusiness(playerid, owner[])
{
	mdc_Hide(playerid, false);

	new businessid = -1;
	foreach(new i : BizIterator)
	{
		if(!strcmp(BizInfo[i][Owner], owner, true))
		{
			businessid = i;
			break;
		}
	}

	if(businessid != -1)
	{
		// ID
		new string[32];
		format(string, sizeof(string), "%i", businessid);
		PlayerTextDrawSetString(playerid, td_mdc_biz_IDValue, string);
		PlayerTextDrawShow(playerid, td_mdc_biz_IDValue);

		// Owner
		PlayerTextDrawSetString(playerid, td_mdc_biz_OwnerValue, owner);
		PlayerTextDrawShow(playerid, td_mdc_biz_OwnerValue);

		// Price
		format(string, sizeof(string), "%s", FormatMoney(BizInfo[businessid][Value]));
		PlayerTextDrawSetString(playerid, td_mdc_biz_PriceValue, string);
		PlayerTextDrawShow(playerid, td_mdc_biz_PriceValue);

		// Location
		PlayerTextDrawSetString(playerid, td_mdc_biz_LocationValue, GetZone(BizInfo[businessid][Xo],
											BizInfo[businessid][Yo],
											BizInfo[businessid][Zo]));
		PlayerTextDrawShow(playerid, td_mdc_biz_LocationValue);

		TextDrawShowForPlayer(playerid, td_mdc_biz_Box);
		TextDrawShowForPlayer(playerid, td_mdc_biz_InnerBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
		TextDrawShowForPlayer(playerid, td_mdc_Exit);
		TextDrawShowForPlayer(playerid, td_mdc_biz_ID);
		TextDrawShowForPlayer(playerid, td_mdc_biz_Owner);
		TextDrawShowForPlayer(playerid, td_mdc_biz_Price);
		TextDrawShowForPlayer(playerid, td_mdc_biz_Location);
		TextDrawShowForPlayer(playerid, td_mdc_biz_Label);
		SelectTextDraw(playerid, -1);
	}
	else
	{
		TextDrawShowForPlayer(playerid, td_mdc_biz_BoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_prop_InnerBoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
		TextDrawShowForPlayer(playerid, td_mdc_Exit);
		TextDrawShowForPlayer(playerid, td_mdc_biz_TextNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_biz_Label);
	}
}
//============================================//
forward mdc_SearchCitizenResult(playerid, name[]);
public mdc_SearchCitizenResult(playerid, name[]) {
	if(cache_get_row_count() > 0) {
	    SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowCitizen(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "Model") , cache_get_field_content_int(0, "Age"), cache_get_field_content_int(0, "Sex"),
					   	cache_get_field_content_int(0, "DriveLic"), cache_get_field_content_int(0, "GunLic"), cache_get_field_content_int(0, "JobID"),
					  	cache_get_field_content_int(0, "PhoneNum"));
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "No citizen could be found under the mentioned name.");
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_CITIZEN, DIALOG_STYLE_INPUT, "{3D62A8}Search Citizen", "Please enter the citizen's full name below:", "Search", "Cancel");
	}
}
//============================================//
forward mdc_SearchPhoneNumber(playerid, phoneNum);
public mdc_SearchPhoneNumber(playerid, phoneNum) {
	if(cache_get_row_count() > 0) {
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "Name", name);
		SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowCitizen(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "Model") , cache_get_field_content_int(0, "Age"), cache_get_field_content_int(0, "Sex"),
					   	cache_get_field_content_int(0, "DriveLic"), cache_get_field_content_int(0, "GunLic"), cache_get_field_content_int(0, "JobID"), phoneNum);
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "No citizen could be associated with the mentioned phone number.");
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_PHONE_NUMBER, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
	}
}
//============================================//
forward mdc_SearchSerial(playerid);
public mdc_SearchSerial(playerid) {
	if(cache_get_row_count() > 0) {
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "Name", name);
		SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowCitizen(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "Model") , cache_get_field_content_int(0, "Age"), cache_get_field_content_int(0, "Sex"),
					   	cache_get_field_content_int(0, "DriveLic"), cache_get_field_content_int(0, "GunLic"), cache_get_field_content_int(0, "JobID"),
  						cache_get_field_content_int(0, "PhoneNum"));
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "No citizen could be associated with the mentioned weapon serial number.");
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons's serial number below:", "Search", "Cancel");
	}
}
//============================================//
forward mdc_FetchTickets(playerid, name[]);
public mdc_FetchTickets(playerid, name[]) {
	new idx;
	mdc_ResetCriminalRecordData(playerid);
	SetPVarInt(playerid, "mdc_cr_ScrollTop", 0);
	for(new i = 0; i < cache_get_row_count(); i++) {
		idx = Iter_Free(CriminalRecordIterator[playerid]);
		if(idx == -1) {
		    break;
		}

		Iter_Add(CriminalRecordIterator[playerid], idx);
		format(CriminalRecordData[playerid][idx][mdc_cr_offender], MAX_PLAYER_NAME, "%s", name);
		CriminalRecordData[playerid][idx][mdc_cr_type] = RECORD_TICKET;
		cache_get_field_content(i, "reason", CriminalRecordData[playerid][idx][mdc_cr_description], handlesql, MDC_DESCRIPTION_MAX_LENGTH);
		cache_get_field_content(i, "time", CriminalRecordData[playerid][idx][mdc_cr_time], handlesql, 15);
		cache_get_field_content(i, "date", CriminalRecordData[playerid][idx][mdc_cr_date], handlesql, 15);
		cache_get_field_content(i, "officer", CriminalRecordData[playerid][idx][mdc_cr_officer], handlesql, MAX_PLAYER_NAME);
		CriminalRecordData[playerid][idx][mdc_cr_paid] = cache_get_field_content_int(i, "paid", handlesql);
		CriminalRecordData[playerid][idx][mdc_cr_price] = cache_get_field_content_int(i, "amount", handlesql);
	}

	new query[130];
	mysql_format(handlesql, query, sizeof(query), "SELECT `officer`, `time`, `date`, `served`, `crime` FROM `criminals` WHERE `player` = '%e';", name);
	mysql_pquery(handlesql, query, "mdc_FetchCharges", "is", playerid, name);
}
//============================================//
forward mdc_FetchCharges(playerid, name[]);
public mdc_FetchCharges(playerid, name[]) {
	new idx;
	for(new i = 0; i < cache_get_row_count(); i++) {
		idx = Iter_Free(CriminalRecordIterator[playerid]);
		if(idx == -1) {
		    break;
		}

        Iter_Add(CriminalRecordIterator[playerid], idx);
		format(CriminalRecordData[playerid][idx][mdc_cr_offender], MAX_PLAYER_NAME, "%s", name);
		CriminalRecordData[playerid][idx][mdc_cr_type] = RECORD_CHARGE;
		cache_get_field_content(i, "crime", CriminalRecordData[playerid][idx][mdc_cr_description], handlesql, MDC_DESCRIPTION_MAX_LENGTH);
		cache_get_field_content(i, "time", CriminalRecordData[playerid][idx][mdc_cr_time], handlesql, 15);
		cache_get_field_content(i, "date", CriminalRecordData[playerid][idx][mdc_cr_date], handlesql, 15);
		cache_get_field_content(i, "officer", CriminalRecordData[playerid][idx][mdc_cr_officer], handlesql, MAX_PLAYER_NAME);
		CriminalRecordData[playerid][idx][mdc_cr_served] = cache_get_field_content_int(i, "served", handlesql);
	}

	new count = Iter_Count(CriminalRecordIterator[playerid]);
	mdc_Hide(playerid, false);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
    if(count >= 7) {
    	TextDrawShowForPlayer(playerid, td_mdc_cr_Box[6]);
		TextDrawShowForPlayer(playerid, td_mdc_cr_InnerBox[6]);
	} else if(count > 1) {
        TextDrawShowForPlayer(playerid, td_mdc_cr_Box[count - 1]);
		TextDrawShowForPlayer(playerid, td_mdc_cr_InnerBox[count - 1]);
	} else {
	    TextDrawShowForPlayer(playerid, td_mdc_cr_Box[0]);
		TextDrawShowForPlayer(playerid, td_mdc_cr_InnerBox[0]);
	}

	TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
	TextDrawShowForPlayer(playerid, td_mdc_cr_Title);
	TextDrawShowForPlayer(playerid, td_mdc_cr_TypeTitle);
	TextDrawShowForPlayer(playerid, td_mdc_cr_DescriptionTitle);
	TextDrawShowForPlayer(playerid, td_mdc_cr_DateTitle);
	if(count > 7) {
		TextDrawShowForPlayer(playerid, td_mdc_cr_ArrowUp);
		TextDrawShowForPlayer(playerid, td_mdc_cr_ArrowDown);
	}

	if(count <= 0) {
	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[0], COLOR_WHITE);
	    PlayerTextDrawSetString(playerid, td_mdc_cr_Type[0], "No entries could be found.");
	    PlayerTextDrawShow(playerid, td_mdc_cr_Type[0]);
	} else {
		for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		    if(i >= count) {
				break;
			}

		    if(CriminalRecordData[playerid][i][mdc_cr_type] == RECORD_CHARGE) {
			  	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			  	if(CriminalRecordData[playerid][i][mdc_cr_served] == 0) {
			  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_ERROR);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_ERROR);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_ERROR);
			  	} else {
				   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
				    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
				    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
				}
			} else {
			    PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			    if(CriminalRecordData[playerid][i][mdc_cr_paid] == 0) {
			        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_ERROR);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_ERROR);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_ERROR);
			    } else {
                    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			      	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			       	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
				}
			}

		    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i][mdc_cr_date]);
		    if(strlen(CriminalRecordData[playerid][i][mdc_cr_description]) < 20) {
		    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i][mdc_cr_description]);
			} else {
				new desc[25];
				strmid(desc, CriminalRecordData[playerid][i][mdc_cr_description], 0, 20, MDC_DESCRIPTION_MAX_LENGTH);
				strins(desc, "...", strlen(desc), sizeof(desc));
				PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
			}

			PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			TextDrawShowForPlayer(playerid, td_mdc_cr_Info[i]);
		}
	}

	SelectTextDraw(playerid, -1);
}
//============================================//
forward mdc_SearchLicensePlate(playerid, plate[]);
public mdc_SearchLicensePlate(playerid, plate[]) {
	if(cache_get_row_count() > 0) {
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "Owner", name);
		SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowVehicle(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "Model") , cache_get_field_content_int(0, "ColorOne"), cache_get_field_content_int(0, "ColorTwo"),
					   	cache_get_field_content_int(0, "Insurance"), plate, false);
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "No vehicle could be found under the mentioned license plate number.");
		ShowPlayerDialogEx(playerid, DIALOG_MDC_SEARCH_PLATE, DIALOG_STYLE_INPUT, "{3D62A8}Search License Plate", "Please enter the license plate below:", "Search", "Cancel");
	}
}
//============================================//
forward mdc_FetchVehicle(playerid, owner[]);
public mdc_FetchVehicle(playerid, owner[]) {
    mdc_Hide(playerid, false);
	if(cache_get_row_count() > 0) {
	    if(GetPVarInt(playerid, "mdc_VehicleIndex") >= cache_get_row_count()) {
	        SetPVarInt(playerid, "mdc_VehicleIndex", 0);
	    }

		new row = GetPVarInt(playerid, "mdc_VehicleIndex"),
		    plate[50];

	    cache_get_field_content(row, "Plate", plate);
	    if(cache_get_row_count() > 1) {
		    mdc_ShowVehicle(playerid, GetNameWithSpace(owner), cache_get_field_content_int(row, "Model") , cache_get_field_content_int(row, "ColorOne"),
							cache_get_field_content_int(row, "ColorTwo"), cache_get_field_content_int(row, "Insurance"), plate, true);
		} else {
		    mdc_ShowVehicle(playerid, GetNameWithSpace(owner), cache_get_field_content_int(row, "Model") , cache_get_field_content_int(row, "ColorOne"),
							cache_get_field_content_int(row, "ColorTwo"), cache_get_field_content_int(row, "Insurance"), plate, false);
		}
	} else {
		TextDrawShowForPlayer(playerid, td_mdc_veh_BoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_veh_InnerBoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
		TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
		TextDrawShowForPlayer(playerid, td_mdc_Exit);
		TextDrawShowForPlayer(playerid, td_mdc_veh_TextNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_veh_Label);
	}

	SelectTextDraw(playerid, -1);
}
//============================================//
stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;
	return false;
}
//============================================//
forward LoadHolsterSQL(playerid);
public LoadHolsterSQL(playerid) {
	//==========//
	new rows = cache_get_row_count(handlesql), fetch[256], str[50], arrCoords[8][64];
	if(rows)
	{
	    for(new i = 0; i < 35; i++)
	    {
	        if(i >= 22 && i <= 34)
	        {
	            format(str, 50, "wep%d", i);
	            cache_get_field_content(0, str, fetch);
	            split(fetch, arrCoords, ',');
	            HolsterInfo[playerid][i][hBone]=strval(arrCoords[0]);
	            HolsterInfo[playerid][i][hoX]=floatstr(arrCoords[1]);
	            HolsterInfo[playerid][i][hoY]=floatstr(arrCoords[2]);
	            HolsterInfo[playerid][i][hoZ]=floatstr(arrCoords[3]);
	            HolsterInfo[playerid][i][hrX]=floatstr(arrCoords[4]);
	            HolsterInfo[playerid][i][hrY]=floatstr(arrCoords[5]);
	            HolsterInfo[playerid][i][hrZ]=floatstr(arrCoords[6]);
	            HolsterInfo[playerid][i][hHide]=strval(arrCoords[7]);
	        }
	    }
	} else {
		new query[500];
	    mysql_format(handlesql, query, sizeof(query), "INSERT INTO adjust (`name`) VALUES ('%e')", PlayerInfo[playerid][pUsername]);
	    mysql_pquery(handlesql, query);
	    for(new i2 = 0; i2 < 35; i2++) {
	        if(i2 >= 22 && i2 <= 34) {
	            if(i2 >= 22 && i2 <= 24) {
		        HolsterInfo[playerid][i2][hBone] = 8;
		    	HolsterInfo[playerid][i2][hoX] = -0.044177;
		    	HolsterInfo[playerid][i2][hoY] = 0.000000;
		    	HolsterInfo[playerid][i2][hoZ] = 0.092454;
		    	HolsterInfo[playerid][i2][hrX] = 246.994583;
		    	HolsterInfo[playerid][i2][hrY] = 0.000000;
		    	HolsterInfo[playerid][i2][hrZ] = 0.000000;
				HolsterInfo[playerid][i2][hHide] = 0; }
			    else if(i2 >= 25 && i2 <= 34) {
		        HolsterInfo[playerid][i2][hBone] = 1;
		    	HolsterInfo[playerid][i2][hoX] = 0.139415;
		    	HolsterInfo[playerid][i2][hoY] = -0.167970;
		    	HolsterInfo[playerid][i2][hoZ] = 0.120848;
		    	HolsterInfo[playerid][i2][hrX] = 0.000000;
		    	HolsterInfo[playerid][i2][hrY] = 152.342666;
		        HolsterInfo[playerid][i2][hrZ] = 0.000000;
				HolsterInfo[playerid][i2][hHide] = 0; }
	        }
	    }
	    SaveHolster(playerid);
	}
    //==========//
	return 1;
}
//============================================//
forward SaveHolster(playerid);
public SaveHolster(playerid)
{
	new query[1024], coordsstring[500];
	for(new i = 0; i < 35; i++) {
	    if(i >= 22 && i <= 34) {
	        if(HolsterInfo[playerid][i][hBone] > 0) {
	            format(coordsstring, 256, "%d,%f,%f,%f,%f,%f,%f,%d", HolsterInfo[playerid][i][hBone], HolsterInfo[playerid][i][hoX], HolsterInfo[playerid][i][hoY], HolsterInfo[playerid][i][hoZ],
		        HolsterInfo[playerid][i][hrX], HolsterInfo[playerid][i][hrY], HolsterInfo[playerid][i][hrZ], HolsterInfo[playerid][i][hHide]);
	            mysql_format(handlesql, query, sizeof(query), "UPDATE adjust SET wep%d='%e' WHERE name='%e'", i, coordsstring, PlayerInfo[playerid][pUsername]);
		        mysql_pquery(handlesql, query);
	        }
	    }
	}
	return 1;
}
//============================================//
stock CompatAmmo(playerid, id)
{
	new result = 0;
	if(id >= 100 && id <= 199) {
        switch(PlayerInfo[playerid][pPlayerWeapon])
	    {
	        case 22, 23: {
			if(id == 100 || id == 101) result++; }
	        case 24: {
	        if(id == 106 || id == 107) result++; }
	        case 25, 26: {
	        if(id >= 110 && id <= 113) result++; }
            case 28, 29: {
	        if(id == 115 || id == 116) result++; }
	        case 30: {
	        if(id == 120 || id == 122 || id == 126) result++; }
	        case 31: {
	        if(id == 121 || id == 123 || id == 127 || id == 128) result++; }
	        case 32: {
	        if(id == 115 || id == 116) result++; }
	        case 33, 34: {
	        if(id == 125) result++; }
	    }
	}
	return result;
}
//============================================//
stock WoundWeapon(weaponid)
{
	if(weaponid == 4) return true;
	else if(weaponid == 9) return true;
	else if(weaponid >= 22 && weaponid <= 34) return true;
	return false;
}
//============================================//
forward CheckCandidate(playerid, target[]);
public CheckCandidate(playerid, target[])
{
	new string[128], query[256];
	if(cache_get_row_count() != 0)
	{
		mysql_format(handlesql, query, sizeof(query), "DELETE FROM `candidates` WHERE name='%s'", target);
		mysql_pquery(handlesql, query, "", "");

		format(string, sizeof(string),"AdmCmd: %s removed %s from the candidates.", PlayerInfo[playerid][pUsername], target);
		SendAdminMessage(COLOR_YELLOW, string);
	}
	else
	{
		mysql_format(handlesql, query, sizeof(query), "INSERT INTO `candidates` (name) VALUES ('%s')", target);
		mysql_pquery(handlesql, query, "", "");

		mysql_format(handlesql, query, sizeof(query), "DELETE FROM `votes` WHERE vote='%s'", target);
		mysql_pquery(handlesql, query, "", "");

		format(string, sizeof(string),"AdmCmd: %s added %s to the candidates.", PlayerInfo[playerid][pUsername], target);
		SendAdminMessage(COLOR_YELLOW, string);
	}
	return 1;
}
//============================================//
forward CheckVote(playerid, target[]);
public CheckVote(playerid, target[])
{
	if(cache_get_row_count() > 0)
	{
		return SendClientMessage(playerid, COLOR_ERROR, "You've already submitted your vote.");
	}
	else
	{
		new query[256];
		mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `candidates` WHERE name='%s'", target);
		mysql_pquery(handlesql, query, "AddVote", "is", playerid, target);
	}
	return 1;
}
//============================================//
forward AddVote(playerid, target[]);
public AddVote(playerid, target[])
{
	if(cache_get_row_count() == 0)
	{
		return SendClientMessage(playerid, COLOR_ERROR, "This player is not a candidate.");
	}
	else
	{
		new query[256], string[128];
		mysql_format(handlesql, query, sizeof(query), "INSERT INTO `votes` (name, vote) VALUES ('%s', '%s')", PlayerInfo[playerid][pUsername], target);
		mysql_pquery(handlesql, query, "", "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE `candidates` SET votes=%i WHERE name='%s'", cache_get_field_content_int(0, "votes") + 1, target);
		mysql_pquery(handlesql, query, "", "");

		format(string, sizeof(string), "You have successfully voted for %s!", target);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}
//============================================//
forward CheckVotes(playerid);
public CheckVotes(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "_____________________________");
	if(cache_get_row_count() == 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "There are no candidates being voted for.");
	}
	else
	{
		new count = 0;
		for(new i = 0; i < cache_get_row_count(); i++)
		{
			count++;
			new string[128], name[32];
			cache_get_field_content(i, "name", name);
			format(string, sizeof(string), "%i: %s with %i votes", count, name, cache_get_field_content_int(i, "votes"));
			SendClientMessage(playerid, COLOR_ERROR, string);
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "_____________________________");
	return 1;
}
//============================================//
stock IsPlayerInDivision(playerid, division)
{
	for(new i = 0; i < MAX_LSPD_DIVISIONS; i++)
	{
		if(PlayerInfo[playerid][pDivision][i] == division)
		{
			return true;
		}
	}
	return false;
}
//============================================//
forward SetWeatherEx(weatherid);
public SetWeatherEx(weatherid)
{
	GMWeather = weatherid;
	foreach(new i : Player)
	{
		if(GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
		{
			if(GetPVarInt(i, "DrugTime") == 0)
			{
				SetPlayerWeather(i, GMWeather);
			}
		}
	}
}
//============================================//
forward LinkVehicleToInteriorEx(vehicleid, interiorid);
public LinkVehicleToInteriorEx(vehicleid, interiorid)
{
	VehicleInfo[vehicleid][vInt] = interiorid;
	LinkVehicleToInterior(vehicleid, interiorid);
}
//============================================//
forward CheckMarriage(playerid);
public CheckMarriage(playerid)
{
	if(cache_get_row_count() > 0)
	{
		format(PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME, "None");

		new query[256];
		mysql_format(handlesql, query, sizeof(query), "UPDATE `accounts` SET `MarriedTo`=%s WHERE `ID`=%i", "None", cache_get_field_content_int(0, "ID"));
		mysql_pquery(handlesql, query);

		SendClientMessage(playerid, COLOR_WHITE, "You have successfully divorced.");
	}
	else
	{
		format(PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME, "None");

		SendClientMessage(playerid, COLOR_WHITE, "You have successfully divorced.");
	}
}
//============================================//
forward CheckOfflineBan(playerid, name[], reason[]);
public CheckOfflineBan(playerid, name[], reason[])
{
	if(cache_get_row_count() > 0)
	{
		new ip[32];
		cache_get_field_content(0, "IP", ip);

		BanPlayerO(name, ip, reason, AdminName(playerid));

		new string[256];
		format(string, sizeof(string), "AdmCmd: %s was offline banned by Admin %s. (Reason: %s)", name, AdminName(playerid), reason);
		SendClientMessageToAll(COLOR_PUBLIC_ADMIN, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "There is no player with this name registered.");
	}
}
//============================================//
stock PrintPrefix(playerid)
{
	new string[128];
	string="says";
    if(strcmp(PlayerInfo[playerid][pAccent], "None", true) == 0) {
    } else {
    format(string, sizeof(string), "says [%s]", PlayerInfo[playerid][pAccent]); }
    return string;
}
//============================================//
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(VehicleInfo[vehicleid][vType] == VEHICLE_LSPD ||
		VehicleInfo[vehicleid][vType] == VEHICLE_LSFD ||
		VehicleInfo[vehicleid][vType] == VEHICLE_GOV)
	{
		if(VehicleInfo[vehicleid][vSirenSync] == 1)
		{
			switch(newstate)
			{
				case 1:
				{
					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
						{
							DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
							VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
						}
					}

					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
						{
							VehicleInfo[vehicleid][vSirenObjectID][i] = CreateDynamicObject(VehicleInfo[vehicleid][vSirenObject][i], 0, 0, 0, 0.0, 0.0, 0.0);

							AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObjectID][i], vehicleid, 
								VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
								VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);
						}
					}

					new Float:X, Float:Y, Float:Z;
					GetVehicleVelocity(vehicleid, X, Y, Z);
					if(X == 0 && Y == 0 && Z == 0)
					{
						SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
					}
				}

				default:
				{
					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
						{
							DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
							VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
						}
					}
				}
			}
		}

		if(VehicleInfo[vehicleid][vELMSync] == 1)
		{
			switch(newstate)
			{
				case 1:
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
					VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState] = lights;

					VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 1;
				}

				default:
				{
					VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 0;

					new panels, doors, lights, tires, engine, alarm, bonnet, boot, objective;
        			GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
					UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, 0, tires);

					GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState], alarm, doors, bonnet, boot, objective);
					VehicleInfo[GetPlayerVehicleID(playerid)][vLights] = VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState];
				}
			}
		}
	}
    return 1;
}
//============================================//
stock IsInvalidObjectID(id)
{
    if(id < 320 || id > 20000) return true;
    if(id >= 18659 && id <= 18667) return true;
	return false;
}
//============================================//
stock IsCopCar(id)
{
	if(id == 427 || id == 523 || id == 528 || id == 490) return true;
	if(id >= 596 && id <= 599) return true;
	if(id == 601) return true;
	return false;
}
//============================================//
stock IsInLS(playerid) {
    new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    if(X > 46.7115 && Y > -2755.979 && X < 2931.147 && Y < -548.8602) return true;
	return false;
}
//============================================//
stock SendScannerMessage(faction, text[]) {
	if(faction != 1 && faction != 2) return 1; // Block any illegal faction IDs.
	new str[256];
    foreach(new i : Player) {
        if(PlayerInfo[i][pScanner] == 1) {
            if (CheckInvItem(i, 415)) {
                if(IsInLS(i)) {
				    switch(faction) {
				        case 1: {
				            format(str, 256, "{E6E600}(LSPD Scanner): %s", text);
				        }
				        case 2: {
				            format(str, 256, "{E6E600}(LSFD Scanner): %s", text);
				        }
				    }
                    scm(i, -1, str);
                }
            } else {
                PlayerInfo[i][pScanner] = 0;
            }
        }
    }
	return 1;
}
//============================================//
stock ForceAME(playerid, text[]) {
	new string[256], sendername[MAX_PLAYER_NAME];
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
    format(string, sizeof(string), "*** %s %s.", sendername, text);
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);
	return 1;
}
//============================================//
stock DestroyActorEx(actorid) {
    SetActorVirtualWorld(actorid, 9999);
    SetActorPos(actorid, 0.0, 0.0, 0.0);
    DestroyActor(actorid);
	return 1;
}
//============================================//
stock IsJobVehicle(playerid) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return false;
	new veh = GetPVarInt(playerid, "RouteVeh");
    if(veh >= 1) {
		switch(VehicleInfo[veh][vType]) {
		    case VEHICLE_JOB: {
		    return true; }
		    case VEHICLE_PERSONAL: {
                if(GetVehicleModel(veh) == JobInfo[GetPVarInt(playerid, "Job")-1][jVehicleID]) {
                    new key = IsPlayerVehicleSpawned(playerid);
                    if(veh == key) {
				        return true; }
			    }
		    }
		}
    }
	return false;
}
//============================================//
stock InitJob(playerid, jobid) {
	new idcar = GetPlayerVehicleID(playerid), string[128];
    if(GetPVarInt(playerid, "RouteVeh") != idcar) RemovePlayerFromVehicle(playerid);
    if(GetPVarInt(playerid, "Job") != jobid) RemovePlayerFromVehicle(playerid);
    DeletePVar(playerid, "RouteOT");
    DeletePVar(playerid, "InitJob");
    if(GetPVarInt(playerid, "OnRoute") == 0)
	{
	    new id = GetPVarInt(playerid, "OnRoute");
        if(GetPVarInt(playerid, "JobReduce") >= 1 && GetPVarInt(playerid, "MonthDon") == 0) {
            if(VehicleInfo[idcar][vType] == VEHICLE_JOB) {
		    RemovePlayerFromVehicle(playerid); }
		    format(string, sizeof(string), "You must wait (%d) seconds before starting another route!", GetPVarInt(playerid, "JobReduce"));
		    SCM(playerid, COLOR_ERROR, string);
	        return true; }
        switch(jobid)
	    {
            case 1: { // MECHANIC
	            SendClientMessage(playerid, COLOR_WHITE, "You are now on mechanic duty, use the commands (/repair, /refill).");
	            SetPVarInt(playerid, "OnRoute", 1);
	            DeletePVar(playerid, "RouteOT"); }
	        case 2: { // GARBAGE MAN
	            SetPVarInt(playerid, "OnRoute", 1);
	            DeletePVar(playerid, "RouteOT");
	            SetPVarInt(playerid, "OnRouteTime", 1);
	            TogglePlayerAllDynamicCPs(playerid, false);
	            NextRoute(playerid, TrashRoute[id][0], TrashRoute[id][1], TrashRoute[id][2], 0); }
	        case 3: { // SWEEPER ROUTE
	            SetPVarInt(playerid, "OnRoute", 1);
	            DeletePVar(playerid, "RouteOT");
	            SetPVarInt(playerid, "OnRouteTime", 1);
	            TogglePlayerAllDynamicCPs(playerid, false);
	            NextRoute(playerid, SweepRoute[id][0], SweepRoute[id][1], SweepRoute[id][2], 0); }
	        case 4: { // PIZZA BOY
	            SetPVarInt(playerid, "OnRoute", 1);
	            DeletePVar(playerid, "RouteOT");
	            SetPVarInt(playerid, "OnRouteTime", 1);
	            TogglePlayerAllDynamicCPs(playerid, false);
	            NextRoute(playerid, 2111.6963, -1788.6849, 13.5608, 0); }
	        case 5: { // TAXI DRIVER
	            SetPVarInt(playerid, "OnRoute", 1);
	            DeletePVar(playerid, "RouteOT");
	            SetPVarInt(playerid, "OnRouteTime", 1);
	            SendClientMessage(playerid, COLOR_WHITE, "You are now on taxi duty, type (/setfare) to set a fare."); }
	        case 6: { // Trucker
			    SetPVarInt(playerid, "OnRoute", 1);
				DeletePVar(playerid, "RouteOT");
				SetPVarInt(playerid, "OnRouteTime", 1);
				new found = 0;
				foreach(new b : BizIterator)
				{
		            if(BizInfo[b][bReq] == 1)
		            {
		                found++;
		            }
				}
				if(found == 0) {
				    new rand2 = random(2)+1;
				    switch(rand2) {
				        case 1: SetPVarInt(playerid, "TruckerRoute", 2);
				        default: SetPVarInt(playerid, "TruckerRoute", 3); }
				}
				else {
				    SetPVarInt(playerid, "TruckerRoute", 1); }
				SendClientMessage(playerid,COLOR_WHITE,"Head to the checkpoint to start a delivery.");
				new rand = random(3)+1;
				switch(rand) {
				    case 1: {
				        SetPVarInt(playerid, "TruckerPos", 1);
						SetPlayerCheckpoint(playerid,64.0079,-264.9132,1.5781,5.0); }
				    case 2: {
				        SetPVarInt(playerid, "TruckerPos", 2);
					    SetPlayerCheckpoint(playerid,2281.6870,-72.5195,26.5047,5.0); }
				    default: {
				        SetPVarInt(playerid, "TruckerPos", 3);
					    SetPlayerCheckpoint(playerid,1212.4586,193.5421,19.9181,5.0); }
				}
   	            TogglePlayerAllDynamicCPs(playerid, false);
	        }
	        case 7: { // Farmer
	            SetPVarInt(playerid, "OnRoute", 1);
	            DeletePVar(playerid, "RouteOT");
	            SetPVarInt(playerid, "OnRouteTime", 1);
	            TogglePlayerAllDynamicCPs(playerid, false);
	            NextRoute(playerid, FarmerRoute[id][0], FarmerRoute[id][1], FarmerRoute[id][2], 0); }
	    }
	}
	return 1;
}
//============================================//
stock IsPaintCar(vehicleid) {
	new id = GetVehicleModel(vehicleid);
	if(id == 483 || id == 534 || id == 535 || id == 536 || id == 558 || id == 559 || id == 560 ||
		id == 561 || id == 562 || id == 565 || id == 567 || id == 575 || id == 576) {
	return true; }
	return false;
}
//============================================//
stock GetMaxPaintJob(vehicleid) {
	new num = 0, id = GetVehicleModel(vehicleid);
	
	if(id == 534 || id == 535 || id == 536 || id == 558 || id == 559 ||
	id == 560 || id == 561 || id == 562 || id == 565 || id == 567 || id == 576) {
	num = 3; }
	
	if(id == 575) {
	num = 2; }
	
	if(id == 483) {
	num = 1; }
	
	return num;
}
//============================================//
stock YesNo(value)
{
	new yes[8];
	format(yes, sizeof(yes), "Yes");

	new no[8];
	format(no, sizeof(no), "No");

	if(value == 0)
	{
		return no;
	}
	else
	{
		return yes;
	}
}
//
stock StorePlayerItemInHouse(playerid, slot, houseid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[houseid][hXi], HouseInfo[houseid][hYi], HouseInfo[houseid][hZi]) && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hVwIn])
	{
	    if(!GetCloseHouseSafe(playerid, houseid)) return 1;
        new found = 0, itemf;
    	if((GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSG) && PlayerInfo[playerid][pInvItem][slot] < 200) return error(playerid, "You can not do this to prevent LSPD and LSG weapon distribution.");
    	for(new j = 0; j < MAX_HOUSE_SLOTS; j++)
    	{
	        if(HouseInfo[houseid][hInvID][j] == 0)
	        {
				if(found == 0)
				{
	            	found = houseid;
	            	itemf = PlayerInfo[playerid][pInvItem][slot];
    	        	HouseInfo[houseid][hInvID][j] = PlayerInfo[playerid][pInvItem][slot];
    	        	HouseInfo[houseid][hInvQ][j] = PlayerInfo[playerid][pInvQ][slot];
        	    	HouseInfo[houseid][hInvE][j] = PlayerInfo[playerid][pInvEx][slot];
    	        	HouseInfo[houseid][hInvS][j] = PlayerInfo[playerid][pInvS][slot];

    	        	RemoveInvItem(playerid, slot);
		        }
	        }
		}
		if(found != 0)
		{
		    SaveHouseID(houseid, 0);

		    format(string, 256, "%s stored in property.", PrintIName(itemf));
			scm(playerid, -1, string);

			ServerLog(LOG_STORE_HOUSE_ITEM, PlayerInfo[playerid][pUsername], string);

			format(string, 256, "%s stored a %s in houseid: %d", PlayerInfo[playerid][pUsername], PrintIName(itemf), houseid);
			SafeLog(string);

			CallRemoteFunction("FixInv", "i", playerid);
			SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
		}
		else error(playerid, "The property safe is full!");
	}
	return 1;
}

stock StorePlayerItemInBusiness(playerid, slot, businessid)
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[businessid][Xi], BizInfo[businessid][Yi], BizInfo[businessid][Zi]) && GetPlayerVirtualWorld(playerid) == BizInfo[businessid][VwIn])
	{
	    if(!GetCloseBizSafe(playerid, businessid)) return 1;
        new found = 0, itemf;
    	if((GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSG) && PlayerInfo[playerid][pInvItem][slot] < 200) return error(playerid, "You can not do this to prevent LSPD and LSG weapon distribution.");
    	for(new j = 0; j < MAX_BUSINESS_SLOTS; j++)
    	{
	        if(BizInfo[businessid][InvID][j] == 0)
	        {
				if(found == 0)
				{
	            	found = businessid;
	            	itemf=PlayerInfo[playerid][pInvItem][slot];
    	        	BizInfo[businessid][InvID][j] = PlayerInfo[playerid][pInvItem][slot];
    	        	BizInfo[businessid][InvQ][j] = PlayerInfo[playerid][pInvQ][slot];
        	    	BizInfo[businessid][InvE][j] = PlayerInfo[playerid][pInvEx][slot];
    	        	BizInfo[businessid][InvS][j] = PlayerInfo[playerid][pInvS][slot];
                	
                	RemoveInvItem(playerid, slot);
		        }
	        }
		}
		if(found != 0)
		{
		    SaveBizID(businessid, 0);

			format(string, 256, "%s stored in business.", PrintIName(itemf));
			scm(playerid, -1, string);

			ServerLog(LOG_STORE_BIZ_ITEM, PlayerInfo[playerid][pUsername], string);

			format(string, 256, "%s stored a %s in business ID: %d", PlayerInfo[playerid][pUsername], PrintIName(itemf), businessid);
			SafeLog(string);

			CallRemoteFunction("FixInv", "i", playerid);
			SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
		}
		else error(playerid, "The business safe is full!");
	}
	return 1;
}

stock StorePlayerItemInVehicle(playerid, slot, vehicleid)
{
	new string[128], names[MAX_PLAYER_NAME + 1];
	if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL || VehicleInfo[vehicleid][vType] == VEHICLE_LSPD)
    {
		new Float:x,Float:y,Float:z;
   		GetVehiclePos(vehicleid, x, y, z);

    	format(names, sizeof(names), "%s", PlayerNameEx(playerid));
		GiveNameSpace(names);

		if((GetPVarInt(playerid, "Member") == FACTION_LSPD || GetPVarInt(playerid, "Member") == FACTION_LSG) && PlayerInfo[playerid][pInvItem][slot] < 200)
		{
		    if(VehicleInfo[vehicleid][vType] != VEHICLE_LSPD)
		    {
		        error(playerid, "Police officers cannot do this to prevent LSPD weapon distribution.");
		        return true;
		    }
		}

		new p = DEFAULT_VEHICLE_SLOTS;
		if(IsHelmetCar(vehicleid))
		{
			p = SMALL_VEHICLE_SLOTS;
		}
		else if(IsVehicleSUV(vehicleid))
		{
			 p = MAX_VEH_SLOTS;
		}

		new foundit = 0;

		for(new j = 0; j < p; j++)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(VehicleInfo[vehicleid][vInvID][j] == 0)
				{
					if(foundit == 0)
					{
						foundit++;
        				VehicleInfo[vehicleid][vInvID][j] = PlayerInfo[playerid][pInvItem][slot];
        				VehicleInfo[vehicleid][vInvQ][j] = PlayerInfo[playerid][pInvQ][slot];
        				VehicleInfo[vehicleid][vInvE][j] = PlayerInfo[playerid][pInvEx][slot];
        				VehicleInfo[vehicleid][vInvS][j] = PlayerInfo[playerid][pInvS][slot];
	        			
	        			RemoveInvItem(playerid, slot);

						format(string, sizeof(string), "* %s places a %s in the %s.", names, PrintIName(VehicleInfo[vehicleid][vInvID][j]), PrintVehName(vehicleid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE);

						ServerLog(LOG_STORE_VEHICLE_ITEM, PlayerInfo[playerid][pUsername], string);

						SaveVehicleData(vehicleid);
					}
				}
			}
			else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
				if(j >= MAX_GLOVE_BOX_SLOTS) break;
				if(VehicleInfo[vehicleid][vgbInvID][j] == 0)
				{
					if(foundit == 0)
					{
						foundit++;
        				VehicleInfo[vehicleid][vgbInvID][j] = PlayerInfo[playerid][pInvItem][slot];
        				VehicleInfo[vehicleid][vgbInvQ][j] = PlayerInfo[playerid][pInvQ][slot];
        				VehicleInfo[vehicleid][vgbInvE][j] = PlayerInfo[playerid][pInvEx][slot];
        				VehicleInfo[vehicleid][vgbInvS][j] = PlayerInfo[playerid][pInvS][slot];
	        			
	        			RemoveInvItem(playerid, slot);

						format(string, sizeof(string), "* %s places a %s in the %s.", names, PrintIName(VehicleInfo[vehicleid][vgbInvID][j]), PrintVehName(vehicleid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE);

						ServerLog(LOG_STORE_GLOVEBOX_ITEM, PlayerInfo[playerid][pUsername], string);

						SaveVehicleData(vehicleid);
					}
				}
			}
		}
		
		if(foundit == 0)
		{
		    error(playerid,"Vehicle is full.");
		    return 1;
		}

		SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
	}
	return 1;
}

stock FormatMoney(money)
{
	new string[64];
	format(string, sizeof(string), "%i", money);

	switch(strlen(string))
	{
		case 4 .. 6:
		{
			strins(string, ",", strlen(string) - 3);
		}

		case 7 .. 9:
		{
			strins(string, ",", strlen(string) - 3);
			strins(string, ",", strlen(string) - 7);
		}
	}

	strins(string, "$", 0);
	return string;
}

stock GenerateRandomVehiclePlate()
{
	new plate[32];

	for(new i = 0; i < 7; i++)
	{
		new type = random(2);

		switch(type)
		{
			case 0:
			{
				new number[8];
				format(number, sizeof(number), "%i", random(10));
				strins(plate, number, i);
			}

			case 1:
			{
				new letter = random(26);

				switch(letter)
				{
					case 0: strins(plate, "A", i);
					case 1: strins(plate, "B", i);
					case 2: strins(plate, "C", i);
					case 3: strins(plate, "D", i);
					case 4: strins(plate, "E", i);
					case 5: strins(plate, "F", i);
					case 6: strins(plate, "G", i);
					case 7: strins(plate, "H", i);
					case 8: strins(plate, "I", i);
					case 9: strins(plate, "J", i);
					case 10: strins(plate, "K", i);
					case 11: strins(plate, "L", i);
					case 12: strins(plate, "M", i);
					case 13: strins(plate, "N", i);
					case 14: strins(plate, "O", i);
					case 15: strins(plate, "P", i);
					case 16: strins(plate, "Q", i);
					case 17: strins(plate, "R", i);
					case 18: strins(plate, "S", i);
					case 19: strins(plate, "T", i);
					case 20: strins(plate, "U", i);
					case 21: strins(plate, "V", i);
					case 22: strins(plate, "W", i);
					case 23: strins(plate, "X", i);
					case 24: strins(plate, "Y", i);
					case 25: strins(plate, "Z", i);
				}
			}
		}
	}

	return plate;
}

stock PrintVehiclePlate(plate[], color[] = "000000")
{
	new colored_plate[32];
	format(colored_plate, sizeof(colored_plate), "{%s}%s", color, plate);
	return colored_plate;
}

forward LoadPlayerCellphoneTextDraws(playerid);
public LoadPlayerCellphoneTextDraws(playerid)
{
	// Cellphone color
	td_cp_base = CreatePlayerTextDraw(playerid,550.000000, 271.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_base, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_base, 255);
	PlayerTextDrawFont(playerid,td_cp_base, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_base, 0.500000, 17.799999);
	PlayerTextDrawColor(playerid,td_cp_base, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_base, 1);
	PlayerTextDrawSetProportional(playerid,td_cp_base, 1);
	PlayerTextDrawUseBox(playerid,td_cp_base, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_base, -65281);
	PlayerTextDrawTextSize(playerid,td_cp_base, 0.000000, 88.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_base, 0);

	td_cp_margin = CreatePlayerTextDraw(playerid,550.000000, 273.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_margin, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_margin, 255);
	PlayerTextDrawFont(playerid,td_cp_margin, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_margin, 0.500000, 17.299997);
	PlayerTextDrawColor(playerid,td_cp_margin, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_margin, 1);
	PlayerTextDrawSetProportional(playerid,td_cp_margin, 1);
	PlayerTextDrawUseBox(playerid,td_cp_margin, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_margin, 255);
	PlayerTextDrawTextSize(playerid,td_cp_margin, 0.000000, 86.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_margin, 0);

	td_cp_make = CreatePlayerTextDraw(playerid,540.000000, 273.000000, "NOKIA");
	PlayerTextDrawBackgroundColor(playerid,td_cp_make, 255);
	PlayerTextDrawFont(playerid,td_cp_make, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_make, 0.200000, 0.799998);
	PlayerTextDrawColor(playerid,td_cp_make, 1684301055);
	PlayerTextDrawSetOutline(playerid,td_cp_make, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_make, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_make, 1);
	PlayerTextDrawSetSelectable(playerid,td_cp_make, 0);

	td_cp_speaker = CreatePlayerTextDraw(playerid,551.000000, 278.000000, ". . . .");
	PlayerTextDrawAlignment(playerid,td_cp_speaker, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_speaker, 255);
	PlayerTextDrawFont(playerid,td_cp_speaker, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_speaker, 0.200000, 0.799998);
	PlayerTextDrawColor(playerid,td_cp_speaker, 421075455);
	PlayerTextDrawSetOutline(playerid,td_cp_speaker, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_speaker, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_speaker, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_speaker, 0);

	td_cp_screen = CreatePlayerTextDraw(playerid,550.000000, 291.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_screen, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_screen, 255);
	PlayerTextDrawFont(playerid,td_cp_screen, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_screen, 0.500000, 12.999992);
	PlayerTextDrawColor(playerid,td_cp_screen, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_screen, 1);
	PlayerTextDrawSetProportional(playerid,td_cp_screen, 1);
	PlayerTextDrawUseBox(playerid,td_cp_screen, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_screen, 842150655);
	PlayerTextDrawTextSize(playerid,td_cp_screen, 0.000000, 78.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_screen, 0);

	td_cp_screen_bar = CreatePlayerTextDraw(playerid,550.000000, 291.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_screen_bar, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_screen_bar, 255);
	PlayerTextDrawFont(playerid,td_cp_screen_bar, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_screen_bar, 0.200000, 0.799998);
	PlayerTextDrawColor(playerid,td_cp_screen_bar, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_screen_bar, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_screen_bar, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_screen_bar, 0);
	PlayerTextDrawUseBox(playerid,td_cp_screen_bar, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_screen_bar, 200);
	PlayerTextDrawTextSize(playerid,td_cp_screen_bar, 0.000000, 78.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_screen_bar, 0);

	td_cp_button_home = CreatePlayerTextDraw(playerid,550.000000, 410.000000, "O");
	PlayerTextDrawAlignment(playerid,td_cp_button_home, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_button_home, 255);
	PlayerTextDrawFont(playerid,td_cp_button_home, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_button_home, 0.409999, 1.999997);
	PlayerTextDrawColor(playerid,td_cp_button_home, 842150655);
	PlayerTextDrawSetOutline(playerid,td_cp_button_home, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_button_home, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_button_home, 0);
	PlayerTextDrawUseBox(playerid,td_cp_button_home, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_button_home, 0);
	PlayerTextDrawTextSize(playerid,td_cp_button_home, 22.000000, 19.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_cp_button_home, 0);
	PlayerTextDrawSetPreviewRot(playerid, td_cp_button_home, 0.000000, 0.000000, 0.000000, 0.600000);
	PlayerTextDrawSetSelectable(playerid,td_cp_button_home, 1);

	td_cp_button_back = CreatePlayerTextDraw(playerid,517.000000, 409.000000, "<");
	PlayerTextDrawAlignment(playerid,td_cp_button_back, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_button_back, 255);
	PlayerTextDrawFont(playerid,td_cp_button_back, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_button_back, 0.469998, 2.299997);
	PlayerTextDrawColor(playerid,td_cp_button_back, 842150655);
	PlayerTextDrawSetOutline(playerid,td_cp_button_back, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_button_back, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_button_back, 0);
	PlayerTextDrawUseBox(playerid,td_cp_button_back, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_button_back, 0);
	PlayerTextDrawTextSize(playerid,td_cp_button_back, 22.000000, 12.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_cp_button_back, 0);
	PlayerTextDrawSetPreviewRot(playerid, td_cp_button_back, 0.000000, 0.000000, 0.000000, 0.600000);
	PlayerTextDrawSetSelectable(playerid,td_cp_button_back, 1);

	td_cp_time = CreatePlayerTextDraw(playerid,575.000000, 291.000000, "12:34");
	PlayerTextDrawBackgroundColor(playerid,td_cp_time, 255);
	PlayerTextDrawFont(playerid,td_cp_time, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_time, 0.140000, 0.699998);
	PlayerTextDrawColor(playerid,td_cp_time, 1684301055);
	PlayerTextDrawSetOutline(playerid,td_cp_time, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_time, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_time, 1);
	PlayerTextDrawSetSelectable(playerid,td_cp_time, 0);

	td_cp_carrier = CreatePlayerTextDraw(playerid,512.000000, 291.000000, "AT&T");
	PlayerTextDrawBackgroundColor(playerid,td_cp_carrier, 255);
	PlayerTextDrawFont(playerid,td_cp_carrier, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_carrier, 0.140000, 0.699998);
	PlayerTextDrawColor(playerid,td_cp_carrier, 1684301055);
	PlayerTextDrawSetOutline(playerid,td_cp_carrier, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_carrier, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_carrier, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_carrier, 0);

	td_cp_app_dial = CreatePlayerTextDraw(playerid,512.000000, 303.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_app_dial, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_dial, 255);
	PlayerTextDrawFont(playerid,td_cp_app_dial, 5);
	PlayerTextDrawLetterSize(playerid,td_cp_app_dial, 0.090000, 0.399998);
	PlayerTextDrawColor(playerid,td_cp_app_dial, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_app_dial, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_dial, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_dial, 0);
	PlayerTextDrawUseBox(playerid,td_cp_app_dial, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_app_dial, 0);
	PlayerTextDrawTextSize(playerid,td_cp_app_dial, 22.000000, 27.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_cp_app_dial, 19807);
	PlayerTextDrawSetPreviewRot(playerid, td_cp_app_dial, -30.000000, 0.000000, 140.000000, 0.800000);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_dial, 1);

	td_cp_app_dial_text = CreatePlayerTextDraw(playerid,523.000000, 330.000000, "Dial");
	PlayerTextDrawAlignment(playerid,td_cp_app_dial_text, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_dial_text, 255);
	PlayerTextDrawFont(playerid,td_cp_app_dial_text, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_app_dial_text, 0.140000, 0.699998);
	PlayerTextDrawColor(playerid,td_cp_app_dial_text, -926365441);
	PlayerTextDrawSetOutline(playerid,td_cp_app_dial_text, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_dial_text, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_dial_text, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_dial_text, 0);

	td_cp_app_contacts = CreatePlayerTextDraw(playerid,539.000000, 303.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_app_contacts, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_contacts, 255);
	PlayerTextDrawFont(playerid,td_cp_app_contacts, 5);
	PlayerTextDrawLetterSize(playerid,td_cp_app_contacts, 0.090000, 0.399998);
	PlayerTextDrawColor(playerid,td_cp_app_contacts, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_app_contacts, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_contacts, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_contacts, 0);
	PlayerTextDrawUseBox(playerid,td_cp_app_contacts, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_app_contacts, 0);
	PlayerTextDrawTextSize(playerid,td_cp_app_contacts, 22.000000, 27.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_cp_app_contacts, 0);
	PlayerTextDrawSetPreviewRot(playerid, td_cp_app_contacts, -50.000000, 5.000000, 10.000000, 0.800000);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_contacts, 1);

	td_cp_app_contacts_text = CreatePlayerTextDraw(playerid,550.000000, 330.000000, "Contacts");
	PlayerTextDrawAlignment(playerid,td_cp_app_contacts_text, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_contacts_text, 255);
	PlayerTextDrawFont(playerid,td_cp_app_contacts_text, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_app_contacts_text, 0.140000, 0.699998);
	PlayerTextDrawColor(playerid,td_cp_app_contacts_text, -926365441);
	PlayerTextDrawSetOutline(playerid,td_cp_app_contacts_text, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_contacts_text, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_contacts_text, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_contacts_text, 0);

	td_cp_app_settings = CreatePlayerTextDraw(playerid,566.000000, 303.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_app_settings, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_settings, 255);
	PlayerTextDrawFont(playerid,td_cp_app_settings, 5);
	PlayerTextDrawLetterSize(playerid,td_cp_app_settings, 0.090000, 0.399998);
	PlayerTextDrawColor(playerid,td_cp_app_settings, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_app_settings, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_settings, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_settings, 0);
	PlayerTextDrawUseBox(playerid,td_cp_app_settings, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_app_settings, 0);
	PlayerTextDrawTextSize(playerid,td_cp_app_settings, 22.000000, 27.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_cp_app_settings, 19627);
	PlayerTextDrawSetPreviewRot(playerid, td_cp_app_settings, 90.000000, 0.000000, -45.000000, 0.699999);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_settings, 1);

	td_cp_app_settings_text = CreatePlayerTextDraw(playerid,577.000000, 330.000000, "Settings");
	PlayerTextDrawAlignment(playerid,td_cp_app_settings_text, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_settings_text, 255);
	PlayerTextDrawFont(playerid,td_cp_app_settings_text, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_app_settings_text, 0.140000, 0.699998);
	PlayerTextDrawColor(playerid,td_cp_app_settings_text, -926365441);
	PlayerTextDrawSetOutline(playerid,td_cp_app_settings_text, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_settings_text, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_settings_text, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_settings_text, 0);

	td_cp_app_house = CreatePlayerTextDraw(playerid,512.000000, 339.000000, "~n~");
	PlayerTextDrawAlignment(playerid,td_cp_app_house, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_house, 255);
	PlayerTextDrawFont(playerid,td_cp_app_house, 5);
	PlayerTextDrawLetterSize(playerid,td_cp_app_house, 0.090000, 0.399998);
	PlayerTextDrawColor(playerid,td_cp_app_house, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_app_house, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_house, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_house, 0);
	PlayerTextDrawUseBox(playerid,td_cp_app_house, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_app_house, 0);
	PlayerTextDrawTextSize(playerid,td_cp_app_house, 22.000000, 27.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_cp_app_house, 19524);
	PlayerTextDrawSetPreviewRot(playerid, td_cp_app_house, 0.000000, 0.000000, 0.000000, 0.600000);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_house, 1);

	td_cp_app_house_text = CreatePlayerTextDraw(playerid,523.000000, 366.000000, "House");
	PlayerTextDrawAlignment(playerid,td_cp_app_house_text, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_app_house_text, 255);
	PlayerTextDrawFont(playerid,td_cp_app_house_text, 1);
	PlayerTextDrawLetterSize(playerid,td_cp_app_house_text, 0.140000, 0.699998);
	PlayerTextDrawColor(playerid,td_cp_app_house_text, -926365441);
	PlayerTextDrawSetOutline(playerid,td_cp_app_house_text, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_app_house_text, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_app_house_text, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_app_house_text, 0);

	td_cp_dial_number = CreatePlayerTextDraw(playerid,549.000000, 309.000000, "5745725");
	PlayerTextDrawAlignment(playerid,td_cp_dial_number, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_dial_number, 255);
	PlayerTextDrawFont(playerid,td_cp_dial_number, 2);
	PlayerTextDrawLetterSize(playerid,td_cp_dial_number, 0.270000, 1.700000);
	PlayerTextDrawColor(playerid,td_cp_dial_number, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_dial_number, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_dial_number, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_dial_number, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_dial_number, 1);

	td_cp_dial_underline = CreatePlayerTextDraw(playerid,549.000000, 319.000000, "...............");
	PlayerTextDrawAlignment(playerid,td_cp_dial_underline, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_dial_underline, 255);
	PlayerTextDrawFont(playerid,td_cp_dial_underline, 2);
	PlayerTextDrawLetterSize(playerid,td_cp_dial_underline, 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,td_cp_dial_underline, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_dial_underline, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_dial_underline, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_dial_underline, 0);
	PlayerTextDrawSetSelectable(playerid,td_cp_dial_underline, 0);

	td_cp_dial_save = CreatePlayerTextDraw(playerid,550.000000, 343.000000, "Save");
	PlayerTextDrawAlignment(playerid,td_cp_dial_save, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_dial_save, 255);
	PlayerTextDrawFont(playerid,td_cp_dial_save, 2);
	PlayerTextDrawLetterSize(playerid,td_cp_dial_save, 0.270000, 1.700000);
	PlayerTextDrawColor(playerid,td_cp_dial_save, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_dial_save, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_dial_save, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_dial_save, 0);
	PlayerTextDrawUseBox(playerid,td_cp_dial_save, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_dial_save, 16711935);
	PlayerTextDrawTextSize(playerid,td_cp_dial_save, 0.000000, 71.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_dial_save, 1);

	td_cp_dial_call = CreatePlayerTextDraw(playerid,550.000000, 366.000000, "Call");
	PlayerTextDrawAlignment(playerid,td_cp_dial_call, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_dial_call, 255);
	PlayerTextDrawFont(playerid,td_cp_dial_call, 2);
	PlayerTextDrawLetterSize(playerid,td_cp_dial_call, 0.270000, 1.700000);
	PlayerTextDrawColor(playerid,td_cp_dial_call, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_dial_call, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_dial_call, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_dial_call, 0);
	PlayerTextDrawUseBox(playerid,td_cp_dial_call, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_dial_call, 16711935);
	PlayerTextDrawTextSize(playerid,td_cp_dial_call, 0.000000, 71.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_dial_call, 1);

	td_cp_dial_text = CreatePlayerTextDraw(playerid,550.000000, 389.000000, "Text");
	PlayerTextDrawAlignment(playerid,td_cp_dial_text, 2);
	PlayerTextDrawBackgroundColor(playerid,td_cp_dial_text, 255);
	PlayerTextDrawFont(playerid,td_cp_dial_text, 2);
	PlayerTextDrawLetterSize(playerid,td_cp_dial_text, 0.270000, 1.700000);
	PlayerTextDrawColor(playerid,td_cp_dial_text, -1);
	PlayerTextDrawSetOutline(playerid,td_cp_dial_text, 0);
	PlayerTextDrawSetProportional(playerid,td_cp_dial_text, 1);
	PlayerTextDrawSetShadow(playerid,td_cp_dial_text, 0);
	PlayerTextDrawUseBox(playerid,td_cp_dial_text, 1);
	PlayerTextDrawBoxColor(playerid,td_cp_dial_text, 16711935);
	PlayerTextDrawTextSize(playerid,td_cp_dial_text, 0.000000, 71.000000);
	PlayerTextDrawSetSelectable(playerid,td_cp_dial_text, 1);
}

forward ShowPlayerCellphone(playerid);
public ShowPlayerCellphone(playerid)
{
	PlayerTextDrawShow(playerid, td_cp_base);
	PlayerTextDrawShow(playerid, td_cp_margin);
	PlayerTextDrawShow(playerid, td_cp_screen);
	PlayerTextDrawShow(playerid, td_cp_screen_bar);
	PlayerTextDrawShow(playerid, td_cp_make);
	PlayerTextDrawShow(playerid, td_cp_speaker);
	PlayerTextDrawShow(playerid, td_cp_button_home);
	PlayerTextDrawShow(playerid, td_cp_button_back);
	PlayerTextDrawShow(playerid, td_cp_time);
	PlayerTextDrawShow(playerid, td_cp_carrier);
	PlayerTextDrawShow(playerid, td_cp_app_dial);
	PlayerTextDrawShow(playerid, td_cp_app_dial_text);
	PlayerTextDrawShow(playerid, td_cp_app_contacts);
	PlayerTextDrawShow(playerid, td_cp_app_contacts_text);
	PlayerTextDrawShow(playerid, td_cp_app_settings);
	PlayerTextDrawShow(playerid, td_cp_app_settings_text);
	PlayerTextDrawShow(playerid, td_cp_app_house);
	PlayerTextDrawShow(playerid, td_cp_app_house_text);
}

forward ShowPlayerCellphoneApps(playerid);
public ShowPlayerCellphoneApps(playerid)
{
	PlayerTextDrawShow(playerid, td_cp_app_dial);
	PlayerTextDrawShow(playerid, td_cp_app_dial_text);
	PlayerTextDrawShow(playerid, td_cp_app_contacts);
	PlayerTextDrawShow(playerid, td_cp_app_contacts_text);
	PlayerTextDrawShow(playerid, td_cp_app_settings);
	PlayerTextDrawShow(playerid, td_cp_app_settings_text);
	PlayerTextDrawShow(playerid, td_cp_app_house);
	PlayerTextDrawShow(playerid, td_cp_app_house_text);
}

forward ShowPlayerCellphoneAppDial(playerid);
public ShowPlayerCellphoneAppDial(playerid)
{
	PlayerTextDrawShow(playerid, td_cp_dial_number);
	PlayerTextDrawShow(playerid, td_cp_dial_underline);
	PlayerTextDrawShow(playerid, td_cp_dial_save);
	PlayerTextDrawShow(playerid, td_cp_dial_call);
	PlayerTextDrawShow(playerid, td_cp_dial_text);
}

forward HidePlayerCellphone(playerid);
public HidePlayerCellphone(playerid)
{
	PlayerTextDrawHide(playerid, td_cp_base);
	PlayerTextDrawHide(playerid, td_cp_margin);
	PlayerTextDrawHide(playerid, td_cp_screen);
	PlayerTextDrawHide(playerid, td_cp_screen_bar);
	PlayerTextDrawHide(playerid, td_cp_make);
	PlayerTextDrawHide(playerid, td_cp_speaker);
	PlayerTextDrawHide(playerid, td_cp_button_home);
	PlayerTextDrawHide(playerid, td_cp_button_back);
	PlayerTextDrawHide(playerid, td_cp_time);
	PlayerTextDrawHide(playerid, td_cp_carrier);
	PlayerTextDrawHide(playerid, td_cp_app_dial);
	PlayerTextDrawHide(playerid, td_cp_app_dial_text);
	PlayerTextDrawHide(playerid, td_cp_app_contacts);
	PlayerTextDrawHide(playerid, td_cp_app_contacts_text);
	PlayerTextDrawHide(playerid, td_cp_app_settings);
	PlayerTextDrawHide(playerid, td_cp_app_settings_text);
	PlayerTextDrawHide(playerid, td_cp_app_house);
	PlayerTextDrawHide(playerid, td_cp_app_house_text);
}

forward HidePlayerCellphoneApps(playerid);
public HidePlayerCellphoneApps(playerid)
{
	PlayerTextDrawHide(playerid, td_cp_app_dial);
	PlayerTextDrawHide(playerid, td_cp_app_dial_text);
	PlayerTextDrawHide(playerid, td_cp_app_contacts);
	PlayerTextDrawHide(playerid, td_cp_app_contacts_text);
	PlayerTextDrawHide(playerid, td_cp_app_settings);
	PlayerTextDrawHide(playerid, td_cp_app_settings_text);
	PlayerTextDrawHide(playerid, td_cp_app_house);
	PlayerTextDrawHide(playerid, td_cp_app_house_text);
}

forward HidePlayerCellphoneAppDial(playerid);
public HidePlayerCellphoneAppDial(playerid)
{
	PlayerTextDrawHide(playerid, td_cp_dial_number);
	PlayerTextDrawHide(playerid, td_cp_dial_underline);
	PlayerTextDrawHide(playerid, td_cp_dial_save);
	PlayerTextDrawHide(playerid, td_cp_dial_call);
	PlayerTextDrawHide(playerid, td_cp_dial_text);
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
    {
		if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid)
		{
			return 1;
		}
	}
	return 0;
}

stock abs(int)
{
	if (int < 0)
	{
		return -int;
	}
	else
	{
		return int;
	}
}

forward UpdateHouseNames(i);
public UpdateHouseNames(i)
{
    new fields, rows, fetch[40];
    cache_get_data(rows, fields);
    if(rows)
    {
	    cache_get_field_content(0, "Owner", fetch);
	    format(HouseInfo[i][hOwner], 24, "%s", fetch);
	}
	return 1;
}

forward UpdateBizNames(i);
public UpdateBizNames(i)
{
    new fields, rows, fetch[40];
    cache_get_data(rows, fields);
    if(rows)
    {
	    cache_get_field_content(0, "Owner", fetch);
	    format(BizInfo[i][Owner], 24, "%s", fetch);
	}
	return 1;
}

forward UpdateVehicleNames(vehicleID);
public UpdateVehicleNames(vehicleID)
{
    if(cache_get_row_count() > 0)
    {
	    cache_get_field_content(0, "Owner", VehicleInfo[vehicleID][vOwner], handlesql, MAX_PLAYER_NAME);
	}
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	switch(errorid)
	{
		case CR_CONN_HOST_ERROR:
		{
			printf("MySQL CONNECTION FAILED!");
		}
		case CR_SERVER_GONE_ERROR:
		{
			printf("Lost connection to server, trying reconnect...");
			mysql_reconnect(connectionHandle);
		}
		case ER_SYNTAX_ERROR:
		{
			printf("----------------------------------------------");
			printf("      [MYSQL] SOMETHING WENT WRONG", query);
			printf("QUERY: `%s`", query);
			printf("CALLBACK: %s", callback);
			printf("ERROR: %s", error);
			printf("----------------------------------------------");
		}
	}
	return 1;
}

stock IsHouseOutdoorObject(houseid, objectid)
{
	if(GetDistanceFromPointToPoint(HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], 
		HouseInfo[houseid][hoX][objectid], HouseInfo[houseid][hoY][objectid], HouseInfo[houseid][hoZ][objectid]) <= HOUSE_PLANT_DISTANCE)
	{
		return 1;
	}
	return 0;
}

stock GetHouseOutdoorObjects(houseid)
{
	new count;

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(GetDistanceFromPointToPoint(HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], 
			HouseInfo[houseid][hoX][i], HouseInfo[houseid][hoY][i], HouseInfo[houseid][hoZ][i]) <= HOUSE_PLANT_DISTANCE)
		{
			count++;
		}
	}
	return count;
}

stock IsBizOutdoorObject(businessid, objectid)
{
	if(GetDistanceFromPointToPoint(BizInfo[businessid][Xo], BizInfo[businessid][Yo], BizInfo[businessid][Zo], 
		BizInfo[businessid][boX][objectid], BizInfo[businessid][boY][objectid], BizInfo[businessid][boZ][objectid]) <= HOUSE_PLANT_DISTANCE)
	{
		return 1;
	}
	return 0;
}

stock GetBizOutdoorObjects(businessid)
{
	new count;

	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(GetDistanceFromPointToPoint(BizInfo[businessid][Xo], BizInfo[businessid][Yo], BizInfo[businessid][Zo], 
			BizInfo[businessid][boX][i], BizInfo[businessid][boY][i], BizInfo[businessid][boZ][i]) <= HOUSE_PLANT_DISTANCE)
		{
			count++;
		}
	}
	return count;
}

forward CheckAdminJails(playerid);
public CheckAdminJails(playerid)
{

	return 1;
}

forward OnCheckIfNameExists(playerid, name[]);
public OnCheckIfNameExists(playerid, name[])
{
	if(cache_get_row_count() > 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "There is a character registered with this name already.");
		return 1;
	}
	else
	{
		new string[128];

		format(string, sizeof(string), "AdmCmd: %s (ID: %i) wishes to change his name to %s. (/accept name or /deny name)", 
			GiveNameSpaceEx(PlayerInfo[playerid][pUsername]),
			playerid, 
			name);
		SendAdminMessage(COLOR_YELLOW, string);

		SetPVarInt(playerid, "PendingChangeName", 1);
		SetPVarString(playerid, "PendingChangeNameString", name);

		SendClientMessage(playerid, COLOR_WHITE, "You have submitted your request for a name change.");
	}
	return 1;
}

forward OnCheckIfNameExistsAdmin(playerid, targetid, name[]);
public OnCheckIfNameExistsAdmin(playerid, targetid, name[])
{
	if(cache_get_row_count() > 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "There is a character registered with this name already.");
		return 1;
	}
	else
	{
		new string[128];

		format(string, sizeof(string), "AdmCmd: %s has changed %s's name to %s.", 
			AdminName(playerid),
			PlayerInfo[targetid][pName], 
			name);
		SendAdminMessage(COLOR_YELLOW, string);

		new query[256];
		mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Name='%s' WHERE Name='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE businesses SET Owner='%s' WHERE Owner='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE houses SET Owner='%s' WHERE Owner='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE logs_adminjails SET Name='%s' WHERE Name='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE logs_bans SET bUsername='%s' WHERE bUsername='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		mysql_format(handlesql, query, sizeof(query), "UPDATE logs_kicks SET Name='%s' WHERE Name='%s'", name, PlayerInfo[targetid][pUsername]);
		mysql_pquery(handlesql, query, "");

		foreach(new i : BizIterator)
		{
			if(strcmp(BizInfo[i][Owner], PlayerInfo[targetid][pUsername]) == 0)
			{
				format(BizInfo[i][Owner], MAX_PLAYER_NAME, name);
			}
		}

		foreach(new i : HouseIterator)
		{
			if(strcmp(HouseInfo[i][hOwner], PlayerInfo[targetid][pUsername]) == 0)
			{
				format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, name);
			}
		}

		foreach(new i : VehicleIterator)
		{
			if(strcmp(VehicleInfo[i][vOwner], PlayerInfo[targetid][pUsername]) == 0)
			{
				format(VehicleInfo[i][vOwner], MAX_PLAYER_NAME, name);
			}
		}

		SetPlayerName(targetid, name);
		format(PlayerInfo[targetid][pUsername], MAX_PLAYER_NAME, name);
		format(PlayerInfo[targetid][pName], MAX_PLAYER_NAME, name);
		GiveNameSpace(PlayerInfo[targetid][pName]);
	}
	return 1;
}

forward OnCheckIfForumNameExists(playerid, name[]);
public OnCheckIfForumNameExists(playerid, name[])
{
	if(cache_get_row_count() > 0)
	{
		SendClientMessage(playerid, COLOR_ERROR, "There is a character registered with this forum name already.");
		return 1;
	}
	else
	{
		new string[128], forum_name[64];

		GetPVarString(playerid, "ForumName", forum_name, sizeof(forum_name));

		format(string, sizeof(string), "AdmCmd: %s (ID: %i) wishes to change his forum name from %s to %s. (/accept forumname or /deny forumname)", 
			GiveNameSpaceEx(PlayerInfo[playerid][pUsername]), 
			playerid, 
			forum_name, 
			name);
		SendAdminMessage(COLOR_YELLOW, string);

		SetPVarInt(playerid, "PendingForumName", 1);
		SetPVarString(playerid, "PendingForumNameString", name);

		SendClientMessage(playerid, COLOR_WHITE, "You have submitted your request for a forum name change.");
	}
	return 1;
}

stock GetPlayerForumName(playerid)
{
	new forum_name[64];
	GetPVarString(playerid, "ForumName", forum_name, sizeof(forum_name));
	return forum_name;
}

forward OnDoorSaved(doorid);
public OnDoorSaved(doorid)
{
	DoorInfo[doorid][dDBID] = cache_insert_id();
	return 1;
}

forward DoorSave(doorid);
public DoorSave(doorid)
{
	new query[2048];
	mysql_format(handlesql, query, sizeof(query), "UPDATE doors SET Model=%i, X=%f, Y=%f, Z=%f, Xr=%f, Yr=%f, Zr=%f, oX=%f, oY=%f, oZ=%f, oXr=%f, oYr=%f, oZr=%f, Interior=%i, VirtualWorld=%i, Speed=%f, Faction=%i, OperateRange=%f, Timer=%i WHERE ID=%i",
		DoorInfo[doorid][dModel], 
		DoorInfo[doorid][dX], 
		DoorInfo[doorid][dY], 
		DoorInfo[doorid][dZ], 
		DoorInfo[doorid][dXr], 
		DoorInfo[doorid][dYr], 
		DoorInfo[doorid][dZr], 
		DoorInfo[doorid][doX], 
		DoorInfo[doorid][doY], 
		DoorInfo[doorid][doZ], 
		DoorInfo[doorid][doXr], 
		DoorInfo[doorid][doYr], 
		DoorInfo[doorid][doZr], 
		DoorInfo[doorid][dInterior], DoorInfo[doorid][dVirtualWorld], 
		DoorInfo[doorid][dSpeed], 
		DoorInfo[doorid][dFaction],
		DoorInfo[doorid][dOperateRange],
		DoorInfo[doorid][dTimer],
		DoorInfo[doorid][dDBID]);
	mysql_pquery(handlesql, query);
	return 1;
}

forward LoadDoors();
public LoadDoors()
{
	new query[1024];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM doors");
	mysql_pquery(handlesql, query, "OnDoorsLoaded");
	return 1;
}

forward OnDoorsLoaded();
public OnDoorsLoaded()
{
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		DoorInfo[i][dDBID] = cache_get_field_content_int(i, "ID");
		DoorInfo[i][dModel] = cache_get_field_content_int(i, "Model");
		DoorInfo[i][dX] = cache_get_field_content_float(i, "X");
		DoorInfo[i][dY] = cache_get_field_content_float(i, "Y");
		DoorInfo[i][dZ] = cache_get_field_content_float(i, "Z");
		DoorInfo[i][dXr] = cache_get_field_content_float(i, "Xr");
		DoorInfo[i][dYr] = cache_get_field_content_float(i, "Yr");
		DoorInfo[i][dZr] = cache_get_field_content_float(i, "Zr");
		DoorInfo[i][doX] = cache_get_field_content_float(i, "oX");
		DoorInfo[i][doY] = cache_get_field_content_float(i, "oY");
		DoorInfo[i][doZ] = cache_get_field_content_float(i, "oZ");
		DoorInfo[i][doXr] = cache_get_field_content_float(i, "oXr");
		DoorInfo[i][doYr] = cache_get_field_content_float(i, "oYr");
		DoorInfo[i][doZr] = cache_get_field_content_float(i, "oZr");
		DoorInfo[i][dInterior] = cache_get_field_content_int(i, "Interior");
		DoorInfo[i][dVirtualWorld] = cache_get_field_content_int(i, "VirtualWorld");
		DoorInfo[i][dSpeed] = cache_get_field_content_float(i, "Speed");
		DoorInfo[i][dFaction] = cache_get_field_content_int(i, "Faction");
		DoorInfo[i][dOperateRange] = cache_get_field_content_float(i, "OperateRange");
		DoorInfo[i][dTimer] = cache_get_field_content_int(i, "Timer");

		DoorInfo[i][dID] = CreateDynamicObject(DoorInfo[i][dModel], 
			DoorInfo[i][dX], DoorInfo[i][dY], DoorInfo[i][dZ],
			DoorInfo[i][dXr], DoorInfo[i][dYr], DoorInfo[i][dZr],
			DoorInfo[i][dVirtualWorld], DoorInfo[i][dInterior]);
	}
	return 1;
}

forward OnGateSaved(gateid);
public OnGateSaved(gateid)
{
	GateInfo[gateid][gDBID] = cache_insert_id();
	return 1;
}

forward GateSave(gateid);
public GateSave(gateid)
{
	new query[2048];
	mysql_format(handlesql, query, sizeof(query), "UPDATE gates SET Model=%i, X=%f, Y=%f, Z=%f, Xr=%f, Yr=%f, Zr=%f, oX=%f, oY=%f, oZ=%f, oXr=%f, oYr=%f, oZr=%f, Interior=%i, VirtualWorld=%i, Speed=%f, Faction=%i, OperateRange=%f, Timer=%i WHERE ID=%i",
		GateInfo[gateid][gModel], 
		GateInfo[gateid][gX], 
		GateInfo[gateid][gY], 
		GateInfo[gateid][gZ], 
		GateInfo[gateid][gXr], 
		GateInfo[gateid][gYr], 
		GateInfo[gateid][gZr], 
		GateInfo[gateid][goX], 
		GateInfo[gateid][goY], 
		GateInfo[gateid][goZ], 
		GateInfo[gateid][goXr], 
		GateInfo[gateid][goYr], 
		GateInfo[gateid][goZr], 
		GateInfo[gateid][gInterior], GateInfo[gateid][gVirtualWorld], 
		GateInfo[gateid][gSpeed], 
		GateInfo[gateid][gFaction],
		GateInfo[gateid][gOperateRange],
		GateInfo[gateid][gTimer],
		GateInfo[gateid][gDBID]);
	mysql_pquery(handlesql, query);
	return 1;
}

forward LoadGates();
public LoadGates()
{
	new query[1024];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM gates");
	mysql_pquery(handlesql, query, "OnGatesLoaded");
	return 1;
}

forward OnGatesLoaded();
public OnGatesLoaded()
{
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		GateInfo[i][gDBID] = cache_get_field_content_int(i, "ID");
		GateInfo[i][gModel] = cache_get_field_content_int(i, "Model");
		GateInfo[i][gX] = cache_get_field_content_float(i, "X");
		GateInfo[i][gY] = cache_get_field_content_float(i, "Y");
		GateInfo[i][gZ] = cache_get_field_content_float(i, "Z");
		GateInfo[i][gXr] = cache_get_field_content_float(i, "Xr");
		GateInfo[i][gYr] = cache_get_field_content_float(i, "Yr");
		GateInfo[i][gZr] = cache_get_field_content_float(i, "Zr");
		GateInfo[i][goX] = cache_get_field_content_float(i, "oX");
		GateInfo[i][goY] = cache_get_field_content_float(i, "oY");
		GateInfo[i][goZ] = cache_get_field_content_float(i, "oZ");
		GateInfo[i][goXr] = cache_get_field_content_float(i, "oXr");
		GateInfo[i][goYr] = cache_get_field_content_float(i, "oYr");
		GateInfo[i][goZr] = cache_get_field_content_float(i, "oZr");
		GateInfo[i][gInterior] = cache_get_field_content_int(i, "Interior");
		GateInfo[i][gVirtualWorld] = cache_get_field_content_int(i, "VirtualWorld");
		GateInfo[i][gSpeed] = cache_get_field_content_float(i, "Speed");
		GateInfo[i][gFaction] = cache_get_field_content_int(i, "Faction");
		GateInfo[i][gOperateRange] = cache_get_field_content_float(i, "OperateRange");
		GateInfo[i][gTimer] = cache_get_field_content_int(i, "Timer");

		GateInfo[i][gID] = CreateDynamicObject(GateInfo[i][gModel], 
			GateInfo[i][gX], GateInfo[i][gY], GateInfo[i][gZ],
			GateInfo[i][gXr], GateInfo[i][gYr], GateInfo[i][gZr],
			GateInfo[i][gVirtualWorld], GateInfo[i][gInterior]);
	}
	return 1;
}

forward OnJailedPlayersLoaded();
public OnJailedPlayersLoaded()
{
	new query[256];
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		new id = cache_get_field_content_int(i, "ID");

		new date[64], year, month, day, hour, minute, second;
		cache_get_field_content(i, "JailedUntil", date);

		new temp_date[32];

		strmid(temp_date, date, 0, 4);
		year = strval(temp_date);

		strmid(temp_date, date, 5, 7);
		month = strval(temp_date);

		strmid(temp_date, date, 8, 10);
		day = strval(temp_date);

		strmid(temp_date, date, 13, 15);
		hour = strval(temp_date);

		strmid(temp_date, date, 16, 18);
		minute = strval(temp_date);

		strmid(temp_date, date, 19, 21);
		second = strval(temp_date);

		new year2, month2, day2;
		new hour2, minute2, second2;
		getdate(year2, month2, day2);
		gettime(hour2, minute2, second2);

		new bool:unjail = false;
		if(year2 > year)
		{
			unjail = true;
		}
		else if(year2 == year)
		{
			if(month2 > month)
			{
				unjail = true;
			}
			else if(month2 == month)
			{
				if(day2 > day)
				{
					unjail = true;
				}
				else if(day2 == day)
				{
					if(hour2 > hour)
					{
						unjail = true;
					}
					else if(hour2 == hour)
					{
						if(minute2 > minute)
						{
							unjail = true;
						}
						else if(minute2 == minute)
						{
							if(second2 >= second)
							{
								unjail = true;
							}
						}
					}
				}
			}
		}

		if(unjail == true)
		{
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET JailedUntil='None' ID=%i", 
				id);
			mysql_pquery(handlesql, query);
		}
	}

	foreach(new i : Player)
	{
		if(GetPVarInt(i, "Jailed") == 3)
		{
			new date[64], year, month, day, hour, minute, second;
			format(date, sizeof(date), PlayerInfo[i][pJailedUntil]);

			new temp_date[32];

			strmid(temp_date, date, 0, 4);
			year = strval(temp_date);

			strmid(temp_date, date, 5, 7);
			month = strval(temp_date);

			strmid(temp_date, date, 8, 10);
			day = strval(temp_date);

			strmid(temp_date, date, 13, 15);
			hour = strval(temp_date);

			strmid(temp_date, date, 16, 18);
			minute = strval(temp_date);

			strmid(temp_date, date, 19, 21);
			second = strval(temp_date);

			new year2, month2, day2;
			new hour2, minute2, second2;
			getdate(year2, month2, day2);
			gettime(hour2, minute2, second2);

			new bool:unjail = false;
			if(year2 > year)
			{
				unjail = true;
			}
			else if(year2 == year)
			{
				if(month2 > month)
				{
					unjail = true;
				}
				else if(month2 == month)
				{
					if(day2 > day)
					{
						unjail = true;
					}
					else if(day2 == day)
					{
						if(hour2 > hour)
						{
							unjail = true;
						}
						else if(hour2 == hour)
						{
							if(minute2 > minute)
							{
								unjail = true;
							}
							else if(minute2 == minute)
							{
								if(second2 >= second)
								{
									unjail = true;
								}
							}
						}
					}
				}
			}

			if(unjail == true)
			{
				SetPlayerPosEx(i, 1552.7952,-1675.5333,16.1953);
	    		SetPlayerInterior(i, 0);
	    		SendClientMessage(i, COLOR_WHITE,"You have paid your debt to society.");
	    		GameTextForPlayer(i, "~g~Freedom~n~~w~Try to be a better citizen", 5000, 1);
	    		TogglePlayerControllable(i, false);
	    		SetPlayerVirtualWorld(i, 0);
	    		SetPVarInt(i, "Jailed", 0);
	    		SetPVarInt(i, "Mute", 0);
	    		SetPVarInt(i, "Bail", 0);
	    		SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", i, true);
	    		Streamer_Update(i);

	    		mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET JailedUntil='None' WHERE ID=%i", 
					PlayerInfo[i][pID]);
				mysql_pquery(handlesql, query);
			}
		}
		else if(GetPVarInt(i, "Jailed") == 0)
		{
			format(PlayerInfo[i][pJailedUntil], 64, "None");
		}
	}
	return 1;
}

forward OnTempBannedPlayersLoaded();
public OnTempBannedPlayersLoaded()
{
	new query[256];
	for(new i = 0; i < cache_get_row_count(); i++)
	{
		new id = cache_get_field_content_int(i, "ID");

		new name[MAX_PLAYER_NAME];
		cache_get_field_content(i, "bUsername", name);

		new date[64], year, month, day, hour, minute, second;
		cache_get_field_content(i, "BannedUntil", date);

		new temp_date[32];

		strmid(temp_date, date, 0, 4);
		year = strval(temp_date);

		strmid(temp_date, date, 5, 7);
		month = strval(temp_date);

		strmid(temp_date, date, 8, 10);
		day = strval(temp_date);

		strmid(temp_date, date, 13, 15);
		hour = strval(temp_date);

		strmid(temp_date, date, 16, 18);
		minute = strval(temp_date);

		strmid(temp_date, date, 19, 21);
		second = strval(temp_date);

		new year2, month2, day2;
		new hour2, minute2, second2;
		getdate(year2, month2, day2);
		gettime(hour2, minute2, second2);

		new bool:unban = false;
		if(year2 > year)
		{
			unban = true;
		}
		else if(year2 == year)
		{
			if(month2 > month)
			{
				unban = true;
			}
			else if(month2 == month)
			{
				if(day2 > day)
				{
					unban = true;
				}
				else if(day2 == day)
				{
					if(hour2 > hour)
					{
						unban = true;
					}
					else if(hour2 == hour)
					{
						if(minute2 > minute)
						{
							unban = true;
						}
						else if(minute2 == minute)
						{
							if(second2 >= second)
							{
								unban = true;
							}
						}
					}
				}
			}
		}

		if(unban == true)
		{
			mysql_format(handlesql, query, sizeof(query), "DELETE FROM bans WHERE ID=%i", 
				id);
			mysql_pquery(handlesql, query);

			format(query, sizeof(query), "AdmCmd: %s was unbanned by the server.", name);
			SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, query);
		}
	}
	return 1;
}

forward CheckUnban(playerid);
public CheckUnban(playerid)
{
	if(cache_get_row_count() == 0) return SendClientMessage(playerid, COLOR_ERROR, "There is no banned player with this name.");
	
	new query[256];
	new name[MAX_PLAYER_NAME];

	cache_get_field_content(0, "bUsername", name);
	new id = cache_get_field_content_int(0, "ID");

	new Year, Month, Day, changed[32];
	getdate(Year, Month, Day);

	format(changed, sizeof(changed), "%d-%02d-%02d", Day, Month, Year);

	mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_unban (date, admin, player, adminip) VALUES ('%e', '%e', '%e', '%e')", 
			changed, AdminName(playerid), name, PlayerInfo[playerid][pIP]);
	mysql_pquery(handlesql, query);

	mysql_format(handlesql, query, sizeof(query), "DELETE FROM bans WHERE ID=%i", 
		id);
	mysql_pquery(handlesql, query);

	format(query, sizeof(query), "AdmCmd: %s was unbanned by Admin %s.", name, AdminName(playerid));
	SendClientMessageToAllEx(COLOR_PUBLIC_ADMIN, query);
	return 1;
}

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

GetXYInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
	GetVehicleZAngle(vehicleid, a);

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new Float:X,
		Float:Y,
		Float:Z,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}
 
stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{
	new Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}

stock LoadBasketball()
{
	for(new i = 0; i < sizeof(Basketballs); i++)
	{
		Basketball[i][bID] = CreateObject(2114, Basketballs[i][bsX], Basketballs[i][bsY], Basketballs[i][bsZ] - 0.8, 0, 0, 0);
		Basketball[i][bX] = Basketballs[i][bsX];
		Basketball[i][bY] = Basketballs[i][bsY];
		Basketball[i][bZ] = Basketballs[i][bsZ];
	}
}

stock BlockGarages(bool:block = true, GarageType:type = GARAGE_TYPE_ALL)
{
	if(type == GARAGE_TYPE_ALL) {
		if(block == false) {
			for(new i; i < sizeof(G_Blocker); i++)
				DestroyDynamicObject(G_Blocker[i][g_object]);
		}
		else {
			for(new i; i < sizeof(G_Blocker); i++) {
				DestroyDynamicObject(G_Blocker[i][g_object]);
				
				G_Blocker[i][g_object] = CreateDynamicObject(19325, G_Blocker[i][g_doorx], G_Blocker[i][g_doory], G_Blocker[i][g_doorz], 0.00000, 0.00000, G_Blocker[i][g_doorr]);
				SetDynamicObjectMaterial(G_Blocker[i][g_object], 0, 0, "", "", 0x00FFFFFF);
			}
		}
	}
	else {
		if(block == false) {
			for(new i; i < sizeof(G_Blocker); i++) {
				if(G_Blocker[i][g_type] == type)
					DestroyDynamicObject(G_Blocker[i][g_object]);
			}
		}
		else {
			for(new i; i < sizeof(G_Blocker); i++) {
				if(G_Blocker[i][g_type] == type) {
					DestroyDynamicObject(G_Blocker[i][g_object]);
					
					G_Blocker[i][g_object] = CreateDynamicObject(19325, G_Blocker[i][g_doorx], G_Blocker[i][g_doory], G_Blocker[i][g_doorz], 0.00000, 0.00000, G_Blocker[i][g_doorr]);
					SetDynamicObjectMaterial(G_Blocker[i][g_object], 0, 0, "", "", 0x00FFFFFF);
				}
			}
		}
	}
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	CancelEdit(playerid);

	new key = FurnRight(playerid, 1);
	for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	{
		if(HouseInfo[key][hObject][h] == objectid)
		{
			SetPVarInt(playerid, "FurnEditKey", key);
			SetPVarInt(playerid, "FurnEditH", h);
			ShowPlayerDialogEx(playerid, 76, DIALOG_STYLE_LIST, "Editting object", "Edit Object\nSelect Material\nReset Material\nCopy Object\nRemove Object", "Select", "Close");
		
			Streamer_ToggleItem(playerid, 2, HouseInfo[key][hIconi], true);
			Streamer_ToggleItem(playerid, 2, HouseInfo[key][hIcon], true);
			Streamer_ToggleItem(playerid, 2, HouseInfo[key][hbdoIcon], true);
			Streamer_ToggleItem(playerid, 2, HouseInfo[key][hbdiIcon], true);
			Streamer_Update(playerid, 2);
			return 1;
		}
	}

	key = FurnRight(playerid, 2);
	for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	{
		if(BizInfo[key][bObject][h] == objectid)
		{
			SetPVarInt(playerid, "FurnEditKey", key);
			SetPVarInt(playerid, "FurnEditH", h);
			ShowPlayerDialogEx(playerid, 103, DIALOG_STYLE_LIST, "Editting object", "Edit Object\nSelect Material\nReset Material\nCopy Object\nRemove Object", "Select", "Close");
		
			Streamer_ToggleItem(playerid, 2, BizInfo[key][bbdoIcon], true);
			Streamer_ToggleItem(playerid, 2, BizInfo[key][bbdiIcon], true);
			Streamer_ToggleItem(playerid, 2, BizInfo[key][bCP], true);
			Streamer_Update(playerid, 2);
			return 1;
		}
	}

	if(GetPVarInt(playerid, "Developer") != 1) return 1;

	for(new i = 0; i < MAX_MAP_OBJECTS; i++)
	{
		if(MapInfo[i][mObjectID] == objectid)
		{
			if(GetPVarInt(playerid, "EditorMode") == 18)
			{
				EditDynamicObject(playerid, objectid);

				SendClientMessage(playerid, COLOR_MAP, "MAP: Object moved.");
			}
			else if(GetPVarInt(playerid, "EditorMode") == 19)
			{
				DestroyDynamicObject(objectid);
				DeletePVar(playerid,"EditorMode");

				format(MapInfo[i][mTag], 16, "");

				MapInfo[i][mObjectID] = 0;
				MapInfo[i][mObjectModel] = 0;
				MapInfo[i][mX] = 0;
				MapInfo[i][mY] = 0;
				MapInfo[i][mZ] = 0;
				MapInfo[i][mrX] = 0;
				MapInfo[i][mrY] = 0;
				MapInfo[i][mrZ] = 0;
				MapInfo[i][mInt] = 0;
				MapInfo[i][mVw] = 0;

				new query[128];
				mysql_format(handlesql, query, sizeof(query), "DELETE FROM `maps` WHERE ID=%i", MapInfo[i][mID]);
				mysql_pquery(handlesql, query);

				MapInfo[i][mID] = 0;

				SendClientMessage(playerid, COLOR_MAP, "MAP: Object deleted.");
			}
			return 1;
		}
	}
	return 1;
}

stock PlayerNameToID(name[])
{
	foreach(new i : Player)
	{
		if(!strcmp(PlayerInfo[i][pUsername], name, true))
		{
			return PlayerInfo[i][pUsername];
		}
	}
	return INVALID_PLAYER_ID;
}

stock ServerLog(log[], name[], message[] = "None")
{
	new query[512];
	mysql_format(handlesql, query, sizeof(query), "INSERT INTO `logs` (Log, Name, Message) VALUES ('%e', '%e', '%e')",
		log, name, message);
	mysql_pquery(handlesql, query);
	return 1;
}

public ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
	PlayerInfo[playerid][pDialogOpen] = dialogid;
	return 1;
}

stock IsPlayerRunning(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerInAnyVehicle(playerid)) return 0;

    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if(keys & KEY_SPRINT) return 1;

    if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32], animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if(!strcmp(animlib, "PED"))
        {
			new const names[8][] = { "run_fat", "run_fatold", "run_old", "swat_run", "woman_run", "WOMAN_runbusy", "woman_runpanic", "WOMAN_runsexy" };

			for(new i; i < sizeof(names); i++)
			{
			    if(!strcmp(animname, names[i])) return 1;
			}
        }
    }
    return 0;
}

stock IsIPWhitelisted(IP[])
{
	for(new i = 0; i < sizeof(IP_Whitelist); i++)
	{
		if(!strcmp(IP, IP_Whitelist[i], true))
		{
			return 1;
		}
	}
	return 0;
}

stock HasFishEquipment(playerid)
{
	new found = 0;
	if(CheckInvItem(playerid, 418)) found++;
	if(CheckInvItem(playerid, 419)) found++;
	if(CheckInvItem(playerid, 420)) found++;
	if(found == 3) return true;
	return false;
}

stock RemoveFishingRod(playerid)
{
	if(CheckInvItem(playerid, 418))
	{
		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if(PlayerInfo[playerid][pInvItem][i] == 418)
			{
				PlayerInfo[playerid][pInvItem][i] = 0;
				return 1;
			}
		}
	}
	return 1;
}

stock RemoveFishingHook(playerid)
{
	if(CheckInvItem(playerid, 419))
	{
		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if(PlayerInfo[playerid][pInvItem][i] == 419)
			{
				if(PlayerInfo[playerid][pInvQ][i] > 1)
					PlayerInfo[playerid][pInvQ][i]--;
				else if(PlayerInfo[playerid][pInvQ][i] == 1)
				{
					PlayerInfo[playerid][pInvItem][i] = 0;
					PlayerInfo[playerid][pInvQ][i]--;
				}
				return 1;
			}
		}
	}
	return 1;
}

stock RemoveFishFood(playerid)
{
	if(CheckInvItem(playerid, 420))
	{
		for(new i = 0; i < MAX_INV_SLOTS; i++)
		{
			if(PlayerInfo[playerid][pInvItem][i] == 420)
			{
				if(PlayerInfo[playerid][pInvQ][i] > 1)
				{
					PlayerInfo[playerid][pInvQ][i]--;
				}
				else if(PlayerInfo[playerid][pInvQ][i] == 1)
				{
					PlayerInfo[playerid][pInvItem][i] = 0;
					PlayerInfo[playerid][pInvQ][i]--;
				}
				return 1;
			}
		}
	}
	return 1;
}

stock HowMuchFish(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		switch(PlayerInfo[playerid][pInvItem][i])
		{
			case 421 .. 427:
			{
				count += PlayerInfo[playerid][pInvQ][i];	
			}
		}
	}
	return count;
}

stock GivePlayerFish(playerid, type = 1)
{
	new fishchance = random(105);
	new fish;

	if(type == 1)
	{
		switch(fishchance)
		{
			case 0 .. 20: // SALMON
			{
				fish = 421;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Salmon!");
			}
			case 21 .. 40: // TUNA
			{
				fish = 422;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Tuna!");
			}
			case 41 .. 55: // BASS
			{
				fish = 423;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Bass!");
			}
			case 56 .. 70: // PIKE
			{
				fish = 424;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Pike!");
			}
			case 71 .. 85:  // PERCH
			{
				fish = 425;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Perch!");
			}
			case 86 .. 99: // COD
			{
				fish = 426;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Cod!");
			}
			case 100 .. 104: // PUFFERFISH
			{
				fish = 427;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Pufferfish!");
			}
		}
	}
	else
	{
		switch(fishchance)
		{
			case 0 .. 20: // SALMON
			{
				fish = 421;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Salmon!");
			}
			case 21 .. 40: // TUNA
			{
				fish = 422;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Tuna!");
			}
			case 41 .. 55: // BASS
			{
				fish = 423;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Bass!");
			}
			case 56 .. 70: // PIKE
			{
				fish = 424;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Pike!");
			}
			case 71 .. 85:  // PERCH
			{
				fish = 425;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Perch!");
			}
			case 86 .. 99: // COD
			{
				fish = 426;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Cod!");
			}
			case 100 .. 104: // PUFFERFISH
			{
				fish = 427;
				SendClientMessage(playerid, COLOR_GREY, "You have caught a Pufferfish!");
			}
		}
	}
	new foundid = 0;
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(foundid == 0)
		{
			if(PlayerInfo[playerid][pInvItem][i] == fish)
			{
				PlayerInfo[playerid][pInvQ][i]++;
				foundid++; 
			}
		}
	}
	if(foundid == 0)
	{
		if(CheckInv(playerid) == 1)
			GiveInvItem(playerid, fish, 1, 0, 0);
		else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full! You don't have space for that fish.");
	}
}
forward IsPlayerInBoat(playerid);
public IsPlayerInBoat(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new boat = GetVehicleModel(vehicleid);
		if(boat == 446 || boat == 452 || boat == 453 || boat == 454 || boat == 473 || boat == 484 || boat == 493)
			return true;
	}
	return false;
}

forward OnHouseActivityCheck(houseid);
public OnHouseActivityCheck(houseid)
{
	if(cache_get_row_count() > 0)
	{
		new last_on_date = cache_get_field_content_int(0, "unix_LastOnDate");

		if(last_on_date < (gettime() - (HOUSE_AUTO_SELL_DAYS * 86400)) && HouseInfo[houseid][hValue] > 1000)
		{
			HouseInfo[houseid][hOwned] = 0;
			
			new query[256];
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET HouseKey=0 WHERE Name='%e'", HouseInfo[houseid][hOwner]);
			mysql_pquery(handlesql, query);

			format(HouseInfo[houseid][hOwner], 128, "None");
		}
	}
	return 1;
}

forward OnBizActivityCheck(businessid);
public OnBizActivityCheck(businessid)
{
	if(cache_get_row_count() > 0)
	{
		new last_on_date = cache_get_field_content_int(0, "unix_LastOnDate");

		if(last_on_date < (gettime() - (HOUSE_AUTO_SELL_DAYS * 86400)) && BizInfo[businessid][Value] > 1000)
		{
			BizInfo[businessid][Owned] = 0;
			
			new query[256];
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET BizKey=0 WHERE Name='%e'", BizInfo[businessid][Owner]);
			mysql_pquery(handlesql, query);

			format(BizInfo[businessid][Owner], 128, "None");
		}
	}
	return 1;
}

forward OnPasswordReset(playerid);
public OnPasswordReset(playerid)
{
	if(cache_affected_rows() == 0) return SendClientMessage(playerid, COLOR_ERROR, "There is no player registered with this name.");
	
	SendClientMessage(playerid, COLOR_WHITE, "Player's password has been successfully set.");
	SendClientMessage(playerid, COLOR_WHITE, "(player will be offered to create a new security password when logging in)");
	return 1;
}

stock UpdateSpectator(playerid)
{
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "SpecID") == playerid)
		{
			if(IsPlayerConnected(playerid))
			{
				TogglePlayerSpectatingEx(i, 1);
				SetPlayerInterior(i,GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));

				if(IsPlayerInAnyVehicle(playerid))
				{
					PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
				}
				else
				{
					PlayerSpectatePlayer(i, playerid);
				}
			}
			else
			{
				cmd_specoff(i, "");
			}
		}
	}
}

stock ConvertYoutubeUrl(Url[], size = sizeof(Url))
{
	new find;
	if((find = strfind(Url, "youtu.be/")) == -1)
		return false;
	strdel(Url, 0, find + 4);
	format(Url, size, "https://www.youtube.com/watch?v=", Url);
	return true;
}

stock GetDownloadFromYouTubeLink(playerid, type, extraid, url[])
{
	ConvertYoutubeUrl(url, 256);

	PlayerInfo[playerid][pYouTubeStreamType] = type;
	PlayerInfo[playerid][pYouTubeStreamExtra] = extraid;

	static string[256];
	format(string, sizeof(string), "youtubeinmp3.com/fetch/?format=text&video=%s", url);
	HTTP(playerid, HTTP_GET, string, "", "YoutubeResponse");
	return true;
}

forward YoutubeResponse(playerid, response, data[]);
public YoutubeResponse(playerid, response, data[])
{
	if(response == 200)
	{
		if(strfind(data, "No video was found") != -1 || strfind(data, "<meta http-equiv=") != -1)
		{
			SendClientMessage(playerid, COLOR_ERROR, "Video not found.");
			return 1;
		}
		new
			title[60],
			len[5],
			Find
		;
		Find = strfind(data, "<br/>");
		strmid(title, data, 7, Find-1);
		strdel(data, 0, Find+5);

		Find = strfind(data, "<br/>");
		strmid(len, data, 8, Find-1);
		strdel(data, 0, Find+11);

		switch(PlayerInfo[playerid][pYouTubeStreamType])
		{
			case STREAM_TYPE_BUSINESS: PlayBizRadio(PlayerInfo[playerid][pYouTubeStreamExtra], data);
			case STREAM_TYPE_HOUSE: PlayHouseRadio(PlayerInfo[playerid][pYouTubeStreamExtra], data);
			case STREAM_TYPE_PLANT_RADIO:
			{
				new id = PlayerInfo[playerid][pYouTubeStreamExtra];
		    	format(RadioInfo[id][rURL], 256, "%s", data);
		    	if(RadioInfo[id][rStatus] == 0)
		    	{
					SendClientMessage(playerid, COLOR_WHITE, "Radio URL has been set. (the radio can now be turned on)");
	            }
	            else
	            {
	            	foreach(new i : Player)
					{
					    if(IsPlayerInRangeOfPoint(i, MAX_BOOM_BOX_RANGE, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ]))
						{
						    PlayAudioStreamForPlayerEx(i, RadioInfo[id][rURL], RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], MAX_BOOM_BOX_RANGE, 1);
						}
				    }
	            }
			}
			case STREAM_TYPE_VEHICLE:
			{
				new vehicleID = GetPlayerVehicleID(playerid);
				if(vehicleID == 0) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in a vehicle with a radio installed.");
   	        	if(IsNotAEngineCar(vehicleID)) return SendClientMessage(playerid, COLOR_ERROR, "This vehicle does not have a radio installed.");
   	        	if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERROR, "You have to be in the driver seat of your vehicle in order to set the radio station.");
		    	
		    	PlayRadioURL(vehicleID, data);
			}
			default: PlayAudioStreamForPlayerEx(playerid, data);
		}
	}
	return 1;
}

forward OnFrights(playerid);
public OnFrights(playerid)
{
	if(cache_get_row_count() > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Faction Members With Warehouse Rights:");
		for(new i = 0; i < cache_get_row_count(); i++)
		{
			new name[MAX_PLAYER_NAME];
	    	cache_get_field_content(i, "Name", name);

	    	new string[128];
			format(string, sizeof(string), "%s - Rank: %d (%s)", name, cache_get_field_content_int(i, "Rank"), FactionRankInfo[cache_get_field_content_int(i, "Member")][cache_get_field_content_int(i, "Rank")][fRank]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "There are no faction members with warehouse rights.");
	}
	return 1;
}

stock DoesPlayerHaveHouseKey(playerid, houseid)
{
	if(GetPVarInt(playerid, "HouseKey") == houseid) return 1;

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == 428 && PlayerInfo[playerid][pInvEx][i] == houseid)
		{
			return 1;
		}
	}
	return 0;
}

stock DoesPlayerHaveBusinessKey(playerid, businessid)
{
	if(GetPVarInt(playerid, "BizKey") == businessid) return 1;

	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == 429 && PlayerInfo[playerid][pInvEx][i] == businessid)
		{
			return 1;
		}
	}
	return 0;
}

stock DoesPlayerHaveVehicleKey(playerid, vehicleid)
{
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == 430 && PlayerInfo[playerid][pInvEx][i] == vehicleid)
		{
			return 1;
		}
	}
	return 0;
}

stock GetPlayerNearHouse(playerid)
{
	if(GetPVarInt(playerid, "HouseEnter") != 0) return GetPVarInt(playerid, "HouseEnter");

	foreach(new i : HouseIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hXo], HouseInfo[i][hYo], HouseInfo[i][hZo]) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hXi], HouseInfo[i][hYi], HouseInfo[i][hZi]) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hgXo], HouseInfo[i][hgYo], HouseInfo[i][hgZo]) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hgXi], HouseInfo[i][hgYi], HouseInfo[i][hgZi]) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hbdXi], HouseInfo[i][hbdYi], HouseInfo[i][hbdZi]) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hbdXo], HouseInfo[i][hbdYo], HouseInfo[i][hbdZo])) return i;
	}
	return 0;
}

stock GetPlayerNearBusiness(playerid)
{
	if(GetPVarInt(playerid, "BizEnter") != 0) return GetPVarInt(playerid, "BizEnter");

	foreach(new i : BizIterator)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][Xo], BizInfo[i][Yo], BizInfo[i][Zo]) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, BizInfo[i][Xi], BizInfo[i][Yi], BizInfo[i][Zi]) ||
			IsPlayerInRangeOfPoint(playerid, 5.0, BizInfo[i][bbdXi], BizInfo[i][bbdYi], BizInfo[i][bbdZi]) ||
			IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[i][bbdXo], BizInfo[i][bbdYo], BizInfo[i][bbdZo])) return i;
	}
	return 0;
}

forward OnCheckWarehouseVehicle(playerid, listitem);
public OnCheckWarehouseVehicle(playerid, listitem)
{
	new rows = cache_get_row_count(handlesql);
	if(rows > 0) {
		new string[256];
		SetPVarInt(playerid, "PDBT", 8), SetPVarInt(playerid, "PDBTLI", listitem);
	    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: %s~n~Cash: %s - Bank: %s", FormatMoney(WarItems[listitem][1]), FormatMoney(GetPlayerMoneyEx(playerid)), FormatMoney(GetPVarInt(playerid, "Bank")));
	    //ShowPlayerDialogEx(playerid, 100, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Yes", "No");
	    ConfigPayment(playerid, 1, string);
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "You do not have any vehicles.");
	}
}

forward OnSelectWarehouseVehicle(playerid);
public OnSelectWarehouseVehicle(playerid)
{
	new rows = cache_get_row_count(handlesql);
	if(rows > 0) {
	    new dialogMsg[400],
	        addition[20],
	        value;
	        
	    for(new i = 0; i < rows; i++) {
	        value = cache_get_field_content_int(i, "Value");
	        if(cache_get_field_content_int(i, "Donate") != 0 || value == 0) {
	        	format(addition, sizeof(addition), "Donator Vehicle, ");
	        } else {
				format(addition, sizeof(addition), "%s", EOS);
			}
	        
	        if(isnull(dialogMsg)) {
	    		format(dialogMsg, sizeof(dialogMsg), "Model: %s (%sValue: %s)", VehicleName[cache_get_field_content_int(i, "Model") - 400], addition, FormatMoney(value));
			} else {
				format(dialogMsg, sizeof(dialogMsg), "%s\nModel: %s (%sValue: %s)", dialogMsg, VehicleName[cache_get_field_content_int(i, "Model") - 400], addition, FormatMoney(value));
			}
		}
		
		ShowPlayerDialogEx(playerid, DIALOG_WAREHOUSE_VEHICLE, DIALOG_STYLE_LIST, "Select Vehicle", dialogMsg, "Spawn", "Cancel");
	} else {
		SendClientMessage(playerid, COLOR_ERROR, "You do not have any vehicles.");
	}
}

forward OnWarehouseVehicleSelected(playerid);
public OnWarehouseVehicleSelected(playerid)
{
	if(cache_get_row_count(handlesql) > 0) 
	{
		for(new i = 0; i < cache_get_row_count(handlesql); i++)
		{
			GiveInvItem(playerid, 430, 1, cache_get_field_content_int(i, "ID"));
			return 1;
		}
	}
	return 1;
}

stock GetLowercase(string[])
{
	new lowercase[128];
	format(lowercase, 128, "%s", string);
	for(new i = 0; i < strlen(string); i++)
	{
		lowercase[i] = tolower(string[i]);
	}
	return lowercase;
}